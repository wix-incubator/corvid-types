(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["corvidTypes"] = factory();
	else
		root["corvidTypes"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./fullCorvidTypes.json":
/*!******************************!*\
  !*** ./fullCorvidTypes.json ***!
  \******************************/
/*! exports provided: BASE, BACKEND, PUBLIC, PAGES, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"BASE\\\":[{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es5.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/////////////////////////////\\\\r\\\\n/// ECMAScript APIs\\\\r\\\\n/////////////////////////////\\\\r\\\\n\\\\r\\\\ndeclare var NaN: number;\\\\r\\\\ndeclare var Infinity: number;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Evaluates JavaScript code and executes it.\\\\r\\\\n  * @param x A String value that contains valid JavaScript code.\\\\r\\\\n  */\\\\r\\\\ndeclare function eval(x: string): any;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Converts a string to an integer.\\\\r\\\\n  * @param s A string to convert into a number.\\\\r\\\\n  * @param radix A value between 2 and 36 that specifies the base of the number in numString.\\\\r\\\\n  * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\\\\r\\\\n  * All other strings are considered decimal.\\\\r\\\\n  */\\\\r\\\\ndeclare function parseInt(s: string, radix?: number): number;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Converts a string to a floating-point number.\\\\r\\\\n  * @param string A string that contains a floating-point number.\\\\r\\\\n  */\\\\r\\\\ndeclare function parseFloat(string: string): number;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).\\\\r\\\\n  * @param number A numeric value.\\\\r\\\\n  */\\\\r\\\\ndeclare function isNaN(number: number): boolean;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Determines whether a supplied number is finite.\\\\r\\\\n  * @param number Any numeric value.\\\\r\\\\n  */\\\\r\\\\ndeclare function isFinite(number: number): boolean;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\\\\r\\\\n  * @param encodedURI A value representing an encoded URI.\\\\r\\\\n  */\\\\r\\\\ndeclare function decodeURI(encodedURI: string): string;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\\\\r\\\\n  * @param encodedURIComponent A value representing an encoded URI component.\\\\r\\\\n  */\\\\r\\\\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Encodes a text string as a valid Uniform Resource Identifier (URI)\\\\r\\\\n  * @param uri A value representing an encoded URI.\\\\r\\\\n  */\\\\r\\\\ndeclare function encodeURI(uri: string): string;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\\\\r\\\\n  * @param uriComponent A value representing an encoded URI component.\\\\r\\\\n  */\\\\r\\\\ndeclare function encodeURIComponent(uriComponent: string | number | boolean): string;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.\\\\r\\\\n  * @param string A string value\\\\r\\\\n  */\\\\r\\\\ndeclare function escape(string: string): string;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Computes a new string in which hexadecimal escape sequences are replaced with the character that it represents.\\\\r\\\\n  * @param string A string value\\\\r\\\\n  */\\\\r\\\\ndeclare function unescape(string: string): string;\\\\r\\\\n\\\\r\\\\ninterface Symbol {\\\\r\\\\n  /** Returns a string representation of an object. */\\\\r\\\\n  toString(): string;\\\\r\\\\n\\\\r\\\\n  /** Returns the primitive value of the specified object. */\\\\r\\\\n  valueOf(): symbol;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare type PropertyKey = string | number | symbol;\\\\r\\\\n\\\\r\\\\ninterface PropertyDescriptor {\\\\r\\\\n    configurable?: boolean;\\\\r\\\\n    enumerable?: boolean;\\\\r\\\\n    value?: any;\\\\r\\\\n    writable?: boolean;\\\\r\\\\n    get?(): any;\\\\r\\\\n    set?(v: any): void;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface PropertyDescriptorMap {\\\\r\\\\n    [s: string]: PropertyDescriptor;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Object {\\\\r\\\\n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\\\\r\\\\n    constructor: Function;\\\\r\\\\n\\\\r\\\\n    /** Returns a string representation of an object. */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a date converted to a string using the current locale. */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns the primitive value of the specified object. */\\\\r\\\\n    valueOf(): Object;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether an object has a property with the specified name.\\\\r\\\\n      * @param v A property name.\\\\r\\\\n      */\\\\r\\\\n    hasOwnProperty(v: PropertyKey): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether an object exists in another object's prototype chain.\\\\r\\\\n      * @param v Another object whose prototype chain is to be checked.\\\\r\\\\n      */\\\\r\\\\n    isPrototypeOf(v: Object): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether a specified property is enumerable.\\\\r\\\\n      * @param v A property name.\\\\r\\\\n      */\\\\r\\\\n    propertyIsEnumerable(v: PropertyKey): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ObjectConstructor {\\\\r\\\\n    new(value?: any): Object;\\\\r\\\\n    (): any;\\\\r\\\\n    (value: any): any;\\\\r\\\\n\\\\r\\\\n    /** A reference to the prototype for a class of objects. */\\\\r\\\\n    readonly prototype: Object;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the prototype of an object.\\\\r\\\\n      * @param o The object that references the prototype.\\\\r\\\\n      */\\\\r\\\\n    getPrototypeOf(o: any): any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets the own property descriptor of the specified object.\\\\r\\\\n      * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.\\\\r\\\\n      * @param o Object that contains the property.\\\\r\\\\n      * @param p Name of the property.\\\\r\\\\n    */\\\\r\\\\n    getOwnPropertyDescriptor(o: any, p: PropertyKey): PropertyDescriptor | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\\\\r\\\\n      * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\\\\r\\\\n      * @param o Object that contains the own properties.\\\\r\\\\n      */\\\\r\\\\n    getOwnPropertyNames(o: any): string[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an object that has the specified prototype or that has null prototype.\\\\r\\\\n      * @param o Object to use as a prototype. May be null.\\\\r\\\\n      */\\\\r\\\\n    create(o: object | null): any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an object that has the specified prototype, and that optionally contains specified properties.\\\\r\\\\n      * @param o Object to use as a prototype. May be null\\\\r\\\\n      * @param properties JavaScript object that contains one or more property descriptors.\\\\r\\\\n      */\\\\r\\\\n    create(o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds a property to an object, or modifies attributes of an existing property.\\\\r\\\\n      * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\\\\r\\\\n      * @param p The property name.\\\\r\\\\n      * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\\\\r\\\\n      */\\\\r\\\\n    defineProperty(o: any, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds one or more properties to an object, and/or modifies attributes of existing properties.\\\\r\\\\n      * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\\\\r\\\\n      * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\\\\r\\\\n      */\\\\r\\\\n    defineProperties(o: any, properties: PropertyDescriptorMap & ThisType<any>): any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\\\\r\\\\n      * @param o Object on which to lock the attributes.\\\\r\\\\n      */\\\\r\\\\n    seal<T>(o: T): T;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\\\\r\\\\n      * @param o Object on which to lock the attributes.\\\\r\\\\n      */\\\\r\\\\n    freeze<T>(a: T[]): ReadonlyArray<T>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\\\\r\\\\n      * @param o Object on which to lock the attributes.\\\\r\\\\n      */\\\\r\\\\n    freeze<T extends Function>(f: T): T;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\\\\r\\\\n      * @param o Object on which to lock the attributes.\\\\r\\\\n      */\\\\r\\\\n    freeze<T>(o: T): Readonly<T>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Prevents the addition of new properties to an object.\\\\r\\\\n      * @param o Object to make non-extensible.\\\\r\\\\n      */\\\\r\\\\n    preventExtensions<T>(o: T): T;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\\\\r\\\\n      * @param o Object to test.\\\\r\\\\n      */\\\\r\\\\n    isSealed(o: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\\\\r\\\\n      * @param o Object to test.\\\\r\\\\n      */\\\\r\\\\n    isFrozen(o: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a value that indicates whether new properties can be added to an object.\\\\r\\\\n      * @param o Object to test.\\\\r\\\\n      */\\\\r\\\\n    isExtensible(o: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the names of the enumerable string properties and methods of an object.\\\\r\\\\n      * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\\\\r\\\\n      */\\\\r\\\\n     keys(o: object): string[];\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Provides functionality common to all JavaScript objects.\\\\r\\\\n  */\\\\r\\\\ndeclare var Object: ObjectConstructor;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Creates a new function.\\\\r\\\\n  */\\\\r\\\\ninterface Function {\\\\r\\\\n    /**\\\\r\\\\n      * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\\\\r\\\\n      * @param thisArg The object to be used as the this object.\\\\r\\\\n      * @param argArray A set of arguments to be passed to the function.\\\\r\\\\n      */\\\\r\\\\n    apply(this: Function, thisArg: any, argArray?: any): any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls a method of an object, substituting another object for the current object.\\\\r\\\\n      * @param thisArg The object to be used as the current object.\\\\r\\\\n      * @param argArray A list of arguments to be passed to the method.\\\\r\\\\n      */\\\\r\\\\n    call(this: Function, thisArg: any, ...argArray: any[]): any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * For a given function, creates a bound function that has the same body as the original function.\\\\r\\\\n      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer inside the new function.\\\\r\\\\n      * @param argArray A list of arguments to be passed to the new function.\\\\r\\\\n      */\\\\r\\\\n    bind(this: Function, thisArg: any, ...argArray: any[]): any;\\\\r\\\\n\\\\r\\\\n    /** Returns a string representation of a function. */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    prototype: any;\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    // Non-standard extensions\\\\r\\\\n    arguments: any;\\\\r\\\\n    caller: Function;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface FunctionConstructor {\\\\r\\\\n    /**\\\\r\\\\n      * Creates a new function.\\\\r\\\\n      * @param args A list of arguments the function accepts.\\\\r\\\\n      */\\\\r\\\\n    new(...args: string[]): Function;\\\\r\\\\n    (...args: string[]): Function;\\\\r\\\\n    readonly prototype: Function;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var Function: FunctionConstructor;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Extracts the type of the 'this' parameter of a function type, or 'unknown' if the function type has no 'this' parameter.\\\\r\\\\n */\\\\r\\\\ntype ThisParameterType<T> = T extends (this: unknown, ...args: any[]) => any ? unknown : T extends (this: infer U, ...args: any[]) => any ? U : unknown;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Removes the 'this' parameter from a function type.\\\\r\\\\n */\\\\r\\\\ntype OmitThisParameter<T> = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T;\\\\r\\\\n\\\\r\\\\ninterface CallableFunction extends Function {\\\\r\\\\n    /**\\\\r\\\\n      * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\\\\r\\\\n      * @param thisArg The object to be used as the this object.\\\\r\\\\n      * @param args An array of argument values to be passed to the function.\\\\r\\\\n      */\\\\r\\\\n    apply<T, R>(this: (this: T) => R, thisArg: T): R;\\\\r\\\\n    apply<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\\\\r\\\\n      * @param thisArg The object to be used as the this object.\\\\r\\\\n      * @param args Argument values to be passed to the function.\\\\r\\\\n      */\\\\r\\\\n    call<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A): R;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * For a given function, creates a bound function that has the same body as the original function.\\\\r\\\\n      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\\\\r\\\\n      * @param thisArg The object to be used as the this object.\\\\r\\\\n      * @param args Arguments to bind to the parameters of the function.\\\\r\\\\n      */\\\\r\\\\n    bind<T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>;\\\\r\\\\n    bind<T, A0, A extends any[], R>(this: (this: T, arg0: A0, ...args: A) => R, thisArg: T, arg0: A0): (...args: A) => R;\\\\r\\\\n    bind<T, A0, A1, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1): (...args: A) => R;\\\\r\\\\n    bind<T, A0, A1, A2, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, arg2: A2, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1, arg2: A2): (...args: A) => R;\\\\r\\\\n    bind<T, A0, A1, A2, A3, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, arg2: A2, arg3: A3, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1, arg2: A2, arg3: A3): (...args: A) => R;\\\\r\\\\n    bind<T, AX, R>(this: (this: T, ...args: AX[]) => R, thisArg: T, ...args: AX[]): (...args: AX[]) => R;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface NewableFunction extends Function {\\\\r\\\\n    /**\\\\r\\\\n      * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\\\\r\\\\n      * @param thisArg The object to be used as the this object.\\\\r\\\\n      * @param args An array of argument values to be passed to the function.\\\\r\\\\n      */\\\\r\\\\n    apply<T>(this: new () => T, thisArg: T): void;\\\\r\\\\n    apply<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, args: A): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\\\\r\\\\n      * @param thisArg The object to be used as the this object.\\\\r\\\\n      * @param args Argument values to be passed to the function.\\\\r\\\\n      */\\\\r\\\\n    call<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, ...args: A): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * For a given function, creates a bound function that has the same body as the original function.\\\\r\\\\n      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\\\\r\\\\n      * @param thisArg The object to be used as the this object.\\\\r\\\\n      * @param args Arguments to bind to the parameters of the function.\\\\r\\\\n      */\\\\r\\\\n    bind<T>(this: T, thisArg: any): T;\\\\r\\\\n    bind<A0, A extends any[], R>(this: new (arg0: A0, ...args: A) => R, thisArg: any, arg0: A0): new (...args: A) => R;\\\\r\\\\n    bind<A0, A1, A extends any[], R>(this: new (arg0: A0, arg1: A1, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1): new (...args: A) => R;\\\\r\\\\n    bind<A0, A1, A2, A extends any[], R>(this: new (arg0: A0, arg1: A1, arg2: A2, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1, arg2: A2): new (...args: A) => R;\\\\r\\\\n    bind<A0, A1, A2, A3, A extends any[], R>(this: new (arg0: A0, arg1: A1, arg2: A2, arg3: A3, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1, arg2: A2, arg3: A3): new (...args: A) => R;\\\\r\\\\n    bind<AX, R>(this: new (...args: AX[]) => R, thisArg: any, ...args: AX[]): new (...args: AX[]) => R;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface IArguments {\\\\r\\\\n    [index: number]: any;\\\\r\\\\n    length: number;\\\\r\\\\n    callee: Function;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface String {\\\\r\\\\n    /** Returns a string representation of a string. */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the character at the specified index.\\\\r\\\\n      * @param pos The zero-based index of the desired character.\\\\r\\\\n      */\\\\r\\\\n    charAt(pos: number): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the Unicode value of the character at the specified location.\\\\r\\\\n      * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\\\\r\\\\n      */\\\\r\\\\n    charCodeAt(index: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string that contains the concatenation of two or more strings.\\\\r\\\\n      * @param strings The strings to append to the end of the string.\\\\r\\\\n      */\\\\r\\\\n    concat(...strings: string[]): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the position of the first occurrence of a substring.\\\\r\\\\n      * @param searchString The substring to search for in the string\\\\r\\\\n      * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchString: string, position?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the last occurrence of a substring in the string.\\\\r\\\\n      * @param searchString The substring to search for.\\\\r\\\\n      * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchString: string, position?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether two strings are equivalent in the current locale.\\\\r\\\\n      * @param that String to compare to target string\\\\r\\\\n      */\\\\r\\\\n    localeCompare(that: string): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Matches a string with a regular expression, and returns an array containing the results of that search.\\\\r\\\\n      * @param regexp A variable name or string literal containing the regular expression pattern and flags.\\\\r\\\\n      */\\\\r\\\\n    match(regexp: string | RegExp): RegExpMatchArray | null;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Replaces text in a string, using a regular expression or search string.\\\\r\\\\n      * @param searchValue A string to search for.\\\\r\\\\n      * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\\\\r\\\\n      */\\\\r\\\\n    replace(searchValue: string | RegExp, replaceValue: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Replaces text in a string, using a regular expression or search string.\\\\r\\\\n      * @param searchValue A string to search for.\\\\r\\\\n      * @param replacer A function that returns the replacement text.\\\\r\\\\n      */\\\\r\\\\n    replace(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Finds the first substring match in a regular expression search.\\\\r\\\\n      * @param regexp The regular expression pattern and applicable flags.\\\\r\\\\n      */\\\\r\\\\n    search(regexp: string | RegExp): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of a string.\\\\r\\\\n      * @param start The index to the beginning of the specified portion of stringObj.\\\\r\\\\n      * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\\\\r\\\\n      * If this value is not specified, the substring continues to the end of stringObj.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Split a string into substrings using the specified separator and return them as an array.\\\\r\\\\n      * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\\\\r\\\\n      * @param limit A value used to limit the number of elements returned in the array.\\\\r\\\\n      */\\\\r\\\\n    split(separator: string | RegExp, limit?: number): string[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the substring at the specified location within a String object.\\\\r\\\\n      * @param start The zero-based index number indicating the beginning of the substring.\\\\r\\\\n      * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\\\\r\\\\n      * If end is omitted, the characters from start through the end of the original string are returned.\\\\r\\\\n      */\\\\r\\\\n    substring(start: number, end?: number): string;\\\\r\\\\n\\\\r\\\\n    /** Converts all the alphabetic characters in a string to lowercase. */\\\\r\\\\n    toLowerCase(): string;\\\\r\\\\n\\\\r\\\\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */\\\\r\\\\n    toLocaleLowerCase(): string;\\\\r\\\\n\\\\r\\\\n    /** Converts all the alphabetic characters in a string to uppercase. */\\\\r\\\\n    toUpperCase(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */\\\\r\\\\n    toLocaleUpperCase(): string;\\\\r\\\\n\\\\r\\\\n    /** Removes the leading and trailing white space and line terminator characters from a string. */\\\\r\\\\n    trim(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns the length of a String object. */\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    // IE extensions\\\\r\\\\n    /**\\\\r\\\\n      * Gets a substring beginning at the specified location and having the specified length.\\\\r\\\\n      * @param from The starting position of the desired substring. The index of the first character in the string is zero.\\\\r\\\\n      * @param length The number of characters to include in the returned substring.\\\\r\\\\n      */\\\\r\\\\n    substr(from: number, length?: number): string;\\\\r\\\\n\\\\r\\\\n    /** Returns the primitive value of the specified object. */\\\\r\\\\n    valueOf(): string;\\\\r\\\\n\\\\r\\\\n    readonly [index: number]: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface StringConstructor {\\\\r\\\\n    new(value?: any): String;\\\\r\\\\n    (value?: any): string;\\\\r\\\\n    readonly prototype: String;\\\\r\\\\n    fromCharCode(...codes: number[]): string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Allows manipulation and formatting of text strings and determination and location of substrings within strings.\\\\r\\\\n  */\\\\r\\\\ndeclare var String: StringConstructor;\\\\r\\\\n\\\\r\\\\ninterface Boolean {\\\\r\\\\n    /** Returns the primitive value of the specified object. */\\\\r\\\\n    valueOf(): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface BooleanConstructor {\\\\r\\\\n    new(value?: any): Boolean;\\\\r\\\\n    <T>(value?: T): boolean;\\\\r\\\\n    readonly prototype: Boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var Boolean: BooleanConstructor;\\\\r\\\\n\\\\r\\\\ninterface Number {\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an object.\\\\r\\\\n      * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\\\\r\\\\n      */\\\\r\\\\n    toString(radix?: number): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representing a number in fixed-point notation.\\\\r\\\\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\\\\r\\\\n      */\\\\r\\\\n    toFixed(fractionDigits?: number): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string containing a number represented in exponential notation.\\\\r\\\\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\\\\r\\\\n      */\\\\r\\\\n    toExponential(fractionDigits?: number): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\\\\r\\\\n      * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\\\\r\\\\n      */\\\\r\\\\n    toPrecision(precision?: number): string;\\\\r\\\\n\\\\r\\\\n    /** Returns the primitive value of the specified object. */\\\\r\\\\n    valueOf(): number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface NumberConstructor {\\\\r\\\\n    new(value?: any): Number;\\\\r\\\\n    (value?: any): number;\\\\r\\\\n    readonly prototype: Number;\\\\r\\\\n\\\\r\\\\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\\\\r\\\\n    readonly MAX_VALUE: number;\\\\r\\\\n\\\\r\\\\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\\\\r\\\\n    readonly MIN_VALUE: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * A value that is not a number.\\\\r\\\\n      * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\\\\r\\\\n      */\\\\r\\\\n    readonly NaN: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * A value that is less than the largest negative number that can be represented in JavaScript.\\\\r\\\\n      * JavaScript displays NEGATIVE_INFINITY values as -infinity.\\\\r\\\\n      */\\\\r\\\\n    readonly NEGATIVE_INFINITY: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * A value greater than the largest number that can be represented in JavaScript.\\\\r\\\\n      * JavaScript displays POSITIVE_INFINITY values as infinity.\\\\r\\\\n      */\\\\r\\\\n    readonly POSITIVE_INFINITY: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\\\\r\\\\ndeclare var Number: NumberConstructor;\\\\r\\\\n\\\\r\\\\ninterface TemplateStringsArray extends ReadonlyArray<string> {\\\\r\\\\n    readonly raw: ReadonlyArray<string>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The type of `import.meta`.\\\\r\\\\n *\\\\r\\\\n * If you need to declare that a given property exists on `import.meta`,\\\\r\\\\n * this type may be augmented via interface merging.\\\\r\\\\n */\\\\r\\\\ninterface ImportMeta {\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Math {\\\\r\\\\n    /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */\\\\r\\\\n    readonly E: number;\\\\r\\\\n    /** The natural logarithm of 10. */\\\\r\\\\n    readonly LN10: number;\\\\r\\\\n    /** The natural logarithm of 2. */\\\\r\\\\n    readonly LN2: number;\\\\r\\\\n    /** The base-2 logarithm of e. */\\\\r\\\\n    readonly LOG2E: number;\\\\r\\\\n    /** The base-10 logarithm of e. */\\\\r\\\\n    readonly LOG10E: number;\\\\r\\\\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\\\\r\\\\n    readonly PI: number;\\\\r\\\\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\\\\r\\\\n    readonly SQRT1_2: number;\\\\r\\\\n    /** The square root of 2. */\\\\r\\\\n    readonly SQRT2: number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\\\\r\\\\n      * For example, the absolute value of -5 is the same as the absolute value of 5.\\\\r\\\\n      * @param x A numeric expression for which the absolute value is needed.\\\\r\\\\n      */\\\\r\\\\n    abs(x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the arc cosine (or inverse cosine) of a number.\\\\r\\\\n      * @param x A numeric expression.\\\\r\\\\n      */\\\\r\\\\n    acos(x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the arcsine of a number.\\\\r\\\\n      * @param x A numeric expression.\\\\r\\\\n      */\\\\r\\\\n    asin(x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the arctangent of a number.\\\\r\\\\n      * @param x A numeric expression for which the arctangent is needed.\\\\r\\\\n      */\\\\r\\\\n    atan(x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the angle (in radians) from the X axis to a point.\\\\r\\\\n      * @param y A numeric expression representing the cartesian y-coordinate.\\\\r\\\\n      * @param x A numeric expression representing the cartesian x-coordinate.\\\\r\\\\n      */\\\\r\\\\n    atan2(y: number, x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the smallest integer greater than or equal to its numeric argument.\\\\r\\\\n      * @param x A numeric expression.\\\\r\\\\n      */\\\\r\\\\n    ceil(x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the cosine of a number.\\\\r\\\\n      * @param x A numeric expression that contains an angle measured in radians.\\\\r\\\\n      */\\\\r\\\\n    cos(x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns e (the base of natural logarithms) raised to a power.\\\\r\\\\n      * @param x A numeric expression representing the power of e.\\\\r\\\\n      */\\\\r\\\\n    exp(x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the greatest integer less than or equal to its numeric argument.\\\\r\\\\n      * @param x A numeric expression.\\\\r\\\\n      */\\\\r\\\\n    floor(x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the natural logarithm (base e) of a number.\\\\r\\\\n      * @param x A numeric expression.\\\\r\\\\n      */\\\\r\\\\n    log(x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the larger of a set of supplied numeric expressions.\\\\r\\\\n      * @param values Numeric expressions to be evaluated.\\\\r\\\\n      */\\\\r\\\\n    max(...values: number[]): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the smaller of a set of supplied numeric expressions.\\\\r\\\\n      * @param values Numeric expressions to be evaluated.\\\\r\\\\n      */\\\\r\\\\n    min(...values: number[]): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the value of a base expression taken to a specified power.\\\\r\\\\n      * @param x The base value of the expression.\\\\r\\\\n      * @param y The exponent value of the expression.\\\\r\\\\n      */\\\\r\\\\n    pow(x: number, y: number): number;\\\\r\\\\n    /** Returns a pseudorandom number between 0 and 1. */\\\\r\\\\n    random(): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns a supplied numeric expression rounded to the nearest number.\\\\r\\\\n      * @param x The value to be rounded to the nearest number.\\\\r\\\\n      */\\\\r\\\\n    round(x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the sine of a number.\\\\r\\\\n      * @param x A numeric expression that contains an angle measured in radians.\\\\r\\\\n      */\\\\r\\\\n    sin(x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the square root of a number.\\\\r\\\\n      * @param x A numeric expression.\\\\r\\\\n      */\\\\r\\\\n    sqrt(x: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the tangent of a number.\\\\r\\\\n      * @param x A numeric expression that contains an angle measured in radians.\\\\r\\\\n      */\\\\r\\\\n    tan(x: number): number;\\\\r\\\\n}\\\\r\\\\n/** An intrinsic object that provides basic mathematics functionality and constants. */\\\\r\\\\ndeclare var Math: Math;\\\\r\\\\n\\\\r\\\\n/** Enables basic storage and retrieval of dates and times. */\\\\r\\\\ninterface Date {\\\\r\\\\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\\\\r\\\\n    toString(): string;\\\\r\\\\n    /** Returns a date as a string value. */\\\\r\\\\n    toDateString(): string;\\\\r\\\\n    /** Returns a time as a string value. */\\\\r\\\\n    toTimeString(): string;\\\\r\\\\n    /** Returns a value as a string value appropriate to the host environment's current locale. */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n    /** Returns a date as a string value appropriate to the host environment's current locale. */\\\\r\\\\n    toLocaleDateString(): string;\\\\r\\\\n    /** Returns a time as a string value appropriate to the host environment's current locale. */\\\\r\\\\n    toLocaleTimeString(): string;\\\\r\\\\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\\\\r\\\\n    valueOf(): number;\\\\r\\\\n    /** Gets the time value in milliseconds. */\\\\r\\\\n    getTime(): number;\\\\r\\\\n    /** Gets the year, using local time. */\\\\r\\\\n    getFullYear(): number;\\\\r\\\\n    /** Gets the year using Universal Coordinated Time (UTC). */\\\\r\\\\n    getUTCFullYear(): number;\\\\r\\\\n    /** Gets the month, using local time. */\\\\r\\\\n    getMonth(): number;\\\\r\\\\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\\\\r\\\\n    getUTCMonth(): number;\\\\r\\\\n    /** Gets the day-of-the-month, using local time. */\\\\r\\\\n    getDate(): number;\\\\r\\\\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\\\\r\\\\n    getUTCDate(): number;\\\\r\\\\n    /** Gets the day of the week, using local time. */\\\\r\\\\n    getDay(): number;\\\\r\\\\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\\\\r\\\\n    getUTCDay(): number;\\\\r\\\\n    /** Gets the hours in a date, using local time. */\\\\r\\\\n    getHours(): number;\\\\r\\\\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\\\\r\\\\n    getUTCHours(): number;\\\\r\\\\n    /** Gets the minutes of a Date object, using local time. */\\\\r\\\\n    getMinutes(): number;\\\\r\\\\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\\\\r\\\\n    getUTCMinutes(): number;\\\\r\\\\n    /** Gets the seconds of a Date object, using local time. */\\\\r\\\\n    getSeconds(): number;\\\\r\\\\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\\\\r\\\\n    getUTCSeconds(): number;\\\\r\\\\n    /** Gets the milliseconds of a Date, using local time. */\\\\r\\\\n    getMilliseconds(): number;\\\\r\\\\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\\\\r\\\\n    getUTCMilliseconds(): number;\\\\r\\\\n    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */\\\\r\\\\n    getTimezoneOffset(): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the date and time value in the Date object.\\\\r\\\\n      * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.\\\\r\\\\n      */\\\\r\\\\n    setTime(time: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the milliseconds value in the Date object using local time.\\\\r\\\\n      * @param ms A numeric value equal to the millisecond value.\\\\r\\\\n      */\\\\r\\\\n    setMilliseconds(ms: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\\\\r\\\\n      * @param ms A numeric value equal to the millisecond value.\\\\r\\\\n      */\\\\r\\\\n    setUTCMilliseconds(ms: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sets the seconds value in the Date object using local time.\\\\r\\\\n      * @param sec A numeric value equal to the seconds value.\\\\r\\\\n      * @param ms A numeric value equal to the milliseconds value.\\\\r\\\\n      */\\\\r\\\\n    setSeconds(sec: number, ms?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\\\\r\\\\n      * @param sec A numeric value equal to the seconds value.\\\\r\\\\n      * @param ms A numeric value equal to the milliseconds value.\\\\r\\\\n      */\\\\r\\\\n    setUTCSeconds(sec: number, ms?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the minutes value in the Date object using local time.\\\\r\\\\n      * @param min A numeric value equal to the minutes value.\\\\r\\\\n      * @param sec A numeric value equal to the seconds value.\\\\r\\\\n      * @param ms A numeric value equal to the milliseconds value.\\\\r\\\\n      */\\\\r\\\\n    setMinutes(min: number, sec?: number, ms?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\\\\r\\\\n      * @param min A numeric value equal to the minutes value.\\\\r\\\\n      * @param sec A numeric value equal to the seconds value.\\\\r\\\\n      * @param ms A numeric value equal to the milliseconds value.\\\\r\\\\n      */\\\\r\\\\n    setUTCMinutes(min: number, sec?: number, ms?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the hour value in the Date object using local time.\\\\r\\\\n      * @param hours A numeric value equal to the hours value.\\\\r\\\\n      * @param min A numeric value equal to the minutes value.\\\\r\\\\n      * @param sec A numeric value equal to the seconds value.\\\\r\\\\n      * @param ms A numeric value equal to the milliseconds value.\\\\r\\\\n      */\\\\r\\\\n    setHours(hours: number, min?: number, sec?: number, ms?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\\\\r\\\\n      * @param hours A numeric value equal to the hours value.\\\\r\\\\n      * @param min A numeric value equal to the minutes value.\\\\r\\\\n      * @param sec A numeric value equal to the seconds value.\\\\r\\\\n      * @param ms A numeric value equal to the milliseconds value.\\\\r\\\\n      */\\\\r\\\\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the numeric day-of-the-month value of the Date object using local time.\\\\r\\\\n      * @param date A numeric value equal to the day of the month.\\\\r\\\\n      */\\\\r\\\\n    setDate(date: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\\\\r\\\\n      * @param date A numeric value equal to the day of the month.\\\\r\\\\n      */\\\\r\\\\n    setUTCDate(date: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the month value in the Date object using local time.\\\\r\\\\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\\\\r\\\\n      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\\\\r\\\\n      */\\\\r\\\\n    setMonth(month: number, date?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the month value in the Date object using Universal Coordinated Time (UTC).\\\\r\\\\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\\\\r\\\\n      * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\\\\r\\\\n      */\\\\r\\\\n    setUTCMonth(month: number, date?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the year of the Date object using local time.\\\\r\\\\n      * @param year A numeric value for the year.\\\\r\\\\n      * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\\\\r\\\\n      * @param date A numeric value equal for the day of the month.\\\\r\\\\n      */\\\\r\\\\n    setFullYear(year: number, month?: number, date?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Sets the year value in the Date object using Universal Coordinated Time (UTC).\\\\r\\\\n      * @param year A numeric value equal to the year.\\\\r\\\\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\\\\r\\\\n      * @param date A numeric value equal to the day of the month.\\\\r\\\\n      */\\\\r\\\\n    setUTCFullYear(year: number, month?: number, date?: number): number;\\\\r\\\\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\\\\r\\\\n    toUTCString(): string;\\\\r\\\\n    /** Returns a date as a string value in ISO format. */\\\\r\\\\n    toISOString(): string;\\\\r\\\\n    /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */\\\\r\\\\n    toJSON(key?: any): string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface DateConstructor {\\\\r\\\\n    new(): Date;\\\\r\\\\n    new(value: number | string): Date;\\\\r\\\\n    new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\\\\r\\\\n    (): string;\\\\r\\\\n    readonly prototype: Date;\\\\r\\\\n    /**\\\\r\\\\n      * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\\\\r\\\\n      * @param s A date string\\\\r\\\\n      */\\\\r\\\\n    parse(s: string): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.\\\\r\\\\n      * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\\\\r\\\\n      * @param month The month as an number between 0 and 11 (January to December).\\\\r\\\\n      * @param date The date as an number between 1 and 31.\\\\r\\\\n      * @param hours Must be supplied if minutes is supplied. An number from 0 to 23 (midnight to 11pm) that specifies the hour.\\\\r\\\\n      * @param minutes Must be supplied if seconds is supplied. An number from 0 to 59 that specifies the minutes.\\\\r\\\\n      * @param seconds Must be supplied if milliseconds is supplied. An number from 0 to 59 that specifies the seconds.\\\\r\\\\n      * @param ms An number from 0 to 999 that specifies the milliseconds.\\\\r\\\\n      */\\\\r\\\\n    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\\\\r\\\\n    now(): number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var Date: DateConstructor;\\\\r\\\\n\\\\r\\\\ninterface RegExpMatchArray extends Array<string> {\\\\r\\\\n    index?: number;\\\\r\\\\n    input?: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface RegExpExecArray extends Array<string> {\\\\r\\\\n    index: number;\\\\r\\\\n    input: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface RegExp {\\\\r\\\\n    /**\\\\r\\\\n      * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\\\\r\\\\n      * @param string The String object or string literal on which to perform the search.\\\\r\\\\n      */\\\\r\\\\n    exec(string: string): RegExpExecArray | null;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\\\\r\\\\n      * @param string String on which to perform the search.\\\\r\\\\n      */\\\\r\\\\n    test(string: string): boolean;\\\\r\\\\n\\\\r\\\\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */\\\\r\\\\n    readonly source: string;\\\\r\\\\n\\\\r\\\\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\\\\r\\\\n    readonly global: boolean;\\\\r\\\\n\\\\r\\\\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\\\\r\\\\n    readonly ignoreCase: boolean;\\\\r\\\\n\\\\r\\\\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\\\\r\\\\n    readonly multiline: boolean;\\\\r\\\\n\\\\r\\\\n    lastIndex: number;\\\\r\\\\n\\\\r\\\\n    // Non-standard extensions\\\\r\\\\n    compile(): this;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface RegExpConstructor {\\\\r\\\\n    new(pattern: RegExp | string): RegExp;\\\\r\\\\n    new(pattern: string, flags?: string): RegExp;\\\\r\\\\n    (pattern: RegExp | string): RegExp;\\\\r\\\\n    (pattern: string, flags?: string): RegExp;\\\\r\\\\n    readonly prototype: RegExp;\\\\r\\\\n\\\\r\\\\n    // Non-standard extensions\\\\r\\\\n    $1: string;\\\\r\\\\n    $2: string;\\\\r\\\\n    $3: string;\\\\r\\\\n    $4: string;\\\\r\\\\n    $5: string;\\\\r\\\\n    $6: string;\\\\r\\\\n    $7: string;\\\\r\\\\n    $8: string;\\\\r\\\\n    $9: string;\\\\r\\\\n    lastMatch: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var RegExp: RegExpConstructor;\\\\r\\\\n\\\\r\\\\ninterface Error {\\\\r\\\\n    name: string;\\\\r\\\\n    message: string;\\\\r\\\\n    stack?: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ErrorConstructor {\\\\r\\\\n    new(message?: string): Error;\\\\r\\\\n    (message?: string): Error;\\\\r\\\\n    readonly prototype: Error;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var Error: ErrorConstructor;\\\\r\\\\n\\\\r\\\\ninterface EvalError extends Error {\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface EvalErrorConstructor {\\\\r\\\\n    new(message?: string): EvalError;\\\\r\\\\n    (message?: string): EvalError;\\\\r\\\\n    readonly prototype: EvalError;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var EvalError: EvalErrorConstructor;\\\\r\\\\n\\\\r\\\\ninterface RangeError extends Error {\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface RangeErrorConstructor {\\\\r\\\\n    new(message?: string): RangeError;\\\\r\\\\n    (message?: string): RangeError;\\\\r\\\\n    readonly prototype: RangeError;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var RangeError: RangeErrorConstructor;\\\\r\\\\n\\\\r\\\\ninterface ReferenceError extends Error {\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ReferenceErrorConstructor {\\\\r\\\\n    new(message?: string): ReferenceError;\\\\r\\\\n    (message?: string): ReferenceError;\\\\r\\\\n    readonly prototype: ReferenceError;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var ReferenceError: ReferenceErrorConstructor;\\\\r\\\\n\\\\r\\\\ninterface SyntaxError extends Error {\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface SyntaxErrorConstructor {\\\\r\\\\n    new(message?: string): SyntaxError;\\\\r\\\\n    (message?: string): SyntaxError;\\\\r\\\\n    readonly prototype: SyntaxError;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var SyntaxError: SyntaxErrorConstructor;\\\\r\\\\n\\\\r\\\\ninterface TypeError extends Error {\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface TypeErrorConstructor {\\\\r\\\\n    new(message?: string): TypeError;\\\\r\\\\n    (message?: string): TypeError;\\\\r\\\\n    readonly prototype: TypeError;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var TypeError: TypeErrorConstructor;\\\\r\\\\n\\\\r\\\\ninterface URIError extends Error {\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface URIErrorConstructor {\\\\r\\\\n    new(message?: string): URIError;\\\\r\\\\n    (message?: string): URIError;\\\\r\\\\n    readonly prototype: URIError;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var URIError: URIErrorConstructor;\\\\r\\\\n\\\\r\\\\ninterface JSON {\\\\r\\\\n    /**\\\\r\\\\n      * Converts a JavaScript Object Notation (JSON) string into an object.\\\\r\\\\n      * @param text A valid JSON string.\\\\r\\\\n      * @param reviver A function that transforms the results. This function is called for each member of the object.\\\\r\\\\n      * If a member contains nested objects, the nested objects are transformed before the parent object is.\\\\r\\\\n      */\\\\r\\\\n    parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;\\\\r\\\\n    /**\\\\r\\\\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\\\\r\\\\n      * @param value A JavaScript value, usually an object or array, to be converted.\\\\r\\\\n      * @param replacer A function that transforms the results.\\\\r\\\\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\\\\r\\\\n      */\\\\r\\\\n    stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;\\\\r\\\\n    /**\\\\r\\\\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\\\\r\\\\n      * @param value A JavaScript value, usually an object or array, to be converted.\\\\r\\\\n      * @param replacer An array of strings and numbers that acts as a approved list for selecting the object properties that will be stringified.\\\\r\\\\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\\\\r\\\\n      */\\\\r\\\\n    stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\\\\r\\\\n  */\\\\r\\\\ndeclare var JSON: JSON;\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n/////////////////////////////\\\\r\\\\n/// ECMAScript Array API (specially handled by compiler)\\\\r\\\\n/////////////////////////////\\\\r\\\\n\\\\r\\\\ninterface ReadonlyArray<T> {\\\\r\\\\n    /**\\\\r\\\\n      * Gets the length of the array. This is a number one higher than the highest element defined in an array.\\\\r\\\\n      */\\\\r\\\\n    readonly length: number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array.\\\\r\\\\n      */\\\\r\\\\n    toString(): string;\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n    /**\\\\r\\\\n      * Combines two or more arrays.\\\\r\\\\n      * @param items Additional items to add to the end of array1.\\\\r\\\\n      */\\\\r\\\\n    concat(...items: ConcatArray<T>[]): T[];\\\\r\\\\n    /**\\\\r\\\\n      * Combines two or more arrays.\\\\r\\\\n      * @param items Additional items to add to the end of array1.\\\\r\\\\n      */\\\\r\\\\n    concat(...items: (T | ConcatArray<T>)[]): T[];\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): T[];\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: T, fromIndex?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a specified value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => unknown, thisArg?: any): boolean;\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => unknown, thisArg?: any): boolean;\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => void, thisArg?: any): void;\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map<U>(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => U, thisArg?: any): U[];\\\\r\\\\n    /**\\\\r\\\\n     * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\\\\r\\\\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n     */\\\\r\\\\n    filter<S extends T>(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => value is S, thisArg?: any): S[];\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => unknown, thisArg?: any): T[];\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T): T;\\\\r\\\\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T, initialValue: T): T;\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => U, initialValue: U): U;\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T): T;\\\\r\\\\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T, initialValue: T): T;\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    readonly [n: number]: T;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ConcatArray<T> {\\\\r\\\\n    readonly length: number;\\\\r\\\\n    readonly [n: number]: T;\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n    slice(start?: number, end?: number): T[];\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Array<T> {\\\\r\\\\n    /**\\\\r\\\\n      * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.\\\\r\\\\n      */\\\\r\\\\n    length: number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array.\\\\r\\\\n      */\\\\r\\\\n    toString(): string;\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n    /**\\\\r\\\\n      * Removes the last element from an array and returns it.\\\\r\\\\n      */\\\\r\\\\n    pop(): T | undefined;\\\\r\\\\n    /**\\\\r\\\\n      * Appends new elements to an array, and returns the new length of the array.\\\\r\\\\n      * @param items New elements of the Array.\\\\r\\\\n      */\\\\r\\\\n    push(...items: T[]): number;\\\\r\\\\n    /**\\\\r\\\\n      * Combines two or more arrays.\\\\r\\\\n      * @param items Additional items to add to the end of array1.\\\\r\\\\n      */\\\\r\\\\n    concat(...items: ConcatArray<T>[]): T[];\\\\r\\\\n    /**\\\\r\\\\n      * Combines two or more arrays.\\\\r\\\\n      * @param items Additional items to add to the end of array1.\\\\r\\\\n      */\\\\r\\\\n    concat(...items: (T | ConcatArray<T>)[]): T[];\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n    /**\\\\r\\\\n      * Reverses the elements in an Array.\\\\r\\\\n      */\\\\r\\\\n    reverse(): T[];\\\\r\\\\n    /**\\\\r\\\\n      * Removes the first element from an array and returns it.\\\\r\\\\n      */\\\\r\\\\n    shift(): T | undefined;\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): T[];\\\\r\\\\n    /**\\\\r\\\\n      * Sorts an array.\\\\r\\\\n      * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.\\\\r\\\\n      */\\\\r\\\\n    sort(compareFn?: (a: T, b: T) => number): this;\\\\r\\\\n    /**\\\\r\\\\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\\\\r\\\\n      * @param start The zero-based location in the array from which to start removing elements.\\\\r\\\\n      * @param deleteCount The number of elements to remove.\\\\r\\\\n      */\\\\r\\\\n    splice(start: number, deleteCount?: number): T[];\\\\r\\\\n    /**\\\\r\\\\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\\\\r\\\\n      * @param start The zero-based location in the array from which to start removing elements.\\\\r\\\\n      * @param deleteCount The number of elements to remove.\\\\r\\\\n      * @param items Elements to insert into the array in place of the deleted elements.\\\\r\\\\n      */\\\\r\\\\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\\\\r\\\\n    /**\\\\r\\\\n      * Inserts new elements at the start of an array.\\\\r\\\\n      * @param items  Elements to insert at the start of the Array.\\\\r\\\\n      */\\\\r\\\\n    unshift(...items: T[]): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: T, fromIndex?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a specified value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\\\\r\\\\n    /**\\\\r\\\\n     * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\\\\r\\\\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n     */\\\\r\\\\n    filter<S extends T>(callbackfn: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\\\\r\\\\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\\\\r\\\\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    [n: number]: T;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ArrayConstructor {\\\\r\\\\n    new(arrayLength?: number): any[];\\\\r\\\\n    new <T>(arrayLength: number): T[];\\\\r\\\\n    new <T>(...items: T[]): T[];\\\\r\\\\n    (arrayLength?: number): any[];\\\\r\\\\n    <T>(arrayLength: number): T[];\\\\r\\\\n    <T>(...items: T[]): T[];\\\\r\\\\n    isArray(arg: any): arg is Array<any>;\\\\r\\\\n    readonly prototype: Array<any>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var Array: ArrayConstructor;\\\\r\\\\n\\\\r\\\\ninterface TypedPropertyDescriptor<T> {\\\\r\\\\n    enumerable?: boolean;\\\\r\\\\n    configurable?: boolean;\\\\r\\\\n    writable?: boolean;\\\\r\\\\n    value?: T;\\\\r\\\\n    get?: () => T;\\\\r\\\\n    set?: (value: T) => void;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;\\\\r\\\\ndeclare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;\\\\r\\\\ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\\\\r\\\\ndeclare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;\\\\r\\\\n\\\\r\\\\ndeclare type PromiseConstructorLike = new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;\\\\r\\\\n\\\\r\\\\ninterface PromiseLike<T> {\\\\r\\\\n    /**\\\\r\\\\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\\\\r\\\\n     * @param onfulfilled The callback to execute when the Promise is resolved.\\\\r\\\\n     * @param onrejected The callback to execute when the Promise is rejected.\\\\r\\\\n     * @returns A Promise for the completion of which ever callback is executed.\\\\r\\\\n     */\\\\r\\\\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Represents the completion of an asynchronous operation\\\\r\\\\n */\\\\r\\\\ninterface Promise<T> {\\\\r\\\\n    /**\\\\r\\\\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\\\\r\\\\n     * @param onfulfilled The callback to execute when the Promise is resolved.\\\\r\\\\n     * @param onrejected The callback to execute when the Promise is rejected.\\\\r\\\\n     * @returns A Promise for the completion of which ever callback is executed.\\\\r\\\\n     */\\\\r\\\\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Attaches a callback for only the rejection of the Promise.\\\\r\\\\n     * @param onrejected The callback to execute when the Promise is rejected.\\\\r\\\\n     * @returns A Promise for the completion of the callback.\\\\r\\\\n     */\\\\r\\\\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ArrayLike<T> {\\\\r\\\\n    readonly length: number;\\\\r\\\\n    readonly [n: number]: T;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Make all properties in T optional\\\\r\\\\n */\\\\r\\\\ntype Partial<T> = {\\\\r\\\\n    [P in keyof T]?: T[P];\\\\r\\\\n};\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Make all properties in T required\\\\r\\\\n */\\\\r\\\\ntype Required<T> = {\\\\r\\\\n    [P in keyof T]-?: T[P];\\\\r\\\\n};\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Make all properties in T readonly\\\\r\\\\n */\\\\r\\\\ntype Readonly<T> = {\\\\r\\\\n    readonly [P in keyof T]: T[P];\\\\r\\\\n};\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * From T, pick a set of properties whose keys are in the union K\\\\r\\\\n */\\\\r\\\\ntype Pick<T, K extends keyof T> = {\\\\r\\\\n    [P in K]: T[P];\\\\r\\\\n};\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Construct a type with a set of properties K of type T\\\\r\\\\n */\\\\r\\\\ntype Record<K extends keyof any, T> = {\\\\r\\\\n    [P in K]: T;\\\\r\\\\n};\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Exclude from T those types that are assignable to U\\\\r\\\\n */\\\\r\\\\ntype Exclude<T, U> = T extends U ? never : T;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Extract from T those types that are assignable to U\\\\r\\\\n */\\\\r\\\\ntype Extract<T, U> = T extends U ? T : never;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Construct a type with the properties of T except for those in type K.\\\\r\\\\n */\\\\r\\\\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Exclude null and undefined from T\\\\r\\\\n */\\\\r\\\\ntype NonNullable<T> = T extends null | undefined ? never : T;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Obtain the parameters of a function type in a tuple\\\\r\\\\n */\\\\r\\\\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Obtain the parameters of a constructor function type in a tuple\\\\r\\\\n */\\\\r\\\\ntype ConstructorParameters<T extends new (...args: any) => any> = T extends new (...args: infer P) => any ? P : never;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Obtain the return type of a function type\\\\r\\\\n */\\\\r\\\\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Obtain the return type of a constructor function type\\\\r\\\\n */\\\\r\\\\ntype InstanceType<T extends new (...args: any) => any> = T extends new (...args: any) => infer R ? R : any;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Marker for contextual 'this' type\\\\r\\\\n */\\\\r\\\\ninterface ThisType<T> { }\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * Represents a raw buffer of binary data, which is used to store data for the\\\\r\\\\n  * different typed arrays. ArrayBuffers cannot be read from or written to directly,\\\\r\\\\n  * but can be passed to a typed array or DataView Object to interpret the raw\\\\r\\\\n  * buffer as needed.\\\\r\\\\n  */\\\\r\\\\ninterface ArrayBuffer {\\\\r\\\\n    /**\\\\r\\\\n      * Read-only. The length of the ArrayBuffer (in bytes).\\\\r\\\\n      */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an ArrayBuffer.\\\\r\\\\n      */\\\\r\\\\n    slice(begin: number, end?: number): ArrayBuffer;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Allowed ArrayBuffer types for the buffer of an ArrayBufferView and related Typed Arrays.\\\\r\\\\n */\\\\r\\\\ninterface ArrayBufferTypes {\\\\r\\\\n    ArrayBuffer: ArrayBuffer;\\\\r\\\\n}\\\\r\\\\ntype ArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes];\\\\r\\\\n\\\\r\\\\ninterface ArrayBufferConstructor {\\\\r\\\\n    readonly prototype: ArrayBuffer;\\\\r\\\\n    new(byteLength: number): ArrayBuffer;\\\\r\\\\n    isView(arg: any): arg is ArrayBufferView;\\\\r\\\\n}\\\\r\\\\ndeclare var ArrayBuffer: ArrayBufferConstructor;\\\\r\\\\n\\\\r\\\\ninterface ArrayBufferView {\\\\r\\\\n    /**\\\\r\\\\n      * The ArrayBuffer instance referenced by the array.\\\\r\\\\n      */\\\\r\\\\n    buffer: ArrayBufferLike;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    byteLength: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The offset in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    byteOffset: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface DataView {\\\\r\\\\n    readonly buffer: ArrayBuffer;\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n    readonly byteOffset: number;\\\\r\\\\n    /**\\\\r\\\\n      * Gets the Float32 value at the specified byte offset from the start of the view. There is\\\\r\\\\n      * no alignment constraint; multi-byte values may be fetched from any offset.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\\\\r\\\\n      */\\\\r\\\\n    getFloat32(byteOffset: number, littleEndian?: boolean): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets the Float64 value at the specified byte offset from the start of the view. There is\\\\r\\\\n      * no alignment constraint; multi-byte values may be fetched from any offset.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\\\\r\\\\n      */\\\\r\\\\n    getFloat64(byteOffset: number, littleEndian?: boolean): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets the Int8 value at the specified byte offset from the start of the view. There is\\\\r\\\\n      * no alignment constraint; multi-byte values may be fetched from any offset.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\\\\r\\\\n      */\\\\r\\\\n    getInt8(byteOffset: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets the Int16 value at the specified byte offset from the start of the view. There is\\\\r\\\\n      * no alignment constraint; multi-byte values may be fetched from any offset.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\\\\r\\\\n      */\\\\r\\\\n    getInt16(byteOffset: number, littleEndian?: boolean): number;\\\\r\\\\n    /**\\\\r\\\\n      * Gets the Int32 value at the specified byte offset from the start of the view. There is\\\\r\\\\n      * no alignment constraint; multi-byte values may be fetched from any offset.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\\\\r\\\\n      */\\\\r\\\\n    getInt32(byteOffset: number, littleEndian?: boolean): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets the Uint8 value at the specified byte offset from the start of the view. There is\\\\r\\\\n      * no alignment constraint; multi-byte values may be fetched from any offset.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\\\\r\\\\n      */\\\\r\\\\n    getUint8(byteOffset: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets the Uint16 value at the specified byte offset from the start of the view. There is\\\\r\\\\n      * no alignment constraint; multi-byte values may be fetched from any offset.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\\\\r\\\\n      */\\\\r\\\\n    getUint16(byteOffset: number, littleEndian?: boolean): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets the Uint32 value at the specified byte offset from the start of the view. There is\\\\r\\\\n      * no alignment constraint; multi-byte values may be fetched from any offset.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\\\\r\\\\n      */\\\\r\\\\n    getUint32(byteOffset: number, littleEndian?: boolean): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Stores an Float32 value at the specified byte offset from the start of the view.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be set.\\\\r\\\\n      * @param value The value to set.\\\\r\\\\n      * @param littleEndian If false or undefined, a big-endian value should be written,\\\\r\\\\n      * otherwise a little-endian value should be written.\\\\r\\\\n      */\\\\r\\\\n    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Stores an Float64 value at the specified byte offset from the start of the view.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be set.\\\\r\\\\n      * @param value The value to set.\\\\r\\\\n      * @param littleEndian If false or undefined, a big-endian value should be written,\\\\r\\\\n      * otherwise a little-endian value should be written.\\\\r\\\\n      */\\\\r\\\\n    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Stores an Int8 value at the specified byte offset from the start of the view.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be set.\\\\r\\\\n      * @param value The value to set.\\\\r\\\\n      */\\\\r\\\\n    setInt8(byteOffset: number, value: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Stores an Int16 value at the specified byte offset from the start of the view.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be set.\\\\r\\\\n      * @param value The value to set.\\\\r\\\\n      * @param littleEndian If false or undefined, a big-endian value should be written,\\\\r\\\\n      * otherwise a little-endian value should be written.\\\\r\\\\n      */\\\\r\\\\n    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Stores an Int32 value at the specified byte offset from the start of the view.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be set.\\\\r\\\\n      * @param value The value to set.\\\\r\\\\n      * @param littleEndian If false or undefined, a big-endian value should be written,\\\\r\\\\n      * otherwise a little-endian value should be written.\\\\r\\\\n      */\\\\r\\\\n    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Stores an Uint8 value at the specified byte offset from the start of the view.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be set.\\\\r\\\\n      * @param value The value to set.\\\\r\\\\n      */\\\\r\\\\n    setUint8(byteOffset: number, value: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Stores an Uint16 value at the specified byte offset from the start of the view.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be set.\\\\r\\\\n      * @param value The value to set.\\\\r\\\\n      * @param littleEndian If false or undefined, a big-endian value should be written,\\\\r\\\\n      * otherwise a little-endian value should be written.\\\\r\\\\n      */\\\\r\\\\n    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Stores an Uint32 value at the specified byte offset from the start of the view.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be set.\\\\r\\\\n      * @param value The value to set.\\\\r\\\\n      * @param littleEndian If false or undefined, a big-endian value should be written,\\\\r\\\\n      * otherwise a little-endian value should be written.\\\\r\\\\n      */\\\\r\\\\n    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface DataViewConstructor {\\\\r\\\\n    new(buffer: ArrayBufferLike, byteOffset?: number, byteLength?: number): DataView;\\\\r\\\\n}\\\\r\\\\ndeclare var DataView: DataViewConstructor;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested\\\\r\\\\n  * number of bytes could not be allocated an exception is raised.\\\\r\\\\n  */\\\\r\\\\ninterface Int8Array {\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The ArrayBuffer instance referenced by the array.\\\\r\\\\n      */\\\\r\\\\n    readonly buffer: ArrayBufferLike;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The offset in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteOffset: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after copying a section of the array identified by start and end\\\\r\\\\n      * to the same array starting at position target\\\\r\\\\n      * @param target If target is negative, it is treated as length+target where length is the\\\\r\\\\n      * length of the array.\\\\r\\\\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\\\\r\\\\n      * is treated as length+end.\\\\r\\\\n      * @param end If not specified, length of the this object is used as its default value.\\\\r\\\\n      */\\\\r\\\\n    copyWithin(target: number, start: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\\\\r\\\\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\\\\r\\\\n      * or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n        * Returns the this object after filling the section identified by start and end with value\\\\r\\\\n        * @param value value to fill array section with\\\\r\\\\n        * @param start index to start filling the array at. If start is negative, it is treated as\\\\r\\\\n        * length+start where length is the length of the array.\\\\r\\\\n        * @param end index to stop filling the array at. If end is negative, it is treated as\\\\r\\\\n        * length+end.\\\\r\\\\n        */\\\\r\\\\n    fill(value: number, start?: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: number, index: number, array: Int8Array) => any, thisArg?: any): Int8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n      * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    find(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    findIndex(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      *  search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the\\\\r\\\\n      * resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that\\\\r\\\\n      * contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an\\\\r\\\\n      * argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Reverses the elements in an Array.\\\\r\\\\n      */\\\\r\\\\n    reverse(): Int8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sets a value or an array of values.\\\\r\\\\n      * @param array A typed or untyped array of values to set.\\\\r\\\\n      * @param offset The index in the current array at which the values are to be written.\\\\r\\\\n      */\\\\r\\\\n    set(array: ArrayLike<number>, offset?: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): Int8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\\\\r\\\\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\\\\r\\\\n      * the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sorts an array.\\\\r\\\\n      * @param compareFn The name of the function used to determine the order of the elements. If\\\\r\\\\n      * omitted, the elements are sorted in ascending, ASCII character order.\\\\r\\\\n      */\\\\r\\\\n    sort(compareFn?: (a: number, b: number) => number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements\\\\r\\\\n      * at begin, inclusive, up to end, exclusive.\\\\r\\\\n      * @param begin The index of the beginning of the array.\\\\r\\\\n      * @param end The index of the end of the array.\\\\r\\\\n      */\\\\r\\\\n    subarray(begin: number, end?: number): Int8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Converts a number to a string by using the current locale.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array.\\\\r\\\\n      */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    [index: number]: number;\\\\r\\\\n}\\\\r\\\\ninterface Int8ArrayConstructor {\\\\r\\\\n    readonly prototype: Int8Array;\\\\r\\\\n    new(length: number): Int8Array;\\\\r\\\\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int8Array;\\\\r\\\\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a new array from a set of elements.\\\\r\\\\n      * @param items A set of elements to include in the new array object.\\\\r\\\\n      */\\\\r\\\\n    of(...items: number[]): Int8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      */\\\\r\\\\n    from(arrayLike: ArrayLike<number>): Int8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n      * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n      */\\\\r\\\\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array;\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\ndeclare var Int8Array: Int8ArrayConstructor;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\\\\r\\\\n  * requested number of bytes could not be allocated an exception is raised.\\\\r\\\\n  */\\\\r\\\\ninterface Uint8Array {\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The ArrayBuffer instance referenced by the array.\\\\r\\\\n      */\\\\r\\\\n    readonly buffer: ArrayBufferLike;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The offset in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteOffset: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after copying a section of the array identified by start and end\\\\r\\\\n      * to the same array starting at position target\\\\r\\\\n      * @param target If target is negative, it is treated as length+target where length is the\\\\r\\\\n      * length of the array.\\\\r\\\\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\\\\r\\\\n      * is treated as length+end.\\\\r\\\\n      * @param end If not specified, length of the this object is used as its default value.\\\\r\\\\n      */\\\\r\\\\n    copyWithin(target: number, start: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\\\\r\\\\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\\\\r\\\\n      * or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n        * Returns the this object after filling the section identified by start and end with value\\\\r\\\\n        * @param value value to fill array section with\\\\r\\\\n        * @param start index to start filling the array at. If start is negative, it is treated as\\\\r\\\\n        * length+start where length is the length of the array.\\\\r\\\\n        * @param end index to stop filling the array at. If end is negative, it is treated as\\\\r\\\\n        * length+end.\\\\r\\\\n        */\\\\r\\\\n    fill(value: number, start?: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n      * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      *  search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the\\\\r\\\\n      * resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that\\\\r\\\\n      * contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an\\\\r\\\\n      * argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Reverses the elements in an Array.\\\\r\\\\n      */\\\\r\\\\n    reverse(): Uint8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sets a value or an array of values.\\\\r\\\\n      * @param array A typed or untyped array of values to set.\\\\r\\\\n      * @param offset The index in the current array at which the values are to be written.\\\\r\\\\n      */\\\\r\\\\n    set(array: ArrayLike<number>, offset?: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): Uint8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\\\\r\\\\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\\\\r\\\\n      * the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sorts an array.\\\\r\\\\n      * @param compareFn The name of the function used to determine the order of the elements. If\\\\r\\\\n      * omitted, the elements are sorted in ascending, ASCII character order.\\\\r\\\\n      */\\\\r\\\\n    sort(compareFn?: (a: number, b: number) => number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements\\\\r\\\\n      * at begin, inclusive, up to end, exclusive.\\\\r\\\\n      * @param begin The index of the beginning of the array.\\\\r\\\\n      * @param end The index of the end of the array.\\\\r\\\\n      */\\\\r\\\\n    subarray(begin: number, end?: number): Uint8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Converts a number to a string by using the current locale.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array.\\\\r\\\\n      */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    [index: number]: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint8ArrayConstructor {\\\\r\\\\n    readonly prototype: Uint8Array;\\\\r\\\\n    new(length: number): Uint8Array;\\\\r\\\\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint8Array;\\\\r\\\\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a new array from a set of elements.\\\\r\\\\n      * @param items A set of elements to include in the new array object.\\\\r\\\\n      */\\\\r\\\\n    of(...items: number[]): Uint8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      */\\\\r\\\\n    from(arrayLike: ArrayLike<number>): Uint8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n      * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n      */\\\\r\\\\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\ndeclare var Uint8Array: Uint8ArrayConstructor;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.\\\\r\\\\n  * If the requested number of bytes could not be allocated an exception is raised.\\\\r\\\\n  */\\\\r\\\\ninterface Uint8ClampedArray {\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The ArrayBuffer instance referenced by the array.\\\\r\\\\n      */\\\\r\\\\n    readonly buffer: ArrayBufferLike;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The offset in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteOffset: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after copying a section of the array identified by start and end\\\\r\\\\n      * to the same array starting at position target\\\\r\\\\n      * @param target If target is negative, it is treated as length+target where length is the\\\\r\\\\n      * length of the array.\\\\r\\\\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\\\\r\\\\n      * is treated as length+end.\\\\r\\\\n      * @param end If not specified, length of the this object is used as its default value.\\\\r\\\\n      */\\\\r\\\\n    copyWithin(target: number, start: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\\\\r\\\\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\\\\r\\\\n      * or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n        * Returns the this object after filling the section identified by start and end with value\\\\r\\\\n        * @param value value to fill array section with\\\\r\\\\n        * @param start index to start filling the array at. If start is negative, it is treated as\\\\r\\\\n        * length+start where length is the length of the array.\\\\r\\\\n        * @param end index to stop filling the array at. If end is negative, it is treated as\\\\r\\\\n        * length+end.\\\\r\\\\n        */\\\\r\\\\n    fill(value: number, start?: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => any, thisArg?: any): Uint8ClampedArray;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n      * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    find(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    findIndex(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      *  search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the\\\\r\\\\n      * resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that\\\\r\\\\n      * contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an\\\\r\\\\n      * argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Reverses the elements in an Array.\\\\r\\\\n      */\\\\r\\\\n    reverse(): Uint8ClampedArray;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sets a value or an array of values.\\\\r\\\\n      * @param array A typed or untyped array of values to set.\\\\r\\\\n      * @param offset The index in the current array at which the values are to be written.\\\\r\\\\n      */\\\\r\\\\n    set(array: ArrayLike<number>, offset?: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): Uint8ClampedArray;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\\\\r\\\\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\\\\r\\\\n      * the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sorts an array.\\\\r\\\\n      * @param compareFn The name of the function used to determine the order of the elements. If\\\\r\\\\n      * omitted, the elements are sorted in ascending, ASCII character order.\\\\r\\\\n      */\\\\r\\\\n    sort(compareFn?: (a: number, b: number) => number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements\\\\r\\\\n      * at begin, inclusive, up to end, exclusive.\\\\r\\\\n      * @param begin The index of the beginning of the array.\\\\r\\\\n      * @param end The index of the end of the array.\\\\r\\\\n      */\\\\r\\\\n    subarray(begin: number, end?: number): Uint8ClampedArray;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Converts a number to a string by using the current locale.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array.\\\\r\\\\n      */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    [index: number]: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint8ClampedArrayConstructor {\\\\r\\\\n    readonly prototype: Uint8ClampedArray;\\\\r\\\\n    new(length: number): Uint8ClampedArray;\\\\r\\\\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint8ClampedArray;\\\\r\\\\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint8ClampedArray;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a new array from a set of elements.\\\\r\\\\n      * @param items A set of elements to include in the new array object.\\\\r\\\\n      */\\\\r\\\\n    of(...items: number[]): Uint8ClampedArray;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      */\\\\r\\\\n    from(arrayLike: ArrayLike<number>): Uint8ClampedArray;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n      * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n      */\\\\r\\\\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray;\\\\r\\\\n}\\\\r\\\\ndeclare var Uint8ClampedArray: Uint8ClampedArrayConstructor;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the\\\\r\\\\n  * requested number of bytes could not be allocated an exception is raised.\\\\r\\\\n  */\\\\r\\\\ninterface Int16Array {\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The ArrayBuffer instance referenced by the array.\\\\r\\\\n      */\\\\r\\\\n    readonly buffer: ArrayBufferLike;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The offset in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteOffset: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after copying a section of the array identified by start and end\\\\r\\\\n      * to the same array starting at position target\\\\r\\\\n      * @param target If target is negative, it is treated as length+target where length is the\\\\r\\\\n      * length of the array.\\\\r\\\\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\\\\r\\\\n      * is treated as length+end.\\\\r\\\\n      * @param end If not specified, length of the this object is used as its default value.\\\\r\\\\n      */\\\\r\\\\n    copyWithin(target: number, start: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\\\\r\\\\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\\\\r\\\\n      * or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n        * Returns the this object after filling the section identified by start and end with value\\\\r\\\\n        * @param value value to fill array section with\\\\r\\\\n        * @param start index to start filling the array at. If start is negative, it is treated as\\\\r\\\\n        * length+start where length is the length of the array.\\\\r\\\\n        * @param end index to stop filling the array at. If end is negative, it is treated as\\\\r\\\\n        * length+end.\\\\r\\\\n        */\\\\r\\\\n    fill(value: number, start?: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: number, index: number, array: Int16Array) => any, thisArg?: any): Int16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n      * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    find(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    findIndex(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      *  search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the\\\\r\\\\n      * resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that\\\\r\\\\n      * contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an\\\\r\\\\n      * argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Reverses the elements in an Array.\\\\r\\\\n      */\\\\r\\\\n    reverse(): Int16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sets a value or an array of values.\\\\r\\\\n      * @param array A typed or untyped array of values to set.\\\\r\\\\n      * @param offset The index in the current array at which the values are to be written.\\\\r\\\\n      */\\\\r\\\\n    set(array: ArrayLike<number>, offset?: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): Int16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\\\\r\\\\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\\\\r\\\\n      * the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sorts an array.\\\\r\\\\n      * @param compareFn The name of the function used to determine the order of the elements. If\\\\r\\\\n      * omitted, the elements are sorted in ascending, ASCII character order.\\\\r\\\\n      */\\\\r\\\\n    sort(compareFn?: (a: number, b: number) => number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements\\\\r\\\\n      * at begin, inclusive, up to end, exclusive.\\\\r\\\\n      * @param begin The index of the beginning of the array.\\\\r\\\\n      * @param end The index of the end of the array.\\\\r\\\\n      */\\\\r\\\\n    subarray(begin: number, end?: number): Int16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Converts a number to a string by using the current locale.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array.\\\\r\\\\n      */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    [index: number]: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int16ArrayConstructor {\\\\r\\\\n    readonly prototype: Int16Array;\\\\r\\\\n    new(length: number): Int16Array;\\\\r\\\\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int16Array;\\\\r\\\\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a new array from a set of elements.\\\\r\\\\n      * @param items A set of elements to include in the new array object.\\\\r\\\\n      */\\\\r\\\\n    of(...items: number[]): Int16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      */\\\\r\\\\n    from(arrayLike: ArrayLike<number>): Int16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n      * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n      */\\\\r\\\\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array;\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\ndeclare var Int16Array: Int16ArrayConstructor;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the\\\\r\\\\n  * requested number of bytes could not be allocated an exception is raised.\\\\r\\\\n  */\\\\r\\\\ninterface Uint16Array {\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The ArrayBuffer instance referenced by the array.\\\\r\\\\n      */\\\\r\\\\n    readonly buffer: ArrayBufferLike;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The offset in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteOffset: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after copying a section of the array identified by start and end\\\\r\\\\n      * to the same array starting at position target\\\\r\\\\n      * @param target If target is negative, it is treated as length+target where length is the\\\\r\\\\n      * length of the array.\\\\r\\\\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\\\\r\\\\n      * is treated as length+end.\\\\r\\\\n      * @param end If not specified, length of the this object is used as its default value.\\\\r\\\\n      */\\\\r\\\\n    copyWithin(target: number, start: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\\\\r\\\\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\\\\r\\\\n      * or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n        * Returns the this object after filling the section identified by start and end with value\\\\r\\\\n        * @param value value to fill array section with\\\\r\\\\n        * @param start index to start filling the array at. If start is negative, it is treated as\\\\r\\\\n        * length+start where length is the length of the array.\\\\r\\\\n        * @param end index to stop filling the array at. If end is negative, it is treated as\\\\r\\\\n        * length+end.\\\\r\\\\n        */\\\\r\\\\n    fill(value: number, start?: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: number, index: number, array: Uint16Array) => any, thisArg?: any): Uint16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n      * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    find(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    findIndex(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      *  search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the\\\\r\\\\n      * resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that\\\\r\\\\n      * contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an\\\\r\\\\n      * argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Reverses the elements in an Array.\\\\r\\\\n      */\\\\r\\\\n    reverse(): Uint16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sets a value or an array of values.\\\\r\\\\n      * @param array A typed or untyped array of values to set.\\\\r\\\\n      * @param offset The index in the current array at which the values are to be written.\\\\r\\\\n      */\\\\r\\\\n    set(array: ArrayLike<number>, offset?: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): Uint16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\\\\r\\\\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\\\\r\\\\n      * the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sorts an array.\\\\r\\\\n      * @param compareFn The name of the function used to determine the order of the elements. If\\\\r\\\\n      * omitted, the elements are sorted in ascending, ASCII character order.\\\\r\\\\n      */\\\\r\\\\n    sort(compareFn?: (a: number, b: number) => number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements\\\\r\\\\n      * at begin, inclusive, up to end, exclusive.\\\\r\\\\n      * @param begin The index of the beginning of the array.\\\\r\\\\n      * @param end The index of the end of the array.\\\\r\\\\n      */\\\\r\\\\n    subarray(begin: number, end?: number): Uint16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Converts a number to a string by using the current locale.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array.\\\\r\\\\n      */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    [index: number]: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint16ArrayConstructor {\\\\r\\\\n    readonly prototype: Uint16Array;\\\\r\\\\n    new(length: number): Uint16Array;\\\\r\\\\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint16Array;\\\\r\\\\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a new array from a set of elements.\\\\r\\\\n      * @param items A set of elements to include in the new array object.\\\\r\\\\n      */\\\\r\\\\n    of(...items: number[]): Uint16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      */\\\\r\\\\n    from(arrayLike: ArrayLike<number>): Uint16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n      * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n      */\\\\r\\\\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array;\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\ndeclare var Uint16Array: Uint16ArrayConstructor;\\\\r\\\\n/**\\\\r\\\\n  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the\\\\r\\\\n  * requested number of bytes could not be allocated an exception is raised.\\\\r\\\\n  */\\\\r\\\\ninterface Int32Array {\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The ArrayBuffer instance referenced by the array.\\\\r\\\\n      */\\\\r\\\\n    readonly buffer: ArrayBufferLike;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The offset in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteOffset: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after copying a section of the array identified by start and end\\\\r\\\\n      * to the same array starting at position target\\\\r\\\\n      * @param target If target is negative, it is treated as length+target where length is the\\\\r\\\\n      * length of the array.\\\\r\\\\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\\\\r\\\\n      * is treated as length+end.\\\\r\\\\n      * @param end If not specified, length of the this object is used as its default value.\\\\r\\\\n      */\\\\r\\\\n    copyWithin(target: number, start: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\\\\r\\\\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\\\\r\\\\n      * or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n        * Returns the this object after filling the section identified by start and end with value\\\\r\\\\n        * @param value value to fill array section with\\\\r\\\\n        * @param start index to start filling the array at. If start is negative, it is treated as\\\\r\\\\n        * length+start where length is the length of the array.\\\\r\\\\n        * @param end index to stop filling the array at. If end is negative, it is treated as\\\\r\\\\n        * length+end.\\\\r\\\\n        */\\\\r\\\\n    fill(value: number, start?: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: number, index: number, array: Int32Array) => any, thisArg?: any): Int32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n      * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    find(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    findIndex(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      *  search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the\\\\r\\\\n      * resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that\\\\r\\\\n      * contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an\\\\r\\\\n      * argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Reverses the elements in an Array.\\\\r\\\\n      */\\\\r\\\\n    reverse(): Int32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sets a value or an array of values.\\\\r\\\\n      * @param array A typed or untyped array of values to set.\\\\r\\\\n      * @param offset The index in the current array at which the values are to be written.\\\\r\\\\n      */\\\\r\\\\n    set(array: ArrayLike<number>, offset?: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): Int32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\\\\r\\\\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\\\\r\\\\n      * the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sorts an array.\\\\r\\\\n      * @param compareFn The name of the function used to determine the order of the elements. If\\\\r\\\\n      * omitted, the elements are sorted in ascending, ASCII character order.\\\\r\\\\n      */\\\\r\\\\n    sort(compareFn?: (a: number, b: number) => number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements\\\\r\\\\n      * at begin, inclusive, up to end, exclusive.\\\\r\\\\n      * @param begin The index of the beginning of the array.\\\\r\\\\n      * @param end The index of the end of the array.\\\\r\\\\n      */\\\\r\\\\n    subarray(begin: number, end?: number): Int32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Converts a number to a string by using the current locale.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array.\\\\r\\\\n      */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    [index: number]: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int32ArrayConstructor {\\\\r\\\\n    readonly prototype: Int32Array;\\\\r\\\\n    new(length: number): Int32Array;\\\\r\\\\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int32Array;\\\\r\\\\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a new array from a set of elements.\\\\r\\\\n      * @param items A set of elements to include in the new array object.\\\\r\\\\n      */\\\\r\\\\n    of(...items: number[]): Int32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      */\\\\r\\\\n    from(arrayLike: ArrayLike<number>): Int32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n      * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n      */\\\\r\\\\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\ndeclare var Int32Array: Int32ArrayConstructor;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\\\\r\\\\n  * requested number of bytes could not be allocated an exception is raised.\\\\r\\\\n  */\\\\r\\\\ninterface Uint32Array {\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The ArrayBuffer instance referenced by the array.\\\\r\\\\n      */\\\\r\\\\n    readonly buffer: ArrayBufferLike;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The offset in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteOffset: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after copying a section of the array identified by start and end\\\\r\\\\n      * to the same array starting at position target\\\\r\\\\n      * @param target If target is negative, it is treated as length+target where length is the\\\\r\\\\n      * length of the array.\\\\r\\\\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\\\\r\\\\n      * is treated as length+end.\\\\r\\\\n      * @param end If not specified, length of the this object is used as its default value.\\\\r\\\\n      */\\\\r\\\\n    copyWithin(target: number, start: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\\\\r\\\\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\\\\r\\\\n      * or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n        * Returns the this object after filling the section identified by start and end with value\\\\r\\\\n        * @param value value to fill array section with\\\\r\\\\n        * @param start index to start filling the array at. If start is negative, it is treated as\\\\r\\\\n        * length+start where length is the length of the array.\\\\r\\\\n        * @param end index to stop filling the array at. If end is negative, it is treated as\\\\r\\\\n        * length+end.\\\\r\\\\n        */\\\\r\\\\n    fill(value: number, start?: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: number, index: number, array: Uint32Array) => any, thisArg?: any): Uint32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n      * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    find(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    findIndex(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      *  search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the\\\\r\\\\n      * resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that\\\\r\\\\n      * contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an\\\\r\\\\n      * argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Reverses the elements in an Array.\\\\r\\\\n      */\\\\r\\\\n    reverse(): Uint32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sets a value or an array of values.\\\\r\\\\n      * @param array A typed or untyped array of values to set.\\\\r\\\\n      * @param offset The index in the current array at which the values are to be written.\\\\r\\\\n      */\\\\r\\\\n    set(array: ArrayLike<number>, offset?: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): Uint32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\\\\r\\\\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\\\\r\\\\n      * the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sorts an array.\\\\r\\\\n      * @param compareFn The name of the function used to determine the order of the elements. If\\\\r\\\\n      * omitted, the elements are sorted in ascending, ASCII character order.\\\\r\\\\n      */\\\\r\\\\n    sort(compareFn?: (a: number, b: number) => number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements\\\\r\\\\n      * at begin, inclusive, up to end, exclusive.\\\\r\\\\n      * @param begin The index of the beginning of the array.\\\\r\\\\n      * @param end The index of the end of the array.\\\\r\\\\n      */\\\\r\\\\n    subarray(begin: number, end?: number): Uint32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Converts a number to a string by using the current locale.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array.\\\\r\\\\n      */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    [index: number]: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint32ArrayConstructor {\\\\r\\\\n    readonly prototype: Uint32Array;\\\\r\\\\n    new(length: number): Uint32Array;\\\\r\\\\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint32Array;\\\\r\\\\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a new array from a set of elements.\\\\r\\\\n      * @param items A set of elements to include in the new array object.\\\\r\\\\n      */\\\\r\\\\n    of(...items: number[]): Uint32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      */\\\\r\\\\n    from(arrayLike: ArrayLike<number>): Uint32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n      * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n      */\\\\r\\\\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\ndeclare var Uint32Array: Uint32ArrayConstructor;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\\\\r\\\\n  * of bytes could not be allocated an exception is raised.\\\\r\\\\n  */\\\\r\\\\ninterface Float32Array {\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The ArrayBuffer instance referenced by the array.\\\\r\\\\n      */\\\\r\\\\n    readonly buffer: ArrayBufferLike;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The offset in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteOffset: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after copying a section of the array identified by start and end\\\\r\\\\n      * to the same array starting at position target\\\\r\\\\n      * @param target If target is negative, it is treated as length+target where length is the\\\\r\\\\n      * length of the array.\\\\r\\\\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\\\\r\\\\n      * is treated as length+end.\\\\r\\\\n      * @param end If not specified, length of the this object is used as its default value.\\\\r\\\\n      */\\\\r\\\\n    copyWithin(target: number, start: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\\\\r\\\\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\\\\r\\\\n      * or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n        * Returns the this object after filling the section identified by start and end with value\\\\r\\\\n        * @param value value to fill array section with\\\\r\\\\n        * @param start index to start filling the array at. If start is negative, it is treated as\\\\r\\\\n        * length+start where length is the length of the array.\\\\r\\\\n        * @param end index to stop filling the array at. If end is negative, it is treated as\\\\r\\\\n        * length+end.\\\\r\\\\n        */\\\\r\\\\n    fill(value: number, start?: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: number, index: number, array: Float32Array) => any, thisArg?: any): Float32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n      * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    find(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    findIndex(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      *  search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the\\\\r\\\\n      * resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that\\\\r\\\\n      * contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an\\\\r\\\\n      * argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Reverses the elements in an Array.\\\\r\\\\n      */\\\\r\\\\n    reverse(): Float32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sets a value or an array of values.\\\\r\\\\n      * @param array A typed or untyped array of values to set.\\\\r\\\\n      * @param offset The index in the current array at which the values are to be written.\\\\r\\\\n      */\\\\r\\\\n    set(array: ArrayLike<number>, offset?: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): Float32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\\\\r\\\\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\\\\r\\\\n      * the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sorts an array.\\\\r\\\\n      * @param compareFn The name of the function used to determine the order of the elements. If\\\\r\\\\n      * omitted, the elements are sorted in ascending, ASCII character order.\\\\r\\\\n      */\\\\r\\\\n    sort(compareFn?: (a: number, b: number) => number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements\\\\r\\\\n      * at begin, inclusive, up to end, exclusive.\\\\r\\\\n      * @param begin The index of the beginning of the array.\\\\r\\\\n      * @param end The index of the end of the array.\\\\r\\\\n      */\\\\r\\\\n    subarray(begin: number, end?: number): Float32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Converts a number to a string by using the current locale.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array.\\\\r\\\\n      */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    [index: number]: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Float32ArrayConstructor {\\\\r\\\\n    readonly prototype: Float32Array;\\\\r\\\\n    new(length: number): Float32Array;\\\\r\\\\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Float32Array;\\\\r\\\\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Float32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a new array from a set of elements.\\\\r\\\\n      * @param items A set of elements to include in the new array object.\\\\r\\\\n      */\\\\r\\\\n    of(...items: number[]): Float32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      */\\\\r\\\\n    from(arrayLike: ArrayLike<number>): Float32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n      * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n      */\\\\r\\\\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array;\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\ndeclare var Float32Array: Float32ArrayConstructor;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested\\\\r\\\\n  * number of bytes could not be allocated an exception is raised.\\\\r\\\\n  */\\\\r\\\\ninterface Float64Array {\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The ArrayBuffer instance referenced by the array.\\\\r\\\\n      */\\\\r\\\\n    readonly buffer: ArrayBufferLike;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The offset in bytes of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly byteOffset: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after copying a section of the array identified by start and end\\\\r\\\\n      * to the same array starting at position target\\\\r\\\\n      * @param target If target is negative, it is treated as length+target where length is the\\\\r\\\\n      * length of the array.\\\\r\\\\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\\\\r\\\\n      * is treated as length+end.\\\\r\\\\n      * @param end If not specified, length of the this object is used as its default value.\\\\r\\\\n      */\\\\r\\\\n    copyWithin(target: number, start: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\\\\r\\\\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\\\\r\\\\n      * or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n        * Returns the this object after filling the section identified by start and end with value\\\\r\\\\n        * @param value value to fill array section with\\\\r\\\\n        * @param start index to start filling the array at. If start is negative, it is treated as\\\\r\\\\n        * length+start where length is the length of the array.\\\\r\\\\n        * @param end index to stop filling the array at. If end is negative, it is treated as\\\\r\\\\n        * length+end.\\\\r\\\\n        */\\\\r\\\\n    fill(value: number, start?: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: number, index: number, array: Float64Array) => any, thisArg?: any): Float64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n      * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    find(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    findIndex(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      *  search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the\\\\r\\\\n      * resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The length of the array.\\\\r\\\\n      */\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that\\\\r\\\\n      * contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map(callbackfn: (value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;\\\\r\\\\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an\\\\r\\\\n      * argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;\\\\r\\\\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Reverses the elements in an Array.\\\\r\\\\n      */\\\\r\\\\n    reverse(): Float64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sets a value or an array of values.\\\\r\\\\n      * @param array A typed or untyped array of values to set.\\\\r\\\\n      * @param offset The index in the current array at which the values are to be written.\\\\r\\\\n      */\\\\r\\\\n    set(array: ArrayLike<number>, offset?: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): Float64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\\\\r\\\\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\\\\r\\\\n      * the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sorts an array.\\\\r\\\\n      * @param compareFn The name of the function used to determine the order of the elements. If\\\\r\\\\n      * omitted, the elements are sorted in ascending, ASCII character order.\\\\r\\\\n      */\\\\r\\\\n    sort(compareFn?: (a: number, b: number) => number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets a new Float64Array view of the ArrayBuffer store for this array, referencing the elements\\\\r\\\\n      * at begin, inclusive, up to end, exclusive.\\\\r\\\\n      * @param begin The index of the beginning of the array.\\\\r\\\\n      * @param end The index of the end of the array.\\\\r\\\\n      */\\\\r\\\\n    subarray(begin: number, end?: number): Float64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Converts a number to a string by using the current locale.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an array.\\\\r\\\\n      */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    [index: number]: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Float64ArrayConstructor {\\\\r\\\\n    readonly prototype: Float64Array;\\\\r\\\\n    new(length: number): Float64Array;\\\\r\\\\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Float64Array;\\\\r\\\\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Float64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * The size in bytes of each element in the array.\\\\r\\\\n      */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a new array from a set of elements.\\\\r\\\\n      * @param items A set of elements to include in the new array object.\\\\r\\\\n      */\\\\r\\\\n    of(...items: number[]): Float64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      */\\\\r\\\\n    from(arrayLike: ArrayLike<number>): Float64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n      * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n      */\\\\r\\\\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\ndeclare var Float64Array: Float64ArrayConstructor;\\\\r\\\\n\\\\r\\\\n/////////////////////////////\\\\r\\\\n/// ECMAScript Internationalization API\\\\r\\\\n/////////////////////////////\\\\r\\\\n\\\\r\\\\ndeclare namespace Intl {\\\\r\\\\n    interface CollatorOptions {\\\\r\\\\n        usage?: string;\\\\r\\\\n        localeMatcher?: string;\\\\r\\\\n        numeric?: boolean;\\\\r\\\\n        caseFirst?: string;\\\\r\\\\n        sensitivity?: string;\\\\r\\\\n        ignorePunctuation?: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface ResolvedCollatorOptions {\\\\r\\\\n        locale: string;\\\\r\\\\n        usage: string;\\\\r\\\\n        sensitivity: string;\\\\r\\\\n        ignorePunctuation: boolean;\\\\r\\\\n        collation: string;\\\\r\\\\n        caseFirst: string;\\\\r\\\\n        numeric: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface Collator {\\\\r\\\\n        compare(x: string, y: string): number;\\\\r\\\\n        resolvedOptions(): ResolvedCollatorOptions;\\\\r\\\\n    }\\\\r\\\\n    var Collator: {\\\\r\\\\n        new(locales?: string | string[], options?: CollatorOptions): Collator;\\\\r\\\\n        (locales?: string | string[], options?: CollatorOptions): Collator;\\\\r\\\\n        supportedLocalesOf(locales: string | string[], options?: CollatorOptions): string[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    interface NumberFormatOptions {\\\\r\\\\n        localeMatcher?: string;\\\\r\\\\n        style?: string;\\\\r\\\\n        currency?: string;\\\\r\\\\n        currencyDisplay?: string;\\\\r\\\\n        useGrouping?: boolean;\\\\r\\\\n        minimumIntegerDigits?: number;\\\\r\\\\n        minimumFractionDigits?: number;\\\\r\\\\n        maximumFractionDigits?: number;\\\\r\\\\n        minimumSignificantDigits?: number;\\\\r\\\\n        maximumSignificantDigits?: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface ResolvedNumberFormatOptions {\\\\r\\\\n        locale: string;\\\\r\\\\n        numberingSystem: string;\\\\r\\\\n        style: string;\\\\r\\\\n        currency?: string;\\\\r\\\\n        currencyDisplay?: string;\\\\r\\\\n        minimumIntegerDigits: number;\\\\r\\\\n        minimumFractionDigits: number;\\\\r\\\\n        maximumFractionDigits: number;\\\\r\\\\n        minimumSignificantDigits?: number;\\\\r\\\\n        maximumSignificantDigits?: number;\\\\r\\\\n        useGrouping: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface NumberFormat {\\\\r\\\\n        format(value: number): string;\\\\r\\\\n        resolvedOptions(): ResolvedNumberFormatOptions;\\\\r\\\\n    }\\\\r\\\\n    var NumberFormat: {\\\\r\\\\n        new(locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\\\\r\\\\n        (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\\\\r\\\\n        supportedLocalesOf(locales: string | string[], options?: NumberFormatOptions): string[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    interface DateTimeFormatOptions {\\\\r\\\\n        localeMatcher?: string;\\\\r\\\\n        weekday?: string;\\\\r\\\\n        era?: string;\\\\r\\\\n        year?: string;\\\\r\\\\n        month?: string;\\\\r\\\\n        day?: string;\\\\r\\\\n        hour?: string;\\\\r\\\\n        minute?: string;\\\\r\\\\n        second?: string;\\\\r\\\\n        timeZoneName?: string;\\\\r\\\\n        formatMatcher?: string;\\\\r\\\\n        hour12?: boolean;\\\\r\\\\n        timeZone?: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface ResolvedDateTimeFormatOptions {\\\\r\\\\n        locale: string;\\\\r\\\\n        calendar: string;\\\\r\\\\n        numberingSystem: string;\\\\r\\\\n        timeZone: string;\\\\r\\\\n        hour12?: boolean;\\\\r\\\\n        weekday?: string;\\\\r\\\\n        era?: string;\\\\r\\\\n        year?: string;\\\\r\\\\n        month?: string;\\\\r\\\\n        day?: string;\\\\r\\\\n        hour?: string;\\\\r\\\\n        minute?: string;\\\\r\\\\n        second?: string;\\\\r\\\\n        timeZoneName?: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface DateTimeFormat {\\\\r\\\\n        format(date?: Date | number): string;\\\\r\\\\n        resolvedOptions(): ResolvedDateTimeFormatOptions;\\\\r\\\\n    }\\\\r\\\\n    var DateTimeFormat: {\\\\r\\\\n        new(locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\\\\r\\\\n        (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\\\\r\\\\n        supportedLocalesOf(locales: string | string[], options?: DateTimeFormatOptions): string[];\\\\r\\\\n    };\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface String {\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether two strings are equivalent in the current or specified locale.\\\\r\\\\n      * @param that String to compare to target string\\\\r\\\\n      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\\\\r\\\\n      * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\\\\r\\\\n      */\\\\r\\\\n    localeCompare(that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Number {\\\\r\\\\n    /**\\\\r\\\\n      * Converts a number to a string by using the current or specified locale.\\\\r\\\\n      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\\\\r\\\\n      * @param options An object that contains one or more properties that specify comparison options.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Date {\\\\r\\\\n    /**\\\\r\\\\n      * Converts a date and time to a string by using the current or specified locale.\\\\r\\\\n      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\\\\r\\\\n      * @param options An object that contains one or more properties that specify comparison options.\\\\r\\\\n      */\\\\r\\\\n    toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\\\\r\\\\n    /**\\\\r\\\\n      * Converts a date to a string by using the current or specified locale.\\\\r\\\\n      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\\\\r\\\\n      * @param options An object that contains one or more properties that specify comparison options.\\\\r\\\\n      */\\\\r\\\\n    toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Converts a time to a string by using the current or specified locale.\\\\r\\\\n      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\\\\r\\\\n      * @param options An object that contains one or more properties that specify comparison options.\\\\r\\\\n      */\\\\r\\\\n    toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2015.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/// <reference lib=\\\\\\\"es5\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2015.core\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2015.collection\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2015.generator\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2015.promise\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2015.iterable\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2015.proxy\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2015.reflect\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2015.symbol\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2015.symbol.wellknown\\\\\\\" />\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2016.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/// <reference lib=\\\\\\\"es2015\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2016.array.include\\\\\\\" />\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2017.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/// <reference lib=\\\\\\\"es2016\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2017.object\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2017.sharedmemory\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2017.string\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2017.intl\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2017.typedarrays\\\\\\\" />\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2015.core.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ninterface Array<T> {\\\\r\\\\n    /**\\\\r\\\\n     * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n     * otherwise.\\\\r\\\\n     * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n     * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n     * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n     * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n     * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n     */\\\\r\\\\n    find<S extends T>(predicate: (this: void, value: T, index: number, obj: T[]) => value is S, thisArg?: any): S | undefined;\\\\r\\\\n    find(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n     * otherwise.\\\\r\\\\n     * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n     * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n     * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n     * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n     */\\\\r\\\\n    findIndex(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the this object after filling the section identified by start and end with value\\\\r\\\\n     * @param value value to fill array section with\\\\r\\\\n     * @param start index to start filling the array at. If start is negative, it is treated as\\\\r\\\\n     * length+start where length is the length of the array.\\\\r\\\\n     * @param end index to stop filling the array at. If end is negative, it is treated as\\\\r\\\\n     * length+end.\\\\r\\\\n     */\\\\r\\\\n    fill(value: T, start?: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the this object after copying a section of the array identified by start and end\\\\r\\\\n     * to the same array starting at position target\\\\r\\\\n     * @param target If target is negative, it is treated as length+target where length is the\\\\r\\\\n     * length of the array.\\\\r\\\\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\\\\r\\\\n     * is treated as length+end.\\\\r\\\\n     * @param end If not specified, length of the this object is used as its default value.\\\\r\\\\n     */\\\\r\\\\n    copyWithin(target: number, start: number, end?: number): this;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ArrayConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an array-like object.\\\\r\\\\n     * @param arrayLike An array-like object to convert to an array.\\\\r\\\\n     */\\\\r\\\\n    from<T>(arrayLike: ArrayLike<T>): T[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an iterable object.\\\\r\\\\n     * @param arrayLike An array-like object to convert to an array.\\\\r\\\\n     * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n     * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n     */\\\\r\\\\n    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a new array from a set of elements.\\\\r\\\\n     * @param items A set of elements to include in the new array object.\\\\r\\\\n     */\\\\r\\\\n    of<T>(...items: T[]): T[];\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface DateConstructor {\\\\r\\\\n    new (value: number | string | Date): Date;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Function {\\\\r\\\\n    /**\\\\r\\\\n     * Returns the name of the function. Function names are read-only and can not be changed.\\\\r\\\\n     */\\\\r\\\\n    readonly name: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Math {\\\\r\\\\n    /**\\\\r\\\\n     * Returns the number of leading zero bits in the 32-bit binary representation of a number.\\\\r\\\\n     * @param x A numeric expression.\\\\r\\\\n     */\\\\r\\\\n    clz32(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the result of 32-bit multiplication of two numbers.\\\\r\\\\n     * @param x First number\\\\r\\\\n     * @param y Second number\\\\r\\\\n     */\\\\r\\\\n    imul(x: number, y: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the sign of the x, indicating whether x is positive, negative or zero.\\\\r\\\\n     * @param x The numeric expression to test\\\\r\\\\n     */\\\\r\\\\n    sign(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the base 10 logarithm of a number.\\\\r\\\\n     * @param x A numeric expression.\\\\r\\\\n     */\\\\r\\\\n    log10(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the base 2 logarithm of a number.\\\\r\\\\n     * @param x A numeric expression.\\\\r\\\\n     */\\\\r\\\\n    log2(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the natural logarithm of 1 + x.\\\\r\\\\n     * @param x A numeric expression.\\\\r\\\\n     */\\\\r\\\\n    log1p(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the result of (e^x - 1), which is an implementation-dependent approximation to\\\\r\\\\n     * subtracting 1 from the exponential function of x (e raised to the power of x, where e\\\\r\\\\n     * is the base of the natural logarithms).\\\\r\\\\n     * @param x A numeric expression.\\\\r\\\\n     */\\\\r\\\\n    expm1(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the hyperbolic cosine of a number.\\\\r\\\\n     * @param x A numeric expression that contains an angle measured in radians.\\\\r\\\\n     */\\\\r\\\\n    cosh(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the hyperbolic sine of a number.\\\\r\\\\n     * @param x A numeric expression that contains an angle measured in radians.\\\\r\\\\n     */\\\\r\\\\n    sinh(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the hyperbolic tangent of a number.\\\\r\\\\n     * @param x A numeric expression that contains an angle measured in radians.\\\\r\\\\n     */\\\\r\\\\n    tanh(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the inverse hyperbolic cosine of a number.\\\\r\\\\n     * @param x A numeric expression that contains an angle measured in radians.\\\\r\\\\n     */\\\\r\\\\n    acosh(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the inverse hyperbolic sine of a number.\\\\r\\\\n     * @param x A numeric expression that contains an angle measured in radians.\\\\r\\\\n     */\\\\r\\\\n    asinh(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the inverse hyperbolic tangent of a number.\\\\r\\\\n     * @param x A numeric expression that contains an angle measured in radians.\\\\r\\\\n     */\\\\r\\\\n    atanh(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the square root of the sum of squares of its arguments.\\\\r\\\\n     * @param values Values to compute the square root for.\\\\r\\\\n     *     If no arguments are passed, the result is +0.\\\\r\\\\n     *     If there is only one argument, the result is the absolute value.\\\\r\\\\n     *     If any argument is +Infinity or -Infinity, the result is +Infinity.\\\\r\\\\n     *     If any argument is NaN, the result is NaN.\\\\r\\\\n     *     If all arguments are either +0 or −0, the result is +0.\\\\r\\\\n     */\\\\r\\\\n    hypot(...values: number[]): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the integral part of the a numeric expression, x, removing any fractional digits.\\\\r\\\\n     * If x is already an integer, the result is x.\\\\r\\\\n     * @param x A numeric expression.\\\\r\\\\n     */\\\\r\\\\n    trunc(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the nearest single precision float representation of a number.\\\\r\\\\n     * @param x A numeric expression.\\\\r\\\\n     */\\\\r\\\\n    fround(x: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an implementation-dependent approximation to the cube root of number.\\\\r\\\\n     * @param x A numeric expression.\\\\r\\\\n     */\\\\r\\\\n    cbrt(x: number): number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface NumberConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1\\\\r\\\\n     * that is representable as a Number value, which is approximately:\\\\r\\\\n     * 2.2204460492503130808472633361816 x 10‍−‍16.\\\\r\\\\n     */\\\\r\\\\n    readonly EPSILON: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns true if passed value is finite.\\\\r\\\\n     * Unlike the global isFinite, Number.isFinite doesn't forcibly convert the parameter to a\\\\r\\\\n     * number. Only finite values of the type number, result in true.\\\\r\\\\n     * @param number A numeric value.\\\\r\\\\n     */\\\\r\\\\n    isFinite(number: number): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns true if the value passed is an integer, false otherwise.\\\\r\\\\n     * @param number A numeric value.\\\\r\\\\n     */\\\\r\\\\n    isInteger(number: number): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a\\\\r\\\\n     * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter\\\\r\\\\n     * to a number. Only values of the type number, that are also NaN, result in true.\\\\r\\\\n     * @param number A numeric value.\\\\r\\\\n     */\\\\r\\\\n    isNaN(number: number): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns true if the value passed is a safe integer.\\\\r\\\\n     * @param number A numeric value.\\\\r\\\\n     */\\\\r\\\\n    isSafeInteger(number: number): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The value of the largest integer n such that n and n + 1 are both exactly representable as\\\\r\\\\n     * a Number value.\\\\r\\\\n     * The value of Number.MAX_SAFE_INTEGER is 9007199254740991 2^53 − 1.\\\\r\\\\n     */\\\\r\\\\n    readonly MAX_SAFE_INTEGER: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The value of the smallest integer n such that n and n − 1 are both exactly representable as\\\\r\\\\n     * a Number value.\\\\r\\\\n     * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).\\\\r\\\\n     */\\\\r\\\\n    readonly MIN_SAFE_INTEGER: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Converts a string to a floating-point number.\\\\r\\\\n     * @param string A string that contains a floating-point number.\\\\r\\\\n     */\\\\r\\\\n    parseFloat(string: string): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Converts A string to an integer.\\\\r\\\\n     * @param s A string to convert into a number.\\\\r\\\\n     * @param radix A value between 2 and 36 that specifies the base of the number in numString.\\\\r\\\\n     * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\\\\r\\\\n     * All other strings are considered decimal.\\\\r\\\\n     */\\\\r\\\\n    parseInt(string: string, radix?: number): number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ObjectConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\\\\r\\\\n     * target object. Returns the target object.\\\\r\\\\n     * @param target The target object to copy to.\\\\r\\\\n     * @param source The source object from which to copy properties.\\\\r\\\\n     */\\\\r\\\\n    assign<T, U>(target: T, source: U): T & U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\\\\r\\\\n     * target object. Returns the target object.\\\\r\\\\n     * @param target The target object to copy to.\\\\r\\\\n     * @param source1 The first source object from which to copy properties.\\\\r\\\\n     * @param source2 The second source object from which to copy properties.\\\\r\\\\n     */\\\\r\\\\n    assign<T, U, V>(target: T, source1: U, source2: V): T & U & V;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\\\\r\\\\n     * target object. Returns the target object.\\\\r\\\\n     * @param target The target object to copy to.\\\\r\\\\n     * @param source1 The first source object from which to copy properties.\\\\r\\\\n     * @param source2 The second source object from which to copy properties.\\\\r\\\\n     * @param source3 The third source object from which to copy properties.\\\\r\\\\n     */\\\\r\\\\n    assign<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\\\\r\\\\n     * target object. Returns the target object.\\\\r\\\\n     * @param target The target object to copy to.\\\\r\\\\n     * @param sources One or more source objects from which to copy properties\\\\r\\\\n     */\\\\r\\\\n    assign(target: object, ...sources: any[]): any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of all symbol properties found directly on object o.\\\\r\\\\n     * @param o Object to retrieve the symbols from.\\\\r\\\\n     */\\\\r\\\\n    getOwnPropertySymbols(o: any): symbol[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the names of the enumerable string properties and methods of an object.\\\\r\\\\n      * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\\\\r\\\\n      */\\\\r\\\\n    keys(o: {}): string[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns true if the values are the same value, false otherwise.\\\\r\\\\n     * @param value1 The first value.\\\\r\\\\n     * @param value2 The second value.\\\\r\\\\n     */\\\\r\\\\n    is(value1: any, value2: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the prototype of a specified object o to  object proto or null. Returns the object o.\\\\r\\\\n     * @param o The object to change its prototype.\\\\r\\\\n     * @param proto The value of the new prototype or null.\\\\r\\\\n     */\\\\r\\\\n    setPrototypeOf(o: any, proto: object | null): any;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ReadonlyArray<T> {\\\\r\\\\n    /**\\\\r\\\\n     * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n     * otherwise.\\\\r\\\\n     * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n     * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n     * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n     * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n     * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n     */\\\\r\\\\n    find<S extends T>(predicate: (this: void, value: T, index: number, obj: ReadonlyArray<T>) => value is S, thisArg?: any): S | undefined;\\\\r\\\\n    find(predicate: (value: T, index: number, obj: ReadonlyArray<T>) => unknown, thisArg?: any): T | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n     * otherwise.\\\\r\\\\n     * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n     * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n     * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n     * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n     */\\\\r\\\\n    findIndex(predicate: (value: T, index: number, obj: ReadonlyArray<T>) => unknown, thisArg?: any): number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface RegExp {\\\\r\\\\n    /**\\\\r\\\\n     * Returns a string indicating the flags of the regular expression in question. This field is read-only.\\\\r\\\\n     * The characters in this string are sequenced and concatenated in the following order:\\\\r\\\\n     *\\\\r\\\\n     *    - \\\\\\\"g\\\\\\\" for global\\\\r\\\\n     *    - \\\\\\\"i\\\\\\\" for ignoreCase\\\\r\\\\n     *    - \\\\\\\"m\\\\\\\" for multiline\\\\r\\\\n     *    - \\\\\\\"u\\\\\\\" for unicode\\\\r\\\\n     *    - \\\\\\\"y\\\\\\\" for sticky\\\\r\\\\n     *\\\\r\\\\n     * If no flags are set, the value is the empty string.\\\\r\\\\n     */\\\\r\\\\n    readonly flags: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a Boolean value indicating the state of the sticky flag (y) used with a regular\\\\r\\\\n     * expression. Default is false. Read-only.\\\\r\\\\n     */\\\\r\\\\n    readonly sticky: boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular\\\\r\\\\n     * expression. Default is false. Read-only.\\\\r\\\\n     */\\\\r\\\\n    readonly unicode: boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface RegExpConstructor {\\\\r\\\\n    new (pattern: RegExp | string, flags?: string): RegExp;\\\\r\\\\n    (pattern: RegExp | string, flags?: string): RegExp;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface String {\\\\r\\\\n    /**\\\\r\\\\n     * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\\\\r\\\\n     * value of the UTF-16 encoded code point starting at the string element at position pos in\\\\r\\\\n     * the String resulting from converting this object to a String.\\\\r\\\\n     * If there is no element at that position, the result is undefined.\\\\r\\\\n     * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.\\\\r\\\\n     */\\\\r\\\\n    codePointAt(pos: number): number | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns true if searchString appears as a substring of the result of converting this\\\\r\\\\n     * object to a String, at one or more positions that are\\\\r\\\\n     * greater than or equal to position; otherwise, returns false.\\\\r\\\\n     * @param searchString search string\\\\r\\\\n     * @param position If position is undefined, 0 is assumed, so as to search all of the String.\\\\r\\\\n     */\\\\r\\\\n    includes(searchString: string, position?: number): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns true if the sequence of elements of searchString converted to a String is the\\\\r\\\\n     * same as the corresponding elements of this object (converted to a String) starting at\\\\r\\\\n     * endPosition – length(this). Otherwise returns false.\\\\r\\\\n     */\\\\r\\\\n    endsWith(searchString: string, endPosition?: number): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the String value result of normalizing the string into the normalization form\\\\r\\\\n     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\\\\r\\\\n     * @param form Applicable values: \\\\\\\"NFC\\\\\\\", \\\\\\\"NFD\\\\\\\", \\\\\\\"NFKC\\\\\\\", or \\\\\\\"NFKD\\\\\\\", If not specified default\\\\r\\\\n     * is \\\\\\\"NFC\\\\\\\"\\\\r\\\\n     */\\\\r\\\\n    normalize(form: \\\\\\\"NFC\\\\\\\" | \\\\\\\"NFD\\\\\\\" | \\\\\\\"NFKC\\\\\\\" | \\\\\\\"NFKD\\\\\\\"): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the String value result of normalizing the string into the normalization form\\\\r\\\\n     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\\\\r\\\\n     * @param form Applicable values: \\\\\\\"NFC\\\\\\\", \\\\\\\"NFD\\\\\\\", \\\\\\\"NFKC\\\\\\\", or \\\\\\\"NFKD\\\\\\\", If not specified default\\\\r\\\\n     * is \\\\\\\"NFC\\\\\\\"\\\\r\\\\n     */\\\\r\\\\n    normalize(form?: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a String value that is made from count copies appended together. If count is 0,\\\\r\\\\n     * the empty string is returned.\\\\r\\\\n     * @param count number of copies to append\\\\r\\\\n     */\\\\r\\\\n    repeat(count: number): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns true if the sequence of elements of searchString converted to a String is the\\\\r\\\\n     * same as the corresponding elements of this object (converted to a String) starting at\\\\r\\\\n     * position. Otherwise returns false.\\\\r\\\\n     */\\\\r\\\\n    startsWith(searchString: string, position?: number): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an <a> HTML anchor element and sets the name attribute to the text value\\\\r\\\\n     * @param name\\\\r\\\\n     */\\\\r\\\\n    anchor(name: string): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a <big> HTML element */\\\\r\\\\n    big(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a <blink> HTML element */\\\\r\\\\n    blink(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a <b> HTML element */\\\\r\\\\n    bold(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a <tt> HTML element */\\\\r\\\\n    fixed(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a <font> HTML element and sets the color attribute value */\\\\r\\\\n    fontcolor(color: string): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a <font> HTML element and sets the size attribute value */\\\\r\\\\n    fontsize(size: number): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a <font> HTML element and sets the size attribute value */\\\\r\\\\n    fontsize(size: string): string;\\\\r\\\\n\\\\r\\\\n    /** Returns an <i> HTML element */\\\\r\\\\n    italics(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns an <a> HTML element and sets the href attribute value */\\\\r\\\\n    link(url: string): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a <small> HTML element */\\\\r\\\\n    small(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a <strike> HTML element */\\\\r\\\\n    strike(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a <sub> HTML element */\\\\r\\\\n    sub(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a <sup> HTML element */\\\\r\\\\n    sup(): string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface StringConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * Return the String value whose elements are, in order, the elements in the List elements.\\\\r\\\\n     * If length is 0, the empty string is returned.\\\\r\\\\n     */\\\\r\\\\n    fromCodePoint(...codePoints: number[]): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * String.raw is intended for use as a tag function of a Tagged Template String. When called\\\\r\\\\n     * as such the first argument will be a well formed template call site object and the rest\\\\r\\\\n     * parameter will contain the substitution values.\\\\r\\\\n     * @param template A well-formed template string call site representation.\\\\r\\\\n     * @param substitutions A set of substitution values.\\\\r\\\\n     */\\\\r\\\\n    raw(template: TemplateStringsArray, ...substitutions: any[]): string;\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2015.collection.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ninterface Map<K, V> {\\\\r\\\\n    clear(): void;\\\\r\\\\n    delete(key: K): boolean;\\\\r\\\\n    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void;\\\\r\\\\n    get(key: K): V | undefined;\\\\r\\\\n    has(key: K): boolean;\\\\r\\\\n    set(key: K, value: V): this;\\\\r\\\\n    readonly size: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface MapConstructor {\\\\r\\\\n    new(): Map<any, any>;\\\\r\\\\n    new<K, V>(entries?: ReadonlyArray<readonly [K, V]> | null): Map<K, V>;\\\\r\\\\n    readonly prototype: Map<any, any>;\\\\r\\\\n}\\\\r\\\\ndeclare var Map: MapConstructor;\\\\r\\\\n\\\\r\\\\ninterface ReadonlyMap<K, V> {\\\\r\\\\n    forEach(callbackfn: (value: V, key: K, map: ReadonlyMap<K, V>) => void, thisArg?: any): void;\\\\r\\\\n    get(key: K): V | undefined;\\\\r\\\\n    has(key: K): boolean;\\\\r\\\\n    readonly size: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface WeakMap<K extends object, V> {\\\\r\\\\n    delete(key: K): boolean;\\\\r\\\\n    get(key: K): V | undefined;\\\\r\\\\n    has(key: K): boolean;\\\\r\\\\n    set(key: K, value: V): this;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface WeakMapConstructor {\\\\r\\\\n    new <K extends object = object, V = any>(entries?: ReadonlyArray<[K, V]> | null): WeakMap<K, V>;\\\\r\\\\n    readonly prototype: WeakMap<object, any>;\\\\r\\\\n}\\\\r\\\\ndeclare var WeakMap: WeakMapConstructor;\\\\r\\\\n\\\\r\\\\ninterface Set<T> {\\\\r\\\\n    add(value: T): this;\\\\r\\\\n    clear(): void;\\\\r\\\\n    delete(value: T): boolean;\\\\r\\\\n    forEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;\\\\r\\\\n    has(value: T): boolean;\\\\r\\\\n    readonly size: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface SetConstructor {\\\\r\\\\n    new <T = any>(values?: ReadonlyArray<T> | null): Set<T>;\\\\r\\\\n    readonly prototype: Set<any>;\\\\r\\\\n}\\\\r\\\\ndeclare var Set: SetConstructor;\\\\r\\\\n\\\\r\\\\ninterface ReadonlySet<T> {\\\\r\\\\n    forEach(callbackfn: (value: T, value2: T, set: ReadonlySet<T>) => void, thisArg?: any): void;\\\\r\\\\n    has(value: T): boolean;\\\\r\\\\n    readonly size: number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface WeakSet<T extends object> {\\\\r\\\\n    add(value: T): this;\\\\r\\\\n    delete(value: T): boolean;\\\\r\\\\n    has(value: T): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface WeakSetConstructor {\\\\r\\\\n    new <T extends object = object>(values?: ReadonlyArray<T> | null): WeakSet<T>;\\\\r\\\\n    readonly prototype: WeakSet<object>;\\\\r\\\\n}\\\\r\\\\ndeclare var WeakSet: WeakSetConstructor;\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2015.generator.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/// <reference lib=\\\\\\\"es2015.iterable\\\\\\\" />\\\\r\\\\n\\\\r\\\\ninterface Generator<T = unknown, TReturn = any, TNext = unknown> extends Iterator<T, TReturn, TNext> {\\\\r\\\\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\\\\r\\\\n    next(...args: [] | [TNext]): IteratorResult<T, TReturn>;\\\\r\\\\n    return(value: TReturn): IteratorResult<T, TReturn>;\\\\r\\\\n    throw(e: any): IteratorResult<T, TReturn>;\\\\r\\\\n    [Symbol.iterator](): Generator<T, TReturn, TNext>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface GeneratorFunction {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new Generator object.\\\\r\\\\n     * @param args A list of arguments the function accepts.\\\\r\\\\n     */\\\\r\\\\n    new (...args: any[]): Generator;\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new Generator object.\\\\r\\\\n     * @param args A list of arguments the function accepts.\\\\r\\\\n     */\\\\r\\\\n    (...args: any[]): Generator;\\\\r\\\\n    /**\\\\r\\\\n     * The length of the arguments.\\\\r\\\\n     */\\\\r\\\\n    readonly length: number;\\\\r\\\\n    /**\\\\r\\\\n     * Returns the name of the function.\\\\r\\\\n     */\\\\r\\\\n    readonly name: string;\\\\r\\\\n    /**\\\\r\\\\n     * A reference to the prototype.\\\\r\\\\n     */\\\\r\\\\n    readonly prototype: Generator;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface GeneratorFunctionConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new Generator function.\\\\r\\\\n     * @param args A list of arguments the function accepts.\\\\r\\\\n     */\\\\r\\\\n    new (...args: string[]): GeneratorFunction;\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new Generator function.\\\\r\\\\n     * @param args A list of arguments the function accepts.\\\\r\\\\n     */\\\\r\\\\n    (...args: string[]): GeneratorFunction;\\\\r\\\\n    /**\\\\r\\\\n     * The length of the arguments.\\\\r\\\\n     */\\\\r\\\\n    readonly length: number;\\\\r\\\\n    /**\\\\r\\\\n     * Returns the name of the function.\\\\r\\\\n     */\\\\r\\\\n    readonly name: string;\\\\r\\\\n    /**\\\\r\\\\n     * A reference to the prototype.\\\\r\\\\n     */\\\\r\\\\n    readonly prototype: GeneratorFunction;\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2015.iterable.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/// <reference lib=\\\\\\\"es2015.symbol\\\\\\\" />\\\\r\\\\n\\\\r\\\\ninterface SymbolConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * A method that returns the default iterator for an object. Called by the semantics of the\\\\r\\\\n     * for-of statement.\\\\r\\\\n     */\\\\r\\\\n    readonly iterator: symbol;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface IteratorYieldResult<TYield> {\\\\r\\\\n    done?: false;\\\\r\\\\n    value: TYield;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface IteratorReturnResult<TReturn> {\\\\r\\\\n    done: true;\\\\r\\\\n    value: TReturn;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ntype IteratorResult<T, TReturn = any> = IteratorYieldResult<T> | IteratorReturnResult<TReturn>;\\\\r\\\\n\\\\r\\\\ninterface Iterator<T, TReturn = any, TNext = undefined> {\\\\r\\\\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\\\\r\\\\n    next(...args: [] | [TNext]): IteratorResult<T, TReturn>;\\\\r\\\\n    return?(value?: TReturn): IteratorResult<T, TReturn>;\\\\r\\\\n    throw?(e?: any): IteratorResult<T, TReturn>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Iterable<T> {\\\\r\\\\n    [Symbol.iterator](): Iterator<T>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface IterableIterator<T> extends Iterator<T> {\\\\r\\\\n    [Symbol.iterator](): IterableIterator<T>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Array<T> {\\\\r\\\\n    /** Iterator */\\\\r\\\\n    [Symbol.iterator](): IterableIterator<T>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of key, value pairs for every entry in the array\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[number, T]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of keys in the array\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of values in the array\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<T>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ArrayConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an iterable object.\\\\r\\\\n     * @param iterable An iterable object to convert to an array.\\\\r\\\\n     */\\\\r\\\\n    from<T>(iterable: Iterable<T> | ArrayLike<T>): T[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an iterable object.\\\\r\\\\n     * @param iterable An iterable object to convert to an array.\\\\r\\\\n     * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n     * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n     */\\\\r\\\\n    from<T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ReadonlyArray<T> {\\\\r\\\\n    /** Iterator of values in the array. */\\\\r\\\\n    [Symbol.iterator](): IterableIterator<T>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of key, value pairs for every entry in the array\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[number, T]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of keys in the array\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of values in the array\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<T>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface IArguments {\\\\r\\\\n    /** Iterator */\\\\r\\\\n    [Symbol.iterator](): IterableIterator<any>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Map<K, V> {\\\\r\\\\n    /** Returns an iterable of entries in the map. */\\\\r\\\\n    [Symbol.iterator](): IterableIterator<[K, V]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of key, value pairs for every entry in the map.\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[K, V]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of keys in the map\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<K>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of values in the map\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<V>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ReadonlyMap<K, V> {\\\\r\\\\n    /** Returns an iterable of entries in the map. */\\\\r\\\\n    [Symbol.iterator](): IterableIterator<[K, V]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of key, value pairs for every entry in the map.\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[K, V]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of keys in the map\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<K>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of values in the map\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<V>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface MapConstructor {\\\\r\\\\n    new <K, V>(iterable: Iterable<readonly [K, V]>): Map<K, V>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface WeakMap<K extends object, V> { }\\\\r\\\\n\\\\r\\\\ninterface WeakMapConstructor {\\\\r\\\\n    new <K extends object, V>(iterable: Iterable<[K, V]>): WeakMap<K, V>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Set<T> {\\\\r\\\\n    /** Iterates over values in the set. */\\\\r\\\\n    [Symbol.iterator](): IterableIterator<T>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[T, T]>;\\\\r\\\\n    /**\\\\r\\\\n     * Despite its name, returns an iterable of the values in the set,\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<T>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of values in the set.\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<T>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ReadonlySet<T> {\\\\r\\\\n    /** Iterates over values in the set. */\\\\r\\\\n    [Symbol.iterator](): IterableIterator<T>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[T, T]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Despite its name, returns an iterable of the values in the set,\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<T>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an iterable of values in the set.\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<T>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface SetConstructor {\\\\r\\\\n    new <T>(iterable?: Iterable<T> | null): Set<T>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface WeakSet<T extends object> { }\\\\r\\\\n\\\\r\\\\ninterface WeakSetConstructor {\\\\r\\\\n    new <T extends object = object>(iterable: Iterable<T>): WeakSet<T>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Promise<T> { }\\\\r\\\\n\\\\r\\\\ninterface PromiseConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\\\\r\\\\n     * resolve, or rejected when any Promise is rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    all<TAll>(values: Iterable<TAll | PromiseLike<TAll>>): Promise<TAll[]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\\\\r\\\\n     * or rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace Reflect {\\\\r\\\\n    function enumerate(target: object): IterableIterator<any>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface String {\\\\r\\\\n    /** Iterator */\\\\r\\\\n    [Symbol.iterator](): IterableIterator<string>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int8Array {\\\\r\\\\n    [Symbol.iterator](): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of key, value pairs for every entry in the array\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[number, number]>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of keys in the array\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of values in the array\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<number>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int8ArrayConstructor {\\\\r\\\\n    new (elements: Iterable<number>): Int8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an array-like or iterable object.\\\\r\\\\n     * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n     * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n     * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n     */\\\\r\\\\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint8Array {\\\\r\\\\n    [Symbol.iterator](): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of key, value pairs for every entry in the array\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[number, number]>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of keys in the array\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of values in the array\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<number>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint8ArrayConstructor {\\\\r\\\\n    new (elements: Iterable<number>): Uint8Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an array-like or iterable object.\\\\r\\\\n     * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n     * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n     * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n     */\\\\r\\\\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint8ClampedArray {\\\\r\\\\n    [Symbol.iterator](): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of key, value pairs for every entry in the array\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[number, number]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of keys in the array\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of values in the array\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<number>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint8ClampedArrayConstructor {\\\\r\\\\n    new (elements: Iterable<number>): Uint8ClampedArray;\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an array-like or iterable object.\\\\r\\\\n     * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n     * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n     * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n     */\\\\r\\\\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int16Array {\\\\r\\\\n    [Symbol.iterator](): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of key, value pairs for every entry in the array\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[number, number]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of keys in the array\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of values in the array\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<number>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int16ArrayConstructor {\\\\r\\\\n    new (elements: Iterable<number>): Int16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an array-like or iterable object.\\\\r\\\\n     * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n     * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n     * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n     */\\\\r\\\\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int16Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint16Array {\\\\r\\\\n    [Symbol.iterator](): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of key, value pairs for every entry in the array\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[number, number]>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of keys in the array\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of values in the array\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<number>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint16ArrayConstructor {\\\\r\\\\n    new (elements: Iterable<number>): Uint16Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an array-like or iterable object.\\\\r\\\\n     * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n     * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n     * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n     */\\\\r\\\\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int32Array {\\\\r\\\\n    [Symbol.iterator](): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of key, value pairs for every entry in the array\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[number, number]>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of keys in the array\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of values in the array\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<number>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int32ArrayConstructor {\\\\r\\\\n    new (elements: Iterable<number>): Int32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an array-like or iterable object.\\\\r\\\\n     * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n     * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n     * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n     */\\\\r\\\\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint32Array {\\\\r\\\\n    [Symbol.iterator](): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of key, value pairs for every entry in the array\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[number, number]>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of keys in the array\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of values in the array\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<number>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint32ArrayConstructor {\\\\r\\\\n    new (elements: Iterable<number>): Uint32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an array-like or iterable object.\\\\r\\\\n     * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n     * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n     * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n     */\\\\r\\\\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Float32Array {\\\\r\\\\n    [Symbol.iterator](): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of key, value pairs for every entry in the array\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[number, number]>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of keys in the array\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of values in the array\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<number>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Float32ArrayConstructor {\\\\r\\\\n    new (elements: Iterable<number>): Float32Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an array-like or iterable object.\\\\r\\\\n     * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n     * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n     * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n     */\\\\r\\\\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Float64Array {\\\\r\\\\n    [Symbol.iterator](): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of key, value pairs for every entry in the array\\\\r\\\\n     */\\\\r\\\\n    entries(): IterableIterator<[number, number]>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of keys in the array\\\\r\\\\n     */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n    /**\\\\r\\\\n     * Returns an list of values in the array\\\\r\\\\n     */\\\\r\\\\n    values(): IterableIterator<number>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Float64ArrayConstructor {\\\\r\\\\n    new (elements: Iterable<number>): Float64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates an array from an array-like or iterable object.\\\\r\\\\n     * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n     * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n     * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n     */\\\\r\\\\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array;\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2015.promise.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ninterface PromiseConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * A reference to the prototype.\\\\r\\\\n     */\\\\r\\\\n    readonly prototype: Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new Promise.\\\\r\\\\n     * @param executor A callback used to initialize the promise. This callback is passed two arguments:\\\\r\\\\n     * a resolve callback used to resolve the promise with a value or the result of another promise,\\\\r\\\\n     * and a reject callback used to reject the promise with a provided reason or error.\\\\r\\\\n     */\\\\r\\\\n    new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\\\\r\\\\n     * resolve, or rejected when any Promise is rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>, T10 | PromiseLike<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\\\\r\\\\n     * resolve, or rejected when any Promise is rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\\\\r\\\\n     * resolve, or rejected when any Promise is rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    all<T1, T2, T3, T4, T5, T6, T7, T8>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\\\\r\\\\n     * resolve, or rejected when any Promise is rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    all<T1, T2, T3, T4, T5, T6, T7>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\\\\r\\\\n     * resolve, or rejected when any Promise is rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    all<T1, T2, T3, T4, T5, T6>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\\\\r\\\\n     * resolve, or rejected when any Promise is rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    all<T1, T2, T3, T4, T5>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>]): Promise<[T1, T2, T3, T4, T5]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\\\\r\\\\n     * resolve, or rejected when any Promise is rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    all<T1, T2, T3, T4>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>]): Promise<[T1, T2, T3, T4]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\\\\r\\\\n     * resolve, or rejected when any Promise is rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    all<T1, T2, T3>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]): Promise<[T1, T2, T3]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\\\\r\\\\n     * resolve, or rejected when any Promise is rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    all<T1, T2>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): Promise<[T1, T2]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\\\\r\\\\n     * resolve, or rejected when any Promise is rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    all<T>(values: (T | PromiseLike<T>)[]): Promise<T[]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\\\\r\\\\n     * or rejected.\\\\r\\\\n     * @param values An array of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    race<T>(values: T[]): Promise<T extends PromiseLike<infer U> ? U : T>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\\\\r\\\\n     * or rejected.\\\\r\\\\n     * @param values An iterable of Promises.\\\\r\\\\n     * @returns A new Promise.\\\\r\\\\n     */\\\\r\\\\n    race<T>(values: Iterable<T>): Promise<T extends PromiseLike<infer U> ? U : T>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new rejected promise for the provided reason.\\\\r\\\\n     * @param reason The reason the promise was rejected.\\\\r\\\\n     * @returns A new rejected Promise.\\\\r\\\\n     */\\\\r\\\\n    reject<T = never>(reason?: any): Promise<T>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new resolved promise for the provided value.\\\\r\\\\n     * @param value A promise.\\\\r\\\\n     * @returns A promise whose internal state matches the provided promise.\\\\r\\\\n     */\\\\r\\\\n    resolve<T>(value: T | PromiseLike<T>): Promise<T>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new resolved promise .\\\\r\\\\n     * @returns A resolved promise.\\\\r\\\\n     */\\\\r\\\\n    resolve(): Promise<void>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var Promise: PromiseConstructor;\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2015.proxy.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ninterface ProxyHandler<T extends object> {\\\\r\\\\n    getPrototypeOf? (target: T): object | null;\\\\r\\\\n    setPrototypeOf? (target: T, v: any): boolean;\\\\r\\\\n    isExtensible? (target: T): boolean;\\\\r\\\\n    preventExtensions? (target: T): boolean;\\\\r\\\\n    getOwnPropertyDescriptor? (target: T, p: PropertyKey): PropertyDescriptor | undefined;\\\\r\\\\n    has? (target: T, p: PropertyKey): boolean;\\\\r\\\\n    get? (target: T, p: PropertyKey, receiver: any): any;\\\\r\\\\n    set? (target: T, p: PropertyKey, value: any, receiver: any): boolean;\\\\r\\\\n    deleteProperty? (target: T, p: PropertyKey): boolean;\\\\r\\\\n    defineProperty? (target: T, p: PropertyKey, attributes: PropertyDescriptor): boolean;\\\\r\\\\n    enumerate? (target: T): PropertyKey[];\\\\r\\\\n    ownKeys? (target: T): PropertyKey[];\\\\r\\\\n    apply? (target: T, thisArg: any, argArray?: any): any;\\\\r\\\\n    construct? (target: T, argArray: any, newTarget?: any): object;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ProxyConstructor {\\\\r\\\\n    revocable<T extends object>(target: T, handler: ProxyHandler<T>): { proxy: T; revoke: () => void; };\\\\r\\\\n    new <T extends object>(target: T, handler: ProxyHandler<T>): T;\\\\r\\\\n}\\\\r\\\\ndeclare var Proxy: ProxyConstructor;\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2015.reflect.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ndeclare namespace Reflect {\\\\r\\\\n    function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;\\\\r\\\\n    function construct(target: Function, argumentsList: ArrayLike<any>, newTarget?: any): any;\\\\r\\\\n    function defineProperty(target: object, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;\\\\r\\\\n    function deleteProperty(target: object, propertyKey: PropertyKey): boolean;\\\\r\\\\n    function get(target: object, propertyKey: PropertyKey, receiver?: any): any;\\\\r\\\\n    function getOwnPropertyDescriptor(target: object, propertyKey: PropertyKey): PropertyDescriptor | undefined;\\\\r\\\\n    function getPrototypeOf(target: object): object;\\\\r\\\\n    function has(target: object, propertyKey: PropertyKey): boolean;\\\\r\\\\n    function isExtensible(target: object): boolean;\\\\r\\\\n    function ownKeys(target: object): PropertyKey[];\\\\r\\\\n    function preventExtensions(target: object): boolean;\\\\r\\\\n    function set(target: object, propertyKey: PropertyKey, value: any, receiver?: any): boolean;\\\\r\\\\n    function setPrototypeOf(target: object, proto: any): boolean;\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2015.symbol.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ninterface SymbolConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * A reference to the prototype.\\\\r\\\\n     */\\\\r\\\\n    readonly prototype: Symbol;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a new unique Symbol value.\\\\r\\\\n     * @param  description Description of the new Symbol object.\\\\r\\\\n     */\\\\r\\\\n    (description?: string | number): symbol;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a Symbol object from the global symbol registry matching the given key if found.\\\\r\\\\n     * Otherwise, returns a new symbol with this key.\\\\r\\\\n     * @param key key to search for.\\\\r\\\\n     */\\\\r\\\\n    for(key: string): symbol;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a key from the global symbol registry matching the given Symbol if found.\\\\r\\\\n     * Otherwise, returns a undefined.\\\\r\\\\n     * @param sym Symbol to find the key for.\\\\r\\\\n     */\\\\r\\\\n    keyFor(sym: symbol): string | undefined;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var Symbol: SymbolConstructor;\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/// <reference lib=\\\\\\\"es2015.symbol\\\\\\\" />\\\\r\\\\n\\\\r\\\\ninterface SymbolConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * A method that determines if a constructor object recognizes an object as one of the\\\\r\\\\n     * constructor’s instances. Called by the semantics of the instanceof operator.\\\\r\\\\n     */\\\\r\\\\n    readonly hasInstance: symbol;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A Boolean value that if true indicates that an object should flatten to its array elements\\\\r\\\\n     * by Array.prototype.concat.\\\\r\\\\n     */\\\\r\\\\n    readonly isConcatSpreadable: symbol;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A regular expression method that matches the regular expression against a string. Called\\\\r\\\\n     * by the String.prototype.match method.\\\\r\\\\n     */\\\\r\\\\n    readonly match: symbol;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A regular expression method that replaces matched substrings of a string. Called by the\\\\r\\\\n     * String.prototype.replace method.\\\\r\\\\n     */\\\\r\\\\n    readonly replace: symbol;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A regular expression method that returns the index within a string that matches the\\\\r\\\\n     * regular expression. Called by the String.prototype.search method.\\\\r\\\\n     */\\\\r\\\\n    readonly search: symbol;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function valued property that is the constructor function that is used to create\\\\r\\\\n     * derived objects.\\\\r\\\\n     */\\\\r\\\\n    readonly species: symbol;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A regular expression method that splits a string at the indices that match the regular\\\\r\\\\n     * expression. Called by the String.prototype.split method.\\\\r\\\\n     */\\\\r\\\\n    readonly split: symbol;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A method that converts an object to a corresponding primitive value.\\\\r\\\\n     * Called by the ToPrimitive abstract operation.\\\\r\\\\n     */\\\\r\\\\n    readonly toPrimitive: symbol;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A String value that is used in the creation of the default string description of an object.\\\\r\\\\n     * Called by the built-in method Object.prototype.toString.\\\\r\\\\n     */\\\\r\\\\n    readonly toStringTag: symbol;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An Object whose own property names are property names that are excluded from the 'with'\\\\r\\\\n     * environment bindings of the associated objects.\\\\r\\\\n     */\\\\r\\\\n    readonly unscopables: symbol;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Symbol {\\\\r\\\\n    readonly [Symbol.toStringTag]: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Array<T> {\\\\r\\\\n    /**\\\\r\\\\n     * Returns an object whose properties have the value 'true'\\\\r\\\\n     * when they will be absent when used in a 'with' statement.\\\\r\\\\n     */\\\\r\\\\n    [Symbol.unscopables](): {\\\\r\\\\n        copyWithin: boolean;\\\\r\\\\n        entries: boolean;\\\\r\\\\n        fill: boolean;\\\\r\\\\n        find: boolean;\\\\r\\\\n        findIndex: boolean;\\\\r\\\\n        keys: boolean;\\\\r\\\\n        values: boolean;\\\\r\\\\n    };\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Date {\\\\r\\\\n    /**\\\\r\\\\n     * Converts a Date object to a string.\\\\r\\\\n     */\\\\r\\\\n    [Symbol.toPrimitive](hint: \\\\\\\"default\\\\\\\"): string;\\\\r\\\\n    /**\\\\r\\\\n     * Converts a Date object to a string.\\\\r\\\\n     */\\\\r\\\\n    [Symbol.toPrimitive](hint: \\\\\\\"string\\\\\\\"): string;\\\\r\\\\n    /**\\\\r\\\\n     * Converts a Date object to a number.\\\\r\\\\n     */\\\\r\\\\n    [Symbol.toPrimitive](hint: \\\\\\\"number\\\\\\\"): number;\\\\r\\\\n    /**\\\\r\\\\n     * Converts a Date object to a string or number.\\\\r\\\\n     *\\\\r\\\\n     * @param hint The strings \\\\\\\"number\\\\\\\", \\\\\\\"string\\\\\\\", or \\\\\\\"default\\\\\\\" to specify what primitive to return.\\\\r\\\\n     *\\\\r\\\\n     * @throws {TypeError} If 'hint' was given something other than \\\\\\\"number\\\\\\\", \\\\\\\"string\\\\\\\", or \\\\\\\"default\\\\\\\".\\\\r\\\\n     * @returns A number if 'hint' was \\\\\\\"number\\\\\\\", a string if 'hint' was \\\\\\\"string\\\\\\\" or \\\\\\\"default\\\\\\\".\\\\r\\\\n     */\\\\r\\\\n    [Symbol.toPrimitive](hint: string): string | number;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Map<K, V> {\\\\r\\\\n    readonly [Symbol.toStringTag]: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface WeakMap<K extends object, V> {\\\\r\\\\n    readonly [Symbol.toStringTag]: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Set<T> {\\\\r\\\\n    readonly [Symbol.toStringTag]: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface WeakSet<T extends object> {\\\\r\\\\n    readonly [Symbol.toStringTag]: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface JSON {\\\\r\\\\n    readonly [Symbol.toStringTag]: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Function {\\\\r\\\\n    /**\\\\r\\\\n     * Determines whether the given value inherits from this function if this function was used\\\\r\\\\n     * as a constructor function.\\\\r\\\\n     *\\\\r\\\\n     * A constructor function can control which objects are recognized as its instances by\\\\r\\\\n     * 'instanceof' by overriding this method.\\\\r\\\\n     */\\\\r\\\\n    [Symbol.hasInstance](value: any): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface GeneratorFunction {\\\\r\\\\n    readonly [Symbol.toStringTag]: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Math {\\\\r\\\\n    readonly [Symbol.toStringTag]: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Promise<T> {\\\\r\\\\n    readonly [Symbol.toStringTag]: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface PromiseConstructor {\\\\r\\\\n    readonly [Symbol.species]: PromiseConstructor;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface RegExp {\\\\r\\\\n    /**\\\\r\\\\n     * Matches a string with this regular expression, and returns an array containing the results of\\\\r\\\\n     * that search.\\\\r\\\\n     * @param string A string to search within.\\\\r\\\\n     */\\\\r\\\\n    [Symbol.match](string: string): RegExpMatchArray | null;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Replaces text in a string, using this regular expression.\\\\r\\\\n     * @param string A String object or string literal whose contents matching against\\\\r\\\\n     *               this regular expression will be replaced\\\\r\\\\n     * @param replaceValue A String object or string literal containing the text to replace for every\\\\r\\\\n     *                     successful match of this regular expression.\\\\r\\\\n     */\\\\r\\\\n    [Symbol.replace](string: string, replaceValue: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Replaces text in a string, using this regular expression.\\\\r\\\\n     * @param string A String object or string literal whose contents matching against\\\\r\\\\n     *               this regular expression will be replaced\\\\r\\\\n     * @param replacer A function that returns the replacement text.\\\\r\\\\n     */\\\\r\\\\n    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Finds the position beginning first substring match in a regular expression search\\\\r\\\\n     * using this regular expression.\\\\r\\\\n     *\\\\r\\\\n     * @param string The string to search within.\\\\r\\\\n     */\\\\r\\\\n    [Symbol.search](string: string): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of substrings that were delimited by strings in the original input that\\\\r\\\\n     * match against this regular expression.\\\\r\\\\n     *\\\\r\\\\n     * If the regular expression contains capturing parentheses, then each time this\\\\r\\\\n     * regular expression matches, the results (including any undefined results) of the\\\\r\\\\n     * capturing parentheses are spliced.\\\\r\\\\n     *\\\\r\\\\n     * @param string string value to split\\\\r\\\\n     * @param limit if not undefined, the output array is truncated so that it contains no more\\\\r\\\\n     * than 'limit' elements.\\\\r\\\\n     */\\\\r\\\\n    [Symbol.split](string: string, limit?: number): string[];\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface RegExpConstructor {\\\\r\\\\n    readonly [Symbol.species]: RegExpConstructor;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface String {\\\\r\\\\n    /**\\\\r\\\\n     * Matches a string an object that supports being matched against, and returns an array containing the results of that search.\\\\r\\\\n     * @param matcher An object that supports being matched against.\\\\r\\\\n     */\\\\r\\\\n    match(matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Replaces text in a string, using an object that supports replacement within a string.\\\\r\\\\n     * @param searchValue A object can search for and replace matches within a string.\\\\r\\\\n     * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\\\\r\\\\n     */\\\\r\\\\n    replace(searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Replaces text in a string, using an object that supports replacement within a string.\\\\r\\\\n     * @param searchValue A object can search for and replace matches within a string.\\\\r\\\\n     * @param replacer A function that returns the replacement text.\\\\r\\\\n     */\\\\r\\\\n    replace(searchValue: { [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string; }, replacer: (substring: string, ...args: any[]) => string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Finds the first substring match in a regular expression search.\\\\r\\\\n     * @param searcher An object which supports searching within a string.\\\\r\\\\n     */\\\\r\\\\n    search(searcher: { [Symbol.search](string: string): number; }): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Split a string into substrings using the specified separator and return them as an array.\\\\r\\\\n     * @param splitter An object that can split a string.\\\\r\\\\n     * @param limit A value used to limit the number of elements returned in the array.\\\\r\\\\n     */\\\\r\\\\n    split(splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[];\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ArrayBuffer {\\\\r\\\\n    readonly [Symbol.toStringTag]: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface DataView {\\\\r\\\\n    readonly [Symbol.toStringTag]: string;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int8Array {\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"Int8Array\\\\\\\";\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint8Array {\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"UInt8Array\\\\\\\";\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint8ClampedArray {\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"Uint8ClampedArray\\\\\\\";\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int16Array {\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"Int16Array\\\\\\\";\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint16Array {\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"Uint16Array\\\\\\\";\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int32Array {\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"Int32Array\\\\\\\";\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint32Array {\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"Uint32Array\\\\\\\";\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Float32Array {\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"Float32Array\\\\\\\";\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Float64Array {\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"Float64Array\\\\\\\";\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ArrayConstructor {\\\\r\\\\n    readonly [Symbol.species]: ArrayConstructor;\\\\r\\\\n}\\\\r\\\\ninterface MapConstructor {\\\\r\\\\n    readonly [Symbol.species]: MapConstructor;\\\\r\\\\n}\\\\r\\\\ninterface SetConstructor {\\\\r\\\\n    readonly [Symbol.species]: SetConstructor;\\\\r\\\\n}\\\\r\\\\ninterface ArrayBufferConstructor {\\\\r\\\\n    readonly [Symbol.species]: ArrayBufferConstructor;\\\\r\\\\n}\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2016.array.include.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ninterface Array<T> {\\\\r\\\\n    /**\\\\r\\\\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n     * @param searchElement The element to search for.\\\\r\\\\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n     */\\\\r\\\\n    includes(searchElement: T, fromIndex?: number): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface ReadonlyArray<T> {\\\\r\\\\n    /**\\\\r\\\\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n     * @param searchElement The element to search for.\\\\r\\\\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n     */\\\\r\\\\n    includes(searchElement: T, fromIndex?: number): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int8Array {\\\\r\\\\n    /**\\\\r\\\\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n     * @param searchElement The element to search for.\\\\r\\\\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n     */\\\\r\\\\n    includes(searchElement: number, fromIndex?: number): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint8Array {\\\\r\\\\n    /**\\\\r\\\\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n     * @param searchElement The element to search for.\\\\r\\\\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n     */\\\\r\\\\n    includes(searchElement: number, fromIndex?: number): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint8ClampedArray {\\\\r\\\\n    /**\\\\r\\\\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n     * @param searchElement The element to search for.\\\\r\\\\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n     */\\\\r\\\\n    includes(searchElement: number, fromIndex?: number): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int16Array {\\\\r\\\\n    /**\\\\r\\\\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n     * @param searchElement The element to search for.\\\\r\\\\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n     */\\\\r\\\\n    includes(searchElement: number, fromIndex?: number): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint16Array {\\\\r\\\\n    /**\\\\r\\\\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n     * @param searchElement The element to search for.\\\\r\\\\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n     */\\\\r\\\\n    includes(searchElement: number, fromIndex?: number): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int32Array {\\\\r\\\\n    /**\\\\r\\\\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n     * @param searchElement The element to search for.\\\\r\\\\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n     */\\\\r\\\\n    includes(searchElement: number, fromIndex?: number): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint32Array {\\\\r\\\\n    /**\\\\r\\\\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n     * @param searchElement The element to search for.\\\\r\\\\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n     */\\\\r\\\\n    includes(searchElement: number, fromIndex?: number): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Float32Array {\\\\r\\\\n    /**\\\\r\\\\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n     * @param searchElement The element to search for.\\\\r\\\\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n     */\\\\r\\\\n    includes(searchElement: number, fromIndex?: number): boolean;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Float64Array {\\\\r\\\\n    /**\\\\r\\\\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n     * @param searchElement The element to search for.\\\\r\\\\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n     */\\\\r\\\\n    includes(searchElement: number, fromIndex?: number): boolean;\\\\r\\\\n}\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2017.object.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ninterface ObjectConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of values of the enumerable properties of an object\\\\r\\\\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\\\\r\\\\n     */\\\\r\\\\n    values<T>(o: { [s: string]: T } |  ArrayLike<T>): T[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of values of the enumerable properties of an object\\\\r\\\\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\\\\r\\\\n     */\\\\r\\\\n    values(o: {}): any[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of key/values of the enumerable properties of an object\\\\r\\\\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\\\\r\\\\n     */\\\\r\\\\n    entries<T>(o: { [s: string]: T } | ArrayLike<T>): [string, T][];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an array of key/values of the enumerable properties of an object\\\\r\\\\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\\\\r\\\\n     */\\\\r\\\\n    entries(o: {}): [string, any][];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns an object containing all own property descriptors of an object\\\\r\\\\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\\\\r\\\\n     */\\\\r\\\\n    getOwnPropertyDescriptors<T>(o: T): {[P in keyof T]: TypedPropertyDescriptor<T[P]>} & { [x: string]: PropertyDescriptor };\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/// <reference lib=\\\\\\\"es2015.symbol\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2015.symbol.wellknown\\\\\\\" />\\\\r\\\\n\\\\r\\\\ninterface SharedArrayBuffer {\\\\r\\\\n    /**\\\\r\\\\n     * Read-only. The length of the ArrayBuffer (in bytes).\\\\r\\\\n     */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /*\\\\r\\\\n     * The SharedArrayBuffer constructor's length property whose value is 1.\\\\r\\\\n     */\\\\r\\\\n    length: number;\\\\r\\\\n    /**\\\\r\\\\n     * Returns a section of an SharedArrayBuffer.\\\\r\\\\n     */\\\\r\\\\n    slice(begin: number, end?: number): SharedArrayBuffer;\\\\r\\\\n    readonly [Symbol.species]: SharedArrayBuffer;\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"SharedArrayBuffer\\\\\\\";\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface SharedArrayBufferConstructor {\\\\r\\\\n    readonly prototype: SharedArrayBuffer;\\\\r\\\\n    new (byteLength: number): SharedArrayBuffer;\\\\r\\\\n}\\\\r\\\\ndeclare var SharedArrayBuffer: SharedArrayBufferConstructor;\\\\r\\\\n\\\\r\\\\ninterface ArrayBufferTypes {\\\\r\\\\n    SharedArrayBuffer: SharedArrayBuffer;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Atomics {\\\\r\\\\n    /**\\\\r\\\\n     * Adds a value to the value at the given position in the array, returning the original value.\\\\r\\\\n     * Until this atomic operation completes, any other read or write operation against the array\\\\r\\\\n     * will block.\\\\r\\\\n     */\\\\r\\\\n    add(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Stores the bitwise AND of a value with the value at the given position in the array,\\\\r\\\\n     * returning the original value. Until this atomic operation completes, any other read or\\\\r\\\\n     * write operation against the array will block.\\\\r\\\\n     */\\\\r\\\\n    and(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Replaces the value at the given position in the array if the original value equals the given\\\\r\\\\n     * expected value, returning the original value. Until this atomic operation completes, any\\\\r\\\\n     * other read or write operation against the array will block.\\\\r\\\\n     */\\\\r\\\\n    compareExchange(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, expectedValue: number, replacementValue: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Replaces the value at the given position in the array, returning the original value. Until\\\\r\\\\n     * this atomic operation completes, any other read or write operation against the array will\\\\r\\\\n     * block.\\\\r\\\\n     */\\\\r\\\\n    exchange(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a value indicating whether high-performance algorithms can use atomic operations\\\\r\\\\n     * (`true`) or must use locks (`false`) for the given number of bytes-per-element of a typed\\\\r\\\\n     * array.\\\\r\\\\n     */\\\\r\\\\n    isLockFree(size: number): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the value at the given position in the array. Until this atomic operation completes,\\\\r\\\\n     * any other read or write operation against the array will block.\\\\r\\\\n     */\\\\r\\\\n    load(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Stores the bitwise OR of a value with the value at the given position in the array,\\\\r\\\\n     * returning the original value. Until this atomic operation completes, any other read or write\\\\r\\\\n     * operation against the array will block.\\\\r\\\\n     */\\\\r\\\\n    or(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Stores a value at the given position in the array, returning the new value. Until this\\\\r\\\\n     * atomic operation completes, any other read or write operation against the array will block.\\\\r\\\\n     */\\\\r\\\\n    store(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Subtracts a value from the value at the given position in the array, returning the original\\\\r\\\\n     * value. Until this atomic operation completes, any other read or write operation against the\\\\r\\\\n     * array will block.\\\\r\\\\n     */\\\\r\\\\n    sub(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * If the value at the given position in the array is equal to the provided value, the current\\\\r\\\\n     * agent is put to sleep causing execution to suspend until the timeout expires (returning\\\\r\\\\n     * `\\\\\\\"timed-out\\\\\\\"`) or until the agent is awoken (returning `\\\\\\\"ok\\\\\\\"`); otherwise, returns\\\\r\\\\n     * `\\\\\\\"not-equal\\\\\\\"`.\\\\r\\\\n     */\\\\r\\\\n    wait(typedArray: Int32Array, index: number, value: number, timeout?: number): \\\\\\\"ok\\\\\\\" | \\\\\\\"not-equal\\\\\\\" | \\\\\\\"timed-out\\\\\\\";\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Wakes up sleeping agents that are waiting on the given index of the array, returning the\\\\r\\\\n     * number of agents that were awoken.\\\\r\\\\n     */\\\\r\\\\n    notify(typedArray: Int32Array, index: number, count: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Stores the bitwise XOR of a value with the value at the given position in the array,\\\\r\\\\n     * returning the original value. Until this atomic operation completes, any other read or write\\\\r\\\\n     * operation against the array will block.\\\\r\\\\n     */\\\\r\\\\n    xor(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\\\\r\\\\n\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"Atomics\\\\\\\";\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var Atomics: Atomics;\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2017.string.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ninterface String {\\\\r\\\\n    /**\\\\r\\\\n     * Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\\\\r\\\\n     * The padding is applied from the start (left) of the current string.\\\\r\\\\n     *\\\\r\\\\n     * @param maxLength The length of the resulting string once the current string has been padded.\\\\r\\\\n     *        If this parameter is smaller than the current string's length, the current string will be returned as it is.\\\\r\\\\n     *\\\\r\\\\n     * @param fillString The string to pad the current string with.\\\\r\\\\n     *        If this string is too long, it will be truncated and the left-most part will be applied.\\\\r\\\\n     *        The default value for this parameter is \\\\\\\" \\\\\\\" (U+0020).\\\\r\\\\n     */\\\\r\\\\n    padStart(maxLength: number, fillString?: string): string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\\\\r\\\\n     * The padding is applied from the end (right) of the current string.\\\\r\\\\n     *\\\\r\\\\n     * @param maxLength The length of the resulting string once the current string has been padded.\\\\r\\\\n     *        If this parameter is smaller than the current string's length, the current string will be returned as it is.\\\\r\\\\n     *\\\\r\\\\n     * @param fillString The string to pad the current string with.\\\\r\\\\n     *        If this string is too long, it will be truncated and the left-most part will be applied.\\\\r\\\\n     *        The default value for this parameter is \\\\\\\" \\\\\\\" (U+0020).\\\\r\\\\n     */\\\\r\\\\n    padEnd(maxLength: number, fillString?: string): string;\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2017.intl.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ndeclare namespace Intl {\\\\r\\\\n    type DateTimeFormatPartTypes = \\\\\\\"day\\\\\\\" | \\\\\\\"dayPeriod\\\\\\\" | \\\\\\\"era\\\\\\\" | \\\\\\\"hour\\\\\\\" | \\\\\\\"literal\\\\\\\" | \\\\\\\"minute\\\\\\\" | \\\\\\\"month\\\\\\\" | \\\\\\\"second\\\\\\\" | \\\\\\\"timeZoneName\\\\\\\" | \\\\\\\"weekday\\\\\\\" | \\\\\\\"year\\\\\\\";\\\\r\\\\n\\\\r\\\\n    interface DateTimeFormatPart {\\\\r\\\\n        type: DateTimeFormatPartTypes;\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface DateTimeFormat {\\\\r\\\\n        formatToParts(date?: Date | number): DateTimeFormatPart[];\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2017.typedarrays.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ninterface Int8ArrayConstructor {\\\\r\\\\n    new (): Int8Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint8ArrayConstructor {\\\\r\\\\n    new (): Uint8Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint8ClampedArrayConstructor {\\\\r\\\\n    new (): Uint8ClampedArray;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int16ArrayConstructor {\\\\r\\\\n    new (): Int16Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint16ArrayConstructor {\\\\r\\\\n    new (): Uint16Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Int32ArrayConstructor {\\\\r\\\\n    new (): Int32Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Uint32ArrayConstructor {\\\\r\\\\n    new (): Uint32Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Float32ArrayConstructor {\\\\r\\\\n    new (): Float32Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface Float64ArrayConstructor {\\\\r\\\\n    new (): Float64Array;\\\\r\\\\n}\\\\r\\\\n\\\"}],\\\"BACKEND\\\":[{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2018.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/// <reference lib=\\\\\\\"es2017\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2018.asyncgenerator\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2018.asynciterable\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2018.promise\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2018.regexp\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2018.intl\\\\\\\" />\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/// <reference lib=\\\\\\\"es2018.asynciterable\\\\\\\" />\\\\r\\\\n\\\\r\\\\ninterface AsyncGenerator<T = unknown, TReturn = any, TNext = unknown> extends AsyncIterator<T, TReturn, TNext> {\\\\r\\\\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\\\\r\\\\n    next(...args: [] | [TNext | PromiseLike<TNext>]): Promise<IteratorResult<T, TReturn>>;\\\\r\\\\n    return(value: TReturn | PromiseLike<TReturn>): Promise<IteratorResult<T, TReturn>>;\\\\r\\\\n    throw(e: any): Promise<IteratorResult<T, TReturn>>;\\\\r\\\\n    [Symbol.asyncIterator](): AsyncGenerator<T, TReturn, TNext>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface AsyncGeneratorFunction {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new AsyncGenerator object.\\\\r\\\\n     * @param args A list of arguments the function accepts.\\\\r\\\\n     */\\\\r\\\\n    new (...args: any[]): AsyncGenerator;\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new AsyncGenerator object.\\\\r\\\\n     * @param args A list of arguments the function accepts.\\\\r\\\\n     */\\\\r\\\\n    (...args: any[]): AsyncGenerator;\\\\r\\\\n    /**\\\\r\\\\n     * The length of the arguments.\\\\r\\\\n     */\\\\r\\\\n    readonly length: number;\\\\r\\\\n    /**\\\\r\\\\n     * Returns the name of the function.\\\\r\\\\n     */\\\\r\\\\n    readonly name: string;\\\\r\\\\n    /**\\\\r\\\\n     * A reference to the prototype.\\\\r\\\\n     */\\\\r\\\\n    readonly prototype: AsyncGenerator;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface AsyncGeneratorFunctionConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new AsyncGenerator function.\\\\r\\\\n     * @param args A list of arguments the function accepts.\\\\r\\\\n     */\\\\r\\\\n    new (...args: string[]): AsyncGeneratorFunction;\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new AsyncGenerator function.\\\\r\\\\n     * @param args A list of arguments the function accepts.\\\\r\\\\n     */\\\\r\\\\n    (...args: string[]): AsyncGeneratorFunction;\\\\r\\\\n    /**\\\\r\\\\n     * The length of the arguments.\\\\r\\\\n     */\\\\r\\\\n    readonly length: number;\\\\r\\\\n    /**\\\\r\\\\n     * Returns the name of the function.\\\\r\\\\n     */\\\\r\\\\n    readonly name: string;\\\\r\\\\n    /**\\\\r\\\\n     * A reference to the prototype.\\\\r\\\\n     */\\\\r\\\\n    readonly prototype: AsyncGeneratorFunction;\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/// <reference lib=\\\\\\\"es2015.symbol\\\\\\\" />\\\\r\\\\n/// <reference lib=\\\\\\\"es2015.iterable\\\\\\\" />\\\\r\\\\n\\\\r\\\\ninterface SymbolConstructor {\\\\r\\\\n    /**\\\\r\\\\n     * A method that returns the default async iterator for an object. Called by the semantics of\\\\r\\\\n     * the for-await-of statement.\\\\r\\\\n     */\\\\r\\\\n    readonly asyncIterator: symbol;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface AsyncIterator<T, TReturn = any, TNext = undefined> {\\\\r\\\\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\\\\r\\\\n    next(...args: [] | [TNext | PromiseLike<TNext>]): Promise<IteratorResult<T, TReturn>>;\\\\r\\\\n    return?(value?: TReturn | PromiseLike<TReturn>): Promise<IteratorResult<T, TReturn>>;\\\\r\\\\n    throw?(e?: any): Promise<IteratorResult<T, TReturn>>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface AsyncIterable<T> {\\\\r\\\\n    [Symbol.asyncIterator](): AsyncIterator<T>;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface AsyncIterableIterator<T> extends AsyncIterator<T> {\\\\r\\\\n    [Symbol.asyncIterator](): AsyncIterableIterator<T>;\\\\r\\\\n}\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2018.intl.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ndeclare namespace Intl {\\\\r\\\\n    interface PluralRulesOptions {\\\\r\\\\n        localeMatcher?: 'lookup' | 'best fit';\\\\r\\\\n        type?: 'cardinal' | 'ordinal';\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface ResolvedPluralRulesOptions {\\\\r\\\\n        locale: string;\\\\r\\\\n        pluralCategories: string[];\\\\r\\\\n        type: 'cardinal' | 'ordinal';\\\\r\\\\n        minimumIntegerDigits: number;\\\\r\\\\n        minimumFractionDigits: number;\\\\r\\\\n        maximumFractionDigits: number;\\\\r\\\\n        minimumSignificantDigits: number;\\\\r\\\\n        maximumSignificantDigits: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface PluralRules {\\\\r\\\\n        resolvedOptions(): ResolvedPluralRulesOptions;\\\\r\\\\n        select(n: number): string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    const PluralRules: {\\\\r\\\\n        new (locales?: string | string[], options?: PluralRulesOptions): PluralRules;\\\\r\\\\n        (locales?: string | string[], options?: PluralRulesOptions): PluralRules;\\\\r\\\\n        supportedLocalesOf(\\\\r\\\\n            locales: string | string[],\\\\r\\\\n            options?: PluralRulesOptions,\\\\r\\\\n        ): string[];\\\\r\\\\n    };\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2018.promise.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/**\\\\r\\\\n * Represents the completion of an asynchronous operation\\\\r\\\\n */\\\\r\\\\ninterface Promise<T> {\\\\r\\\\n    /**\\\\r\\\\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\\\\r\\\\n     * resolved value cannot be modified from the callback.\\\\r\\\\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\\\\r\\\\n     * @returns A Promise for the completion of the callback.\\\\r\\\\n     */\\\\r\\\\n    finally(onfinally?: (() => void) | undefined | null): Promise<T>\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.es2018.regexp.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ninterface RegExpMatchArray {\\\\r\\\\n    groups?: {\\\\r\\\\n        [key: string]: string\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface RegExpExecArray {\\\\r\\\\n    groups?: {\\\\r\\\\n        [key: string]: string\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface RegExp {\\\\r\\\\n    /**\\\\r\\\\n     * Returns a Boolean value indicating the state of the dotAll flag (s) used with a regular expression.\\\\r\\\\n     * Default is false. Read-only.\\\\r\\\\n     */\\\\r\\\\n    readonly dotAll: boolean;\\\\r\\\\n}\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.esnext.intl.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ndeclare namespace Intl {\\\\r\\\\n    type NumberFormatPartTypes = \\\\\\\"currency\\\\\\\" | \\\\\\\"decimal\\\\\\\" | \\\\\\\"fraction\\\\\\\" | \\\\\\\"group\\\\\\\" | \\\\\\\"infinity\\\\\\\" | \\\\\\\"integer\\\\\\\" | \\\\\\\"literal\\\\\\\" | \\\\\\\"minusSign\\\\\\\" | \\\\\\\"nan\\\\\\\" | \\\\\\\"plusSign\\\\\\\" | \\\\\\\"percentSign\\\\\\\";\\\\r\\\\n\\\\r\\\\n    interface NumberFormatPart {\\\\r\\\\n        type: NumberFormatPartTypes;\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface NumberFormat {\\\\r\\\\n        formatToParts(number?: number): NumberFormatPart[];\\\\r\\\\n    }\\\\r\\\\n  }\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.esnext.bigint.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\ninterface BigInt {\\\\r\\\\n    /**\\\\r\\\\n      * Returns a string representation of an object.\\\\r\\\\n      * @param radix Specifies a radix for converting numeric values to strings.\\\\r\\\\n      */\\\\r\\\\n    toString(radix?: number): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a string representation appropriate to the host environment's current locale. */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns the primitive value of the specified object. */\\\\r\\\\n    valueOf(): bigint;\\\\r\\\\n\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"BigInt\\\\\\\";\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface BigIntConstructor {\\\\r\\\\n    (value?: any): bigint;\\\\r\\\\n    readonly prototype: BigInt;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Interprets the low bits of a BigInt as a 2's-complement signed integer.\\\\r\\\\n      * All higher bits are discarded.\\\\r\\\\n      * @param bits The number of low bits to use\\\\r\\\\n      * @param int The BigInt whose bits to extract\\\\r\\\\n      */\\\\r\\\\n    asIntN(bits: number, int: bigint): bigint;\\\\r\\\\n    /**\\\\r\\\\n      * Interprets the low bits of a BigInt as an unsigned integer.\\\\r\\\\n      * All higher bits are discarded.\\\\r\\\\n      * @param bits The number of low bits to use\\\\r\\\\n      * @param int The BigInt whose bits to extract\\\\r\\\\n      */\\\\r\\\\n    asUintN(bits: number, int: bigint): bigint;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var BigInt: BigIntConstructor;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * A typed array of 64-bit signed integer values. The contents are initialized to 0. If the\\\\r\\\\n  * requested number of bytes could not be allocated, an exception is raised.\\\\r\\\\n  */\\\\r\\\\ninterface BigInt64Array {\\\\r\\\\n    /** The size in bytes of each element in the array. */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /** The ArrayBuffer instance referenced by the array. */\\\\r\\\\n    readonly buffer: ArrayBufferLike;\\\\r\\\\n\\\\r\\\\n    /** The length in bytes of the array. */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /** The offset in bytes of the array. */\\\\r\\\\n    readonly byteOffset: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after copying a section of the array identified by start and end\\\\r\\\\n      * to the same array starting at position target\\\\r\\\\n      * @param target If target is negative, it is treated as length+target where length is the\\\\r\\\\n      * length of the array.\\\\r\\\\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\\\\r\\\\n      * is treated as length+end.\\\\r\\\\n      * @param end If not specified, length of the this object is used as its default value.\\\\r\\\\n      */\\\\r\\\\n    copyWithin(target: number, start: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /** Yields index, value pairs for every entry in the array. */\\\\r\\\\n    entries(): IterableIterator<[number, bigint]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\\\\r\\\\n      * the callbackfn function for each element in the array until the callbackfn returns false,\\\\r\\\\n      * or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: bigint, index: number, array: BigInt64Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after filling the section identified by start and end with value\\\\r\\\\n      * @param value value to fill array section with\\\\r\\\\n      * @param start index to start filling the array at. If start is negative, it is treated as\\\\r\\\\n      * length+start where length is the length of the array.\\\\r\\\\n      * @param end index to stop filling the array at. If end is negative, it is treated as\\\\r\\\\n      * length+end.\\\\r\\\\n      */\\\\r\\\\n    fill(value: bigint, start?: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: bigint, index: number, array: BigInt64Array) => any, thisArg?: any): BigInt64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n      * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    find(predicate: (value: bigint, index: number, array: BigInt64Array) => boolean, thisArg?: any): bigint | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    findIndex(predicate: (value: bigint, index: number, array: BigInt64Array) => boolean, thisArg?: any): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. forEach calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: bigint, index: number, array: BigInt64Array) => void, thisArg?: any): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n      * @param searchElement The element to search for.\\\\r\\\\n      * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n      */\\\\r\\\\n    includes(searchElement: bigint, fromIndex?: number): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: bigint, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the\\\\r\\\\n      * resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n\\\\r\\\\n    /** Yields each index in the array. */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: bigint, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /** The length of the array. */\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that\\\\r\\\\n      * contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map(callbackfn: (value: bigint, index: number, array: BigInt64Array) => bigint, thisArg?: any): BigInt64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigInt64Array) => bigint): bigint;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigInt64Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an\\\\r\\\\n      * argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigInt64Array) => bigint): bigint;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigInt64Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /** Reverses the elements in the array. */\\\\r\\\\n    reverse(): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sets a value or an array of values.\\\\r\\\\n      * @param array A typed or untyped array of values to set.\\\\r\\\\n      * @param offset The index in the current array at which the values are to be written.\\\\r\\\\n      */\\\\r\\\\n    set(array: ArrayLike<bigint>, offset?: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): BigInt64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\\\\r\\\\n      * callbackfn function for each element in the array until the callbackfn returns true, or until\\\\r\\\\n      * the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: bigint, index: number, array: BigInt64Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sorts the array.\\\\r\\\\n      * @param compareFn The function used to determine the order of the elements. If omitted, the elements are sorted in ascending order.\\\\r\\\\n      */\\\\r\\\\n    sort(compareFn?: (a: bigint, b: bigint) => number | bigint): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets a new BigInt64Array view of the ArrayBuffer store for this array, referencing the elements\\\\r\\\\n      * at begin, inclusive, up to end, exclusive.\\\\r\\\\n      * @param begin The index of the beginning of the array.\\\\r\\\\n      * @param end The index of the end of the array.\\\\r\\\\n      */\\\\r\\\\n    subarray(begin: number, end?: number): BigInt64Array;\\\\r\\\\n\\\\r\\\\n    /** Converts the array to a string by using the current locale. */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a string representation of the array. */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    /** Yields each value in the array. */\\\\r\\\\n    values(): IterableIterator<bigint>;\\\\r\\\\n\\\\r\\\\n    [Symbol.iterator](): IterableIterator<bigint>;\\\\r\\\\n\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"BigInt64Array\\\\\\\";\\\\r\\\\n\\\\r\\\\n    [index: number]: bigint;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface BigInt64ArrayConstructor {\\\\r\\\\n    readonly prototype: BigInt64Array;\\\\r\\\\n    new(length?: number): BigInt64Array;\\\\r\\\\n    new(array: Iterable<bigint>): BigInt64Array;\\\\r\\\\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): BigInt64Array;\\\\r\\\\n\\\\r\\\\n    /** The size in bytes of each element in the array. */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a new array from a set of elements.\\\\r\\\\n      * @param items A set of elements to include in the new array object.\\\\r\\\\n      */\\\\r\\\\n    of(...items: bigint[]): BigInt64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n      * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n      */\\\\r\\\\n    from(arrayLike: ArrayLike<bigint>): BigInt64Array;\\\\r\\\\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => bigint, thisArg?: any): BigInt64Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var BigInt64Array: BigInt64ArrayConstructor;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n  * A typed array of 64-bit unsigned integer values. The contents are initialized to 0. If the\\\\r\\\\n  * requested number of bytes could not be allocated, an exception is raised.\\\\r\\\\n  */\\\\r\\\\ninterface BigUint64Array {\\\\r\\\\n    /** The size in bytes of each element in the array. */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /** The ArrayBuffer instance referenced by the array. */\\\\r\\\\n    readonly buffer: ArrayBufferLike;\\\\r\\\\n\\\\r\\\\n    /** The length in bytes of the array. */\\\\r\\\\n    readonly byteLength: number;\\\\r\\\\n\\\\r\\\\n    /** The offset in bytes of the array. */\\\\r\\\\n    readonly byteOffset: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after copying a section of the array identified by start and end\\\\r\\\\n      * to the same array starting at position target\\\\r\\\\n      * @param target If target is negative, it is treated as length+target where length is the\\\\r\\\\n      * length of the array.\\\\r\\\\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\\\\r\\\\n      * is treated as length+end.\\\\r\\\\n      * @param end If not specified, length of the this object is used as its default value.\\\\r\\\\n      */\\\\r\\\\n    copyWithin(target: number, start: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /** Yields index, value pairs for every entry in the array. */\\\\r\\\\n    entries(): IterableIterator<[number, bigint]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether all the members of an array satisfy the specified test.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\\\\r\\\\n      * the callbackfn function for each element in the array until the callbackfn returns false,\\\\r\\\\n      * or until the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    every(callbackfn: (value: bigint, index: number, array: BigUint64Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the this object after filling the section identified by start and end with value\\\\r\\\\n      * @param value value to fill array section with\\\\r\\\\n      * @param start index to start filling the array at. If start is negative, it is treated as\\\\r\\\\n      * length+start where length is the length of the array.\\\\r\\\\n      * @param end index to stop filling the array at. If end is negative, it is treated as\\\\r\\\\n      * length+end.\\\\r\\\\n      */\\\\r\\\\n    fill(value: bigint, start?: number, end?: number): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the elements of an array that meet the condition specified in a callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    filter(callbackfn: (value: bigint, index: number, array: BigUint64Array) => any, thisArg?: any): BigUint64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the value of the first element in the array where predicate is true, and undefined\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found, find\\\\r\\\\n      * immediately returns that element value. Otherwise, find returns undefined.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    find(predicate: (value: bigint, index: number, array: BigUint64Array) => boolean, thisArg?: any): bigint | undefined;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first element in the array where predicate is true, and -1\\\\r\\\\n      * otherwise.\\\\r\\\\n      * @param predicate find calls predicate once for each element of the array, in ascending\\\\r\\\\n      * order, until it finds one where predicate returns true. If such an element is found,\\\\r\\\\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\\\\r\\\\n      * @param thisArg If provided, it will be used as the this value for each invocation of\\\\r\\\\n      * predicate. If it is not provided, undefined is used instead.\\\\r\\\\n      */\\\\r\\\\n    findIndex(predicate: (value: bigint, index: number, array: BigUint64Array) => boolean, thisArg?: any): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Performs the specified action for each element in an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. forEach calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    forEach(callbackfn: (value: bigint, index: number, array: BigUint64Array) => void, thisArg?: any): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether an array includes a certain element, returning true or false as appropriate.\\\\r\\\\n      * @param searchElement The element to search for.\\\\r\\\\n      * @param fromIndex The position in this array at which to begin searching for searchElement.\\\\r\\\\n      */\\\\r\\\\n    includes(searchElement: bigint, fromIndex?: number): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the first occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    indexOf(searchElement: bigint, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Adds all the elements of an array separated by the specified separator string.\\\\r\\\\n      * @param separator A string used to separate one element of an array from the next in the\\\\r\\\\n      * resulting String. If omitted, the array elements are separated with a comma.\\\\r\\\\n      */\\\\r\\\\n    join(separator?: string): string;\\\\r\\\\n\\\\r\\\\n    /** Yields each index in the array. */\\\\r\\\\n    keys(): IterableIterator<number>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns the index of the last occurrence of a value in an array.\\\\r\\\\n      * @param searchElement The value to locate in the array.\\\\r\\\\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\\\\r\\\\n      * search starts at index 0.\\\\r\\\\n      */\\\\r\\\\n    lastIndexOf(searchElement: bigint, fromIndex?: number): number;\\\\r\\\\n\\\\r\\\\n    /** The length of the array. */\\\\r\\\\n    readonly length: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls a defined callback function on each element of an array, and returns an array that\\\\r\\\\n      * contains the results.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    map(callbackfn: (value: bigint, index: number, array: BigUint64Array) => bigint, thisArg?: any): BigUint64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigUint64Array) => bigint): bigint;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array. The return value of\\\\r\\\\n      * the callback function is the accumulated result, and is provided as an argument in the next\\\\r\\\\n      * call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\\\\r\\\\n      * callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduce<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigUint64Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an\\\\r\\\\n      * argument instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigUint64Array) => bigint): bigint;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Calls the specified callback function for all the elements in an array, in descending order.\\\\r\\\\n      * The return value of the callback function is the accumulated result, and is provided as an\\\\r\\\\n      * argument in the next call to the callback function.\\\\r\\\\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\\\\r\\\\n      * the callbackfn function one time for each element in the array.\\\\r\\\\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\\\\r\\\\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\\\\r\\\\n      * instead of an array value.\\\\r\\\\n      */\\\\r\\\\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigUint64Array) => U, initialValue: U): U;\\\\r\\\\n\\\\r\\\\n    /** Reverses the elements in the array. */\\\\r\\\\n    reverse(): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sets a value or an array of values.\\\\r\\\\n      * @param array A typed or untyped array of values to set.\\\\r\\\\n      * @param offset The index in the current array at which the values are to be written.\\\\r\\\\n      */\\\\r\\\\n    set(array: ArrayLike<bigint>, offset?: number): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a section of an array.\\\\r\\\\n      * @param start The beginning of the specified portion of the array.\\\\r\\\\n      * @param end The end of the specified portion of the array.\\\\r\\\\n      */\\\\r\\\\n    slice(start?: number, end?: number): BigUint64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Determines whether the specified callback function returns true for any element of an array.\\\\r\\\\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\\\\r\\\\n      * callbackfn function for each element in the array until the callbackfn returns true, or until\\\\r\\\\n      * the end of the array.\\\\r\\\\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\\\\r\\\\n      * If thisArg is omitted, undefined is used as the this value.\\\\r\\\\n      */\\\\r\\\\n    some(callbackfn: (value: bigint, index: number, array: BigUint64Array) => boolean, thisArg?: any): boolean;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Sorts the array.\\\\r\\\\n      * @param compareFn The function used to determine the order of the elements. If omitted, the elements are sorted in ascending order.\\\\r\\\\n      */\\\\r\\\\n    sort(compareFn?: (a: bigint, b: bigint) => number | bigint): this;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets a new BigUint64Array view of the ArrayBuffer store for this array, referencing the elements\\\\r\\\\n      * at begin, inclusive, up to end, exclusive.\\\\r\\\\n      * @param begin The index of the beginning of the array.\\\\r\\\\n      * @param end The index of the end of the array.\\\\r\\\\n      */\\\\r\\\\n    subarray(begin: number, end?: number): BigUint64Array;\\\\r\\\\n\\\\r\\\\n    /** Converts the array to a string by using the current locale. */\\\\r\\\\n    toLocaleString(): string;\\\\r\\\\n\\\\r\\\\n    /** Returns a string representation of the array. */\\\\r\\\\n    toString(): string;\\\\r\\\\n\\\\r\\\\n    /** Yields each value in the array. */\\\\r\\\\n    values(): IterableIterator<bigint>;\\\\r\\\\n\\\\r\\\\n    [Symbol.iterator](): IterableIterator<bigint>;\\\\r\\\\n\\\\r\\\\n    readonly [Symbol.toStringTag]: \\\\\\\"BigUint64Array\\\\\\\";\\\\r\\\\n\\\\r\\\\n    [index: number]: bigint;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ninterface BigUint64ArrayConstructor {\\\\r\\\\n    readonly prototype: BigUint64Array;\\\\r\\\\n    new(length?: number): BigUint64Array;\\\\r\\\\n    new(array: Iterable<bigint>): BigUint64Array;\\\\r\\\\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): BigUint64Array;\\\\r\\\\n\\\\r\\\\n    /** The size in bytes of each element in the array. */\\\\r\\\\n    readonly BYTES_PER_ELEMENT: number;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Returns a new array from a set of elements.\\\\r\\\\n      * @param items A set of elements to include in the new array object.\\\\r\\\\n      */\\\\r\\\\n    of(...items: bigint[]): BigUint64Array;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Creates an array from an array-like or iterable object.\\\\r\\\\n      * @param arrayLike An array-like or iterable object to convert to an array.\\\\r\\\\n      * @param mapfn A mapping function to call on every element of the array.\\\\r\\\\n      * @param thisArg Value of 'this' used to invoke the mapfn.\\\\r\\\\n      */\\\\r\\\\n    from(arrayLike: ArrayLike<bigint>): BigUint64Array;\\\\r\\\\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => bigint, thisArg?: any): BigUint64Array;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare var BigUint64Array: BigUint64ArrayConstructor;\\\\r\\\\n\\\\r\\\\ninterface DataView {\\\\r\\\\n    /**\\\\r\\\\n      * Gets the BigInt64 value at the specified byte offset from the start of the view. There is\\\\r\\\\n      * no alignment constraint; multi-byte values may be fetched from any offset.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\\\\r\\\\n      */\\\\r\\\\n    getBigInt64(byteOffset: number, littleEndian?: boolean): bigint;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Gets the BigUint64 value at the specified byte offset from the start of the view. There is\\\\r\\\\n      * no alignment constraint; multi-byte values may be fetched from any offset.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\\\\r\\\\n      */\\\\r\\\\n    getBigUint64(byteOffset: number, littleEndian?: boolean): bigint;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Stores a BigInt64 value at the specified byte offset from the start of the view.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be set.\\\\r\\\\n      * @param value The value to set.\\\\r\\\\n      * @param littleEndian If false or undefined, a big-endian value should be written,\\\\r\\\\n      * otherwise a little-endian value should be written.\\\\r\\\\n      */\\\\r\\\\n    setBigInt64(byteOffset: number, value: bigint, littleEndian?: boolean): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n      * Stores a BigUint64 value at the specified byte offset from the start of the view.\\\\r\\\\n      * @param byteOffset The place in the buffer at which the value should be set.\\\\r\\\\n      * @param value The value to set.\\\\r\\\\n      * @param littleEndian If false or undefined, a big-endian value should be written,\\\\r\\\\n      * otherwise a little-endian value should be written.\\\\r\\\\n      */\\\\r\\\\n    setBigUint64(byteOffset: number, value: bigint, littleEndian?: boolean): void;\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/types/common/declaration.d.ts\\\",\\\"content\\\":\\\"/**\\\\r\\\\n * The wix-location module contains functionality for getting information\\\\r\\\\n *  about the URL of the current page and for navigating to other pages.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-location' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the base URL of the current page.\\\\r\\\\n     */\\\\r\\\\n    const baseUrl: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the path of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    const path: string[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the prefix of a dynamic page's or router page's URL.\\\\r\\\\n     */\\\\r\\\\n    const prefix: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the protocol of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    const protocol: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets an object that represents the query segment of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    const query: any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets an object used to manage the query segment of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    const queryParams: wix_location.QueryParams;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the full URL of the current page.\\\\r\\\\n     */\\\\r\\\\n    const url: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds an event handler that runs when an application page's URL changes.\\\\r\\\\n     */\\\\r\\\\n    function onChange(handler: wix_location.LocationChangeHandler): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Directs the browser to navigate to the specified URL.\\\\r\\\\n     */\\\\r\\\\n    function to(url: string): void;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-site module contains functionality for obtaining information about your site and its pages.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-site' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets a code representing the site's currency.\\\\r\\\\n     */\\\\r\\\\n    const currency: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets information about the current page or lightbox.\\\\r\\\\n     */\\\\r\\\\n    const currentPage: wix_site.StructurePage | wix_site.StructureLightbox;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets a code representing the site's language.\\\\r\\\\n     */\\\\r\\\\n    const language: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the site's regional settings.\\\\r\\\\n     */\\\\r\\\\n    const regionalSettings: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the site revision ID.\\\\r\\\\n     */\\\\r\\\\n    const revision: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the site's timezone.\\\\r\\\\n     */\\\\r\\\\n    const timezone: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns information about the site's pages, prefixes, and lightboxes.\\\\r\\\\n     */\\\\r\\\\n    function getSiteStructure(): wix_site.SiteStructure;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Optimizes resource fetching of pages and lightboxes in the site so they will load faster.\\\\r\\\\n     */\\\\r\\\\n    function prefetchPageResources(prefetchItems: wix_site.PrefetchItems): wix_site.PrefetchResult;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the sitemap for a router or dynamic page prefix.\\\\r\\\\n     */\\\\r\\\\n    function routerSitemap(routerPrefix: string): Promise<wix_router.WixRouterSitemapEntry[]>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-storage module contains functionality for the persistent\\\\r\\\\n *  storage of key/value data in the site visitor's browser.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-storage' {\\\\r\\\\n    /**\\\\r\\\\n     * Used for local storage of data.\\\\r\\\\n     */\\\\r\\\\n    const local: wix_storage.Storage;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Used for memory storage of data.\\\\r\\\\n     */\\\\r\\\\n    const memory: wix_storage.Storage;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Used for session storage of data.\\\\r\\\\n     */\\\\r\\\\n    const session: wix_storage.Storage;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-window module contains functionality that pertains to the\\\\r\\\\n *  current browser window.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-window' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the locale of the site visitor's browser.\\\\r\\\\n     */\\\\r\\\\n    const browserLocale: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets what kind of device is being used to view the page.\\\\r\\\\n     */\\\\r\\\\n    const formFactor: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the locale of the current environment.\\\\r\\\\n     */\\\\r\\\\n    const locale: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the HTTP referrer header field.\\\\r\\\\n     */\\\\r\\\\n    const referrer: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets which mode the site is currently being viewed in.\\\\r\\\\n     */\\\\r\\\\n    const viewMode: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Copies text to the site visitor's clipboard.\\\\r\\\\n     */\\\\r\\\\n    function copyToClipboard(toCopy: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns information about the window.\\\\r\\\\n     */\\\\r\\\\n    function getBoundingRect(): Promise<wix_window.WindowSizeInfo>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the current geolocation of the user.\\\\r\\\\n     */\\\\r\\\\n    function getCurrentGeolocation(): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the data that a router passed to the page in its response.\\\\r\\\\n     */\\\\r\\\\n    function getRouterData(): any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Opens a lightbox and optionally passes it the given data.\\\\r\\\\n     */\\\\r\\\\n    function openLightbox(name: string, data?: any): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Opens a modal window that displays the specified web page.\\\\r\\\\n     */\\\\r\\\\n    function openModal(url: string, options: wix_window.OpenModalOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a message to the page's parent.\\\\r\\\\n     */\\\\r\\\\n    function postMessage(message: any, target?: string): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Scrolls the page by a given number of pixels.\\\\r\\\\n     */\\\\r\\\\n    function scrollBy(x: number, y: number): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Scrolls the page to a specific location.\\\\r\\\\n     */\\\\r\\\\n    function scrollTo(x: number, y: number, options?: wix_window.ScrollToOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a tracking event to external analytics tools.\\\\r\\\\n     */\\\\r\\\\n    function trackEvent(eventName: string, parameters: wix_window.trackingParameters.AddPaymentInfoEvent | wix_window.trackingParameters.AddProductImpressionEvent | wix_window.trackingParameters.AddToCartEvent | wix_window.trackingParameters.ClickProductEvent | wix_window.trackingParameters.CustomEvent | wix_window.trackingParameters.InitiateCheckoutEvent | wix_window.trackingParameters.PurchaseEvent | wix_window.trackingParameters.RemoveFromCartEvent | wix_window.trackingParameters.ViewContentEvent): void;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-captcha-backend module contains functionality for working with the reCAPTCHA element from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-captcha-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Authorizes the CAPTCHA token.\\\\r\\\\n     */\\\\r\\\\n    function authorize(token: string): Promise<wix_captcha_backend.SuccessReport>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-chat-backend module contains functionality for working with the Wix Chat application from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-chat-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Sends a chat message from the backend.\\\\r\\\\n     */\\\\r\\\\n    function sendMessage(messageInfo: wix_chat_backend.MessageInfo): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * HTTP functions are used to expose an API of your site's functionality.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-http-functions' {\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 400 (Bad Request) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function badRequest(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 201 (Created) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function created(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP DELETE method.\\\\r\\\\n     */\\\\r\\\\n    /* Illegal function name 'delete' can't be used here\\\\r\\\\n    function delete(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n    */\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 403 (Forbidden) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function forbidden(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP GET method.\\\\r\\\\n     */\\\\r\\\\n    function get(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 404 (Not Found) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function notFound(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 200 (OK) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function ok(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP OPTIONS method.\\\\r\\\\n     */\\\\r\\\\n    function options(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP POST method.\\\\r\\\\n     */\\\\r\\\\n    function post(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP PUT method.\\\\r\\\\n     */\\\\r\\\\n    function put(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response populated with the information from the options parameter.\\\\r\\\\n     *  The `response()` function creates a custom response built with the\\\\r\\\\n     *  information passed to the `options` parameter in a [`WixHttpFunctionResponseOptions`](#WixHttpFunctionResponseOptions)\\\\r\\\\n     *  object.\\\\r\\\\n     * \\\\r\\\\n     *  Use the `response()` function to create a response to return from an HTTP\\\\r\\\\n     *  function.\\\\r\\\\n     */\\\\r\\\\n    function response(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 500 (Internal Server Error) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function serverError(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with any HTTP method.\\\\r\\\\n     */\\\\r\\\\n    function use(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-crm-backend module contains functionality for working with\\\\r\\\\n *  [your site's contacts](https://support.wix.com/en/article/about-your-contact-list)\\\\r\\\\n *  from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-crm-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new contact or updates an existing contact.\\\\r\\\\n     */\\\\r\\\\n    function createContact(contactInfo: wix_crm_backend.ContactInfo): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Deletes an existing contact.\\\\r\\\\n     */\\\\r\\\\n    function deleteContact(contactId: string, options: wix_crm_backend.DeleteOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a Triggered Email to a contact.\\\\r\\\\n     */\\\\r\\\\n    function emailContact(emailId: string, toContact: string, options?: wix_users.TriggeredEmailOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets an existing contact by ID.\\\\r\\\\n     */\\\\r\\\\n    function getContactById(contactId: string): Promise<wix_crm_backend.ContactInfo>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates an existing contact.\\\\r\\\\n     */\\\\r\\\\n    function updateContact(contactId: string, contactInfo: wix_crm_backend.ContactInfo): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-data module contains functionality for working with data in collections.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-data' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates an aggregation.\\\\r\\\\n     */\\\\r\\\\n    function aggregate(collectionName: string): wix_data.WixDataAggregate;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds a number of items to a collection.\\\\r\\\\n     */\\\\r\\\\n    function bulkInsert(collectionName: string, items: any[], options?: wix_data.WixDataOptions): Promise<wix_data.WixDataBulkResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes a number of items from a collection.\\\\r\\\\n     */\\\\r\\\\n    function bulkRemove(collectionName: string, itemIds: string[], options?: wix_data.WixDataOptions): Promise<wix_data.WixDataBulkResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Inserts or updates a number of items in a collection.\\\\r\\\\n     */\\\\r\\\\n    function bulkSave(collectionName: string, items: any[], options?: wix_data.WixDataOptions): Promise<wix_data.WixDataBulkResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates a number of items in a collection.\\\\r\\\\n     */\\\\r\\\\n    function bulkUpdate(collectionName: string, items: any[], options?: wix_data.WixDataOptions): Promise<wix_data.WixDataBulkResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a filter to be used with the dataset `setFilter()` function.\\\\r\\\\n     */\\\\r\\\\n    function filter(): wix_data.WixDataFilter;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Retrieves an item from a collection.\\\\r\\\\n     */\\\\r\\\\n    function get(collectionName: string, itemId: string, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds an item to a collection.\\\\r\\\\n     */\\\\r\\\\n    function insert(collectionName: string, item: any, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Inserts a reference in the specified property.\\\\r\\\\n     */\\\\r\\\\n    function insertReference(collectionName: string, propertyName: string, referringItem: any | string, referencedItem: any | string | any[] | string[], options?: wix_data.WixDataOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Checks if a reference to the referenced item exists in the specified\\\\r\\\\n     *   property of the referring item.\\\\r\\\\n     */\\\\r\\\\n    function isReferenced(collectionName: string, propertyName: string, referringItem: any | string, referencedItem: any | string): Promise<boolean>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a query.\\\\r\\\\n     */\\\\r\\\\n    function query(collectionName: string): wix_data.WixDataQuery;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the full items referenced in the specified property.\\\\r\\\\n     */\\\\r\\\\n    function queryReferenced(collectionName: string, item: any | string, propertyName: string, options: wix_data.WixDataQueryReferencedOptions): Promise<wix_data.WixDataQueryReferencedResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes an item from a collection.\\\\r\\\\n     */\\\\r\\\\n    function remove(collectionName: string, itemId: string, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes a reference from the specified property.\\\\r\\\\n     */\\\\r\\\\n    function removeReference(collectionName: string, propertyName: string, referringItem: any | string, referencedItem: any | string | any[] | string[], options?: wix_data.WixDataOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Replaces current references with references in the specified property.\\\\r\\\\n     */\\\\r\\\\n    function replaceReferences(collectionName: string, propertyName: string, referringItem: any | string, referencedItem: any | string | any[] | string[], options?: wix_data.WixDataOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Inserts or updates an item in a collection.\\\\r\\\\n     */\\\\r\\\\n    function save(collectionName: string, item: any, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a sort to be used with the dataset `setSort()` function.\\\\r\\\\n     */\\\\r\\\\n    function sort(): wix_data.WixDataSort;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes all items from a collection.\\\\r\\\\n     */\\\\r\\\\n    function truncate(collectionName: string, options?: wix_data.WixDataOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates an item in a collection.\\\\r\\\\n     */\\\\r\\\\n    function update(collectionName: string, item: any, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * An implementation of the standard [Javascript Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API)\\\\r\\\\n *  which can be used in public and backend code for fetching resources\\\\r\\\\n *  from [3rd party services](https://support.wix.com/en/article/accessing-3rd-party-services)\\\\r\\\\n *  using HTTPS.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-fetch' {\\\\r\\\\n    /**\\\\r\\\\n     * Retrieves the specified resource from the network using HTTPS.\\\\r\\\\n     */\\\\r\\\\n    function fetch(url: string, options?: wix_fetch.WixFetchRequest): Promise<wix_fetch.WixFetchResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Retrieves the specified JSON resource from the network using HTTPS.\\\\r\\\\n     */\\\\r\\\\n    function getJSON(url: string, options?: wix_fetch.WixFetchRequest): Promise<any>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-pay-backend module contains functionality for working with\\\\r\\\\n *  payments from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-pay-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new payment.\\\\r\\\\n     */\\\\r\\\\n    function createPayment(paymentInfo: wix_pay_backend.PaymentInfo): Promise<wix_pay_backend.Payment>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * This module contains the APIs for code routers and data binding router hooks.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-router' {\\\\r\\\\n    /**\\\\r\\\\n     * Registers a hook that is called after a router.\\\\r\\\\n     */\\\\r\\\\n    function afterRouter(request: wix_router.WixRouterRequest, response: wix_router.WixRouterResponse): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a hook that is called after a sitemap is created.\\\\r\\\\n     */\\\\r\\\\n    function afterSitemap(request: wix_router.WixRouterSitemapRequest, sitemapEntries: wix_router.WixRouterSitemapEntry[]): Promise<wix_router.WixRouterSitemapEntry[]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a hook that is called before a router.\\\\r\\\\n     */\\\\r\\\\n    function beforeRouter(request: wix_router.WixRouterRequest): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a hook that is called after a route is resolved by the data binding router, but before the wix-data query is executed.\\\\r\\\\n     */\\\\r\\\\n    function customizeQuery(request: wix_router.WixRouterRequest, route: string, query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with a status code 403 (Forbidden) and instructs the router to show a 403 page.\\\\r\\\\n     */\\\\r\\\\n    function forbidden(message?: string): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response that instructs the router to continue.\\\\r\\\\n     */\\\\r\\\\n    function next(): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with a status code 404 (Not Found) and instructs the router to show a 404 page.\\\\r\\\\n     */\\\\r\\\\n    function notFound(message?: string): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with a status code 200 (OK) and instructs the router to show the selected page.\\\\r\\\\n     */\\\\r\\\\n    function ok(Page: string | string[], routerReturnedData?: any, head?: wix_router.WixRouterResponse.HeadOptions): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with a status code of 301 (Moved Permanently) or 302 (Found) and instructs the router to redirect to the given URL.\\\\r\\\\n     */\\\\r\\\\n    function redirect(url: string, statusCode?: string): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function containing routing logic for a given URL prefix.\\\\r\\\\n     */\\\\r\\\\n    function router(request: wix_router.WixRouterRequest): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with the specified HTTP status code with an optional message.\\\\r\\\\n     */\\\\r\\\\n    function sendStatus(statusCode: string, message?: string): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function containing sitemap logic for a given URL prefix.\\\\r\\\\n     */\\\\r\\\\n    function sitemap(request: wix_router.WixRouterSitemapRequest): Promise<wix_router.WixRouterSitemapEntry[]>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-site-backend module contains functionality for working with\\\\r\\\\n *  your site and its pages from backend code.\\\\r\\\\n * \\\\r\\\\n *  To use the backend site API, import `wixSiteBackend` from the `wix-site-backend` module:\\\\r\\\\n * \\\\r\\\\n *    ```javascript\\\\r\\\\n *    import wixSiteBackend from 'wix-site-backend';\\\\r\\\\n *    ```\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-site-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Invalidates the cache for a site.\\\\r\\\\n     */\\\\r\\\\n    function invalidateCache(): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-stores-backend module contains functionality for working with your\\\\r\\\\n *  site's store from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-stores-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Adds media items by ID to a product.\\\\r\\\\n     */\\\\r\\\\n    function addProductMedia(productId: string, media: wix_stores_backend.Media[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds media items by ID to product options.\\\\r\\\\n     */\\\\r\\\\n    function addProductMediaToChoices(productId: string, mediaChoices: wix_stores_backend.MediaChoices[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds products by ID to a product collection.\\\\r\\\\n     */\\\\r\\\\n    function addProductsToCollection(collectionId: string, productIds: string[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new product.\\\\r\\\\n     */\\\\r\\\\n    function createProduct(productInfo: wix_stores_backend.ProductInfo): Promise<wix_stores_backend.Product>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Deletes an existing product.\\\\r\\\\n     */\\\\r\\\\n    function deleteProduct(productId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Deletes all options for an existing product.\\\\r\\\\n     */\\\\r\\\\n    function deleteProductOptions(productId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the current site visitor's shopping cart.\\\\r\\\\n     */\\\\r\\\\n    function getAbandonedCart(cartId: string): Promise<wix_stores_backend.AbandonedCart>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the current site visitor's shopping cart.\\\\r\\\\n     */\\\\r\\\\n    function getCurrentCart(): Promise<wix_stores_backend.Cart>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the availability of a product based on the specified option choices.\\\\r\\\\n     */\\\\r\\\\n    function getProductOptionsAvailability(productId: string, choices: wix_stores_backend.ProductChoices): Promise<wix_stores_backend.ProductOptionsAvailability>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets a product's available variants based on the specified option choices.\\\\r\\\\n     */\\\\r\\\\n    function getProductVariants(productId: string, options: wix_stores_backend.ProductVariantOptions): Promise<wix_stores_backend.Variants>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes media items by ID from a product.\\\\r\\\\n     */\\\\r\\\\n    function removeProductMedia(productId: string, mediaIds: wix_stores_backend.Media[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes media items by ID from a product's options.\\\\r\\\\n     */\\\\r\\\\n    function removeProductMediaFromChoices(productId: string, mediaChoices: wix_stores_backend.MediaChoices[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes products by ID from a product collection.\\\\r\\\\n     */\\\\r\\\\n    function removeProductsFromCollection(collectionId: string, productIds?: string[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Resets the data (such as the price and the weight) of all variants for a given product to their default values.\\\\r\\\\n     */\\\\r\\\\n    function resetVariantData(productId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates an existing product by ID.\\\\r\\\\n     */\\\\r\\\\n    function updateProductFields(productId: string, productInfo: wix_stores_backend.ProductInfo): Promise<wix_stores_backend.Product>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates the data (such as the price and the weight) of an existing product variant in the store.\\\\r\\\\n     */\\\\r\\\\n    function updateVariantData(productId: string, variantInfo: wix_stores_backend.ProductVariantInfo[]): Promise<wix_stores_backend.ProductVariants>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-users-backend module contains functionality for working with your\\\\r\\\\n *  site's users from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-users-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the current user viewing the site.\\\\r\\\\n     */\\\\r\\\\n    const currentUser: wix_users.User;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Approve a member whose status is `\\\\\\\"Pending\\\\\\\"` using an email address.\\\\r\\\\n     */\\\\r\\\\n    function approveByEmail(email: string): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Approve a member whose status is `\\\\\\\"Pending\\\\\\\"` using an approval token.\\\\r\\\\n     */\\\\r\\\\n    function approveByToken(token: string): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Blocks a member from logging into the site.\\\\r\\\\n     */\\\\r\\\\n    function blockByEmail(email: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Deletes an existing user.\\\\r\\\\n     */\\\\r\\\\n    function deleteUser(userId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a Triggered Email to the specified site member.\\\\r\\\\n     */\\\\r\\\\n    function emailUser(emailId: string, toUser: string, options?: wix_users.TriggeredEmailOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Create a session token for a member authenticated by a 3rd party.\\\\r\\\\n     */\\\\r\\\\n    function generateSessionToken(email: string): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets an existing user by ID.\\\\r\\\\n     */\\\\r\\\\n    function getUser(userId: string): Promise<wix_users_backend.UserInfo>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Logs a user in based on email and password.\\\\r\\\\n     */\\\\r\\\\n    function login(email: string, password: string): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a new site member.\\\\r\\\\n     */\\\\r\\\\n    function register(email: string, password: string, options?: wix_users.RegistrationOptions): Promise<wix_users_backend.RegistrationResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates an existing user by ID.\\\\r\\\\n     */\\\\r\\\\n    function updateUserFields(userId: string, userInfo: wix_users_backend.UserInfo): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-bookings module contains functionality for working with\\\\r\\\\n *  bookings from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-bookings' {\\\\r\\\\n    /**\\\\r\\\\n     * Books a service and processes payment for the service.\\\\r\\\\n     */\\\\r\\\\n    function checkoutBooking(bookingInfo: wix_bookings.BookingInfo, options?: wix_bookings.PaymentOptions): Promise<wix_bookings.BookingResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the valid checkout options for a service's slot.\\\\r\\\\n     */\\\\r\\\\n    function getCheckoutOptions(slotId: string): Promise<wix_bookings.CheckoutOption[]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the available slots for a specific service.\\\\r\\\\n     */\\\\r\\\\n    function getServiceAvailability(serviceId: string, options?: wix_bookings.AvailabilityOptions): Promise<wix_bookings.ServiceAvailability>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-crm module contains functionality for working with\\\\r\\\\n *  [your site's contacts](https://support.wix.com/en/article/about-your-contact-list)\\\\r\\\\n *  from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-crm' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new contact or updates an existing contact.\\\\r\\\\n     */\\\\r\\\\n    function createContact(contactInfo: wix_crm.ContactInfo): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a Triggered Email to the contact.\\\\r\\\\n     */\\\\r\\\\n    function emailContact(emailId: string, toContact: string, options?: wix_users.TriggeredEmailOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-events module contains functionality for working with\\\\r\\\\n *  Wix Events from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-events' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new RSVP form for the specified event.\\\\r\\\\n     */\\\\r\\\\n    function createEventRsvpForm(eventId: string): wix_events.RsvpForm;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-paid-plans module contains functionality for working with\\\\r\\\\n *  paid plans from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-paid-plans' {\\\\r\\\\n    /**\\\\r\\\\n     * Cancels a specific order (subscription) of a plan.\\\\r\\\\n     */\\\\r\\\\n    function cancelOrder(orderId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Orders a paid plan.\\\\r\\\\n     */\\\\r\\\\n    function orderPlan(planId: string): Promise<wix_paid_plans.OrderResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Orders and purchases a paid plan.\\\\r\\\\n     */\\\\r\\\\n    function purchasePlan(planId: string): Promise<wix_paid_plans.PurchaseResult>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-pay module contains functionality for working with\\\\r\\\\n *  payments from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-pay' {\\\\r\\\\n    /**\\\\r\\\\n     * Starts a payment.\\\\r\\\\n     */\\\\r\\\\n    function startPayment(paymentId: string, options?: wix_pay.PaymentOptions): Promise<wix_pay.PaymentResult>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-search module contains functionality for searching a site.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-search' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a search.\\\\r\\\\n     */\\\\r\\\\n    function search(phrase?: string): wix_search.WixSearchBuilder;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-seo module contains functionality for working with\\\\r\\\\n *  your site's SEO from\\\\r\\\\n *  client-side code.\\\\r\\\\n * \\\\r\\\\n *  Because you want the SEO data you set to be read by search engines, you should\\\\r\\\\n *  always set such data in the [`onReady()`]($w.html#onReady) event handler.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-seo' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the page's SEO-related link tags.\\\\r\\\\n     */\\\\r\\\\n    const links: wix_seo.Link[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the page's SEO-related meta tags.\\\\r\\\\n     */\\\\r\\\\n    const metaTags: wix_seo.MetaTag[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the page's structured data.\\\\r\\\\n     */\\\\r\\\\n    const structuredData: any[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the page's title.\\\\r\\\\n     */\\\\r\\\\n    const title: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the page's SEO-related link tags.\\\\r\\\\n     */\\\\r\\\\n    function setLinks(links: wix_seo.Link[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the page's SEO-related meta tags.\\\\r\\\\n     */\\\\r\\\\n    function setMetaTags(The: wix_seo.MetaTag[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the page's structured data.\\\\r\\\\n     */\\\\r\\\\n    function setStructuredData(structuredData: any[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the page's title.\\\\r\\\\n     */\\\\r\\\\n    function setTitle(): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-stores module contains functionality for working with your\\\\r\\\\n *  site's store from from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-stores' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the availability of a product based on the specified option choices.\\\\r\\\\n     */\\\\r\\\\n    function getProductOptionsAvailability(productId: string, choices: wix_stores.ProductChoices): Promise<wix_stores.ProductOptionsAvailability>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets a product's available variants based on the specified option choices.\\\\r\\\\n     */\\\\r\\\\n    function getProductVariants(productId: string, options: wix_stores.ProductVariantOptions): Promise<wix_stores.VariantList>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-users module contains functionality for working with your\\\\r\\\\n *  site's users from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-users' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the current user viewing the site.\\\\r\\\\n     */\\\\r\\\\n    const currentUser: wix_users.User;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Logs the current user into the site using the given session token.\\\\r\\\\n     */\\\\r\\\\n    function applySessionToken(sessionToken: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a Triggered Email to the currently logged-in site member.\\\\r\\\\n     */\\\\r\\\\n    function emailUser(emailId: string, toUser: string, options?: wix_users.TriggeredEmailOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Logs a user in based on email and password.\\\\r\\\\n     */\\\\r\\\\n    function login(email: string, password: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Logs the current user out of the site.\\\\r\\\\n     */\\\\r\\\\n    function logout(): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the function that runs when a user logs in.\\\\r\\\\n     */\\\\r\\\\n    function onLogin(handler: wix_users.LoginHandler): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Prompts the current site visitor with a password reset.\\\\r\\\\n     */\\\\r\\\\n    function promptForgotPassword(language?: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Prompts the current site visitor to log in as a site member.\\\\r\\\\n     */\\\\r\\\\n    function promptLogin(options: wix_users.LoginOptions): Promise<wix_users.User>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a new site member.\\\\r\\\\n     */\\\\r\\\\n    function register(email: string, password: string, options?: wix_users.RegistrationOptions): Promise<wix_users.RegistrationResult>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace $w {\\\\r\\\\n    /**\\\\r\\\\n     * An element for sending and receiving chat messages.\\\\r\\\\n     */\\\\r\\\\n    interface Chatbox extends $w.Element, $w.HiddenMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an element appears on all pages or only on the current page.\\\\r\\\\n         */\\\\r\\\\n        readonly global: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the chatbox is visible or hidden.\\\\r\\\\n         */\\\\r\\\\n        readonly hidden: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is actually visible.\\\\r\\\\n         */\\\\r\\\\n        readonly isVisible: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the chatbox is maximized.\\\\r\\\\n         */\\\\r\\\\n        readonly maximized: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Note: This standard element property is not relevant for Chatbox.\\\\r\\\\n         */\\\\r\\\\n        readonly parent: $w.Node;\\\\r\\\\n        /**\\\\r\\\\n         * Expands the chatbox and focuses it on the specified chat channel.\\\\r\\\\n         */\\\\r\\\\n        focusChannel(channelInfo: $w.Chatbox.ChannelInfo): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a chatbox channel.\\\\r\\\\n         */\\\\r\\\\n        getChannel(channelInfo: $w.Chatbox.ChannelInfo): Promise<$w.Chatbox.Channel>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of available chat channels for a site visitor.\\\\r\\\\n         */\\\\r\\\\n        getChannelList(): Promise<$w.Chatbox.Channel[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Expands the chatbox and sets its [`maximized`](#maximized) property to `true`.\\\\r\\\\n         */\\\\r\\\\n        maximize(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Collapses the chatbox and sets its [`maximized`](#maximized) property to `false`.\\\\r\\\\n         */\\\\r\\\\n        minimize(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when the chatbox is maximized.\\\\r\\\\n         */\\\\r\\\\n        onMaximize(): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a site visitor receives a chat message.\\\\r\\\\n         */\\\\r\\\\n        onMessageReceived(message: $w.Chatbox.Message): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a site visitor sends a chat message.\\\\r\\\\n         */\\\\r\\\\n        onMessageSent(message: $w.Chatbox.Message): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when the chatbox is minimized.\\\\r\\\\n         */\\\\r\\\\n        onMinimize(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Note: This standard element event is not relevant for Chatbox.\\\\r\\\\n         */\\\\r\\\\n        onViewportEnter(handler: $w.EventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Note: This standard element event is not relevant for Chatbox.\\\\r\\\\n         */\\\\r\\\\n        onViewportLeave(handler: $w.EventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Note: This standard element function is not relevant for Chatbox.\\\\r\\\\n         */\\\\r\\\\n        scrollTo(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Sends a chat message from a site visitor.\\\\r\\\\n         */\\\\r\\\\n        sendMessage(messageInfo: $w.Chatbox.MessageInfo): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Chatbox {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a chat channel.\\\\r\\\\n         */\\\\r\\\\n        type Channel = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the channel.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Display information associated with the channel.\\\\r\\\\n             */\\\\r\\\\n            displayData: $w.Chatbox.DisplayData;\\\\r\\\\n            /**\\\\r\\\\n             * An array of messages sent over the channel. Currently only the last message is included.\\\\r\\\\n             */\\\\r\\\\n            messages: $w.Chatbox.Message[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about a chat channel.\\\\r\\\\n         */\\\\r\\\\n        type ChannelInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of a chat channel.\\\\r\\\\n             */\\\\r\\\\n            channelId?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of chat channel.\\\\r\\\\n             *  One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Focused\\\\\\\"`: Currently focused channel.\\\\r\\\\n             *  + `\\\\\\\"Business\\\\\\\"`: Business channel.\\\\r\\\\n             */\\\\r\\\\n            type?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing display information associated with a [`Channel`](#channel).\\\\r\\\\n         */\\\\r\\\\n        type DisplayData = {\\\\r\\\\n            /**\\\\r\\\\n             * The image associated with the channel.\\\\r\\\\n             *  One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + For private social channels, the image associated with the site member's account. If there is no image associated with the account, defaults to the avatar image.\\\\r\\\\n             *  + For group social channels, the image associated with the chat group.\\\\r\\\\n             *  + For business channels, `image` is not currently supported.\\\\r\\\\n             */\\\\r\\\\n            image: string;\\\\r\\\\n            /**\\\\r\\\\n             * For social channels, the member's name or chat group name. For business channels, the site's [display name](wix-site-backend.generalInfo.html#getSiteDisplayName).\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Only supported for business channels. Initials of the site's business.\\\\r\\\\n             */\\\\r\\\\n            initials: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about a chat message.\\\\r\\\\n         */\\\\r\\\\n        type Message = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the channel on which the message was sent.\\\\r\\\\n             */\\\\r\\\\n            channelId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of message. Currently only `TEXT` is supported.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * First 250 characters of the chat message. Currently only text is included in the summary.\\\\r\\\\n             */\\\\r\\\\n            summary: string;\\\\r\\\\n            /**\\\\r\\\\n             * The sender's member ID. For a message sent from the site's business, the site owner's member ID.\\\\r\\\\n             */\\\\r\\\\n            participantId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time the message was sent.\\\\r\\\\n             */\\\\r\\\\n            createdAt: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Content of the message.\\\\r\\\\n             */\\\\r\\\\n            payload: $w.Chatbox.MessagePayload;\\\\r\\\\n            /**\\\\r\\\\n             * An object representing additional contextual message information included in a chat message. Only relevant for messages sent using the backend [`sendMessage()`](wix-chat-backend.html#sendMessage) function. Site visitors do not see metadata.\\\\r\\\\n             */\\\\r\\\\n            metadata?: any;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a chat message to be sent.\\\\r\\\\n         */\\\\r\\\\n        type MessageInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * The text to be sent in the message.\\\\r\\\\n             */\\\\r\\\\n            messageText: string;\\\\r\\\\n            /**\\\\r\\\\n             * The ID of the channel over which the message is sent. If empty, message is sent to the site's business.\\\\r\\\\n             */\\\\r\\\\n            channelId?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * The content of a chat message.\\\\r\\\\n         */\\\\r\\\\n        type MessagePayload = {\\\\r\\\\n            /**\\\\r\\\\n             * Text of the chat message.\\\\r\\\\n             */\\\\r\\\\n            text: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A post page for a specific blog post.\\\\r\\\\n     */\\\\r\\\\n    interface PostPage extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the all the information associated with the current blog post.\\\\r\\\\n         */\\\\r\\\\n        getPost(): Promise<$w.PostPage.BlogPost>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace PostPage {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a blog post on a post page.\\\\r\\\\n         */\\\\r\\\\n        type BlogPost = {\\\\r\\\\n            /**\\\\r\\\\n             * Post ID.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Post title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Text of the post.\\\\r\\\\n             */\\\\r\\\\n            plainContent: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the post was originally published.\\\\r\\\\n             */\\\\r\\\\n            publishedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Number of times the post was viewed.\\\\r\\\\n             */\\\\r\\\\n            viewCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of likes the post received.\\\\r\\\\n             */\\\\r\\\\n            likeCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of comments the post received.\\\\r\\\\n             */\\\\r\\\\n            commentCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Date the post was most recently published.\\\\r\\\\n             */\\\\r\\\\n            lastPublishedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the cover image is displayed in the post.\\\\r\\\\n             */\\\\r\\\\n            coverImageDisplayed: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Estimated time in minutes required to read the post.\\\\r\\\\n             */\\\\r\\\\n            timeToRead: number;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the post was pinned to the top of the blog feed.\\\\r\\\\n             */\\\\r\\\\n            pinned: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the post is set as featured in the post settings. Featured posts appear in custom blog feeds.\\\\r\\\\n             */\\\\r\\\\n            featured: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * List of all hashtags in the post.\\\\r\\\\n             */\\\\r\\\\n            hashtags: string[];\\\\r\\\\n            /**\\\\r\\\\n             * The post's cover [image]($w.Image.html#src).\\\\r\\\\n             */\\\\r\\\\n            coverImage: string;\\\\r\\\\n            /**\\\\r\\\\n             * Relative URL of the post page on your published site.\\\\r\\\\n             */\\\\r\\\\n            postPageUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * A few lines of text that appear in the blog feed. Defined in Post Settings or default of first 160 characters of the post.\\\\r\\\\n             */\\\\r\\\\n            excerpt: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The menu in a user profile.\\\\r\\\\n     */\\\\r\\\\n    interface AccountNavBar extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Anchors\\\\r\\\\n     *  are invisible position markers which you can place anywhere on your site.\\\\r\\\\n     *  They are a useful way to direct users to important sections.\\\\r\\\\n     */\\\\r\\\\n    interface Anchor extends $w.Node, $w.ViewportMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the name of an anchor.\\\\r\\\\n         */\\\\r\\\\n        readonly name: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for background images in certain elements.\\\\r\\\\n     */\\\\r\\\\n    interface Background {\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the element's background.\\\\r\\\\n         */\\\\r\\\\n        readonly background: $w.Background.BackgroundOptions;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Background {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `background` property that contains the background options.\\\\r\\\\n         */\\\\r\\\\n        type BackgroundOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * The file location of the background image or video.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Container boxes\\\\r\\\\n     *  are used to structure your site. You can attach\\\\r\\\\n     *  any element to a container box and move the box around, which is a useful\\\\r\\\\n     *  way to to keep elements together. Some actions performed on a box affect the\\\\r\\\\n     *  elements it contains. For example, [hiding](#hide) a box also effectively\\\\r\\\\n     *  hides all the elements in the box, although the values of the\\\\r\\\\n     *  [hidden](#hidden) properties of the elements contained in the box do not change.\\\\r\\\\n     */\\\\r\\\\n    interface Box extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin, $w.ContainableMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the box's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A text button or an icon button.\\\\r\\\\n     */\\\\r\\\\n    interface Button extends $w.Element, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.LinkableMixin, $w.ClickableMixin, $w.StyleMixin, $w.LabelMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the label of a text button.\\\\r\\\\n         */\\\\r\\\\n        label: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the button's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Checkboxes are used for a single binary choice.\\\\r\\\\n     */\\\\r\\\\n    interface Checkbox extends $w.FormElement, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin, $w.CheckedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a checkbox is checked.\\\\r\\\\n         */\\\\r\\\\n        checked: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Determines if a checkbox is required to be checked.\\\\r\\\\n         */\\\\r\\\\n        required: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the checkbox's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a checkbox's value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Checkbox groups are used for selecting any number of the given\\\\r\\\\n     *  options. Checkbox groups consist of a list of [options](#Option). Each\\\\r\\\\n     *  [option](#Option) contains a label, which is what the user sees, and a\\\\r\\\\n     *  value, which is what is used in code and stored in your collections.\\\\r\\\\n     */\\\\r\\\\n    interface CheckboxGroup extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the options of a checkbox group.\\\\r\\\\n         */\\\\r\\\\n        options: $w.CheckboxGroup.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the indices of the selected options.\\\\r\\\\n         */\\\\r\\\\n        selectedIndices: number[];\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the checkbox group's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the selected options.\\\\r\\\\n         */\\\\r\\\\n        value: string[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace CheckboxGroup {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `options` property that contains the attributes of checkbox item.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * The value of the checkbox option. This is what you use in code and is what is stored in your collections.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * The label of the checkbox option. This is what a user sees.\\\\r\\\\n             */\\\\r\\\\n            label?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface CheckedMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether the element is checked or not.\\\\r\\\\n         */\\\\r\\\\n        checked: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface ClickableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element is clicked.\\\\r\\\\n         */\\\\r\\\\n        onClick(handler: $w.MouseEventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element is double-clicked.\\\\r\\\\n         */\\\\r\\\\n        onDblClick(handler: $w.MouseEventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be collapsed.\\\\r\\\\n     * \\\\r\\\\n     *  To learn about the behavior of a collapsed element,\\\\r\\\\n     *  see the [`collapsed`](#collapsed) property.\\\\r\\\\n     */\\\\r\\\\n    interface CollapsedMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is collapsed or expanded.\\\\r\\\\n         */\\\\r\\\\n        readonly collapsed: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Collapses the element and sets its `collapsed` property to `true`.\\\\r\\\\n         */\\\\r\\\\n        collapse(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Expands the element and sets its `collapsed` property to `false`.\\\\r\\\\n         */\\\\r\\\\n        expand(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A `Column` is a component part of a `ColumnStrip`.\\\\r\\\\n     */\\\\r\\\\n    interface Column extends $w.Element, $w.HiddenCollapsedMixin, $w.Background, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A `ColumnStrip` is a strip of `Column` elements.\\\\r\\\\n     */\\\\r\\\\n    interface ColumnStrip extends $w.Element, $w.Background, $w.HiddenCollapsedMixin, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the column strip's background, such as its image or video source.\\\\r\\\\n         */\\\\r\\\\n        readonly background: $w.Document.BackgroundOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of all the columns contained in the column strip.\\\\r\\\\n         */\\\\r\\\\n        readonly columns: $w.Column[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can contain other elements.\\\\r\\\\n     *  Some elements, such as pages, headers, footers, and boxes, can contain\\\\r\\\\n     *  other elements. This occurs when you drag an element onto a container\\\\r\\\\n     *  element and attach it.\\\\r\\\\n     *  These attached elements are considered the parent element's children. Some\\\\r\\\\n     *  actions performed on the parent, such as [`hiding`]($w.HiddenMixin.html#hide),\\\\r\\\\n     *  affect the element's children as well.\\\\r\\\\n     */\\\\r\\\\n    interface ContainableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Gets an array of the elements that are contained within the element.\\\\r\\\\n         */\\\\r\\\\n        readonly children: $w.Element[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A container for Repeater items.\\\\r\\\\n     */\\\\r\\\\n    interface Container extends $w.Element, $w.HiddenCollapsedMixin, $w.Background, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A `DatePicker` is used for entering dates. It lets users populate a\\\\r\\\\n     *  date field by picking a date using a calendar popup.\\\\r\\\\n     */\\\\r\\\\n    interface DatePicker extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.ReadOnlyMixin, $w.ClickableMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the dates that a user cannot select.\\\\r\\\\n         */\\\\r\\\\n        disabledDates: Date[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the days of the week that a user cannot select.\\\\r\\\\n         */\\\\r\\\\n        disabledDaysOfWeek: number[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the latest date that a user can select.\\\\r\\\\n         */\\\\r\\\\n        maxDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the earliest date that a user can select.\\\\r\\\\n         */\\\\r\\\\n        minDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the date picker.\\\\r\\\\n         */\\\\r\\\\n        value: Date;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface DisabledMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is enabled or disabled.\\\\r\\\\n         */\\\\r\\\\n        readonly enabled: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Disables the element and sets its `enabled` property to `false`.\\\\r\\\\n         */\\\\r\\\\n        disable(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Enables the element and sets its `enabled` property to `true`.\\\\r\\\\n         */\\\\r\\\\n        enable(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A complete web page, which consists of a Header, Page, and Footer.\\\\r\\\\n     */\\\\r\\\\n    interface Document {\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the document's background, such as its image or video source.\\\\r\\\\n         */\\\\r\\\\n        readonly background: $w.Document.BackgroundOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the document's Header, Page, and Footer.\\\\r\\\\n         */\\\\r\\\\n        readonly children: $w.Node[];\\\\r\\\\n        /**\\\\r\\\\n         * Gets the document's type.\\\\r\\\\n         */\\\\r\\\\n        readonly type: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Document {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `background` property that contains the background options.\\\\r\\\\n         */\\\\r\\\\n        type BackgroundOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * The file location of the background image.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Dropdowns are used for selecting one of a number of options.\\\\r\\\\n     *  They are especially useful when there are too many options to display using\\\\r\\\\n     *  [radio buttons]($w.RadioButtonGroup.html). Dropdowns consist of a list\\\\r\\\\n     *  of [options](#Option). Each [option](#Option) contains a label, which is\\\\r\\\\n     *  what the user sees, and a value, which is what is used in code and stored in\\\\r\\\\n     *  you collections.\\\\r\\\\n     */\\\\r\\\\n    interface Dropdown extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the options in a dropdown.\\\\r\\\\n         */\\\\r\\\\n        options: $w.Dropdown.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the dropdown's placeholder text.\\\\r\\\\n         */\\\\r\\\\n        placeholder: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the index of the selected option.\\\\r\\\\n         */\\\\r\\\\n        selectedIndex: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the dropdown's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an element's value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Dropdown {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `options` property that contains the attributes of a dropdown list item.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * The value of the dropdown option. This is what you use in code and is what is stored in your collections.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * The label of the dropdown option. This is what a user sees.\\\\r\\\\n             */\\\\r\\\\n            label?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Use effect options to customize an effect when showing or hiding an element.\\\\r\\\\n     */\\\\r\\\\n    interface EffectOptions {\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace EffectOptions {\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"arc\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type ArcEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"bounce\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type BounceEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n            intensity: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"fade\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FadeEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"flip\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FlipEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"float\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FloatEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"fly\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FlyEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"fold\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FoldEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"glide\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type GlideEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            angle: number;\\\\r\\\\n            distance: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"puff\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type PuffEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"roll\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type RollEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"slide\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type SlideEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"spin\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type SpinEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n            cycles: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"turn\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type TurnEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"zoom\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type ZoomEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides basic functionality for elements.\\\\r\\\\n     */\\\\r\\\\n    interface Element extends $w.Node, $w.ViewportMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an element is currently in the DOM structure.\\\\r\\\\n         */\\\\r\\\\n        readonly rendered: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the mouse pointer is moved\\\\r\\\\n         *  onto the element.\\\\r\\\\n         */\\\\r\\\\n        onMouseIn(handler: $w.MouseEventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the mouse pointer is moved\\\\r\\\\n         *  off of the element.\\\\r\\\\n         */\\\\r\\\\n        onMouseOut(handler: $w.MouseEventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Events are fired when certain actions occur to elements.\\\\r\\\\n     */\\\\r\\\\n    interface Event {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the context of the event on a repeated element.\\\\r\\\\n         */\\\\r\\\\n        readonly context: $w.Event.EventContext;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the element that the event was fired on.\\\\r\\\\n         */\\\\r\\\\n        readonly target: $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the type of event that was fired.\\\\r\\\\n         */\\\\r\\\\n        readonly type: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Event {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about the context in which an event was fired.\\\\r\\\\n         */\\\\r\\\\n        type EventContext = {\\\\r\\\\n            /**\\\\r\\\\n             * `\\\\\\\"GLOBAL_SCOPE\\\\\\\"` for events fired outside\\\\r\\\\n             *  of repeaters, or `\\\\\\\"COMPONENT_SCOPE\\\\\\\"` for events fired from repeaters.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the repeater item where the\\\\r\\\\n             *  event was fired from.\\\\r\\\\n             */\\\\r\\\\n            itemId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can set and lose focus.\\\\r\\\\n     * \\\\r\\\\n     *  The element on the page that is currently active is the element in focus.\\\\r\\\\n     *  Only one element on the page can have focus at any given moment.\\\\r\\\\n     *  Typically, an element exhibits a visual cue, such as a subtle outline,\\\\r\\\\n     *  indicating that it is in focus. The element in focus receives keystroke\\\\r\\\\n     *  events if the user causes any.\\\\r\\\\n     * \\\\r\\\\n     *  An element receives focus and loses focus (blurs) through user actions,\\\\r\\\\n     *  such as clicking and tabbing, or programmatically, using the\\\\r\\\\n     *  [focus( )](#focus) and [blur( )](#blur) functions.\\\\r\\\\n     */\\\\r\\\\n    interface FocusMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Removes focus from the element.\\\\r\\\\n         */\\\\r\\\\n        blur(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Places focus on the element.\\\\r\\\\n         */\\\\r\\\\n        focus(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element loses focus.\\\\r\\\\n         */\\\\r\\\\n        onBlur(handler: $w.EventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element receives focus.\\\\r\\\\n         */\\\\r\\\\n        onFocus(handler: $w.EventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The footer is the area of your site that appears at the bottom and\\\\r\\\\n     *  throughout all of your pages.\\\\r\\\\n     */\\\\r\\\\n    interface Footer extends $w.Element, $w.ClickableMixin, $w.ContainableMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the footer's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality related to user input elements.\\\\r\\\\n     */\\\\r\\\\n    interface FormElement extends $w.Element, $w.ValidatableMixin, $w.ValueMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A gallery for displaying multiple items.\\\\r\\\\n     */\\\\r\\\\n    interface Gallery extends $w.Element, $w.HiddenCollapsedMixin, $w.PlayableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the action that occurs when an item in the gallery is clicked.\\\\r\\\\n         */\\\\r\\\\n        clickAction: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the index of the gallery's current item.\\\\r\\\\n         */\\\\r\\\\n        readonly currentIndex: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the current item.\\\\r\\\\n         */\\\\r\\\\n        readonly currentItem: $w.Gallery.ImageItem | $w.Gallery.VideoItem;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the gallery's capabilities.\\\\r\\\\n         */\\\\r\\\\n        readonly galleryCapabilities: $w.Gallery.GalleryCapabilities;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the items in a gallery.\\\\r\\\\n         */\\\\r\\\\n        items: $w.Gallery.ImageItem[] | $w.Gallery.VideoItem[];\\\\r\\\\n        /**\\\\r\\\\n         * Determines if a gallery's navigation arrows are shown.\\\\r\\\\n         */\\\\r\\\\n        showNavigationButtons: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a gallery's current item changes.\\\\r\\\\n         */\\\\r\\\\n        onCurrentItemChanged(handler: $w.GalleryItemChangedEventHandler): $w.Gallery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an item in a gallery is\\\\r\\\\n         *  clicked.\\\\r\\\\n         */\\\\r\\\\n        onItemClicked(handler: $w.GalleryItemClickedEventHandler): $w.Gallery;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Gallery {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `galleryCapabilities` property that contains the capabilities of a gallery.\\\\r\\\\n         */\\\\r\\\\n        type GalleryCapabilities = {\\\\r\\\\n            /**\\\\r\\\\n             * Indicates if the gallery supports play operations.\\\\r\\\\n             */\\\\r\\\\n            isPlayable: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates if the gallery supports the notion of a current item.\\\\r\\\\n             */\\\\r\\\\n            hasCurrentItem: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates if the gallery supports navigation buttons.\\\\r\\\\n             */\\\\r\\\\n            hasNavigationButtons: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the Gallery properties `items` and `currentItem` to represent a single gallery image.\\\\r\\\\n         */\\\\r\\\\n        type ImageItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Item type. Value is `\\\\\\\"image\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Item slug.\\\\r\\\\n             */\\\\r\\\\n            slug: string;\\\\r\\\\n            /**\\\\r\\\\n             * Image source URL.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n            /**\\\\r\\\\n             * Image description. Descriptions over 100 characters are truncated.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Image title.\\\\r\\\\n             */\\\\r\\\\n            title?: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the image's clickable link. See [here]($w.LinkableMixin.html#link) for more information about links.\\\\r\\\\n             */\\\\r\\\\n            link?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the Gallery properties `items` and `currentItem` to represent a single gallery video.\\\\r\\\\n         */\\\\r\\\\n        type VideoItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Item type. Value is `\\\\\\\"video\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Item slug.\\\\r\\\\n             */\\\\r\\\\n            slug: string;\\\\r\\\\n            /**\\\\r\\\\n             * Video source URL.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n            /**\\\\r\\\\n             * Video description. Descriptions over 100 characters are truncated.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Video title.\\\\r\\\\n             */\\\\r\\\\n            title?: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the video's clickable link. See [here]($w.LinkableMixin.html#link) for more information about links.\\\\r\\\\n             */\\\\r\\\\n            link?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Video thumbnail URL.\\\\r\\\\n             */\\\\r\\\\n            thumbnail?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a gallery moves to a new image.\\\\r\\\\n     */\\\\r\\\\n    interface GalleryItemChangedEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the gallery item.\\\\r\\\\n         */\\\\r\\\\n        readonly item: $w.Gallery.ImageItem | $w.Gallery.VideoItem;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the gallery item's index.\\\\r\\\\n         */\\\\r\\\\n        readonly itemIndex: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when an image in a gallery is clicked.\\\\r\\\\n     */\\\\r\\\\n    interface GalleryItemClickedEvent extends $w.GalleryItemChangedEvent, $w.Event{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A [Google Map element](https://www.wix.com/support/html5/article/adding-google-maps)\\\\r\\\\n     *  that allows you to display a given location.\\\\r\\\\n     */\\\\r\\\\n    interface GoogleMap extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the location information of a map's marked location.\\\\r\\\\n         */\\\\r\\\\n        location: $w.GoogleMap.MapLocation;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace GoogleMap {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `location` property that\\\\r\\\\n         *  contains the attributes of a marked map location.\\\\r\\\\n         */\\\\r\\\\n        type MapLocation = {\\\\r\\\\n            /**\\\\r\\\\n             * The latitude of the location. Must be between -90 and 90.\\\\r\\\\n             */\\\\r\\\\n            latitude: number;\\\\r\\\\n            /**\\\\r\\\\n             * The longitude of the location. Must be between -180 and 180.\\\\r\\\\n             */\\\\r\\\\n            longitude: number;\\\\r\\\\n            /**\\\\r\\\\n             * The description of the location.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The header is the area of your site that appears at the top and\\\\r\\\\n     *  throughout all of your pages.\\\\r\\\\n     */\\\\r\\\\n    interface Header extends $w.Element, $w.ClickableMixin, $w.ContainableMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the header's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for all elements that can be hidden or collapsed.\\\\r\\\\n     */\\\\r\\\\n    interface HiddenCollapsedElement extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for all elements that can be hidden or collapsed.\\\\r\\\\n     */\\\\r\\\\n    interface HiddenCollapsedMixin extends $w.HiddenMixin, $w.CollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be hidden.\\\\r\\\\n     * \\\\r\\\\n     *  To learn about the behavior of a hidden element,\\\\r\\\\n     *  see the [`hidden`](#hidden) property.\\\\r\\\\n     */\\\\r\\\\n    interface HiddenMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is visible or hidden.\\\\r\\\\n         */\\\\r\\\\n        readonly hidden: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is actually visible.\\\\r\\\\n         */\\\\r\\\\n        readonly isVisible: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Hides the element and sets its `hidden` property\\\\r\\\\n         *  to `true`, using an effect if specified.\\\\r\\\\n         */\\\\r\\\\n        hide(effectName?: string, effectOptions?: $w.EffectOptions.ArcEffectOptions | $w.EffectOptions.BounceEffectOptions | $w.EffectOptions.FadeEffectOptions | $w.EffectOptions.FlipEffectOptions | $w.EffectOptions.FloatEffectOptions | $w.EffectOptions.FlyEffectOptions | $w.EffectOptions.FoldEffectOptions | $w.EffectOptions.GlideEffectOptions | $w.EffectOptions.PuffEffectOptions | $w.EffectOptions.RollEffectOptions | $w.EffectOptions.SlideEffectOptions | $w.EffectOptions.SpinEffectOptions | $w.EffectOptions.TurnEffectOptions | $w.EffectOptions.ZoomEffectOptions): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Shows the element and sets its `hidden` property\\\\r\\\\n         *  to `false`, using an effect if specified.\\\\r\\\\n         */\\\\r\\\\n        show(effectName?: string, effectOptions?: $w.EffectOptions.ArcEffectOptions | $w.EffectOptions.BounceEffectOptions | $w.EffectOptions.FadeEffectOptions | $w.EffectOptions.FlipEffectOptions | $w.EffectOptions.FloatEffectOptions | $w.EffectOptions.FlyEffectOptions | $w.EffectOptions.FoldEffectOptions | $w.EffectOptions.GlideEffectOptions | $w.EffectOptions.PuffEffectOptions | $w.EffectOptions.RollEffectOptions | $w.EffectOptions.SlideEffectOptions | $w.EffectOptions.SpinEffectOptions | $w.EffectOptions.TurnEffectOptions | $w.EffectOptions.ZoomEffectOptions): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A container for internal or external HTML code. Messages can be sent\\\\r\\\\n     *  from your page code to the code in an HTML component and from the HTML\\\\r\\\\n     *  component to your page code using the [`postMessage()`](#postMessage) and\\\\r\\\\n     *  [`onMessage()`](#onMessage) functions. To learn more about what code an HTML\\\\r\\\\n     *  component can hold, see here.\\\\r\\\\n     * \\\\r\\\\n     *  For an overview of working with an HTML Component using code, see Working with the HTML Element.\\\\r\\\\n     */\\\\r\\\\n    interface HtmlComponent extends $w.IFrame{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether the HTML Component displays scrollbars.\\\\r\\\\n         */\\\\r\\\\n        scrolling: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the URL of the HTML Component's code.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Allows the HTML Component to be put into full screen mode.\\\\r\\\\n         */\\\\r\\\\n        allowFullScreen(): $w.HtmlComponent;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the HTML Component\\\\r\\\\n         *  sends a message.\\\\r\\\\n         */\\\\r\\\\n        onMessage(handler: $w.HtmlComponentMessageEventHandler): $w.HtmlComponent;\\\\r\\\\n        /**\\\\r\\\\n         * Sends a message to the HTML Component.\\\\r\\\\n         */\\\\r\\\\n        postMessage(message: string | number | boolean | any | any[]): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when the code in an HtmlComponent sends a message.\\\\r\\\\n     */\\\\r\\\\n    interface HtmlComponentMessageEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the event data.\\\\r\\\\n         */\\\\r\\\\n        readonly data: $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for iframe-based elements, such as `HtmlComponent`.\\\\r\\\\n     */\\\\r\\\\n    interface IFrame extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a user hovers over a star on a ratings input component.\\\\r\\\\n     */\\\\r\\\\n    interface IconMouseInEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the display label that corresponds to the icon that the mouse entered.\\\\r\\\\n         */\\\\r\\\\n        readonly label: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the value (1-5) that corresponds to the icon that the mouse entered.\\\\r\\\\n         */\\\\r\\\\n        readonly value: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Images are images stored in the Media Manager\\\\r\\\\n     *  or retrieved from an external web location.\\\\r\\\\n     * \\\\r\\\\n     *  The URL formats for images are:\\\\r\\\\n     * \\\\r\\\\n     *  + Images from the Media Manager: `wix:image://v1//#originWidth=&originHeight=[&watermark=]`\\\\r\\\\n     *  + Images from the web: `http(s)://`\\\\r\\\\n     */\\\\r\\\\n    interface Image extends $w.Element, $w.HiddenCollapsedMixin, $w.LinkableMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an image's alt text.\\\\r\\\\n         */\\\\r\\\\n        alt: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the action that occurs when an image is clicked.\\\\r\\\\n         */\\\\r\\\\n        clickAction: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets how an image is placed inside an image element.\\\\r\\\\n         */\\\\r\\\\n        fitMode: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the file location of the image.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an image's tooltip.\\\\r\\\\n         */\\\\r\\\\n        tooltip: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when the keyboard is pressed.\\\\r\\\\n     */\\\\r\\\\n    interface KeyboardEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the Option key on a Mac or Alt key on a PC was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly altKey: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the Control (Ctrl) key was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly ctrlKey: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a string representation of the key that was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly key: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the ⌘ Command key on a Mac or ⊞ Windows key on a PC\\\\r\\\\n         *  was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly metaKey: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the Shift key was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly shiftKey: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface LabelMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the label of an element.\\\\r\\\\n         */\\\\r\\\\n        label: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can acts as links.\\\\r\\\\n     */\\\\r\\\\n    interface LinkableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the element's link.\\\\r\\\\n         */\\\\r\\\\n        link: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the target of the element's link.\\\\r\\\\n         */\\\\r\\\\n        target: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A container for media items.\\\\r\\\\n     */\\\\r\\\\n    interface MediaBox extends $w.Element, $w.HiddenCollapsedMixin, $w.Background{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A menu container is a container that holds the elements in a\\\\r\\\\n     *  mobile menu. You can add and remove elements to the container to customize\\\\r\\\\n     *  your site's mobile menu. The menu only appears in the mobile version of your\\\\r\\\\n     *  site.\\\\r\\\\n     */\\\\r\\\\n    interface MenuContainer extends $w.Element{\\\\r\\\\n        /**\\\\r\\\\n         * Closes a mobile menu.\\\\r\\\\n         */\\\\r\\\\n        close(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Opens a mobile menu.\\\\r\\\\n         */\\\\r\\\\n        open(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when the mouse is clicked.\\\\r\\\\n     */\\\\r\\\\n    interface MouseEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  left edge of the browser's viewable area.\\\\r\\\\n         */\\\\r\\\\n        readonly clientX: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  top edge of the browser's viewable area.\\\\r\\\\n         */\\\\r\\\\n        readonly clientY: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  left edge of the element that triggered this event.\\\\r\\\\n         */\\\\r\\\\n        readonly offsetX: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  top edge of the element that triggered this event.\\\\r\\\\n         */\\\\r\\\\n        readonly offsetY: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  left edge of the page.\\\\r\\\\n         */\\\\r\\\\n        readonly pageX: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  top edge of the page.\\\\r\\\\n         */\\\\r\\\\n        readonly pageY: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  left edge of the screen or screens.\\\\r\\\\n         */\\\\r\\\\n        readonly screenX: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  top edge of the screen or screens.\\\\r\\\\n         */\\\\r\\\\n        readonly screenY: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Multi-state boxes are containers for states.\\\\r\\\\n     */\\\\r\\\\n    interface MultiStateBox extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the multi-state box's current state.\\\\r\\\\n         */\\\\r\\\\n        readonly currentState: $w.State;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of all the states contained in the multi-state box.\\\\r\\\\n         */\\\\r\\\\n        readonly states: $w.State[];\\\\r\\\\n        /**\\\\r\\\\n         * Change the multi-state box's current state to a specific state.\\\\r\\\\n         */\\\\r\\\\n        changeState(stateReference: string | $w.State): Promise<$w.State>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the multi-state box moves to a new state.\\\\r\\\\n         */\\\\r\\\\n        onChange(eventHandler: $w.EventHandler): $w.MultiStateBox;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides basic functionality for all Wix objects, including objects\\\\r\\\\n     *  that are not [elements]($w.Element.html).\\\\r\\\\n     */\\\\r\\\\n    interface Node {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an element appears on all pages or only on the current page.\\\\r\\\\n         */\\\\r\\\\n        readonly global: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the element's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the element's parent element.\\\\r\\\\n         */\\\\r\\\\n        readonly parent: $w.Node;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the element's type.\\\\r\\\\n         */\\\\r\\\\n        readonly type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Scrolls the page to the element using an animation.\\\\r\\\\n         */\\\\r\\\\n        scrollTo(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A page is a web page that can contain other elements.\\\\r\\\\n     */\\\\r\\\\n    interface Page extends $w.Element, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the page's SEO description.\\\\r\\\\n         */\\\\r\\\\n        readonly description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the page's keywords.\\\\r\\\\n         */\\\\r\\\\n        readonly keywords: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Gets the page's title.\\\\r\\\\n         */\\\\r\\\\n        readonly title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the page is included in the site's menu.\\\\r\\\\n         */\\\\r\\\\n        readonly visibleInMenu: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be played.\\\\r\\\\n     */\\\\r\\\\n    interface PlayableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is currently playing.\\\\r\\\\n         */\\\\r\\\\n        readonly isPlaying: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Moves to the next item.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<$w.Element>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is paused.\\\\r\\\\n         */\\\\r\\\\n        onPause(handler: $w.EventHandler): $w.Gallery & $w.Slideshow;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is started or restarted.\\\\r\\\\n         */\\\\r\\\\n        onPlay(handler: $w.EventHandler): $w.Gallery & $w.Slideshow;\\\\r\\\\n        /**\\\\r\\\\n         * Pauses playback.\\\\r\\\\n         */\\\\r\\\\n        pause(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Begins or resumes playback.\\\\r\\\\n         */\\\\r\\\\n        play(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Moves to the previous image or slide.\\\\r\\\\n         */\\\\r\\\\n        previous(): Promise<$w.Element>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A [quick action bar](https://support.wix.com/en/article/adding-and-setting-up-the-quick-action-bar-on-your-mobile-site)\\\\r\\\\n     *  helps your visitors contact you instantly from their mobile devices. You can\\\\r\\\\n     *  choose which actions appear on it and customize the design to match your site.\\\\r\\\\n     */\\\\r\\\\n    interface QuickActionBar extends $w.HiddenCollapsedMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a quick action bar's alignment.\\\\r\\\\n         */\\\\r\\\\n        alignment: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a quick action bar's color scheme.\\\\r\\\\n         */\\\\r\\\\n        colorScheme: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a quick action bar's color scheme is inverted.\\\\r\\\\n         */\\\\r\\\\n        invertColorScheme: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a quick action bar's labels are shown.\\\\r\\\\n         */\\\\r\\\\n        showLabels: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an item in a quick action bar is\\\\r\\\\n         *  clicked.\\\\r\\\\n         */\\\\r\\\\n        onItemClicked(handler: $w.QuickActionBarItemClickedEventHandler): $w.QuickActionBar;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a quick action bar item is clicked.\\\\r\\\\n     */\\\\r\\\\n    interface QuickActionBarItemClickedEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the gallery item.\\\\r\\\\n         */\\\\r\\\\n        readonly item: $w.QuickActionBarItemClickedEvent.QuickActionBarItem;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the quick action bar item's index.\\\\r\\\\n         */\\\\r\\\\n        readonly itemIndex: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace QuickActionBarItemClickedEvent {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a quick action bar item.\\\\r\\\\n         */\\\\r\\\\n        type QuickActionBarItem = {\\\\r\\\\n            /**\\\\r\\\\n             * The quick action bar item type.\\\\r\\\\n             */\\\\r\\\\n            itemType: string;\\\\r\\\\n            /**\\\\r\\\\n             * The quick action bar item label.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n            /**\\\\r\\\\n             * The quick action bar item link.\\\\r\\\\n             */\\\\r\\\\n            link: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Radio button groups are used for selecting one of a number of\\\\r\\\\n     *  options. Radio button groups consist of a list of [options](#Option). Each\\\\r\\\\n     *  [option](#Option) contains a label, which is what the user sees, and a\\\\r\\\\n     *  value, which is what is used in code and stored in you collections.\\\\r\\\\n     */\\\\r\\\\n    interface RadioButtonGroup extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the options in a radio button group.\\\\r\\\\n         */\\\\r\\\\n        options: $w.RadioButtonGroup.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the index of the selected option.\\\\r\\\\n         */\\\\r\\\\n        selectedIndex: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the radio button group's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the selected option.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace RadioButtonGroup {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `options` property that contains the attributes of a radio button item.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * The value of the radio button option. This is what you use in code and is what is stored in your collections.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * The label of the radio button option. This is what a user sees.\\\\r\\\\n             */\\\\r\\\\n            label?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for input elements which support readonly mode.\\\\r\\\\n     */\\\\r\\\\n    interface ReadOnlyMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets if a user can modify the value of the input element.\\\\r\\\\n         */\\\\r\\\\n        readOnly: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A repeating layout.\\\\r\\\\n     */\\\\r\\\\n    interface Repeater extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the repeater data.\\\\r\\\\n         */\\\\r\\\\n        data: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Runs a function for each repeated item.\\\\r\\\\n         */\\\\r\\\\n        forEachItem(callback: $w.ForItemCallback): void;\\\\r\\\\n        /**\\\\r\\\\n         * Runs a function for each repeated item with the given IDs.\\\\r\\\\n         */\\\\r\\\\n        forItems(itemIds: string[], callback: $w.ForItemCallback): void;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the function that runs when a new repeated item is created.\\\\r\\\\n         */\\\\r\\\\n        onItemReady(handler: $w.ItemReadyEventHandler): $w.Repeater;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the function that runs when a repeated item is removed.\\\\r\\\\n         */\\\\r\\\\n        onItemRemoved(handler: $w.ItemRemovedEventHandler): $w.Repeater;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for input elements can be required to have a value.\\\\r\\\\n     */\\\\r\\\\n    interface RequiredMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether an input element is required to have a value.\\\\r\\\\n         */\\\\r\\\\n        required: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A `Slide` from a `Slideshow` that can contain other elements.\\\\r\\\\n     */\\\\r\\\\n    interface Slide extends $w.Element, $w.Background, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the slide's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the name of the slide.\\\\r\\\\n         */\\\\r\\\\n        readonly name: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Slideshows are playable containers for slides.\\\\r\\\\n     */\\\\r\\\\n    interface Slideshow extends $w.Element, $w.HiddenCollapsedMixin, $w.PlayableMixin, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the index of the slideshow's current slide.\\\\r\\\\n         */\\\\r\\\\n        readonly currentIndex: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the slideshow's current slide.\\\\r\\\\n         */\\\\r\\\\n        readonly currentSlide: $w.Slide;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a slideshow's navigation buttons are shown.\\\\r\\\\n         */\\\\r\\\\n        showNavigationButtons: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Set or returns whether a slideshow's slide buttons are shown.\\\\r\\\\n         */\\\\r\\\\n        showSlideButtons: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of all the slides contained in the slideshow.\\\\r\\\\n         */\\\\r\\\\n        readonly slides: $w.Slide[];\\\\r\\\\n        /**\\\\r\\\\n         * Change the slideshow's current slide to a specific slide or index.\\\\r\\\\n         */\\\\r\\\\n        changeSlide(slideReference: number | $w.Slide): Promise<$w.Slide>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the slideshow moves to a new slide.\\\\r\\\\n         */\\\\r\\\\n        onChange(eventHandler: $w.EventHandler): $w.Slideshow;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Note: This feature is not yet available to all users.\\\\r\\\\n     */\\\\r\\\\n    interface State extends $w.Element, $w.Background, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the state's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an element's styles.\\\\r\\\\n     * \\\\r\\\\n     * Elements that expose a style property can be styled programmatically.\\\\r\\\\n     * You cannot programmatically style elements that do not expose a style property.\\\\r\\\\n     * \\\\r\\\\n     * The following elements expose the style property:\\\\r\\\\n     * \\\\r\\\\n     *  + [`Box`]($w.Box.html)\\\\r\\\\n     *  + [`Button`]($w.Button.html)\\\\r\\\\n     *  + [`Checkbox`]($w.Checkbox.html)\\\\r\\\\n     *  + [`CheckboxGroup`]($w.CheckboxGroup.html)\\\\r\\\\n     *  + [`Dropdown`]($w.Dropdown.html)\\\\r\\\\n     *  + [`Footer`]($w.Footer.html)\\\\r\\\\n     *  + [`Header`]($w.Header.html)\\\\r\\\\n     *  + [`ProgressBar`]($w.ProgressBar.html)\\\\r\\\\n     *  + [`QuickActionBar`]($w.QuickActionBar.html)\\\\r\\\\n     *  + [`RadioButtonGroup`]($w.RadioButtonGroup.html)\\\\r\\\\n     *  + [`TextBox`]($w.TextBox.html)\\\\r\\\\n     *  + [`TextInput`]($w.TextInput.html)\\\\r\\\\n     *  + [`UploadButton`]($w.UploadButton.html)\\\\r\\\\n     */\\\\r\\\\n    interface Style {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the background color of an element.\\\\r\\\\n         */\\\\r\\\\n        backgroundColor: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the border color of an element.\\\\r\\\\n         */\\\\r\\\\n        borderColor: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the border radius of an element.\\\\r\\\\n         */\\\\r\\\\n        borderRadius: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the border width of an element.\\\\r\\\\n         */\\\\r\\\\n        borderWidth: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the text color of an element.\\\\r\\\\n         */\\\\r\\\\n        color: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the foreground color of an element.\\\\r\\\\n         */\\\\r\\\\n        foregroundColor: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be styled.\\\\r\\\\n     */\\\\r\\\\n    interface StyleMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the element's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A table for displaying data.\\\\r\\\\n     */\\\\r\\\\n    interface Table extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the defining properties of the columns in a table.\\\\r\\\\n         */\\\\r\\\\n        columns: $w.Table.Column[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets the function that is called when a new page of table data is to be displayed.\\\\r\\\\n         */\\\\r\\\\n        dataFetcher: Function;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the table's pagination options.\\\\r\\\\n         */\\\\r\\\\n        pagination: $w.Table.PaginationOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the table's row data.\\\\r\\\\n         */\\\\r\\\\n        rows: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a table cell is selected.\\\\r\\\\n         */\\\\r\\\\n        onCellSelect(eventHandler: $w.TableCellEventHandler): $w.Table;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the table's data is changed.\\\\r\\\\n         */\\\\r\\\\n        onDataChange(eventHandler: $w.EventHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a table row is selected.\\\\r\\\\n         */\\\\r\\\\n        onRowSelect(eventHandler: $w.TableRowEventHandler): $w.Table;\\\\r\\\\n        /**\\\\r\\\\n         * Fetches the most current data and updates the table.\\\\r\\\\n         */\\\\r\\\\n        refresh(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Selects a table row by index.\\\\r\\\\n         */\\\\r\\\\n        selectRow(index: number): void;\\\\r\\\\n        /**\\\\r\\\\n         * Updates a the row data of a single row at the specified index.\\\\r\\\\n         */\\\\r\\\\n        updateRow(index: number, rowData: any): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Table {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `columns` property that\\\\r\\\\n         *  contains the properties that define a table column. Table columns do not\\\\r\\\\n         *  store any data.\\\\r\\\\n         */\\\\r\\\\n        type Column = {\\\\r\\\\n            /**\\\\r\\\\n             * The column ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * The location of the data displayed\\\\r\\\\n             *  in the column.\\\\r\\\\n             * \\\\r\\\\n             *  When the table is populated by a connection to a dataset, the `dataPath`\\\\r\\\\n             *  value is a field key from the collection that the dataset is connected to.\\\\r\\\\n             * \\\\r\\\\n             *  When the table is populated by using the [`rows`](#rows) or\\\\r\\\\n             *  [`dataFetcher`](#dataFetcher) properties, the `dataPath` value is one of the\\\\r\\\\n             *  property keys from the table's row objects.\\\\r\\\\n             */\\\\r\\\\n            dataPath: string;\\\\r\\\\n            /**\\\\r\\\\n             * The column header label.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n            /**\\\\r\\\\n             * The type of data in this column: `\\\\\\\"number\\\\\\\"`, `\\\\\\\"string\\\\\\\"`, `\\\\\\\"date\\\\\\\"`, `\\\\\\\"image\\\\\\\"`, `\\\\\\\"bool\\\\\\\"`, or `\\\\\\\"richText\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * The pixel width of the column.\\\\r\\\\n             */\\\\r\\\\n            width?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the column is visible.\\\\r\\\\n             */\\\\r\\\\n            visible?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * The location of the links used when\\\\r\\\\n             *  the items in the column are clicked.\\\\r\\\\n             * \\\\r\\\\n             *  When the table is populated by a connection to a dataset, the `linkPath`\\\\r\\\\n             *  value is a field key from the collection that the dataset is connected to.\\\\r\\\\n             *  The collection field can be a [regular field](https://support.wix.com/en/article/about-database-collections#regular-fields)\\\\r\\\\n             *  that contains URLs or a [calculated field](https://support.wix.com/en/article/about-database-collections#calculated-fields)\\\\r\\\\n             *  that contains relative links to dynamic pages.\\\\r\\\\n             * \\\\r\\\\n             *  When the table is populated by using the [`rows`](#rows) or\\\\r\\\\n             *  [`dataFetcher`](#dataFetcher) properties, the `linkPath` value is one of the\\\\r\\\\n             *  property keys from the table's rows objects.\\\\r\\\\n             *  The property values associated with that key contain URLs or relative links.\\\\r\\\\n             */\\\\r\\\\n            linkPath?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `pagination` property that\\\\r\\\\n         * contains the pagination options which determine if and how the table\\\\r\\\\n         * is paginated.\\\\r\\\\n         */\\\\r\\\\n        type PaginationOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * The type of pagination to use: `\\\\\\\"normal\\\\\\\"`, `\\\\\\\"pagination\\\\\\\"`, or `\\\\\\\"virtual\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * The number of rows per page.\\\\r\\\\n             */\\\\r\\\\n            rowsPerPage: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a table cell is selected.\\\\r\\\\n     */\\\\r\\\\n    interface TableCellEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the column ID of the selected cell.\\\\r\\\\n         */\\\\r\\\\n        readonly cellColumnId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the data from the selected cell.\\\\r\\\\n         */\\\\r\\\\n        readonly cellData: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the row index of the selected cell.\\\\r\\\\n         */\\\\r\\\\n        readonly cellRowIndex: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a table row is selected.\\\\r\\\\n     */\\\\r\\\\n    interface TableRowEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the data for the selected row.\\\\r\\\\n         */\\\\r\\\\n        readonly rowData: any;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the index of the selected row.\\\\r\\\\n         */\\\\r\\\\n        readonly rowIndex: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for text elements.\\\\r\\\\n     */\\\\r\\\\n    interface Text extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the contents of a text element using standard HTML.\\\\r\\\\n         */\\\\r\\\\n        html: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the plain-text contents of a text element.\\\\r\\\\n         */\\\\r\\\\n        text: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An input element for capturing large amounts of text.\\\\r\\\\n     */\\\\r\\\\n    interface TextBox extends $w.FormElement, $w.DisabledMixin, $w.TextInputMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ReadOnlyMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the text box's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a text input's value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n        /**\\\\r\\\\n         * Determines if the text contains line breaks when its value is read.\\\\r\\\\n         */\\\\r\\\\n        wrap: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An input element for capturing small amounts of text.\\\\r\\\\n     */\\\\r\\\\n    interface TextInput extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.TextInputMixin, $w.FocusMixin, $w.ReadOnlyMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the input type of an Input element.\\\\r\\\\n         */\\\\r\\\\n        inputType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the maximum value for a text input element whose\\\\r\\\\n         *  type is set to **Number**.\\\\r\\\\n         */\\\\r\\\\n        max: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the minimum value for a text input element whose\\\\r\\\\n         *  type is set to **Number**.\\\\r\\\\n         */\\\\r\\\\n        min: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the text input's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a text input's value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that accept text as input.\\\\r\\\\n     */\\\\r\\\\n    interface TextInputMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the maximum number of characters that can be entered.\\\\r\\\\n         */\\\\r\\\\n        maxLength: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the element's placeholder text.\\\\r\\\\n         */\\\\r\\\\n        placeholder: string;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the cursor is inside the\\\\r\\\\n         *  input element and a key is pressed.\\\\r\\\\n         */\\\\r\\\\n        onKeyPress(eventHandler: $w.KeyboardEventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An upload button enables users to upload files to your site.\\\\r\\\\n     */\\\\r\\\\n    interface UploadButton extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the label on the upload button.\\\\r\\\\n         */\\\\r\\\\n        buttonLabel: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the type of file that a user can upload.\\\\r\\\\n         */\\\\r\\\\n        fileType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the upload button's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Returns a list of files that are pending upload.\\\\r\\\\n         */\\\\r\\\\n        value: $w.UploadButton.File[];\\\\r\\\\n        /**\\\\r\\\\n         * Clears the files that are pending upload.\\\\r\\\\n         */\\\\r\\\\n        reset(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Uploads the files that the user has chosen.\\\\r\\\\n         */\\\\r\\\\n        startUpload(): Promise<$w.UploadButton.UploadedFile>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace UploadButton {\\\\r\\\\n        /**\\\\r\\\\n         * The object used by the `value` property that represents\\\\r\\\\n         *  files ready for upload.\\\\r\\\\n         */\\\\r\\\\n        type File = {\\\\r\\\\n            /**\\\\r\\\\n             * The file's name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * The file's size in bytes.\\\\r\\\\n             */\\\\r\\\\n            size: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * The object returned by the `startUpload()` function's\\\\r\\\\n         *  Promise when an upload fails.\\\\r\\\\n         */\\\\r\\\\n        type UploadError = {\\\\r\\\\n            /**\\\\r\\\\n             * Numeric The error's code.\\\\r\\\\n             */\\\\r\\\\n            errorCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * The error's description.\\\\r\\\\n             */\\\\r\\\\n            errorDescription: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * The object returned by the `startUpload()` function's\\\\r\\\\n         *  Promise that contains the URL of the successfully uploaded file.\\\\r\\\\n         */\\\\r\\\\n        type UploadedFile = {\\\\r\\\\n            /**\\\\r\\\\n             * The Wix URL of the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            url: string;\\\\r\\\\n            /**\\\\r\\\\n             * The Wix media ID of the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            mediaId: string;\\\\r\\\\n            /**\\\\r\\\\n             * The title of the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * The width of an uploaded image file.\\\\r\\\\n             */\\\\r\\\\n            width: number;\\\\r\\\\n            /**\\\\r\\\\n             * The height of an uploaded image file.\\\\r\\\\n             */\\\\r\\\\n            height: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be validated.\\\\r\\\\n     * \\\\r\\\\n     * Certain input elements contain properties that are used in basic form\\\\r\\\\n     * validation, such as [`required`]($w.RequiredMixin.html#required) and\\\\r\\\\n     * [`maxlength`]($w.TextInputMixin.html#maxlength). More complex validation\\\\r\\\\n     * logic is achieved using the properties and functions below.\\\\r\\\\n     * \\\\r\\\\n     * Basic validation of elements against the constraints set in the Editor or\\\\r\\\\n     * programmatically is always peformed, regardless of any custom validation.\\\\r\\\\n     * \\\\r\\\\n     * However, sometimes more complex validation is needed, including validations\\\\r\\\\n     * that depend on more than one element. This is typically achieved by adding\\\\r\\\\n     * custom validation logic in an event handler that you set using the input\\\\r\\\\n     * element's [`onCustomValidation()`](#onCustomValidation) function. Within that\\\\r\\\\n     * handler, you call the `reject()` function to indicate that the element is\\\\r\\\\n     * invalid. The element's validity is checked when the value of the element\\\\r\\\\n     * changes either by user interaction or programmatically.\\\\r\\\\n     * \\\\r\\\\n     * Note that validations other than **required**, including custom validations,\\\\r\\\\n     * are not run on input elements when they don't have a value.\\\\r\\\\n     */\\\\r\\\\n    interface ValidatableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an input element's value is valid.\\\\r\\\\n         */\\\\r\\\\n        readonly valid: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a message indicating why the element is invalid, or an\\\\r\\\\n         *  empty string if the message is valid.\\\\r\\\\n         */\\\\r\\\\n        readonly validationMessage: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a ValidityState object that contains\\\\r\\\\n         *  detailed information about the validity states of the element.\\\\r\\\\n         */\\\\r\\\\n        readonly validity: $w.ValidatableMixin.ValidityState;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element's validation is checked.\\\\r\\\\n         */\\\\r\\\\n        onCustomValidation(validator: $w.Validator): void;\\\\r\\\\n        /**\\\\r\\\\n         * Resets the element's visual validity indication.\\\\r\\\\n         */\\\\r\\\\n        resetValidityIndication(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the element's visual validity indication based on its current validity state.\\\\r\\\\n         */\\\\r\\\\n        updateValidityIndication(): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace ValidatableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Contains detailed information about the validity states of an element.\\\\r\\\\n         */\\\\r\\\\n        type ValidityState = {\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's custom\\\\r\\\\n             *  validity message has been set to a non-empty string.\\\\r\\\\n             */\\\\r\\\\n            customError: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element meets all\\\\r\\\\n             *  constraint validations.\\\\r\\\\n             */\\\\r\\\\n            valid: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's\\\\r\\\\n             *  [`required`]($w.RequiredElement.html#required) property is `true`, but\\\\r\\\\n             *  it does not contain a value.\\\\r\\\\n             */\\\\r\\\\n            valueMissing: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's value\\\\r\\\\n             *  does not match its type when the type is email or url.\\\\r\\\\n             */\\\\r\\\\n            typeMismatch: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's\\\\r\\\\n             *  value does not match its pattern validation.\\\\r\\\\n             */\\\\r\\\\n            patternMismatch: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the length of the\\\\r\\\\n             *  element's value exceeds its [`maxlength`]($w.TextInputElement.html#maxlength)\\\\r\\\\n             *  property.\\\\r\\\\n             */\\\\r\\\\n            tooLong: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the length of the\\\\r\\\\n             *  element's value is smaller than its minlength.\\\\r\\\\n             */\\\\r\\\\n            tooShort: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's\\\\r\\\\n             *  value is less than the its [`min`]($w.TextInput.html#min) property.\\\\r\\\\n             */\\\\r\\\\n            rangeUnderflow: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's\\\\r\\\\n             *  value is more than the its [`max`]($w.TextInput.html#max) property.\\\\r\\\\n             */\\\\r\\\\n            rangeOverflow: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element is\\\\r\\\\n             *  an upload button that is required and a file has been selected but not\\\\r\\\\n             *  uploaded.\\\\r\\\\n             */\\\\r\\\\n            fileNotUploaded: boolean;\\\\r\\\\n            stepMismatch: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's value\\\\r\\\\n             *  cannot be converted to a value\\\\r\\\\n             */\\\\r\\\\n            badInput: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface ValueMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an element's value.\\\\r\\\\n         */\\\\r\\\\n        value: any;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an input element's value\\\\r\\\\n         *  is changed.\\\\r\\\\n         */\\\\r\\\\n        onChange(handler: $w.EventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Vector images are digital illustrations based on geometric shapes.\\\\r\\\\n     *  They maintain their high quality when resized.\\\\r\\\\n     */\\\\r\\\\n    interface VectorImage extends $w.Element, $w.HiddenCollapsedMixin, $w.LinkableMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the file location of the vector image.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A vertical site menu.\\\\r\\\\n     */\\\\r\\\\n    interface VerticalMenu extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element that displays a video.\\\\r\\\\n     */\\\\r\\\\n    interface Video extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the URL of the video.\\\\r\\\\n         */\\\\r\\\\n        videoUrl: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be scrolled into and out\\\\r\\\\n     *  of view.\\\\r\\\\n     */\\\\r\\\\n    interface ViewportMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an element is displayed\\\\r\\\\n         *  in the viewable part of the current window.\\\\r\\\\n         */\\\\r\\\\n        onViewportEnter(handler: $w.EventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an element is no longer\\\\r\\\\n         *  displayed in the viewable part of the current window.\\\\r\\\\n         */\\\\r\\\\n        onViewportLeave(handler: $w.EventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    type EventHandler = (event: $w.Event, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    type ForItemCallback = ($item: $w.$w, itemData: any, index: number)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when a gallery moves to a new image.\\\\r\\\\n     */\\\\r\\\\n    type GalleryItemChangedEventHandler = (event: $w.GalleryItemChangedEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when an image in a gallery is clicked.\\\\r\\\\n     */\\\\r\\\\n    type GalleryItemClickedEventHandler = (event: $w.GalleryItemClickedEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when google map / marker is clicked.\\\\r\\\\n     */\\\\r\\\\n    type GoogleMapClickEvent = (event: $w.GoogleMapClickEvent)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when the code in an HtmlComponent sends a message.\\\\r\\\\n     */\\\\r\\\\n    type HtmlComponentMessageEventHandler = (event: $w.HtmlComponentMessageEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    type HtmlElementEventHandler = (event: $w.HtmlComponentMessageEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when a user hovers over a star on the rating component.\\\\r\\\\n     */\\\\r\\\\n    type IconMouseInEventHandler = (event: $w.IconMouseInEvent)=>void;\\\\r\\\\n\\\\r\\\\n    type ItemReadyEventHandler = ($item: $w.$w, itemData: any, index: number)=>void;\\\\r\\\\n\\\\r\\\\n    type ItemRemovedEventHandler = (itemData: any)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when the keyboard is pressed.\\\\r\\\\n     */\\\\r\\\\n    type KeyboardEventHandler = (event: $w.KeyboardEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when the mouse is clicked.\\\\r\\\\n     */\\\\r\\\\n    type MouseEventHandler = (event: $w.MouseEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when an item in a quick action bar is clicked.\\\\r\\\\n     */\\\\r\\\\n    type QuickActionBarItemClickedEventHandler = (event: $w.QuickActionBarItemClickedEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function that runs when all page elements have finished loading.\\\\r\\\\n     */\\\\r\\\\n    type ReadyHandler = ()=>Promise<void> | void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when a table cell is selected.\\\\r\\\\n     */\\\\r\\\\n    type TableCellEventHandler = (event: $w.TableCellEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when a table row is selected.\\\\r\\\\n     */\\\\r\\\\n    type TableRowEventHandler = (event: $w.TableRowEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function that runs when custom validation is checked.\\\\r\\\\n     */\\\\r\\\\n    type Validator = (value: string | $w.UploadButton.File[] | boolean, reject: Function)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Note: This feature is not yet available to all users.\\\\r\\\\n     * \\\\r\\\\n     * \\\\r\\\\n     * `AddressInput` is used for entering addresses. It lets users type\\\\r\\\\n     * an address, and suggests exact locations using Google Maps services.\\\\r\\\\n     */\\\\r\\\\n    interface AddressInput extends $w.FormElement, $w.DisabledMixin, $w.RequiredMixin, $w.ReadOnlyMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the filter of the address input.\\\\r\\\\n         */\\\\r\\\\n        filter: $w.AddressInput.AddressFilter;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the placeholder of the address input.\\\\r\\\\n         */\\\\r\\\\n        placeholder: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the address input.\\\\r\\\\n         */\\\\r\\\\n        value: $w.AddressInput.Address;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace AddressInput {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a physical address.\\\\r\\\\n         */\\\\r\\\\n        type Address = {\\\\r\\\\n            /**\\\\r\\\\n             * Address in human-readable format. The formatted address is displayed in the address input element.\\\\r\\\\n             */\\\\r\\\\n            formatted: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address coordinates.\\\\r\\\\n             */\\\\r\\\\n            location?: $w.AddressInput.AddressLocation;\\\\r\\\\n            /**\\\\r\\\\n             * Address street name and number.\\\\r\\\\n             */\\\\r\\\\n            streetAddress?: $w.AddressInput.StreetAddress;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address subdivision of a country, such as a state or province.\\\\r\\\\n             */\\\\r\\\\n            subdivision?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address postal code.\\\\r\\\\n             */\\\\r\\\\n            postalCode?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing a filter for filtering address suggestions\\\\r\\\\n         * in an address input. Suggestions are restricted to addresses within\\\\r\\\\n         * the specified country.\\\\r\\\\n         */\\\\r\\\\n        type AddressFilter = {\\\\r\\\\n            /**\\\\r\\\\n             * ISO_3166 country code.\\\\r\\\\n             */\\\\r\\\\n            country?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing the coordinates of an address.\\\\r\\\\n         */\\\\r\\\\n        type AddressLocation = {\\\\r\\\\n            /**\\\\r\\\\n             * Address latitude.\\\\r\\\\n             */\\\\r\\\\n            latitude: number;\\\\r\\\\n            /**\\\\r\\\\n             * Address longitude.\\\\r\\\\n             */\\\\r\\\\n            longitude: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing the street name and number of an address.\\\\r\\\\n         */\\\\r\\\\n        type StreetAddress = {\\\\r\\\\n            /**\\\\r\\\\n             * Street name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Street number.\\\\r\\\\n             */\\\\r\\\\n            number?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element for playing audio files.\\\\r\\\\n     */\\\\r\\\\n    interface AudioPlayer extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the name of the artist displayed in an audio player.\\\\r\\\\n         */\\\\r\\\\n        artistName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the cover image displayed in an audio player.\\\\r\\\\n         */\\\\r\\\\n        coverImage: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the current play time from the beginning of the audio track, in seconds.\\\\r\\\\n         */\\\\r\\\\n        readonly currentTime: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the total play time of the audio track, in seconds.\\\\r\\\\n         */\\\\r\\\\n        readonly duration: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the volume is currently muted.\\\\r\\\\n         */\\\\r\\\\n        readonly isMuted: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an audio track is currently playing.\\\\r\\\\n         */\\\\r\\\\n        readonly isPlaying: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the file location of the audio file.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the track name displayed in an audio player.\\\\r\\\\n         */\\\\r\\\\n        trackName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an audio player's volume.\\\\r\\\\n         */\\\\r\\\\n        volume: number;\\\\r\\\\n        /**\\\\r\\\\n         * Mutes audio volume.\\\\r\\\\n         */\\\\r\\\\n        mute(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback has ended.\\\\r\\\\n         */\\\\r\\\\n        onEnded(handler: $w.EventHandler): $w.AudioPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is paused.\\\\r\\\\n         */\\\\r\\\\n        onPause(handler: $w.EventHandler): $w.AudioPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is started or restarted.\\\\r\\\\n         */\\\\r\\\\n        onPlay(handler: $w.EventHandler): $w.AudioPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback progresses.\\\\r\\\\n         */\\\\r\\\\n        onProgress(handler: $w.EventHandler): $w.AudioPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Pauses playback.\\\\r\\\\n         */\\\\r\\\\n        pause(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Begins or resumes playback.\\\\r\\\\n         */\\\\r\\\\n        play(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves playback to the specified time, in seconds.\\\\r\\\\n         */\\\\r\\\\n        seek(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Stops playback.\\\\r\\\\n         */\\\\r\\\\n        stop(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Toggles playback.\\\\r\\\\n         */\\\\r\\\\n        togglePlay(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Unmutes audio volume.\\\\r\\\\n         */\\\\r\\\\n        unmute(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The reCAPTCHA element allows you to present a challenge-response test to site visitors to determine whether they are human or a bot.\\\\r\\\\n     */\\\\r\\\\n    interface Captcha extends $w.Element, $w.FocusMixin, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the reCAPTCHA token.\\\\r\\\\n         */\\\\r\\\\n        readonly token: string;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a connection error occurs while completing the CAPTCHA challenge.\\\\r\\\\n         */\\\\r\\\\n        onError(handler: $w.Captcha.ErrorHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the CAPTCHA token expires.\\\\r\\\\n         */\\\\r\\\\n        onTimeout(handler: $w.Captcha.TimeoutHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the CAPTCHA challenge is successfully completed.\\\\r\\\\n         */\\\\r\\\\n        onVerified(handler: $w.Captcha.VerifiedHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Resets the reCAPTCHA element.\\\\r\\\\n         */\\\\r\\\\n        reset(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Captcha {\\\\r\\\\n        /**\\\\r\\\\n         * An error event handler.\\\\r\\\\n         */\\\\r\\\\n        type ErrorHandler = ()=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A timeout event handler.\\\\r\\\\n         */\\\\r\\\\n        type TimeoutHandler = ()=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A verification event handler.\\\\r\\\\n         */\\\\r\\\\n        type VerifiedHandler = ()=>Promise<void>;\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * This feature is not yet available to all users.\\\\r\\\\n     */\\\\r\\\\n    interface CustomElement extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the SEO markup to be rendered for search engine bots.\\\\r\\\\n         */\\\\r\\\\n        seoMarkup: string;\\\\r\\\\n        /**\\\\r\\\\n         * Registers a callback function in Corvid for an event triggered from the custom element.\\\\r\\\\n         */\\\\r\\\\n        on(eventName: string, callBackFunction: Function): void;\\\\r\\\\n        /**\\\\r\\\\n         * Sets an HTML attribute on the custom element's DOM node.\\\\r\\\\n         */\\\\r\\\\n        setAttribute(key: string, value: string): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element for working with paging.\\\\r\\\\n     */\\\\r\\\\n    interface Pagination extends $w.Element, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.ClickableMixin, $w.ViewportMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the current page.\\\\r\\\\n         */\\\\r\\\\n        currentPage: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the total number of pages shown in a pagination bar.\\\\r\\\\n         */\\\\r\\\\n        totalPages: number;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the pagination bar\\\\r\\\\n         *  is changed.\\\\r\\\\n         */\\\\r\\\\n        onChange(handler: $w.EventHandler): $w.Pagination;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element for displaying the status of an ongoing process.\\\\r\\\\n     */\\\\r\\\\n    interface ProgressBar extends $w.Element, $w.HiddenCollapsedMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the progress bar's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a progress bar's target value.\\\\r\\\\n         */\\\\r\\\\n        readonly targetValue: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a progress bar's value.\\\\r\\\\n         */\\\\r\\\\n        readonly value: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A ratings display element allows you to display a value to your users\\\\r\\\\n     *  using icons.\\\\r\\\\n     */\\\\r\\\\n    interface RatingsDisplay extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the displayed number of ratings.\\\\r\\\\n         */\\\\r\\\\n        numRatings: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the displayed rating.\\\\r\\\\n         */\\\\r\\\\n        rating: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A ratings input element allows you to capture a value from your users\\\\r\\\\n     *  using icons.\\\\r\\\\n     */\\\\r\\\\n    interface RatingsInput extends $w.FormElement, $w.DisabledMixin, $w.RequiredMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ClickableMixin, $w.ViewportMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the rating value.\\\\r\\\\n         */\\\\r\\\\n        value: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the function that runs when a user's mouse enters one of the rating icons.\\\\r\\\\n         */\\\\r\\\\n        onIconMouseIn(handler: $w.IconMouseInEventHandler): $w.RatingsInput;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * RichTextBox is a rich text input as form element\\\\r\\\\n     */\\\\r\\\\n    interface RichTextBox extends $w.FormElement, $w.DisabledMixin, $w.TextInputMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ReadOnlyMixin, $w.ClickableMixin, $w.RequiredMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Note: This feature is not yet available to all users.\\\\r\\\\n     */\\\\r\\\\n    interface SelectionTags extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a list of items which will be rendered as tags.\\\\r\\\\n         */\\\\r\\\\n        options: $w.SelectionTags.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the indices of the selected options.\\\\r\\\\n         */\\\\r\\\\n        selectedIndices: number[];\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the selection tags' styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the values of the selected options.\\\\r\\\\n         */\\\\r\\\\n        value: string[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace SelectionTags {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the [`options`](#options) property that contains the attributes of the selection tag item.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * The value of the selection tag option. This is what you use in code and is what is stored in your collections.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * The label of the selection tag option. This is what a site visitor sees.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sliders allow users to select a number from a given range.\\\\r\\\\n     */\\\\r\\\\n    interface Slider extends $w.Element, $w.ValueMixin, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.FocusMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the slider's maximum value.\\\\r\\\\n         */\\\\r\\\\n        max: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the slider's minimum value.\\\\r\\\\n         */\\\\r\\\\n        min: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a slider's step value.\\\\r\\\\n         */\\\\r\\\\n        step: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a slider's step type.\\\\r\\\\n         */\\\\r\\\\n        stepType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the slider.\\\\r\\\\n         */\\\\r\\\\n        readonly value: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Switches are used for a single binary choice.\\\\r\\\\n     */\\\\r\\\\n    interface Switch extends $w.Element, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ClickableMixin, $w.ValueMixin, $w.CheckedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a switch is on or off.\\\\r\\\\n         */\\\\r\\\\n        checked: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An input element for capturing the time of day.\\\\r\\\\n     */\\\\r\\\\n    interface TimePicker extends $w.FocusMixin, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.RequiredMixin, $w.ReadOnlyMixin, $w.FormElement{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the number of minutes the time picker steps.\\\\r\\\\n         */\\\\r\\\\n        readonly step: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether the time picker uses 12-hour or 24-hour format.\\\\r\\\\n         */\\\\r\\\\n        readonly useAmPmFormat: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a time picker's value.\\\\r\\\\n         */\\\\r\\\\n        readonly value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element for presenting videos.\\\\r\\\\n     */\\\\r\\\\n    interface VideoPlayer extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the current play time from the beginning of the current video, in seconds.\\\\r\\\\n         */\\\\r\\\\n        readonly currentTime: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the description of a video.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the total play time of the current video, in seconds.\\\\r\\\\n         */\\\\r\\\\n        readonly duration: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the volume is currently muted.\\\\r\\\\n         */\\\\r\\\\n        readonly isMuted: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if a video is currently playing.\\\\r\\\\n         */\\\\r\\\\n        readonly isPlaying: boolean;\\\\r\\\\n        poster: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the file location of the current video.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the title displayed in a video player.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the video player volume.\\\\r\\\\n         */\\\\r\\\\n        volume: number;\\\\r\\\\n        /**\\\\r\\\\n         * Mutes video volume.\\\\r\\\\n         */\\\\r\\\\n        mute(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback has ended.\\\\r\\\\n         */\\\\r\\\\n        onEnded(handler: $w.EventHandler): $w.VideoPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is paused.\\\\r\\\\n         */\\\\r\\\\n        onPause(handler: $w.EventHandler): $w.VideoPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is started or restarted.\\\\r\\\\n         */\\\\r\\\\n        onPlay(handler: $w.EventHandler): $w.VideoPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback progresses.\\\\r\\\\n         */\\\\r\\\\n        onProgress(handler: $w.EventHandler): $w.VideoPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Pauses playback.\\\\r\\\\n         */\\\\r\\\\n        pause(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Begins or resumes playback.\\\\r\\\\n         */\\\\r\\\\n        play(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves playback to the specified time, in seconds.\\\\r\\\\n         */\\\\r\\\\n        seek(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Pauses playback.\\\\r\\\\n         */\\\\r\\\\n        stop(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Toggles playback.\\\\r\\\\n         */\\\\r\\\\n        togglePlay(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Unmutes video volume.\\\\r\\\\n         */\\\\r\\\\n        unmute(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An icon that leads users to the shopping cart.\\\\r\\\\n     */\\\\r\\\\n    interface CartIcon extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Adds multiple products to the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        addProductsToCart(products: $w.CartIcon.AddToCartItem[]): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a product to the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        addToCart(productID: string, quantity?: number, options?: $w.CartIcon.AddToCartOptions): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace CartIcon {\\\\r\\\\n        /**\\\\r\\\\n         * An object used to pass a custom text field when adding a product to\\\\r\\\\n         *  the shopping cart with options.\\\\r\\\\n         */\\\\r\\\\n        type AddToCartCustomTextField = {\\\\r\\\\n            /**\\\\r\\\\n             * Custom text field title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Custom text field value.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when adding multiple products to the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        type AddToCartItem = {\\\\r\\\\n            /**\\\\r\\\\n             * The ID of the product to add to the cart.\\\\r\\\\n             */\\\\r\\\\n            productID: string;\\\\r\\\\n            /**\\\\r\\\\n             * Custom custom\\\\r\\\\n             *  text fields to use when adding the product to the cart.\\\\r\\\\n             */\\\\r\\\\n            options?: $w.CartIcon.AddToCartOptions;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when adding a product to the shopping cart with options.\\\\r\\\\n         */\\\\r\\\\n        type AddToCartOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Product options to use when adding the\\\\r\\\\n             *  product to the cart. The object contains key:value pairs where the key is the\\\\r\\\\n             *  option name and the value is the chosen option value.\\\\r\\\\n             */\\\\r\\\\n            choices: any;\\\\r\\\\n            /**\\\\r\\\\n             * Custom custom\\\\r\\\\n             *  text fields to use when adding the product to the cart.\\\\r\\\\n             */\\\\r\\\\n            customTextField: $w.CartIcon.AddToCartCustomTextField;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A store page for a specific product.\\\\r\\\\n     */\\\\r\\\\n    interface ProductPage extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the values entered in the product's custom text fields.\\\\r\\\\n         */\\\\r\\\\n        getCustomTextFieldsValues(): $w.ProductPage.Product;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the all the information associated with the current product.\\\\r\\\\n         */\\\\r\\\\n        getProduct(): Promise<$w.ProductPage.Product>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace ProductPage {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a media item.\\\\r\\\\n         */\\\\r\\\\n        type MediaItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Media item ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item description. Descriptions over 100 characters are truncated.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item type. Can be \\\\\\\"image\\\\\\\" or \\\\\\\"video.\\\\\\\"\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item source URL.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n            /**\\\\r\\\\n             * Thumbnail URL for videos only.\\\\r\\\\n             */\\\\r\\\\n            thumbnail?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product in a store.\\\\r\\\\n         */\\\\r\\\\n        type Product = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * Main product media item (image or video thumbnail) URL.\\\\r\\\\n             */\\\\r\\\\n            mainMedia: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of product media items.\\\\r\\\\n             */\\\\r\\\\n            mediaItems: $w.ProductPage.MediaItem;\\\\r\\\\n            /**\\\\r\\\\n             * Product stock keeping unit value. Must be unique.\\\\r\\\\n             */\\\\r\\\\n            sku: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of product ribbons.\\\\r\\\\n             */\\\\r\\\\n            ribbons: $w.ProductPage.ProductRibbon[];\\\\r\\\\n            /**\\\\r\\\\n             * Product currency.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price. \\\\r\\\\n             *  The price must be greater than its discount.\\\\r\\\\n             *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted product price.\\\\r\\\\n             */\\\\r\\\\n            discountedPrice: number;\\\\r\\\\n            /**\\\\r\\\\n             * Product price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted product price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedDiscountedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product discount.\\\\r\\\\n             */\\\\r\\\\n            discount: $w.ProductPage.ProductDiscount;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether inventory is tracked for the product.\\\\r\\\\n             */\\\\r\\\\n            trackInventory: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the product is in stock.\\\\r\\\\n             */\\\\r\\\\n            inStock: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Number of units currently in stock.\\\\r\\\\n             */\\\\r\\\\n            quantityInStock: number;\\\\r\\\\n            /**\\\\r\\\\n             * Additional product information sections.\\\\r\\\\n             */\\\\r\\\\n            additionalInfoSections: $w.ProductPage.ProductAdditionalInfoSection[];\\\\r\\\\n            /**\\\\r\\\\n             * All the available options for a store product.\\\\r\\\\n             */\\\\r\\\\n            productOptions: $w.ProductPage.ProductOptions;\\\\r\\\\n            /**\\\\r\\\\n             * Product page relative URL.\\\\r\\\\n             */\\\\r\\\\n            productPageUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether product variants are managed. Can be set to true only if the product has options. Once set to true, `manageVariants` can only be reset to false only if no variants exist. Use [`getProductVariants()`](https://www.wix.com/corvid/reference/wix-stores.html#getProductVariants) to check if variants exist. You cannot set `manageVariants` to true if more than 300 variants are defined.\\\\r\\\\n             */\\\\r\\\\n            manageVariants: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Product type. Either `\\\\\\\"physical\\\\\\\"` or `\\\\\\\"digital\\\\\\\"`. When creating a product using the API, currently only `\\\\\\\"physical\\\\\\\"` is supported.\\\\r\\\\n             */\\\\r\\\\n            productType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product slug.\\\\r\\\\n             */\\\\r\\\\n            slug: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product weight.\\\\r\\\\n             */\\\\r\\\\n            weight: number;\\\\r\\\\n            /**\\\\r\\\\n             * Product variants.\\\\r\\\\n             */\\\\r\\\\n            variants: $w.ProductPage.ProductVariants;\\\\r\\\\n            /**\\\\r\\\\n             * Date product was last updated.\\\\r\\\\n             */\\\\r\\\\n            _updatedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * ID for the inventory item.\\\\r\\\\n             */\\\\r\\\\n            inventoryItemId: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of product customization fields.\\\\r\\\\n             */\\\\r\\\\n            customTextFields: $w.ProductPage.ProductCustomTextFields[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an additional info section for a store product.\\\\r\\\\n         */\\\\r\\\\n        type ProductAdditionalInfoSection = {\\\\r\\\\n            /**\\\\r\\\\n             * Section title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Section description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product variant's option choices.\\\\r\\\\n         */\\\\r\\\\n        type ProductChoices = {\\\\r\\\\n            /**\\\\r\\\\n             * Value of the choice. This key name is dependent on the\\\\r\\\\n             *  product option. For example, if a product has a size option, this\\\\r\\\\n             *  key value will be something like `\\\\\\\"Size\\\\\\\"` and its value will be something like\\\\r\\\\n             *  `\\\\\\\"Large\\\\\\\"`.\\\\r\\\\n             *  \\\\r\\\\n             *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n             */\\\\r\\\\n            optionKey: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a custom text field for a store product.\\\\r\\\\n         */\\\\r\\\\n        type ProductCustomTextFields = {\\\\r\\\\n            /**\\\\r\\\\n             * Product customization field title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Maximum length of product customization field in characters.\\\\r\\\\n             */\\\\r\\\\n            maxLength: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product discount.\\\\r\\\\n         */\\\\r\\\\n        type ProductDiscount = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount type. Required.\\\\r\\\\n             * \\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             * \\\\r\\\\n             * \\\\r\\\\n             *  - `\\\\\\\"AMOUNT\\\\\\\"`\\\\r\\\\n             *  - `\\\\\\\"PERCENT\\\\\\\"`\\\\r\\\\n             *  - `\\\\\\\"NONE\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discount value. The discount value cannot be greater than the price of the product or the variant.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an option for a store product.\\\\r\\\\n         */\\\\r\\\\n        type ProductOption = {\\\\r\\\\n            /**\\\\r\\\\n             * Option type. Either `\\\\\\\"color\\\\\\\"` or `\\\\\\\"drop_down\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            optionType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Option name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Option choices.\\\\r\\\\n             */\\\\r\\\\n            choices: $w.ProductPage.ProductOptionsChoice[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing all the available options for a store product, such as \\\\\\\"Size\\\\\\\" and \\\\\\\"Color.\\\\\\\"\\\\r\\\\n         */\\\\r\\\\n        type ProductOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the option. This key name\\\\r\\\\n             *  is dependent on the options added to the product. For example, if a product has a size \\\\r\\\\n             *  option, this key will be something like `\\\\\\\"Size\\\\\\\"`.\\\\r\\\\n             *  \\\\r\\\\n             *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n             */\\\\r\\\\n            optionKey: $w.ProductPage.ProductOption;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an option's choice for a store product, such as choice \\\\\\\"Small\\\\\\\" for the option \\\\\\\"Size.\\\\\\\"\\\\r\\\\n         */\\\\r\\\\n        type ProductOptionsChoice = {\\\\r\\\\n            /**\\\\r\\\\n             * Choice value.\\\\r\\\\n             */\\\\r\\\\n            value: number;\\\\r\\\\n            /**\\\\r\\\\n             * Choice description.\\\\r\\\\n             */\\\\r\\\\n            description: number;\\\\r\\\\n            /**\\\\r\\\\n             * Choice media.\\\\r\\\\n             */\\\\r\\\\n            media: $w.ProductPage.ProductOptionsChoiceMedia;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the product with this choice is in stock.\\\\r\\\\n             */\\\\r\\\\n            inStock: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the product with this option is visible.\\\\r\\\\n             */\\\\r\\\\n            visible: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the choice media.\\\\r\\\\n         */\\\\r\\\\n        type ProductOptionsChoiceMedia = {\\\\r\\\\n            /**\\\\r\\\\n             * Main choice media item (image or video thumbnail) URL.\\\\r\\\\n             */\\\\r\\\\n            mainMedia: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of choice media items.\\\\r\\\\n             */\\\\r\\\\n            mediaItems: $w.ProductPage.MediaItem;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a ribbon for a store product.\\\\r\\\\n         */\\\\r\\\\n        type ProductRibbon = {\\\\r\\\\n            /**\\\\r\\\\n             * Ribbon text.\\\\r\\\\n             */\\\\r\\\\n            text: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product's variant information used when creating or updating variants.\\\\r\\\\n         */\\\\r\\\\n        type ProductVariantInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Variant currency.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant price. The variant price must be greater than its discount. If the variant price has been updated, changes to the product price do not affect the variant price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted variant price.\\\\r\\\\n             */\\\\r\\\\n            discountedPrice: number;\\\\r\\\\n            /**\\\\r\\\\n             * Formatted variant price.\\\\r\\\\n             */\\\\r\\\\n            formattedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted variant price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedDiscountedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant weight.\\\\r\\\\n             */\\\\r\\\\n            weight: number;\\\\r\\\\n            /**\\\\r\\\\n             * Variant stock keeping unit number.\\\\r\\\\n             */\\\\r\\\\n            sku: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the variant is visible in the store.\\\\r\\\\n             */\\\\r\\\\n            visible: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product's variant item.\\\\r\\\\n         */\\\\r\\\\n        type ProductVariantItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique product variant ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product variant option choices.\\\\r\\\\n             */\\\\r\\\\n            choices: $w.ProductPage.ProductChoices;\\\\r\\\\n            /**\\\\r\\\\n             * Product variant information.\\\\r\\\\n             */\\\\r\\\\n            variant: $w.ProductPage.ProductVariantInfo[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product's variants.\\\\r\\\\n         */\\\\r\\\\n        type ProductVariants = {\\\\r\\\\n            /**\\\\r\\\\n             * Variant items.\\\\r\\\\n             */\\\\r\\\\n            items: $w.ProductPage.ProductVariantItem[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A thank you page displayed when an order is created.\\\\r\\\\n     */\\\\r\\\\n    interface ThankYouPage extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the order associated with the current page.\\\\r\\\\n         */\\\\r\\\\n        getOrder(): Promise<$w.ThankYouPage.Order>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace ThankYouPage {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains address information.\\\\r\\\\n         */\\\\r\\\\n        type Address = {\\\\r\\\\n            /**\\\\r\\\\n             * Address address line.\\\\r\\\\n             */\\\\r\\\\n            addressLine: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address subdivision.\\\\r\\\\n             */\\\\r\\\\n            subdivision: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address postal code.\\\\r\\\\n             */\\\\r\\\\n            postalCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address in human readable format.\\\\r\\\\n             */\\\\r\\\\n            formatted: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's billing info.\\\\r\\\\n         */\\\\r\\\\n        type BillingInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone: string;\\\\r\\\\n            /**\\\\r\\\\n             * Company name.\\\\r\\\\n             */\\\\r\\\\n            company: string;\\\\r\\\\n            /**\\\\r\\\\n             * Company name.\\\\r\\\\n             */\\\\r\\\\n            vatId: $w.ThankYouPage.VatId;\\\\r\\\\n            /**\\\\r\\\\n             * Billing address.\\\\r\\\\n             */\\\\r\\\\n            address: $w.ThankYouPage.Address;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about a buyer.\\\\r\\\\n         */\\\\r\\\\n        type BuyerInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's unique ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's first name.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's last name.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's identity.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"ADMIN\\\\\\\"`: Buyer is the site owner.\\\\r\\\\n             *  + `\\\\\\\"MEMBER\\\\\\\"`: Buyer is a logged-in site member.\\\\r\\\\n             *  + `\\\\\\\"VISITOR\\\\\\\"`: Buyer is not logged in.\\\\r\\\\n             *  + `\\\\\\\"CONTACT\\\\\\\"`: A contact has been created for the buyer.\\\\r\\\\n             */\\\\r\\\\n            identityType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's phone number.\\\\r\\\\n             */\\\\r\\\\n            phone: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a custom text field.\\\\r\\\\n         */\\\\r\\\\n        type CustomTextField = {\\\\r\\\\n            /**\\\\r\\\\n             * Field title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Field value.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a line item in a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        type LineItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the line item.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Notes about the line item.\\\\r\\\\n             */\\\\r\\\\n            notes: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item price.\\\\r\\\\n             */\\\\r\\\\n            price: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item product ID.\\\\r\\\\n             */\\\\r\\\\n            productId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item stock keeping unit.\\\\r\\\\n             */\\\\r\\\\n            sku: string;\\\\r\\\\n            /**\\\\r\\\\n             * Total price charged to the customer for all line items after any applicable discounts.\\\\r\\\\n             */\\\\r\\\\n            totalPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item weight.\\\\r\\\\n             */\\\\r\\\\n            weight: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of the line item.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"DIGITAL\\\\\\\"`: Digital item.\\\\r\\\\n             *  + `\\\\\\\"PHYSICAL\\\\\\\"`: Physical item.\\\\r\\\\n             *  + `\\\\\\\"CUSTOM_AMOUNT_ITEM\\\\\\\"`: Item with a custom price.\\\\r\\\\n             *  + `\\\\\\\"UNSPECIFIED\\\\\\\"`: Type can't be classified due to an error.\\\\r\\\\n             */\\\\r\\\\n            lineItemType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item options.\\\\r\\\\n             */\\\\r\\\\n            options: $w.ThankYouPage.Option[];\\\\r\\\\n            /**\\\\r\\\\n             * Media item.\\\\r\\\\n             */\\\\r\\\\n            mediaItem: $w.ThankYouPage.MediaItem;\\\\r\\\\n            /**\\\\r\\\\n             * Custom text.\\\\r\\\\n             */\\\\r\\\\n            customTextFields: $w.ThankYouPage.CustomTextField[];\\\\r\\\\n            /**\\\\r\\\\n             * Line item index.\\\\r\\\\n             */\\\\r\\\\n            index: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a media item.\\\\r\\\\n         */\\\\r\\\\n        type MediaItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Type of the media item.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"IMAGE\\\\\\\"`: Image item.\\\\r\\\\n             *  + `\\\\\\\"UNSPECIFIED_MEDIA_TYPE_ITEM\\\\\\\"`: Media item type can't be classified due to an error.\\\\r\\\\n             */\\\\r\\\\n            mediaType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item URL.\\\\r\\\\n             */\\\\r\\\\n            url: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item height.\\\\r\\\\n             */\\\\r\\\\n            height: number;\\\\r\\\\n            /**\\\\r\\\\n             * Media item width.\\\\r\\\\n             */\\\\r\\\\n            width: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a line item option.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the product option.\\\\r\\\\n             */\\\\r\\\\n            option: string;\\\\r\\\\n            /**\\\\r\\\\n             * Selected option.\\\\r\\\\n             */\\\\r\\\\n            selection: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order.\\\\r\\\\n         */\\\\r\\\\n        type Order = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique order identifier.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the order was created.\\\\r\\\\n             */\\\\r\\\\n            _dateCreated: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Running order number.\\\\r\\\\n             */\\\\r\\\\n            number: number;\\\\r\\\\n            /**\\\\r\\\\n             * Order currency.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Billing information.\\\\r\\\\n             */\\\\r\\\\n            billingInfo: $w.ThankYouPage.BillingInfo;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer information.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: $w.ThankYouPage.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * Order items.\\\\r\\\\n             */\\\\r\\\\n            lineItems: $w.ThankYouPage.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Order totals.\\\\r\\\\n             */\\\\r\\\\n            totals: $w.ThankYouPage.Totals;\\\\r\\\\n            /**\\\\r\\\\n             * The unit in which the order's weight is\\\\r\\\\n             *  measured. Either `\\\\\\\"KG\\\\\\\"` or `\\\\\\\"LB\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            weightUnit: string;\\\\r\\\\n            /**\\\\r\\\\n             * Shipping information.\\\\r\\\\n             */\\\\r\\\\n            shippingInfo: $w.ThankYouPage.ShippingInfo;\\\\r\\\\n            /**\\\\r\\\\n             * A note added by the buyer.\\\\r\\\\n             */\\\\r\\\\n            buyerNote: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's shipping details.\\\\r\\\\n         */\\\\r\\\\n        type PickupDetails = {\\\\r\\\\n            /**\\\\r\\\\n             * Pickup instructions.\\\\r\\\\n             */\\\\r\\\\n            pickupInstructions: string;\\\\r\\\\n            /**\\\\r\\\\n             * Pickup address.\\\\r\\\\n             */\\\\r\\\\n            pickupAddress: $w.ThankYouPage.Address;\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's shipping details.\\\\r\\\\n         */\\\\r\\\\n        type ShipmentDetails = {\\\\r\\\\n            /**\\\\r\\\\n             * Shipping address.\\\\r\\\\n             */\\\\r\\\\n            address: $w.ThankYouPage.Address;\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's shipping info.\\\\r\\\\n         */\\\\r\\\\n        type ShippingInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Delivery option information.\\\\r\\\\n             */\\\\r\\\\n            deliveryOption: string;\\\\r\\\\n            /**\\\\r\\\\n             * Estimated delivery time.\\\\r\\\\n             */\\\\r\\\\n            estimatedDeliveryTime: string;\\\\r\\\\n            shipmentDetails: $w.ThankYouPage.ShipmentDetails;\\\\r\\\\n            pickupDetails: $w.ThankYouPage.PickupDetails;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's totals.\\\\r\\\\n         */\\\\r\\\\n        type Totals = {\\\\r\\\\n            /**\\\\r\\\\n             * The subtotal of all the order's line items, excluding tax.\\\\r\\\\n             */\\\\r\\\\n            subtotal: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total shipping price, including tax.\\\\r\\\\n             */\\\\r\\\\n            shipping: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total amount of tax.\\\\r\\\\n             */\\\\r\\\\n            tax: string;\\\\r\\\\n            /**\\\\r\\\\n             * The total calculated discount amount.\\\\r\\\\n             */\\\\r\\\\n            discount: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total price.\\\\r\\\\n             */\\\\r\\\\n            total: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total weight of the order's items.\\\\r\\\\n             */\\\\r\\\\n            weight: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total quantity of the the order's line items.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains VAT information.\\\\r\\\\n         */\\\\r\\\\n        type VatId = {\\\\r\\\\n            /**\\\\r\\\\n             * VAT number.\\\\r\\\\n             */\\\\r\\\\n            number: string;\\\\r\\\\n            /**\\\\r\\\\n             * VAT type. Either `\\\\\\\"CFP\\\\\\\"` or `\\\\\\\"CPNJ\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    type dataset = wix_dataset.Dataset;\\\\r\\\\n\\\\r\\\\n    type router_dataset = wix_dataset.DynamicDataset;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_dataset {\\\\r\\\\n    /**\\\\r\\\\n     * A [dataset](wix-dataset.html) connects page elements to a set of items in a data collection.\\\\r\\\\n     */\\\\r\\\\n    interface Dataset {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the current item.\\\\r\\\\n         */\\\\r\\\\n        getCurrentItem(): any;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the current item's index.\\\\r\\\\n         */\\\\r\\\\n        getCurrentItemIndex(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the index of the dataset's current page.\\\\r\\\\n         */\\\\r\\\\n        getCurrentPageIndex(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the selected items.\\\\r\\\\n         */\\\\r\\\\n        getItems(fromIndex: number, numberOfItems: number): Promise<wix_dataset.Dataset.GetItemsResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the dataset's page size.\\\\r\\\\n         */\\\\r\\\\n        getPageSize(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of items in the dataset that match its filter criteria.\\\\r\\\\n         */\\\\r\\\\n        getTotalCount(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the number of pages in the dataset.\\\\r\\\\n         */\\\\r\\\\n        getTotalPageCount(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if there is a next item.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if there is a next page of data.\\\\r\\\\n         */\\\\r\\\\n        hasNextPage(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if there is a previous item.\\\\r\\\\n         */\\\\r\\\\n        hasPrevious(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if there is a previous page of data.\\\\r\\\\n         */\\\\r\\\\n        hasPreviousPage(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Loads the next page of data in addition to the current data.\\\\r\\\\n         */\\\\r\\\\n        loadMore(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Loads the specified page.\\\\r\\\\n         */\\\\r\\\\n        loadPage(pageIndex: number): Promise<any[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Create a new blank item.\\\\r\\\\n         */\\\\r\\\\n        new(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Saves the current item and moves to the next item.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<any>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves to the next page of data.\\\\r\\\\n         */\\\\r\\\\n        nextPage(): Promise<any[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs just after a save.\\\\r\\\\n         */\\\\r\\\\n        onAfterSave(handler: wix_dataset.Dataset.AfterSaveHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs just before a save.\\\\r\\\\n         */\\\\r\\\\n        onBeforeSave(handler: wix_dataset.Dataset.BeforeSaveHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the current index changes.\\\\r\\\\n         */\\\\r\\\\n        onCurrentIndexChanged(handler: wix_dataset.Dataset.CurrentIndexChangedHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an error occurs.\\\\r\\\\n         */\\\\r\\\\n        onError(handler: wix_dataset.Dataset.ErrorHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a value of the current item changes.\\\\r\\\\n         */\\\\r\\\\n        onItemValuesChanged(handler: wix_dataset.Dataset.ItemValuesChangedHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the dataset is ready.\\\\r\\\\n         */\\\\r\\\\n        onReady(handler: wix_dataset.Dataset.ReadyHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Saves the current item and moves to the previous item.\\\\r\\\\n         */\\\\r\\\\n        previous(): Promise<any>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves to the previous page of data.\\\\r\\\\n         */\\\\r\\\\n        previousPage(): Promise<any[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Refetches the contents of the dataset from the collection.\\\\r\\\\n         */\\\\r\\\\n        refresh(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Removes the current item.\\\\r\\\\n         */\\\\r\\\\n        remove(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Reverts the current item to its saved value.\\\\r\\\\n         */\\\\r\\\\n        revert(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Saves the current item.\\\\r\\\\n         */\\\\r\\\\n        save(): Promise<any>;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the current item by index.\\\\r\\\\n         */\\\\r\\\\n        setCurrentItemIndex(index: number): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the value of a field in the current item.\\\\r\\\\n         */\\\\r\\\\n        setFieldValue(fieldKey: string, value: any): void;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the values of a set of fields in the current item.\\\\r\\\\n         */\\\\r\\\\n        setFieldValues(fieldValues: any): void;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the dataset filter.\\\\r\\\\n         */\\\\r\\\\n        setFilter(filter: wix_data.WixDataFilter): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the dataset's page size.\\\\r\\\\n         */\\\\r\\\\n        setPageSize(pageSize: number): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the dataset sort order.\\\\r\\\\n         */\\\\r\\\\n        setSort(sort: wix_data.WixDataSort): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Dataset {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a dataset error.\\\\r\\\\n         */\\\\r\\\\n        type DatasetError = {\\\\r\\\\n            /**\\\\r\\\\n             * Error code.\\\\r\\\\n             */\\\\r\\\\n            code: string;\\\\r\\\\n            /**\\\\r\\\\n             * Error message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `getItems()` function that contains the items retrieved and the total number of items in the dataset that match its filter criteria\\\\r\\\\n         */\\\\r\\\\n        type GetItemsResult = {\\\\r\\\\n            /**\\\\r\\\\n             * List of items objects where key:value pairs are the field keys and field values of the retrieved items, including all hidden fields.\\\\r\\\\n             */\\\\r\\\\n            items: any[];\\\\r\\\\n            /**\\\\r\\\\n             * The number of items in the dataset that match its filter criteria.\\\\r\\\\n             */\\\\r\\\\n            totalCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * The index in the dataset of the first item in the items property.\\\\r\\\\n             */\\\\r\\\\n            offset: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An after save event handler.\\\\r\\\\n         */\\\\r\\\\n        type AfterSaveHandler = (itemBeforeSave: any, itemAfterSave: any)=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A before save event handler.\\\\r\\\\n         */\\\\r\\\\n        type BeforeSaveHandler = ()=>Promise<boolean>;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A current item index change event handler.\\\\r\\\\n         */\\\\r\\\\n        type CurrentIndexChangedHandler = (index: number)=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An error event handler.\\\\r\\\\n         */\\\\r\\\\n        type ErrorHandler = (operation: string, error: wix_dataset.Dataset.DatasetError)=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A current item value change event handler.\\\\r\\\\n         */\\\\r\\\\n        type ItemValuesChangedHandler = (itemBeforeChange: any, updatedItem: any)=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A dataset ready event handler.\\\\r\\\\n         */\\\\r\\\\n        type ReadyHandler = ()=>void;\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A [dataset](wix-dataset.html) connects page elements on a dynamic page to a set of items in a data collection.\\\\r\\\\n     */\\\\r\\\\n    interface DynamicDataset extends wix_dataset.Dataset{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the next dynamic page URL.\\\\r\\\\n         */\\\\r\\\\n        getNextDynamicPage(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the previous dynamic page URL.\\\\r\\\\n         */\\\\r\\\\n        getPreviousDynamicPage(): Promise<string>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace site_monitoring {\\\\r\\\\n    /**\\\\r\\\\n     * A single record of a Wix site event in JSON format.\\\\r\\\\n     */\\\\r\\\\n    interface LogEntry {\\\\r\\\\n        /**\\\\r\\\\n         * Unique identifier for the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly insertId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payload of the log entry in JSON format.\\\\r\\\\n         */\\\\r\\\\n        readonly jsonPayload: site_monitoring.LogEntry.LogEntryJsonPayload;\\\\r\\\\n        /**\\\\r\\\\n         * Additional information about the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly labels: site_monitoring.LogEntry.LogEntryLabels;\\\\r\\\\n        /**\\\\r\\\\n         * Additional information about a potentially long-running operation associated with the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly operation: site_monitoring.LogEntry.LogEntryOperation;\\\\r\\\\n        /**\\\\r\\\\n         * Time the log entry was received by site monitoring.\\\\r\\\\n         */\\\\r\\\\n        readonly receiveTimestamp: string;\\\\r\\\\n        /**\\\\r\\\\n         * Severity of the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly severity: string;\\\\r\\\\n        /**\\\\r\\\\n         * Source code location information associated with the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly sourceLocation: site_monitoring.LogEntry.LogEntrySourceLocation;\\\\r\\\\n        /**\\\\r\\\\n         * Time the site event occurred.\\\\r\\\\n         */\\\\r\\\\n        readonly timestamp: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace LogEntry {\\\\r\\\\n        /**\\\\r\\\\n         * Payload of the log entry in JSON format.\\\\r\\\\n         */\\\\r\\\\n        type LogEntryJsonPayload = {\\\\r\\\\n            /**\\\\r\\\\n             * Payload message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * Additional information about the log entry.\\\\r\\\\n         */\\\\r\\\\n        type LogEntryLabels = {\\\\r\\\\n            /**\\\\r\\\\n             * [`baseUrl`](wix-location.html#baseUrl) of the site with which the log entry is associated.\\\\r\\\\n             */\\\\r\\\\n            siteUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of Wix application with which the log entry is associated, such as Stores or Bookings. The generic namespace `Corvid` represents site code not associated with a specific Wix application. Currently only the `Corvid` namespace is supported.\\\\r\\\\n             */\\\\r\\\\n            namespace: string;\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier for the site. Does not change even if the site name or other site attributes change.\\\\r\\\\n             */\\\\r\\\\n            tenantId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates the viewing mode from which the log entry originates.\\\\r\\\\n             *  One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Preview\\\\\\\"`: Preview mode.\\\\r\\\\n             *  + `\\\\\\\"Site\\\\\\\"`: Published site mode.\\\\r\\\\n             */\\\\r\\\\n            viewMode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier for a specific site [`revision`](wix-site.html#revision). You can use the `revision` property together with the Release Manager to monitor and debug new revisions of your site.\\\\r\\\\n             */\\\\r\\\\n            revision: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * Additional information about a potentially long-running operation associated with the log entry.\\\\r\\\\n         */\\\\r\\\\n        type LogEntryOperation = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier useful for linking together all log entries associated with a specific operation.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Context of the operation, such as a URL path for page code or a web module function name.\\\\r\\\\n             */\\\\r\\\\n            producer: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * Source code location information associated with the log entry. Currently only applicable for backend log entries with the `Corvid` namespace.\\\\r\\\\n         */\\\\r\\\\n        type LogEntrySourceLocation = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the source file.\\\\r\\\\n             */\\\\r\\\\n            file: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line within the source file. 1-based. 0 indicates no line number available.\\\\r\\\\n             */\\\\r\\\\n            line: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_location {\\\\r\\\\n    /**\\\\r\\\\n     * An object used to manage the query segment of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    interface QueryParams {\\\\r\\\\n        /**\\\\r\\\\n         * Adds query parameters to the current page's URL.\\\\r\\\\n         */\\\\r\\\\n        add(toAdd: any): void;\\\\r\\\\n        /**\\\\r\\\\n         * Removes query parameters from the current page's URL.\\\\r\\\\n         */\\\\r\\\\n        remove(toRemove: string[]): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object containing information about a location.\\\\r\\\\n     */\\\\r\\\\n    type Location = {\\\\r\\\\n        /**\\\\r\\\\n         * Location path.\\\\r\\\\n         */\\\\r\\\\n        path: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles location change events.\\\\r\\\\n     */\\\\r\\\\n    type LocationChangeHandler = (event: wix_location.Location)=>void;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_site {\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about which pages and lightboxes to\\\\r\\\\n     *  prefetch resources for.\\\\r\\\\n     */\\\\r\\\\n    type PrefetchItems = {\\\\r\\\\n        /**\\\\r\\\\n         * The relative or absolute URLs of the pages in your site\\\\r\\\\n         *  to prefetch resources for.\\\\r\\\\n         */\\\\r\\\\n        pages: string[];\\\\r\\\\n        /**\\\\r\\\\n         * The names of the lightboxes in your site to prefetch \\\\r\\\\n         *  resources for.\\\\r\\\\n         */\\\\r\\\\n        lightboxes: string[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that is returned from a prefetch request.\\\\r\\\\n     */\\\\r\\\\n    type PrefetchResult = {\\\\r\\\\n        /**\\\\r\\\\n         * A success or failure message.\\\\r\\\\n         */\\\\r\\\\n        message: string;\\\\r\\\\n        /**\\\\r\\\\n         * The errors that occurred.\\\\r\\\\n         */\\\\r\\\\n        errors: wix_site.PrefetchResultError;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that is returned when a resource prefetch is unsuccessful.\\\\r\\\\n     */\\\\r\\\\n    type PrefetchResultError = {\\\\r\\\\n        /**\\\\r\\\\n         * The names of the pages for which prefetch failed.\\\\r\\\\n         */\\\\r\\\\n        pages: string[];\\\\r\\\\n        /**\\\\r\\\\n         * The names of the lightbox for which prefetch failed.\\\\r\\\\n         */\\\\r\\\\n        lightboxes: string[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the site's prefixes.\\\\r\\\\n     */\\\\r\\\\n    type Prefix = {\\\\r\\\\n        /**\\\\r\\\\n         * The name of the prefix.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * The type of the prefix: `\\\\\\\"dynamicPages\\\\\\\"`, `\\\\\\\"router\\\\\\\"`, or `\\\\\\\"app\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * The prefix.\\\\r\\\\n         */\\\\r\\\\n        prefix: string;\\\\r\\\\n        /**\\\\r\\\\n         * If the prefix is an app's prefix, the `applicationId` property is the app's ID.\\\\r\\\\n         */\\\\r\\\\n        applicationId?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the site's pages, prefixes, and lightboxes.\\\\r\\\\n     */\\\\r\\\\n    type SiteStructure = {\\\\r\\\\n        /**\\\\r\\\\n         * The pages of the site.\\\\r\\\\n         */\\\\r\\\\n        pages: wix_site.StructurePage[];\\\\r\\\\n        /**\\\\r\\\\n         * The prefixes of the site's routers and dynamic pages.\\\\r\\\\n         */\\\\r\\\\n        prefixes: wix_site.Prefix[];\\\\r\\\\n        /**\\\\r\\\\n         * The site's lightboxes.\\\\r\\\\n         */\\\\r\\\\n        lightboxes: wix_site.StructureLightbox[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a lightbox on the site.\\\\r\\\\n     */\\\\r\\\\n    type StructureLightbox = {\\\\r\\\\n        /**\\\\r\\\\n         * The name of the lightbox.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a page on the site.\\\\r\\\\n     */\\\\r\\\\n    type StructurePage = {\\\\r\\\\n        /**\\\\r\\\\n         * The name of the page.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * The type of the page: `\\\\\\\"static\\\\\\\"` or `\\\\\\\"template\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * The URL of the page. If the page is a `static` page the `url` property is the page's SEO URL.\\\\r\\\\n         */\\\\r\\\\n        url?: string;\\\\r\\\\n        /**\\\\r\\\\n         * If the page is an app page, the `applicationId` property is the app's ID.\\\\r\\\\n         */\\\\r\\\\n        applicationId?: string;\\\\r\\\\n        /**\\\\r\\\\n         * If the page is a router or dynamic page, the `prefix` property is the page's prefix.\\\\r\\\\n         */\\\\r\\\\n        prefix?: string;\\\\r\\\\n        /**\\\\r\\\\n         * If the page is the Home page, `isHomePage` is `true`. Otherwise, it does not exist.\\\\r\\\\n         */\\\\r\\\\n        isHomePage?: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_storage {\\\\r\\\\n    /**\\\\r\\\\n     * Used for storing local, session, or memory key/value data in the visitor's browser.\\\\r\\\\n     */\\\\r\\\\n    interface Storage {\\\\r\\\\n        /**\\\\r\\\\n         * Removes **all** items from local, session, or memory storage.\\\\r\\\\n         */\\\\r\\\\n        clear(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an item from local, session, or memory storage.\\\\r\\\\n         */\\\\r\\\\n        getItem(key: string): string;\\\\r\\\\n        /**\\\\r\\\\n         * Removes an item from local, session, or memory storage.\\\\r\\\\n         */\\\\r\\\\n        removeItem(key: string): void;\\\\r\\\\n        /**\\\\r\\\\n         * Stores an item in local, session, or memory storage.\\\\r\\\\n         */\\\\r\\\\n        setItem(key: string, value: string): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_window {\\\\r\\\\n    /**\\\\r\\\\n     * A lightbox pops up on your site to grab your visitor's attention.\\\\r\\\\n     */\\\\r\\\\n    interface lightbox {\\\\r\\\\n        /**\\\\r\\\\n         * Closes the lightbox.\\\\r\\\\n         */\\\\r\\\\n        close(data?: any): void;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the data object that was passed to a lightbox.\\\\r\\\\n         */\\\\r\\\\n        getContext(): any;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The Multilingual API is used when working with the languages in a multilingual site.\\\\r\\\\n     */\\\\r\\\\n    interface multilingual {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the site's current display language.\\\\r\\\\n         */\\\\r\\\\n        readonly currentLanguage: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets whether the site has been set up to be shown in multiple languages.\\\\r\\\\n         */\\\\r\\\\n        readonly isEnabled: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets information about the site's languages.\\\\r\\\\n         */\\\\r\\\\n        readonly siteLanguages: wix_window.multilingual.SiteLanguage[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace multilingual {\\\\r\\\\n        /**\\\\r\\\\n         * An object returned by the `siteLanguages` property that contains information about the site's languages.\\\\r\\\\n         */\\\\r\\\\n        type SiteLanguage = {\\\\r\\\\n            /**\\\\r\\\\n             * The language's full name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * The language's locale code, which represents a set of language-related formatting preferences.\\\\r\\\\n             */\\\\r\\\\n            locale: string;\\\\r\\\\n            /**\\\\r\\\\n             * The language's two-letter code.\\\\r\\\\n             */\\\\r\\\\n            languageCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * The language's three-letter country code.\\\\r\\\\n             */\\\\r\\\\n            countryCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the language is the site's primary language.\\\\r\\\\n             */\\\\r\\\\n            isPrimaryLanguage: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The Rendering API is used to control when code is run as a page is being loaded.\\\\r\\\\n     */\\\\r\\\\n    interface rendering {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the current environment the rendering process is running in.\\\\r\\\\n         */\\\\r\\\\n        readonly env: string;\\\\r\\\\n        /**\\\\r\\\\n         * **Deprecated:** Gets the current cycle in the rendering process.\\\\r\\\\n         */\\\\r\\\\n        readonly renderCycle: number;\\\\r\\\\n        /**\\\\r\\\\n         * **Deprecated:** Gets data sent from server-side code to client-side code.\\\\r\\\\n         */\\\\r\\\\n        readonly warmupData: boolean | number | string | any;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Objects used when calling the [`trackEvent()`](wix-window.html#trackEvent) function.\\\\r\\\\n     */\\\\r\\\\n    interface trackingParameters {\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace trackingParameters {\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an AddPaymentInfo track event.\\\\r\\\\n         */\\\\r\\\\n        type AddPaymentInfoEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Describes option information on a checkout page, such as selected payment method.\\\\r\\\\n             */\\\\r\\\\n            option?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an AddProductImpression track event.\\\\r\\\\n         */\\\\r\\\\n        type AddProductImpressionEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product information.\\\\r\\\\n             */\\\\r\\\\n            contents: wix_window.trackingParameters.AddProductImpressionEventContents[];\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an AddProductImpression track event.\\\\r\\\\n         */\\\\r\\\\n        type AddProductImpressionEventContents = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * List or collection the product is in.\\\\r\\\\n             */\\\\r\\\\n            list?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an AddToCart track event.\\\\r\\\\n         */\\\\r\\\\n        type AddToCartEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an CheckoutStep track event.\\\\r\\\\n         */\\\\r\\\\n        type CheckoutStepEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Checkout step number. Be sure to report\\\\r\\\\n             *  consistent step values. For example, use `3` when this step follows\\\\r\\\\n             *  `StartPayment` and `AddPaymentInfo` events.\\\\r\\\\n             */\\\\r\\\\n            step?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Action the visitor has taken, such as `\\\\\\\"Select shipping\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            action?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Describes option information on a checkout page, such as selected payment method.\\\\r\\\\n             */\\\\r\\\\n            option?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a ClickProduct track event.\\\\r\\\\n         */\\\\r\\\\n        type ClickProductEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * List or collection the product is in.\\\\r\\\\n             */\\\\r\\\\n            list?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a CustomEvent track event.\\\\r\\\\n         */\\\\r\\\\n        type CustomEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            event: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an InitiateCheckout track event.\\\\r\\\\n         */\\\\r\\\\n        type InitiateCheckoutEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product information.\\\\r\\\\n             */\\\\r\\\\n            contents: wix_window.trackingParameters.InitiateCheckoutEventContents[];\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an InitiateCheckout track event.\\\\r\\\\n         */\\\\r\\\\n        type InitiateCheckoutEventContents = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a Purchase track event.\\\\r\\\\n         */\\\\r\\\\n        type PurchaseEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the store where the event occurred.\\\\r\\\\n             */\\\\r\\\\n            affiliation?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Total amount of the purchase including shipping, taxes, etc.\\\\r\\\\n             */\\\\r\\\\n            revenue?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total tax charge.\\\\r\\\\n             */\\\\r\\\\n            tax?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total shipping charge.\\\\r\\\\n             */\\\\r\\\\n            shipping?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon code applied to the transaction.\\\\r\\\\n             */\\\\r\\\\n            coupon?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product information.\\\\r\\\\n             */\\\\r\\\\n            contents: wix_window.trackingParameters.PurchaseEventContents[];\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an Purchase track event.\\\\r\\\\n         */\\\\r\\\\n        type PurchaseEventContents = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a RemoveFromCart track event.\\\\r\\\\n         */\\\\r\\\\n        type RemoveFromCartEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an StartPayment track event.\\\\r\\\\n         */\\\\r\\\\n        type StartPaymentEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Describes option information on a checkout page, such as selected payment method.\\\\r\\\\n             */\\\\r\\\\n            option?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a ViewContent track event.\\\\r\\\\n         */\\\\r\\\\n        type ViewContentEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * List or collection the product is in.\\\\r\\\\n             */\\\\r\\\\n            list?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when opening a modal window.\\\\r\\\\n     */\\\\r\\\\n    type OpenModalOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Width of the modal window.\\\\r\\\\n         */\\\\r\\\\n        width: number;\\\\r\\\\n        /**\\\\r\\\\n         * Height of the modal window.\\\\r\\\\n         */\\\\r\\\\n        height: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used for providing options for the `scrollTo()` method.\\\\r\\\\n     */\\\\r\\\\n    type ScrollToOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether to scroll with an animation. Defaults to `true`.\\\\r\\\\n         */\\\\r\\\\n        scrollAnimation: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by the `getBoundingRect()` function that contains information about the window's size, the document's size, and the current scroll position.\\\\r\\\\n     */\\\\r\\\\n    type WindowSizeInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * An object with `height` and `width` key:value pairs containing the size of the viewable area of the current browser window.\\\\r\\\\n         */\\\\r\\\\n        window: any;\\\\r\\\\n        /**\\\\r\\\\n         * An object with `height` and `width` key:value pairs containing the size of the actual body of the page, which may be larger or smaller than the current window.\\\\r\\\\n         */\\\\r\\\\n        document: any;\\\\r\\\\n        /**\\\\r\\\\n         * An object with `x` and `y` key:value pairs containing the scroll offset of the page within the window from the top-left corner.\\\\r\\\\n         */\\\\r\\\\n        scroll: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_billing_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired by actions relating to billing.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an invoice is created.\\\\r\\\\n         */\\\\r\\\\n        onInvoiceCreated(event: wix_billing_backend.invoices.Invoice): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an invoice is overdue.\\\\r\\\\n         */\\\\r\\\\n        onInvoiceOverdue(event: wix_billing_backend.invoices.Invoice): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an invoice is paid.\\\\r\\\\n         */\\\\r\\\\n        onInvoicePaid(event: wix_billing_backend.invoices.Invoice): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an invoice is sent.\\\\r\\\\n         */\\\\r\\\\n        onInvoiceSent(event: wix_billing_backend.invoices.Invoice): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a price quote is accepted.\\\\r\\\\n         */\\\\r\\\\n        onPriceQuoteAccepted(event: wix_billing_backend.priceQuotes.PriceQuote): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a price quote is created.\\\\r\\\\n         */\\\\r\\\\n        onPriceQuoteCreated(event: wix_billing_backend.priceQuotes.PriceQuote): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a price quote has expired.\\\\r\\\\n         */\\\\r\\\\n        onPriceQuoteExpired(event: wix_billing_backend.priceQuotes.PriceQuote): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a price quote is sent.\\\\r\\\\n         */\\\\r\\\\n        onPriceQuoteSent(event: wix_billing_backend.priceQuotes.PriceQuote): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The wix-billing-backend module contains functionality for working with\\\\r\\\\n     *  [your site's invoices](https://support.wix.com/en/article/about-wix-invoices)\\\\r\\\\n     *  from backend code.\\\\r\\\\n     */\\\\r\\\\n    interface invoices {\\\\r\\\\n        /**\\\\r\\\\n         * Adds a payment to the invoice and reports the payment to the payment provider.\\\\r\\\\n         */\\\\r\\\\n        addPayment(id: wix_billing_backend.invoices.IdAndVersion, payment: wix_billing_backend.invoices.Payment): Promise<wix_billing_backend.invoices.Response>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new invoice.\\\\r\\\\n         */\\\\r\\\\n        createInvoice(invoiceFields: wix_billing_backend.invoices.InvoiceFields): Promise<wix_billing_backend.invoices.Response>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a link that can be used by a customer to preview the invoice.\\\\r\\\\n         */\\\\r\\\\n        createInvoicePreviewUrl(id: wix_billing_backend.invoices.IdAndVersion): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes an invoice by ID.\\\\r\\\\n         */\\\\r\\\\n        deleteInvoice(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an existing invoice by ID.\\\\r\\\\n         */\\\\r\\\\n        getInvoice(id: string): Promise<wix_billing_backend.invoices.Invoice>;\\\\r\\\\n        /**\\\\r\\\\n         * Sends an invoice preview link to a customer via email.\\\\r\\\\n         */\\\\r\\\\n        sendInvoice(id: wix_billing_backend.invoices.IdAndVersion, emailInfo: wix_billing_backend.invoices.EmailInfo): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Update an existing invoice.\\\\r\\\\n         */\\\\r\\\\n        updateInvoice(id: wix_billing_backend.invoices.IdAndVersion, invoiceFields: wix_billing_backend.invoices.InvoiceFields): Promise<wix_billing_backend.invoices.Response>;\\\\r\\\\n        /**\\\\r\\\\n         * Voids an invoice.\\\\r\\\\n         */\\\\r\\\\n        voidInvoice(id: wix_billing_backend.invoices.IdAndVersion): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace invoices {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains address information.\\\\r\\\\n         */\\\\r\\\\n        type Address = {\\\\r\\\\n            /**\\\\r\\\\n             * Address line.\\\\r\\\\n             */\\\\r\\\\n            addressLine: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address subdivision.\\\\r\\\\n             */\\\\r\\\\n            subdivision: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address postal code.\\\\r\\\\n             */\\\\r\\\\n            postalCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address in human readable format.\\\\r\\\\n             */\\\\r\\\\n            formatted: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains calculated tax information.\\\\r\\\\n         */\\\\r\\\\n        type CalculatedTax = {\\\\r\\\\n            /**\\\\r\\\\n             * Tax name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Tax rate.\\\\r\\\\n             */\\\\r\\\\n            rate: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total value of taxable goods.\\\\r\\\\n             */\\\\r\\\\n            taxable: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total amount of tax applied.\\\\r\\\\n             */\\\\r\\\\n            taxed: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains customer information.\\\\r\\\\n         */\\\\r\\\\n        type Customer = {\\\\r\\\\n            /**\\\\r\\\\n             * Contact ID.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Physical address.\\\\r\\\\n             */\\\\r\\\\n            address?: wix_billing_backend.invoices.Address;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Company name.\\\\r\\\\n             */\\\\r\\\\n            company?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Full name.\\\\r\\\\n             */\\\\r\\\\n            fullName?: string;\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains discount information.\\\\r\\\\n         */\\\\r\\\\n        type Discount = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount amount.\\\\r\\\\n             */\\\\r\\\\n            value: number;\\\\r\\\\n            /**\\\\r\\\\n             * Discount type.\\\\r\\\\n             * \\\\r\\\\n             * Either:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"Fixed\\\\\\\"`: A fixed amount is deducted.\\\\r\\\\n             * + `\\\\\\\"Percentage\\\\\\\"`: A percentage of the total amount is deducted.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information used to send an invoice to a customer.\\\\r\\\\n         */\\\\r\\\\n        type EmailInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Email subject.\\\\r\\\\n             */\\\\r\\\\n            subject: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email body. Limited formatting in the email body can be\\\\r\\\\n             * achieved using standard JavaScript string formatting.\\\\r\\\\n             */\\\\r\\\\n            body: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains ID and version information.\\\\r\\\\n         */\\\\r\\\\n        type IdAndVersion = {\\\\r\\\\n            /**\\\\r\\\\n             * Invoice ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Invoice version.\\\\r\\\\n             */\\\\r\\\\n            version: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that represents an invoice.\\\\r\\\\n         */\\\\r\\\\n        type Invoice = {\\\\r\\\\n            /**\\\\r\\\\n             * ID and version of the invoice.\\\\r\\\\n             */\\\\r\\\\n            id: wix_billing_backend.invoices.IdAndVersion;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the invoice.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Draft\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Sent\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Processing\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Paid\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Overdue\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Void\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Deleted\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"PartiallyPaid\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"PartialAndOverdue\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * Number of the invoice, unique within your site.\\\\r\\\\n             */\\\\r\\\\n            number: string;\\\\r\\\\n            /**\\\\r\\\\n             * Title of the invoice.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Locale information.\\\\r\\\\n             */\\\\r\\\\n            locale: wix_billing_backend.invoices.Locale;\\\\r\\\\n            /**\\\\r\\\\n             * Customer listed on the invoice.\\\\r\\\\n             */\\\\r\\\\n            customer: wix_billing_backend.invoices.Customer;\\\\r\\\\n            /**\\\\r\\\\n             * Line items listed on the invoice.\\\\r\\\\n             */\\\\r\\\\n            lineItems: wix_billing_backend.invoices.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Discount included in the invoice.\\\\r\\\\n             */\\\\r\\\\n            discount: wix_billing_backend.invoices.Discount;\\\\r\\\\n            /**\\\\r\\\\n             * List of payments already received from the customer.\\\\r\\\\n             */\\\\r\\\\n            payments: wix_billing_backend.invoices.Payment[];\\\\r\\\\n            /**\\\\r\\\\n             * List of taxes calculated based on the line items.\\\\r\\\\n             */\\\\r\\\\n            taxes: wix_billing_backend.invoices.CalculatedTax[];\\\\r\\\\n            /**\\\\r\\\\n             * Total values.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_billing_backend.invoices.TotalPrice;\\\\r\\\\n            /**\\\\r\\\\n             * Invoice dynamic totals.\\\\r\\\\n             */\\\\r\\\\n            dynamicTotals: wix_billing_backend.invoices.InvoiceDynamicTotals;\\\\r\\\\n            /**\\\\r\\\\n             * Additional metadata included in the invoice.\\\\r\\\\n             */\\\\r\\\\n            metadata: wix_billing_backend.invoices.MetaData;\\\\r\\\\n            /**\\\\r\\\\n             * Dates associated with the invoice.\\\\r\\\\n             */\\\\r\\\\n            dates: wix_billing_backend.invoices.InvoiceDates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains date information for an invoice.\\\\r\\\\n         */\\\\r\\\\n        type InvoiceDates = {\\\\r\\\\n            /**\\\\r\\\\n             * Invoice issue date.\\\\r\\\\n             */\\\\r\\\\n            issueDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Invoice due date.\\\\r\\\\n             */\\\\r\\\\n            dueDate: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about invoice totals that change when payments are received.\\\\r\\\\n         */\\\\r\\\\n        type InvoiceDynamicTotals = {\\\\r\\\\n            /**\\\\r\\\\n             * Amount paid.\\\\r\\\\n             */\\\\r\\\\n            paidAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Balance amount.\\\\r\\\\n             */\\\\r\\\\n            balance: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information used when creating or updating an invoice.\\\\r\\\\n         */\\\\r\\\\n        type InvoiceFields = {\\\\r\\\\n            /**\\\\r\\\\n             * Title of the invoice.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Customer listed on the invoice.\\\\r\\\\n             */\\\\r\\\\n            customer: wix_billing_backend.invoices.Customer;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line items listed on the invoice.\\\\r\\\\n             */\\\\r\\\\n            lineItems: wix_billing_backend.invoices.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Discount included in the invoice.\\\\r\\\\n             */\\\\r\\\\n            discount?: wix_billing_backend.invoices.Discount;\\\\r\\\\n            /**\\\\r\\\\n             * Invoice payments.\\\\r\\\\n             */\\\\r\\\\n            payments: wix_billing_backend.invoices.Payment[];\\\\r\\\\n            /**\\\\r\\\\n             * Invoice metadata.\\\\r\\\\n             */\\\\r\\\\n            metadata?: wix_billing_backend.invoices.MetaData;\\\\r\\\\n            /**\\\\r\\\\n             * Dates associated with the invoice.\\\\r\\\\n             */\\\\r\\\\n            dates: wix_billing_backend.invoices.InvoiceDates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains itemized fee information.\\\\r\\\\n         */\\\\r\\\\n        type ItemizedFee = {\\\\r\\\\n            /**\\\\r\\\\n             * Item fee name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Item fee price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains line item information.\\\\r\\\\n         */\\\\r\\\\n        type LineItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Line item ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item taxes.\\\\r\\\\n             */\\\\r\\\\n            taxes?: wix_billing_backend.invoices.LineItemTax[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains tax information for a line item.\\\\r\\\\n         */\\\\r\\\\n        type LineItemTax = {\\\\r\\\\n            /**\\\\r\\\\n             * Line item tax name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item tax rate.\\\\r\\\\n             */\\\\r\\\\n            rate: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains locale information.\\\\r\\\\n         */\\\\r\\\\n        type Locale = {\\\\r\\\\n            /**\\\\r\\\\n             * An IETF language tag.\\\\r\\\\n             * Some common language tags include:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"en-US\\\\\\\"`: English, United States\\\\r\\\\n             * + `\\\\\\\"en-GB\\\\\\\"`: English, British\\\\r\\\\n             * + `\\\\\\\"es-ES\\\\\\\"`: Spanish, Spain\\\\r\\\\n             * + `\\\\\\\"de-DE\\\\\\\"`: German, Germany\\\\r\\\\n             * + `\\\\\\\"ja-JP\\\\\\\"`: Japanese, Japan\\\\r\\\\n             * + `\\\\\\\"fr-CH\\\\\\\"`: French, Switzerland\\\\r\\\\n             * + `\\\\\\\"it-IT\\\\\\\"`: Italian, Italy\\\\r\\\\n             */\\\\r\\\\n            language: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains metadata information.\\\\r\\\\n         */\\\\r\\\\n        type MetaData = {\\\\r\\\\n            /**\\\\r\\\\n             * Invoice notes.\\\\r\\\\n             */\\\\r\\\\n            notes?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Legal terms.\\\\r\\\\n             */\\\\r\\\\n            legalTerms?: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL to legal terms.\\\\r\\\\n             */\\\\r\\\\n            sourceUrl?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about an invoice payment.\\\\r\\\\n         */\\\\r\\\\n        type Payment = {\\\\r\\\\n            /**\\\\r\\\\n             * Payment id.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Payment type, describing how the payment was made.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Payment amount.\\\\r\\\\n             */\\\\r\\\\n            amount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Payment date.\\\\r\\\\n             */\\\\r\\\\n            date: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains response information.\\\\r\\\\n         */\\\\r\\\\n        type Response = {\\\\r\\\\n            /**\\\\r\\\\n             * ID and version information.\\\\r\\\\n             */\\\\r\\\\n            id: wix_billing_backend.invoices.IdAndVersion;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains price totals.\\\\r\\\\n         */\\\\r\\\\n        type TotalPrice = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount amount.\\\\r\\\\n             */\\\\r\\\\n            discountAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * List of itemized fees.\\\\r\\\\n             */\\\\r\\\\n            fees: wix_billing_backend.invoices.ItemizedFee[];\\\\r\\\\n            /**\\\\r\\\\n             * Sum of line item tax amounts.\\\\r\\\\n             */\\\\r\\\\n            taxedAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Subtotal of the line items without the tax included.\\\\r\\\\n             */\\\\r\\\\n            subtotal: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total price of the itemized fees and taxes.\\\\r\\\\n             */\\\\r\\\\n            total: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The wix-billing-backend module contains functionality for working with\\\\r\\\\n     *  your site's [price quotes](https://support.wix.com/en/article/about-price-quotes)\\\\r\\\\n     *  from backend code.\\\\r\\\\n     */\\\\r\\\\n    interface priceQuotes {\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new price quote.\\\\r\\\\n         */\\\\r\\\\n        createPriceQuote(priceQuoteInfo: wix_billing_backend.priceQuotes.PriceQuoteInfo): Promise<wix_billing_backend.priceQuotes.Response>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes a price quote by ID.\\\\r\\\\n         */\\\\r\\\\n        deletePriceQuote(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an existing price quote by ID.\\\\r\\\\n         */\\\\r\\\\n        getPriceQuote(id: string): Promise<wix_billing_backend.priceQuotes.PriceQuote>;\\\\r\\\\n        /**\\\\r\\\\n         * Sends a price quote preview link to a customer via email.\\\\r\\\\n         */\\\\r\\\\n        sendPriceQuote(id: wix_billing_backend.priceQuotes.IdAndVersion, emailInfo: wix_billing_backend.priceQuotes.EmailInfo): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates an existing price quote.\\\\r\\\\n         */\\\\r\\\\n        updatePriceQuote(id: wix_billing_backend.priceQuotes.IdAndVersion, priceQuoteInfo: wix_billing_backend.priceQuotes.PriceQuoteInfo): Promise<wix_billing_backend.priceQuotes.Response>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace priceQuotes {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains address information.\\\\r\\\\n         */\\\\r\\\\n        type Address = {\\\\r\\\\n            /**\\\\r\\\\n             * Address line.\\\\r\\\\n             */\\\\r\\\\n            addressLine: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address subdivision.\\\\r\\\\n             */\\\\r\\\\n            subdivision: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address postal code.\\\\r\\\\n             */\\\\r\\\\n            postalCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address in human readable format.\\\\r\\\\n             */\\\\r\\\\n            formatted: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains calculated tax information.\\\\r\\\\n         */\\\\r\\\\n        type CalculatedTax = {\\\\r\\\\n            /**\\\\r\\\\n             * Tax name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Tax rate.\\\\r\\\\n             */\\\\r\\\\n            rate: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total value of taxable goods.\\\\r\\\\n             */\\\\r\\\\n            taxable: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total amount of tax applied.\\\\r\\\\n             */\\\\r\\\\n            taxed: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains customer information.\\\\r\\\\n         */\\\\r\\\\n        type Customer = {\\\\r\\\\n            /**\\\\r\\\\n             * Contact ID.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Physical address.\\\\r\\\\n             */\\\\r\\\\n            address?: wix_billing_backend.priceQuotes.Address;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Company name.\\\\r\\\\n             */\\\\r\\\\n            company?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Full name.\\\\r\\\\n             */\\\\r\\\\n            fullName?: string;\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains discount information.\\\\r\\\\n         */\\\\r\\\\n        type Discount = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount amount.\\\\r\\\\n             */\\\\r\\\\n            value: number;\\\\r\\\\n            /**\\\\r\\\\n             * Discount type.\\\\r\\\\n             * \\\\r\\\\n             * Either:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"Fixed\\\\\\\"`: A fixed amount is deducted.\\\\r\\\\n             * + `\\\\\\\"Percentage\\\\\\\"`: A percentage of the total amount is deducted.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information used to send a price quote to a customer.\\\\r\\\\n         */\\\\r\\\\n        type EmailInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Email subject.\\\\r\\\\n             */\\\\r\\\\n            subject: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email body. Limited formatting in the email body can be\\\\r\\\\n             * achieved using standard JavaScript string formatting.\\\\r\\\\n             */\\\\r\\\\n            body: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains ID and version information.\\\\r\\\\n         */\\\\r\\\\n        type IdAndVersion = {\\\\r\\\\n            /**\\\\r\\\\n             * Price quote ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Price quote version.\\\\r\\\\n             */\\\\r\\\\n            version: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains itemized fee information.\\\\r\\\\n         */\\\\r\\\\n        type ItemizedFee = {\\\\r\\\\n            /**\\\\r\\\\n             * Item fee name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Item fee price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains line item information.\\\\r\\\\n         */\\\\r\\\\n        type LineItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Line item ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item taxes.\\\\r\\\\n             */\\\\r\\\\n            taxes?: wix_billing_backend.priceQuotes.LineItemTax[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains tax information for a line item.\\\\r\\\\n         */\\\\r\\\\n        type LineItemTax = {\\\\r\\\\n            /**\\\\r\\\\n             * Line item tax name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item tax rate.\\\\r\\\\n             */\\\\r\\\\n            rate: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains locale information.\\\\r\\\\n         */\\\\r\\\\n        type Locale = {\\\\r\\\\n            /**\\\\r\\\\n             * An IETF language tag.\\\\r\\\\n             * Some common language tags include:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"en-US\\\\\\\"`: English, United States\\\\r\\\\n             * + `\\\\\\\"en-GB\\\\\\\"`: English, British\\\\r\\\\n             * + `\\\\\\\"es-ES\\\\\\\"`: Spanish, Spain\\\\r\\\\n             * + `\\\\\\\"de-DE\\\\\\\"`: German, Germany\\\\r\\\\n             * + `\\\\\\\"ja-JP\\\\\\\"`: Japanese, Japan\\\\r\\\\n             * + `\\\\\\\"fr-CH\\\\\\\"`: French, Switzerland\\\\r\\\\n             * + `\\\\\\\"it-IT\\\\\\\"`: Italian, Italy\\\\r\\\\n             */\\\\r\\\\n            language: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains metadata information.\\\\r\\\\n         */\\\\r\\\\n        type MetaData = {\\\\r\\\\n            /**\\\\r\\\\n             * Price quote notes.\\\\r\\\\n             */\\\\r\\\\n            notes?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Legal terms.\\\\r\\\\n             */\\\\r\\\\n            legalTerms?: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL to legal terms.\\\\r\\\\n             */\\\\r\\\\n            sourceUrl?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about price quote payment terms.\\\\r\\\\n         */\\\\r\\\\n        type PaymentTerms = {\\\\r\\\\n            /**\\\\r\\\\n             * Price quote term type.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"DueOnReceipt\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"NetPlus\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"TimeStamp\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Other\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            termType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Term data. When `termType` is `\\\\\\\"NetPlus\\\\\\\"`,\\\\r\\\\n             *  `termData` contains a positive integer indicating how many days after the charge\\\\r\\\\n             *  payment is due.\\\\r\\\\n             */\\\\r\\\\n            termData?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that represents a price quote.\\\\r\\\\n         */\\\\r\\\\n        type PriceQuote = {\\\\r\\\\n            /**\\\\r\\\\n             * ID and version of the price quote.\\\\r\\\\n             */\\\\r\\\\n            id: wix_billing_backend.priceQuotes.IdAndVersion;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the price quote.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Draft\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Sent\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Processing\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Accepted\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Rejected\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Expired\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Void\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Deleted\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Invoiced\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * Number of the price quote, unique within your site.\\\\r\\\\n             */\\\\r\\\\n            number: string;\\\\r\\\\n            /**\\\\r\\\\n             * Title of the price quote.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Locale information.\\\\r\\\\n             */\\\\r\\\\n            locale: wix_billing_backend.priceQuotes.Locale;\\\\r\\\\n            /**\\\\r\\\\n             * Customer listed on the price quote.\\\\r\\\\n             */\\\\r\\\\n            customer: wix_billing_backend.priceQuotes.Customer;\\\\r\\\\n            /**\\\\r\\\\n             * Line items listed on the price quote.\\\\r\\\\n             */\\\\r\\\\n            lineItems: wix_billing_backend.priceQuotes.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Discount included in the price quote.\\\\r\\\\n             */\\\\r\\\\n            discount: wix_billing_backend.priceQuotes.Discount;\\\\r\\\\n            /**\\\\r\\\\n             * Payment terms.\\\\r\\\\n             */\\\\r\\\\n            paymentTerms: wix_billing_backend.priceQuotes.PaymentTerms;\\\\r\\\\n            /**\\\\r\\\\n             * List of taxes calculated based on the line items.\\\\r\\\\n             */\\\\r\\\\n            taxes: wix_billing_backend.priceQuotes.CalculatedTax[];\\\\r\\\\n            /**\\\\r\\\\n             * Total values.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_billing_backend.priceQuotes.TotalPrice;\\\\r\\\\n            /**\\\\r\\\\n             * Additional metadata included in the price quote.\\\\r\\\\n             */\\\\r\\\\n            metadata: wix_billing_backend.priceQuotes.MetaData;\\\\r\\\\n            /**\\\\r\\\\n             * Price quote company ID.\\\\r\\\\n             */\\\\r\\\\n            companyId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Price quote invoice ID, when converting price quote to invoice.\\\\r\\\\n             */\\\\r\\\\n            invoiceId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Dates associated with the price quote.\\\\r\\\\n             */\\\\r\\\\n            dates: wix_billing_backend.priceQuotes.PriceQuoteDates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains date information for a price quote.\\\\r\\\\n         */\\\\r\\\\n        type PriceQuoteDates = {\\\\r\\\\n            /**\\\\r\\\\n             * Date the price quote was issued.\\\\r\\\\n             */\\\\r\\\\n            issueDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Date that the price quote is valid until.\\\\r\\\\n             */\\\\r\\\\n            validThroughDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Date the price quote was accepted.\\\\r\\\\n             */\\\\r\\\\n            acceptanceDate?: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Date the price quote was last seen.\\\\r\\\\n             */\\\\r\\\\n            lastSeenDate?: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information used when creating or updating a price quote.\\\\r\\\\n         */\\\\r\\\\n        type PriceQuoteInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Title of the price quote.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Customer listed on the price quote.\\\\r\\\\n             */\\\\r\\\\n            customer: wix_billing_backend.priceQuotes.Customer;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line items listed on the price quote.\\\\r\\\\n             */\\\\r\\\\n            lineItems: wix_billing_backend.priceQuotes.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Discount included in the price quote.\\\\r\\\\n             */\\\\r\\\\n            discount?: wix_billing_backend.priceQuotes.Discount;\\\\r\\\\n            /**\\\\r\\\\n             * Payment terms.\\\\r\\\\n             */\\\\r\\\\n            paymentTerms: wix_billing_backend.priceQuotes.PaymentTerms;\\\\r\\\\n            /**\\\\r\\\\n             * Price quote metadata.\\\\r\\\\n             */\\\\r\\\\n            metadata?: wix_billing_backend.priceQuotes.MetaData;\\\\r\\\\n            /**\\\\r\\\\n             * Dates associated with the price quote.\\\\r\\\\n             */\\\\r\\\\n            dates: wix_billing_backend.priceQuotes.PriceQuoteDates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains response information.\\\\r\\\\n         */\\\\r\\\\n        type Response = {\\\\r\\\\n            /**\\\\r\\\\n             * ID and version information.\\\\r\\\\n             */\\\\r\\\\n            id: wix_billing_backend.priceQuotes.IdAndVersion;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains price totals.\\\\r\\\\n         */\\\\r\\\\n        type TotalPrice = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount amount.\\\\r\\\\n             */\\\\r\\\\n            discountAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * List of itemized fees.\\\\r\\\\n             */\\\\r\\\\n            fees: wix_billing_backend.priceQuotes.ItemizedFee[];\\\\r\\\\n            /**\\\\r\\\\n             * Sum of line item tax amounts.\\\\r\\\\n             */\\\\r\\\\n            taxedAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Subtotal of the line items without the tax included.\\\\r\\\\n             */\\\\r\\\\n            subtotal: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total price of the itemized fees and taxes.\\\\r\\\\n             */\\\\r\\\\n            total: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_captcha_backend {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a CAPTCHA authorization error message.\\\\r\\\\n     */\\\\r\\\\n    type ErrorReport = {\\\\r\\\\n        /**\\\\r\\\\n         * Error message.\\\\r\\\\n         */\\\\r\\\\n        error: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a CAPTCHA authorization success message.\\\\r\\\\n     */\\\\r\\\\n    type SuccessReport = {\\\\r\\\\n        /**\\\\r\\\\n         * Value is `true` when authorization is successful.\\\\r\\\\n         */\\\\r\\\\n        success: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_chat_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired by actions relating to chat messages.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a chat message is sent to or from the business.\\\\r\\\\n         */\\\\r\\\\n        onMessage(event: wix_chat_backend.Events.SendMessageEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * The content of a chat message.\\\\r\\\\n         */\\\\r\\\\n        type MessagePayload = {\\\\r\\\\n            /**\\\\r\\\\n             * Text of the chat message.\\\\r\\\\n             */\\\\r\\\\n            text: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a chat message that was sent.\\\\r\\\\n         */\\\\r\\\\n        type SendMessageEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the channel on which the message was sent.\\\\r\\\\n             */\\\\r\\\\n            channelId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Direction of the message.\\\\r\\\\n             * One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"VisitorToBusiness\\\\\\\"`: From a site visitor to the business.\\\\r\\\\n             *  + `\\\\\\\"BusinessToVisitor\\\\\\\"`: From the business to a site visitor.\\\\r\\\\n             */\\\\r\\\\n            direction: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of message. Currently only `TEXT` is supported.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * First 250 characters of the chat message. Currently only text is included in the summary.\\\\r\\\\n             */\\\\r\\\\n            summary: string;\\\\r\\\\n            /**\\\\r\\\\n             * The sender's member ID. For a message sent from the site's business, the site owner's member ID.\\\\r\\\\n             */\\\\r\\\\n            participantId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time the message was sent.\\\\r\\\\n             */\\\\r\\\\n            createdAt: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Content of the message.\\\\r\\\\n             */\\\\r\\\\n            payload: wix_chat_backend.Events.MessagePayload;\\\\r\\\\n            /**\\\\r\\\\n             * An object representing additional contextual message information included in a chat message. The site visitor does not see the metadata.\\\\r\\\\n             */\\\\r\\\\n            metadata?: any;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a chat message to be sent.\\\\r\\\\n     */\\\\r\\\\n    type MessageInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * The content of the message.\\\\r\\\\n         */\\\\r\\\\n        messageText: string;\\\\r\\\\n        /**\\\\r\\\\n         * The ID of the channel to send the message to. Currently only IDs of business channels are supported.\\\\r\\\\n         */\\\\r\\\\n        channelId: string;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing additional contextual message information included in a chat message. The site visitor does not see the metadata.\\\\r\\\\n         */\\\\r\\\\n        metadata?: any;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the message is sent from the visitor to the business. If `sendAsVisitor` is `true`, the message is sent from the site visitor to the business. If `sendAsVisitor` is `undefined` or `false`, the message is sent from the business to the site visitor. The default is `undefined`.\\\\r\\\\n         */\\\\r\\\\n        sendAsVisitor?: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_http_functions {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an incoming request received by a call to an HTTP function.\\\\r\\\\n     */\\\\r\\\\n    interface WixHttpFunctionRequest {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the base URL of a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly baseUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns an object representing the body of the incoming call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly body: wix_http_functions.WixHttpFunctionRequest.WixHttpFunctionRequestBody;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the function name of a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly functionName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the HTTP header fields used in a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly headers: any;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the IP address of the client who called the HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly ip: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the HTTP method used in calling an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly method: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the path of the URL used to call an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly path: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the query fields and values of the URL used to call an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly query: any;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the full URL of a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly url: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace WixHttpFunctionRequest {\\\\r\\\\n        /**\\\\r\\\\n         * An object returned by the `body` property representing the body of a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        type WixHttpFunctionRequestBody = {\\\\r\\\\n            /**\\\\r\\\\n             * Returns a Promise which resolves to the body of the call as a string.\\\\r\\\\n             */\\\\r\\\\n            \\\\\\\"text()\\\\\\\": Promise<string>;\\\\r\\\\n            /**\\\\r\\\\n             * Returns a Promise which resolves to the body of the call as a JSON object.\\\\r\\\\n             */\\\\r\\\\n            \\\\\\\"json()\\\\\\\": Promise<any>;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a response to an HTTP function request.\\\\r\\\\n     */\\\\r\\\\n    interface WixHttpFunctionResponse {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the body of the response as a string or binary buffer.\\\\r\\\\n         */\\\\r\\\\n        body: string | Buffer;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the HTTP response header fields.\\\\r\\\\n         */\\\\r\\\\n        headers: any;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the HTTP status code of the response.\\\\r\\\\n         */\\\\r\\\\n        status: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used to customize a response to an HTTP function call.\\\\r\\\\n     */\\\\r\\\\n    type WixHttpFunctionResponseOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * The response's HTTP status code.\\\\r\\\\n         */\\\\r\\\\n        status?: number;\\\\r\\\\n        /**\\\\r\\\\n         * The response's body.\\\\r\\\\n         */\\\\r\\\\n        body?: string | Buffer;\\\\r\\\\n        /**\\\\r\\\\n         * The response's header fields. The `headers` property contains an object of `key:value` pairs where the `key` is the header field name and the `value` is the header field value.\\\\r\\\\n         */\\\\r\\\\n        headers?: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_crm_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired by actions relating to site contacts.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a new workflow card is created.\\\\r\\\\n         */\\\\r\\\\n        onCardCreated(event: wix_crm_backend.Events.CardCreatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a workflow card is moved.\\\\r\\\\n         */\\\\r\\\\n        onCardMoved(event: wix_crm_backend.Events.CardMovedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a workflow card is moved.\\\\r\\\\n         */\\\\r\\\\n        onCardRestored(event: wix_crm_backend.Events.CardRestoredEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a user submits a form.\\\\r\\\\n         */\\\\r\\\\n        onFormSubmit(event: wix_crm_backend.Events.FormSubmitEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a created card.\\\\r\\\\n         */\\\\r\\\\n        type CardCreatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's workflow.\\\\r\\\\n             */\\\\r\\\\n            workflowId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's workflow.\\\\r\\\\n             */\\\\r\\\\n            workflowName: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's phase.\\\\r\\\\n             */\\\\r\\\\n            phaseId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's phase.\\\\r\\\\n             */\\\\r\\\\n            phaseName: string;\\\\r\\\\n            /**\\\\r\\\\n             * The card that was created.\\\\r\\\\n             */\\\\r\\\\n            card: wix_crm_backend.workflows.Card;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a moved card.\\\\r\\\\n         */\\\\r\\\\n        type CardMovedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's workflow.\\\\r\\\\n             */\\\\r\\\\n            workflowId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's workflow.\\\\r\\\\n             */\\\\r\\\\n            workflowName: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's new phase.\\\\r\\\\n             */\\\\r\\\\n            newPhaseId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's new phase.\\\\r\\\\n             */\\\\r\\\\n            newPhaseName: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's old phase.\\\\r\\\\n             */\\\\r\\\\n            previousPhaseId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's old phase.\\\\r\\\\n             */\\\\r\\\\n            previousPhaseName: string;\\\\r\\\\n            /**\\\\r\\\\n             * The card that was moved.\\\\r\\\\n             */\\\\r\\\\n            card: wix_crm_backend.workflows.Card;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a moved card.\\\\r\\\\n         */\\\\r\\\\n        type CardRestoredEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the workflow the card was restored to.\\\\r\\\\n             */\\\\r\\\\n            workflowId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the workflow the card was restored to.\\\\r\\\\n             */\\\\r\\\\n            workflowName: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the phase the card was restored to.\\\\r\\\\n             */\\\\r\\\\n            phaseId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the phase the card was restored to.\\\\r\\\\n             */\\\\r\\\\n            phaseName: string;\\\\r\\\\n            /**\\\\r\\\\n             * The card that was restored.\\\\r\\\\n             */\\\\r\\\\n            card: wix_crm_backend.workflows.Card;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an attachment to a form.\\\\r\\\\n         */\\\\r\\\\n        type FormAttachment = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the attachment.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of attachment.\\\\r\\\\n             * One of:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"UNDEFINED\\\\\\\"`\\\\r\\\\n             * + `\\\\\\\"DOCUMENT\\\\\\\"`\\\\r\\\\n             * + `\\\\\\\"IMAGE\\\\\\\"`\\\\r\\\\n             * + `\\\\\\\"VIDEO\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the attachment.\\\\r\\\\n             */\\\\r\\\\n            url: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a form field.\\\\r\\\\n         */\\\\r\\\\n        type FormField = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the field.\\\\r\\\\n             */\\\\r\\\\n            fieldName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Value of the field.\\\\r\\\\n             */\\\\r\\\\n            fieldValue: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a form.\\\\r\\\\n         */\\\\r\\\\n        type FormSubmitEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Contact ID of the user submitting the form.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the form.\\\\r\\\\n             */\\\\r\\\\n            formName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time that the form was submitted.\\\\r\\\\n             */\\\\r\\\\n            submissionTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Data submitted in the form. The object contains key:value pairs where the key is the field name and the value is the contents of the field.\\\\r\\\\n             */\\\\r\\\\n            submissionData: wix_crm_backend.Events.FormField[];\\\\r\\\\n            /**\\\\r\\\\n             * The form's attachments.\\\\r\\\\n             */\\\\r\\\\n            attachments: wix_crm_backend.Events.FormAttachment[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The Notifications API is used to send notifications to the site owner and contributors.\\\\r\\\\n     */\\\\r\\\\n    interface notifications {\\\\r\\\\n        /**\\\\r\\\\n         * Sends a notification.\\\\r\\\\n         */\\\\r\\\\n        notify(body: string, channels: string[], options: wix_crm_backend.notifications.NotificationOptions): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace notifications {\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about where to navigate when a notification is clicked.\\\\r\\\\n         */\\\\r\\\\n        type ActionTarget = {\\\\r\\\\n            /**\\\\r\\\\n             * URL to navigate to when the `actionTitle` text is clicked.\\\\r\\\\n             */\\\\r\\\\n            url?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing notification options.\\\\r\\\\n         */\\\\r\\\\n        type NotificationOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Notification title. Only displayed on mobile and browser notifications. Max length: 512 characters.\\\\r\\\\n             */\\\\r\\\\n            title?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Call to action text to be clicked on. When clicked, navigates to the `actionTarget` URL. Max length: 512 characters.\\\\r\\\\n             */\\\\r\\\\n            actionTitle?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Where to navigate to when the `actionTitle` text is clicked.\\\\r\\\\n             */\\\\r\\\\n            actionTarget?: wix_crm_backend.notifications.ActionTarget;\\\\r\\\\n            /**\\\\r\\\\n             * Contributor that will receive the notifications, based on their assigned roles.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"All_Contributors\\\\\\\"`: All site contributors, including the site owner.\\\\r\\\\n             *  + `\\\\\\\"Owner\\\\\\\"`: Only the site owner.\\\\r\\\\n             */\\\\r\\\\n            recipients?: wix_crm_backend.notifications.SiteContributors;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about which contributors will receive a notification.\\\\r\\\\n         */\\\\r\\\\n        type SiteContributors = {\\\\r\\\\n            /**\\\\r\\\\n             * Roles to receive the notification.\\\\r\\\\n             * One of:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"All_Contributors\\\\\\\"`: All site contributors (default).\\\\r\\\\n             * + `\\\\\\\"Owner\\\\\\\"`: Only the site owner.\\\\r\\\\n             */\\\\r\\\\n            role?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The Tasks API is used to manage a site's tasks.\\\\r\\\\n     */\\\\r\\\\n    interface tasks {\\\\r\\\\n        /**\\\\r\\\\n         * Sets a task as completed.\\\\r\\\\n         */\\\\r\\\\n        completeTask(taskId: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new task.\\\\r\\\\n         */\\\\r\\\\n        createTask(taskInfo: wix_crm_backend.tasks.TaskInfo): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a task by ID.\\\\r\\\\n         */\\\\r\\\\n        getTask(taskId: string): Promise<wix_crm_backend.tasks.Task>;\\\\r\\\\n        /**\\\\r\\\\n         * Removes an existing task.\\\\r\\\\n         */\\\\r\\\\n        removeTask(taskId: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Resets a task as not completed.\\\\r\\\\n         */\\\\r\\\\n        resetTask(taskId: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the specified fields of an existing task.\\\\r\\\\n         */\\\\r\\\\n        updateTaskFields(taskId: string, taskInfo: wix_crm_backend.tasks.TaskInfo): Promise<string>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace tasks {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a task.\\\\r\\\\n         */\\\\r\\\\n        type Task = {\\\\r\\\\n            /**\\\\r\\\\n             * Task title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the task has been\\\\r\\\\n             *  completed.\\\\r\\\\n             */\\\\r\\\\n            isCompleted: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier of the site contact\\\\r\\\\n             *  that this task is linked to.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Running task version number. Each time an\\\\r\\\\n             *  action is performed on a task its version number is incremented.\\\\r\\\\n             */\\\\r\\\\n            version: number;\\\\r\\\\n            /**\\\\r\\\\n             * Unique task identifier.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the task is due.\\\\r\\\\n             */\\\\r\\\\n            dueDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Type of the task's creator. `\\\\\\\"USER\\\\\\\"`\\\\r\\\\n             *  if the task was created using the site's dashboard. `\\\\\\\"APP\\\\\\\"` if the task was\\\\r\\\\n             *  created using the [`createTask()`](#createTask) function or if it was created\\\\r\\\\n             *  by an app installed on the site.\\\\r\\\\n             */\\\\r\\\\n            creatorType: string;\\\\r\\\\n            /**\\\\r\\\\n             * When `creatorType` is `\\\\\\\"USER\\\\\\\"`, the unique\\\\r\\\\n             *  identifier of the user that created the task in the dashboard. Otherwise, `userId` is not\\\\r\\\\n             *  present.\\\\r\\\\n             */\\\\r\\\\n            userId?: string;\\\\r\\\\n            /**\\\\r\\\\n             * When `creatorType` is `\\\\\\\"APP\\\\\\\"`, the unique\\\\r\\\\n             *  identifier of the application that created the task. Otherwise, `applicationId` is not\\\\r\\\\n             *  present.\\\\r\\\\n             */\\\\r\\\\n            applicationId?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information for creating or updating a task.\\\\r\\\\n         */\\\\r\\\\n        type TaskInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Task title.\\\\r\\\\n             */\\\\r\\\\n            title?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the task is due.\\\\r\\\\n             */\\\\r\\\\n            dueDate?: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier of the site contact\\\\r\\\\n             *  that this task is linked to.\\\\r\\\\n             */\\\\r\\\\n            contactId?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The wix-crm-backend module contains functionality for working with\\\\r\\\\n     *  your site's [workflows](https://support.wix.com/en/article/about-workflows)\\\\r\\\\n     *  from backend code.\\\\r\\\\n     * \\\\r\\\\n     *  A workflow consists of a number of phases, also known as steps. The final phase\\\\r\\\\n     *  in the workflow, the phase that indicates the workflow has been completed,\\\\r\\\\n     *  is know as the win phase. Each phase can contain cards that move between the phases,\\\\r\\\\n     *  indicating the card's progression through the workflow.\\\\r\\\\n     */\\\\r\\\\n    interface workflows {\\\\r\\\\n        /**\\\\r\\\\n         * Archives a workflow card.\\\\r\\\\n         */\\\\r\\\\n        archiveCard(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new workflow card.\\\\r\\\\n         */\\\\r\\\\n        createCard(workflowId: string, phaseId: string, card: wix_crm_backend.workflows.Card, position?: number): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new workflow phase.\\\\r\\\\n         */\\\\r\\\\n        createPhase(workflowId: string, phase: wix_crm_backend.workflows.Phase, position?: number): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new workflow.\\\\r\\\\n         */\\\\r\\\\n        createWorkflow(workflowInfo: wix_crm_backend.workflows.WorkflowInfo): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes a workflow card by ID.\\\\r\\\\n         */\\\\r\\\\n        deleteCard(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes a workflow phase by ID.\\\\r\\\\n         */\\\\r\\\\n        deletePhase(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes a workflow by ID.\\\\r\\\\n         */\\\\r\\\\n        deleteWorkflow(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a workflow card by ID.\\\\r\\\\n         */\\\\r\\\\n        getCard(id: string): Promise<wix_crm_backend.workflows.Card>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a phase info by ID.\\\\r\\\\n         */\\\\r\\\\n        getPhaseInfo(id: string): Promise<wix_crm_backend.workflows.Phase>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a workflow info by ID.\\\\r\\\\n         */\\\\r\\\\n        getWorkflowInfo(id: string): Promise<wix_crm_backend.workflows.WorkflowInfo>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of a workflow's cards.\\\\r\\\\n         */\\\\r\\\\n        listCards(workflowId: string, options: wix_crm_backend.workflows.ListCardOptions): Promise<wix_crm_backend.workflows.CardList>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of a workflow's phases.\\\\r\\\\n         */\\\\r\\\\n        listPhasesInfo(workflowId: string, options: wix_crm_backend.workflows.ListOptions): Promise<wix_crm_backend.workflows.PhaseList>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of the site's workflows info.\\\\r\\\\n         */\\\\r\\\\n        listWorkflowsInfo(options: wix_crm_backend.workflows.ListOptions): Promise<wix_crm_backend.workflows.WorkflowList>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves a card to a new position within a workflow.\\\\r\\\\n         */\\\\r\\\\n        moveCard(cardId: string, options: wix_crm_backend.workflows.MoveCardOptions): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves a phase to a new position with a workflow.\\\\r\\\\n         */\\\\r\\\\n        movePhase(id: string, options: wix_crm_backend.workflows.MovePhaseOptions): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Restores an archived workflow card.\\\\r\\\\n         */\\\\r\\\\n        restoreCard(id: string, options: wix_crm_backend.workflows.MoveCardOptions): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates an existing workflow card.\\\\r\\\\n         */\\\\r\\\\n        updateCardFields(id: string, card: wix_crm_backend.workflows.Card): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates an existing workflow phase.\\\\r\\\\n         */\\\\r\\\\n        updatePhaseFields(id: string, phase: wix_crm_backend.workflows.Phase): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates an existing workflow.\\\\r\\\\n         */\\\\r\\\\n        updateWorkflowFields(id: string, workflowInfo: wix_crm_backend.workflows.WorkflowInfo): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace workflows {\\\\r\\\\n        /**\\\\r\\\\n         * An object containing card information.\\\\r\\\\n         */\\\\r\\\\n        type Card = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Unique card identifier.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the contact associated with the card.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the card was created.\\\\r\\\\n             */\\\\r\\\\n            createdDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Date the card was last updated.\\\\r\\\\n             */\\\\r\\\\n            updatedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Source that created the card.\\\\r\\\\n             * \\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Contacts\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Inbox\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Invoices\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Price Quotes\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Wix Forms\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            source: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the phase which contains the card.\\\\r\\\\n             */\\\\r\\\\n            phaseId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing a list of cards and pagination info.\\\\r\\\\n         */\\\\r\\\\n        type CardList = {\\\\r\\\\n            /**\\\\r\\\\n             * List of cards matching the list options.\\\\r\\\\n             */\\\\r\\\\n            items: wix_crm_backend.workflows.Card[];\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in the current results page.\\\\r\\\\n             */\\\\r\\\\n            length: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of cards in the specified workflow and phase.\\\\r\\\\n             */\\\\r\\\\n            totalCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items returned per page with the current list options.\\\\r\\\\n             */\\\\r\\\\n            pageSize: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of results pages.\\\\r\\\\n             */\\\\r\\\\n            totalPages: number;\\\\r\\\\n            /**\\\\r\\\\n             * Index of the current page. Indices are zero-based.\\\\r\\\\n             */\\\\r\\\\n            currentPage: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object contains ListCards request data.\\\\r\\\\n         */\\\\r\\\\n        type ListCardOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Maximum number of cards to retrieve. Defaults to `50`.\\\\r\\\\n             */\\\\r\\\\n            limit?: number;\\\\r\\\\n            /**\\\\r\\\\n             * ID of phase to retrieve cards from. If omitted, will retrieve cards from all phases. Not to be used with `fetchOnlyArchived`.\\\\r\\\\n             */\\\\r\\\\n            phaseId?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether to retrieve only archived cards. Not to be used with `phaseId`.\\\\r\\\\n             */\\\\r\\\\n            fetchOnlyArchived?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Ordering options.\\\\r\\\\n             */\\\\r\\\\n            order?: wix_crm_backend.workflows.OrderOptions;\\\\r\\\\n            /**\\\\r\\\\n             * Number of cards to skip before the retrieved items. Defaults to `0`.\\\\r\\\\n             */\\\\r\\\\n            skip?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing options used when requesting a list of workflows or phases.\\\\r\\\\n         */\\\\r\\\\n        type ListOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Maximum number of items to retrieve. Defaults to `50` for phases and `100` for workflows.\\\\r\\\\n             */\\\\r\\\\n            limit?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Ordering options.\\\\r\\\\n             */\\\\r\\\\n            order?: wix_crm_backend.workflows.OrderOptions;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items to skip before the retrieved items. Defaults to `0`.\\\\r\\\\n             */\\\\r\\\\n            skip?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information used when moving a card.\\\\r\\\\n         */\\\\r\\\\n        type MoveCardOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the phase to move the card to. If omitted, the card remains in the same phase.\\\\r\\\\n             */\\\\r\\\\n            newPhaseId?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Position within the phase to move the card to. If omitted, the card is moved to the top of the phase.\\\\r\\\\n             */\\\\r\\\\n            newPosition?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information used when moving a phase.\\\\r\\\\n         */\\\\r\\\\n        type MovePhaseOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the workflow to move the phase to.\\\\r\\\\n             */\\\\r\\\\n            workflowId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Position within the workflow to move the phase to.\\\\r\\\\n             */\\\\r\\\\n            newPosition: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing sort order options.\\\\r\\\\n         */\\\\r\\\\n        type OrderOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Order of sort. Either `\\\\\\\"asc\\\\\\\"` or `\\\\\\\"desc\\\\\\\"` (defaults to `\\\\\\\"asc\\\\\\\"`).\\\\r\\\\n             */\\\\r\\\\n            sort: string;\\\\r\\\\n            /**\\\\r\\\\n             * Field to sort on.\\\\r\\\\n             */\\\\r\\\\n            field: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing phase information.\\\\r\\\\n         */\\\\r\\\\n        type Phase = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the phase.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Unique phase identifier.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing a list of phases and pagination info.\\\\r\\\\n         */\\\\r\\\\n        type PhaseList = {\\\\r\\\\n            /**\\\\r\\\\n             * List of phases matching the list options.\\\\r\\\\n             */\\\\r\\\\n            items: wix_crm_backend.workflows.Phase[];\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in the current results page.\\\\r\\\\n             */\\\\r\\\\n            length: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of phases in the specified workflow.\\\\r\\\\n             */\\\\r\\\\n            totalCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items returned per page with the current list options.\\\\r\\\\n             */\\\\r\\\\n            pageSize: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of results pages.\\\\r\\\\n             */\\\\r\\\\n            totalPages: number;\\\\r\\\\n            /**\\\\r\\\\n             * Index of the current page. Indices are zero-based.\\\\r\\\\n             */\\\\r\\\\n            currentPage: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object contains workflow.\\\\r\\\\n         */\\\\r\\\\n        type Workflow = {\\\\r\\\\n            /**\\\\r\\\\n             * Workflow information.\\\\r\\\\n             */\\\\r\\\\n            workflowInfo: wix_crm_backend.workflows.WorkflowInfo;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the win phase.\\\\r\\\\n             */\\\\r\\\\n            winPhaseId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about a workflow.\\\\r\\\\n         */\\\\r\\\\n        type WorkflowInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique workflow identifier.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the workflow.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Workflow description.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the workflow was created.\\\\r\\\\n             */\\\\r\\\\n            createdDate?: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing a list of workflows and pagination info.\\\\r\\\\n         */\\\\r\\\\n        type WorkflowList = {\\\\r\\\\n            /**\\\\r\\\\n             * List of workflows matching the list options.\\\\r\\\\n             */\\\\r\\\\n            items: wix_crm_backend.workflows.WorkflowInfo[];\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in the current results page.\\\\r\\\\n             */\\\\r\\\\n            length: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of workflows in the site.\\\\r\\\\n             */\\\\r\\\\n            totalCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items returned per page with the current list options.\\\\r\\\\n             */\\\\r\\\\n            pageSize: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of results pages.\\\\r\\\\n             */\\\\r\\\\n            totalPages: number;\\\\r\\\\n            /**\\\\r\\\\n             * Index of the current page. Indices are zero-based.\\\\r\\\\n             */\\\\r\\\\n            currentPage: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site contact.\\\\r\\\\n     */\\\\r\\\\n    type ContactInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Contact's first name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Contact's last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Contact's image source.\\\\r\\\\n         */\\\\r\\\\n        picture: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's email addresses.\\\\r\\\\n         */\\\\r\\\\n        emails: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Email address the contact who is also\\\\r\\\\n         *  a member uses to log into the system.\\\\r\\\\n         */\\\\r\\\\n        loginEmail: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's phone numbers.\\\\r\\\\n         */\\\\r\\\\n        phones: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)\\\\r\\\\n         *  are used to organize contacts. When setting the `labels` property, you can\\\\r\\\\n         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         */\\\\r\\\\n        labels: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Contact's language.\\\\r\\\\n         */\\\\r\\\\n        language: string;\\\\r\\\\n        /**\\\\r\\\\n         * Any\\\\r\\\\n         *  number of custom fields. [Customs fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\\\\r\\\\n         *  are used to store additional information about your site's contacts. When\\\\r\\\\n         *  setting a custom field, use key:value pairs where the key matches the names\\\\r\\\\n         *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         *  You can only set values for custom fields that already exist in the Contacts\\\\r\\\\n         *  application.\\\\r\\\\n         */\\\\r\\\\n        customFields: string | number | Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains contact deletion options.\\\\r\\\\n     */\\\\r\\\\n    type DeleteOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Whether to perform the deletion when the contact is also a member. Defaults to `false`.\\\\r\\\\n         */\\\\r\\\\n        deleteMembers: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_data {\\\\r\\\\n    /**\\\\r\\\\n     * Hooks that can be added to wix-data operations.\\\\r\\\\n     */\\\\r\\\\n    interface Hooks {\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after a `count()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterCount(count: number, context: wix_data.Hooks.HookContext): Promise<number> & number;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after a `get()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterGet(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after an `insert()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterInsert(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after a `find` operation, for each of the items in the query results.\\\\r\\\\n         */\\\\r\\\\n        afterQuery(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after a `remove()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterRemove(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after an `update()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterUpdate(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before a `count()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeCount(query: wix_data.WixDataQuery, context: wix_data.Hooks.HookContext): Promise<wix_data.WixDataQuery> & wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before a `get()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeGet(itemId: string, context: wix_data.Hooks.HookContext): Promise<string> & string;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before an `insert()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeInsert(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before a `find()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeQuery(query: wix_data.WixDataQuery, context: wix_data.Hooks.HookContext): Promise<wix_data.WixDataQuery> & wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is called before a `remove()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeRemove(itemId: string, context: wix_data.Hooks.HookContext): Promise<string> & string;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before an `update()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeUpdate(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered on any error or rejected Promise from any of the wix-data operations.\\\\r\\\\n         */\\\\r\\\\n        onFailure(error: Error, context: wix_data.Hooks.HookContext): Promise<any>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Hooks {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains contextual information about the hook being called.\\\\r\\\\n         */\\\\r\\\\n        type HookContext = {\\\\r\\\\n            /**\\\\r\\\\n             * The name of the collection the hook affects.\\\\r\\\\n             */\\\\r\\\\n            collectionName: string;\\\\r\\\\n            /**\\\\r\\\\n             * The current site user id. If no user is logged in to the site it may be null.\\\\r\\\\n             */\\\\r\\\\n            userId: string;\\\\r\\\\n            /**\\\\r\\\\n             * The permissions role of the current user. Possibilities are: `anonymous`, `siteMember`,  `siteOwner` and `dataOwner`.\\\\r\\\\n             */\\\\r\\\\n            userRole: string;\\\\r\\\\n            /**\\\\r\\\\n             * The item stored in the database before an `update` or `delete` operation.\\\\r\\\\n             * Will be `undefined` for all other operations.\\\\r\\\\n             */\\\\r\\\\n            currentItem: any;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for performing aggregations on collection data.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataAggregate {\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to an aggregation, sorting by the items or groups by the specified properties in ascending order.\\\\r\\\\n         */\\\\r\\\\n        ascending(propertyName: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to only contain the average value from each aggregation group.\\\\r\\\\n         */\\\\r\\\\n        avg(propertyName: string, projectedName?: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to contain the item count of each group in the aggregation.\\\\r\\\\n         */\\\\r\\\\n        count(): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to an aggregation, sorting by the items or groups by the specified properties in descending order.\\\\r\\\\n         */\\\\r\\\\n        descending(propertyName: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Filters out items from being used in an aggregation.\\\\r\\\\n         */\\\\r\\\\n        filter(filter: wix_data.WixDataFilter): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Groups items together in an aggregation.\\\\r\\\\n         */\\\\r\\\\n        group(propertyName: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Filters out groups from being returned from an aggregation.\\\\r\\\\n         */\\\\r\\\\n        having(filter: wix_data.WixDataFilter): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Limits the number of items or groups the aggregation returns.\\\\r\\\\n         */\\\\r\\\\n        limit(limit: number): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to only contain the maximum value from each aggregation group.\\\\r\\\\n         */\\\\r\\\\n        max(propertyName: string, projectedName?: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to only contain the minimum value from each aggregation group.\\\\r\\\\n         */\\\\r\\\\n        min(propertyName: string, projectedName?: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Runs the aggregation and returns the results.\\\\r\\\\n         */\\\\r\\\\n        run(): Promise<wix_data.WixDataAggregateResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the number of items or groups to skip before returning aggregation results.\\\\r\\\\n         */\\\\r\\\\n        skip(skip: number): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to contain the sum from each aggregation group.\\\\r\\\\n         */\\\\r\\\\n        sum(propertyName: string, projectedName?: string): wix_data.WixDataAggregate;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The results of an aggregation, containing the aggregated values.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataAggregateResult {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the aggregated values.\\\\r\\\\n         */\\\\r\\\\n        readonly items: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of values in the aggregate results.\\\\r\\\\n         */\\\\r\\\\n        readonly length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the aggregation has more results.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the next page of aggregate results.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<wix_data.WixDataAggregateResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface WixDataFilter {\\\\r\\\\n        /**\\\\r\\\\n         * Adds an `and` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        and(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is within a specified range.\\\\r\\\\n         */\\\\r\\\\n        between(propertyName: string, rangeStart: string | number | Date, rangeEnd: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value contains a specified string.\\\\r\\\\n         */\\\\r\\\\n        contains(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value ends with a specified string.\\\\r\\\\n         */\\\\r\\\\n        endsWith(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value equals the specified value.\\\\r\\\\n         */\\\\r\\\\n        eq(propertyName: string, value: any): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is greater than or equal to the specified value.\\\\r\\\\n         */\\\\r\\\\n        ge(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is greater than the specified value.\\\\r\\\\n         */\\\\r\\\\n        gt(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property values equals all of the specified `value` parameters.\\\\r\\\\n         */\\\\r\\\\n        hasAll(propertyName: string, value: string | number | Date | any[]): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value equals any of the specified `value` parameters.\\\\r\\\\n         */\\\\r\\\\n        hasSome(propertyName: string, value: string | number | Date | any[]): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property does not exist or does not have any value.\\\\r\\\\n         */\\\\r\\\\n        isEmpty(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property has any value.\\\\r\\\\n         */\\\\r\\\\n        isNotEmpty(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is less than or equal to the specified value.\\\\r\\\\n         */\\\\r\\\\n        le(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is less than the specified value.\\\\r\\\\n         */\\\\r\\\\n        lt(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value does not equal the specified value.\\\\r\\\\n         */\\\\r\\\\n        ne(propertyName: string, value: any): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a `not` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        not(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an `or` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        or(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value starts with a specified string.\\\\r\\\\n         */\\\\r\\\\n        startsWith(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Contains functionality for refining a data query.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataQuery {\\\\r\\\\n        /**\\\\r\\\\n         * Adds an `and` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        and(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to a query or sort, sorting by the specified properties in ascending order.\\\\r\\\\n         */\\\\r\\\\n        ascending(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is within a specified range.\\\\r\\\\n         */\\\\r\\\\n        between(propertyName: string, rangeStart: string | number | Date, rangeEnd: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value contains a specified string.\\\\r\\\\n         */\\\\r\\\\n        contains(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of items that match the query.\\\\r\\\\n         */\\\\r\\\\n        count(options?: wix_data.WixDataOptions): Promise<number>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to a query or sort, sorting by the specified properties in descending order.\\\\r\\\\n         */\\\\r\\\\n        descending(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the distinct values that match the query, without duplicates.\\\\r\\\\n         */\\\\r\\\\n        distinct(propertyName: string, options?: wix_data.WixDataOptions): Promise<wix_data.WixDataQueryResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value ends with a specified string.\\\\r\\\\n         */\\\\r\\\\n        endsWith(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value equals the specified value.\\\\r\\\\n         */\\\\r\\\\n        eq(propertyName: string, value: any): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the items that match the query.\\\\r\\\\n         */\\\\r\\\\n        find(options?: wix_data.WixDataOptions): Promise<wix_data.WixDataQueryResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is greater than or equal to the specified value.\\\\r\\\\n         */\\\\r\\\\n        ge(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is greater than the specified value.\\\\r\\\\n         */\\\\r\\\\n        gt(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property values equals all of the specified `value` parameters.\\\\r\\\\n         */\\\\r\\\\n        hasAll(propertyName: string, value: string | number | Date | any[]): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value equals any of the specified `value` parameters.\\\\r\\\\n         */\\\\r\\\\n        hasSome(propertyName: string, value: string | number | Date | any[]): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Includes referenced items for the specified properties in a query's results.\\\\r\\\\n         */\\\\r\\\\n        include(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property does not exist or does not have any value.\\\\r\\\\n         */\\\\r\\\\n        isEmpty(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property has any value.\\\\r\\\\n         */\\\\r\\\\n        isNotEmpty(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is less than or equal to the specified value.\\\\r\\\\n         */\\\\r\\\\n        le(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Limits the number of items the query returns.\\\\r\\\\n         */\\\\r\\\\n        limit(limit: number): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is less than the specified value.\\\\r\\\\n         */\\\\r\\\\n        lt(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value does not equal the specified value.\\\\r\\\\n         */\\\\r\\\\n        ne(propertyName: string, value: any): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a `not` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        not(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an `or` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        or(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the number of items to skip before returning query results.\\\\r\\\\n         */\\\\r\\\\n        skip(skip: number): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value starts with a specified string.\\\\r\\\\n         */\\\\r\\\\n        startsWith(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The results of a data reference query, containing the retrieved items.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataQueryReferencedResult {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the items that match the reference query.\\\\r\\\\n         */\\\\r\\\\n        readonly items: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of items that match the reference query.\\\\r\\\\n         */\\\\r\\\\n        readonly totalCount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the reference query has more results.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the reference query has previous results.\\\\r\\\\n         */\\\\r\\\\n        hasPrev(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the next page of reference query results.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<wix_data.WixDataQueryReferencedResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the previous page of reference query results.\\\\r\\\\n         */\\\\r\\\\n        prev(): Promise<wix_data.WixDataQueryReferencedResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The results of a data query, containing the retrieved items.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataQueryResult {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the index of the current results page number.\\\\r\\\\n         */\\\\r\\\\n        readonly currentPage: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the items that match the query.\\\\r\\\\n         */\\\\r\\\\n        readonly items: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of items in the current results page.\\\\r\\\\n         */\\\\r\\\\n        readonly length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the query page size.\\\\r\\\\n         */\\\\r\\\\n        readonly pageSize: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if referenced items have been trimmed from the results.\\\\r\\\\n         */\\\\r\\\\n        readonly partialIncludes: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the query used to get the current results.\\\\r\\\\n         */\\\\r\\\\n        readonly query: wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of items that match the query.\\\\r\\\\n         */\\\\r\\\\n        readonly totalCount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of pages the query produced.\\\\r\\\\n         */\\\\r\\\\n        readonly totalPages: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the query has more results.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates the query has previous results.\\\\r\\\\n         */\\\\r\\\\n        hasPrev(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the next page of query results.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<wix_data.WixDataQueryResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the previous page of query results.\\\\r\\\\n         */\\\\r\\\\n        prev(): Promise<wix_data.WixDataQueryResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface WixDataSort {\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to a query or sort, sorting by the specified properties in ascending order.\\\\r\\\\n         */\\\\r\\\\n        ascending(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to a query or sort, sorting by the specified properties in descending order.\\\\r\\\\n         */\\\\r\\\\n        descending(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by Wix Data bulk operations.\\\\r\\\\n     */\\\\r\\\\n    type WixDataBulkResult = {\\\\r\\\\n        /**\\\\r\\\\n         * The number of inserted items.\\\\r\\\\n         */\\\\r\\\\n        inserted: number;\\\\r\\\\n        /**\\\\r\\\\n         * The number of updated items.\\\\r\\\\n         */\\\\r\\\\n        updated: number;\\\\r\\\\n        /**\\\\r\\\\n         * The number of skipped items.\\\\r\\\\n         */\\\\r\\\\n        skipped: number;\\\\r\\\\n        /**\\\\r\\\\n         * List of IDs of inserted items.\\\\r\\\\n         */\\\\r\\\\n        insertedItemIds: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of errors.\\\\r\\\\n         */\\\\r\\\\n        errors: Error[];\\\\r\\\\n        /**\\\\r\\\\n         * The number of removed items.\\\\r\\\\n         */\\\\r\\\\n        removed: number;\\\\r\\\\n        /**\\\\r\\\\n         * List of IDs of removed items.\\\\r\\\\n         */\\\\r\\\\n        removedItemIds: string[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that you pass as the `options` parameter that modifies how an operation is performed.\\\\r\\\\n     */\\\\r\\\\n    type WixDataOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Prevents permission checks from running for the operation.\\\\r\\\\n         */\\\\r\\\\n        suppressAuth?: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Prevents hooks from running for the operation.\\\\r\\\\n         */\\\\r\\\\n        suppressHooks?: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object for controlling the order of returned referenced items.\\\\r\\\\n     */\\\\r\\\\n    type WixDataQueryReferencedOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * The order of the returned referenced items. Either \\\\\\\"asc\\\\\\\" or \\\\\\\"desc\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        order: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_fetch {\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by the `fetch()` function representing\\\\r\\\\n     *  an HTTP response to a fetch.\\\\r\\\\n     */\\\\r\\\\n    interface WixFetchResponse {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the body of the response has been used yet.\\\\r\\\\n         */\\\\r\\\\n        readonly bodyUsed: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * The response headers.\\\\r\\\\n         */\\\\r\\\\n        readonly headers: any;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the request was successful, meaning its `status` is in the range 2xx.\\\\r\\\\n         */\\\\r\\\\n        readonly ok: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * The response [status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).\\\\r\\\\n         */\\\\r\\\\n        readonly status: number;\\\\r\\\\n        /**\\\\r\\\\n         * The response [status message](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).\\\\r\\\\n         */\\\\r\\\\n        readonly statusText: string;\\\\r\\\\n        /**\\\\r\\\\n         * The response URL.\\\\r\\\\n         */\\\\r\\\\n        readonly url: string;\\\\r\\\\n        /**\\\\r\\\\n         * Reads the response body as JSON.\\\\r\\\\n         */\\\\r\\\\n        json(): Promise<any>;\\\\r\\\\n        /**\\\\r\\\\n         * Reads the response body as a string.\\\\r\\\\n         */\\\\r\\\\n        text(): Promise<string>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used by the `fetch()` function representing an HTTPS request.\\\\r\\\\n     */\\\\r\\\\n    type WixFetchRequest = {\\\\r\\\\n        /**\\\\r\\\\n         * The [HTTP method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods) to use (if omitted, defaults to `\\\\\\\"GET\\\\\\\"`).\\\\r\\\\n         */\\\\r\\\\n        method: string;\\\\r\\\\n        /**\\\\r\\\\n         * The request headers.\\\\r\\\\n         */\\\\r\\\\n        headers: any;\\\\r\\\\n        /**\\\\r\\\\n         * The request body.\\\\r\\\\n         */\\\\r\\\\n        body: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_marketing_backend {\\\\r\\\\n    /**\\\\r\\\\n     * The Coupons API is used to manage your site's coupons.\\\\r\\\\n     */\\\\r\\\\n    interface coupons {\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new coupon.\\\\r\\\\n         */\\\\r\\\\n        createCoupon(couponInfo: wix_marketing_backend.coupons.CouponInfo): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes an existing coupon.\\\\r\\\\n         */\\\\r\\\\n        deleteCoupon(couponId: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the specified fields of an existing coupon.\\\\r\\\\n         */\\\\r\\\\n        updateCouponFields(couponId: string, couponInfo: wix_marketing_backend.coupons.CouponInfo): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace coupons {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information for creating or updating a coupon.\\\\r\\\\n         */\\\\r\\\\n        type CouponInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of coupon.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon code. Must be unique for all coupons in your site. Maximum 20 characters.\\\\r\\\\n             */\\\\r\\\\n            code: string;\\\\r\\\\n            /**\\\\r\\\\n             * Start date and time of coupon.\\\\r\\\\n             */\\\\r\\\\n            startTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * End date and time of coupon.\\\\r\\\\n             */\\\\r\\\\n            expirationTime?: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The maximum number of times a coupon can be used. Note that multiple purchases by the same customer or purchases by different customers are both counted toward usage limit.\\\\r\\\\n             */\\\\r\\\\n            usageLimit?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the coupon is limited to 1 discount per order. If true and a customer pays for multiple items the coupon applies to, only the lowest priced item is discounted. Coupons with a `bookings` [`namespace`](#CouponScope) are always limited to one item.\\\\r\\\\n             */\\\\r\\\\n            limitedToOneItem?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the coupon is currently active.\\\\r\\\\n             */\\\\r\\\\n            active?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * The coupon is only applicable when the order subtotal is over this amount.\\\\r\\\\n             */\\\\r\\\\n            minimumSubtotal?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Scope of the coupon. When no scope is defined, the coupon applies to all items in all [`namespaces`](#CouponScope) in the site.\\\\r\\\\n             */\\\\r\\\\n            scope?: wix_marketing_backend.coupons.CouponScope;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Free products when making a purchase. Currently only supported for coupons with a `stores` [`namespace`](#CouponScope).\\\\r\\\\n             */\\\\r\\\\n            buyXGetY?: wix_marketing_backend.coupons.CouponTypeBuyXGetY;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Free shipping. If true, the coupon applies to all items in all [`namespaces`](#CouponScope) in the site.\\\\r\\\\n             */\\\\r\\\\n            freeShipping?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Fixed price discount.\\\\r\\\\n             */\\\\r\\\\n            moneyOffAmount?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Discount as a percentage.\\\\r\\\\n             */\\\\r\\\\n            percentOffRate?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Specific sale price. Currently only supported for coupons with a `stores` [`namespace`](#CouponScope).\\\\r\\\\n             */\\\\r\\\\n            fixedPriceAmount?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing the scope of a coupon.\\\\r\\\\n         */\\\\r\\\\n        type CouponScope = {\\\\r\\\\n            /**\\\\r\\\\n             * Wix application for which the coupon is applicable.\\\\r\\\\n             * One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"stores\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"bookings\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"events\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            namespace: string;\\\\r\\\\n            /**\\\\r\\\\n             * Group within a `namespace` for which the coupon is applicable. If no group is specified, the coupon applies to all items in the namespace. `group` is required in some cases.\\\\r\\\\n             */\\\\r\\\\n            group?: wix_marketing_backend.coupons.ScopeGroup;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object defining the number of purchases required and the number of free items received for a \\\\\\\"Buy X Get Y\\\\\\\" coupon type.\\\\r\\\\n         */\\\\r\\\\n        type CouponTypeBuyXGetY = {\\\\r\\\\n            /**\\\\r\\\\n             * Number of purchased items required to receive free items.\\\\r\\\\n             */\\\\r\\\\n            x: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items received for free if required number of items were purchased.\\\\r\\\\n             */\\\\r\\\\n            y: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object specifying the group within a [`CouponScope`](#CouponScope)\\\\r\\\\n         * `namespace` for which the coupon is applicable.\\\\r\\\\n         */\\\\r\\\\n        type ScopeGroup = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the group.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the specific item in the group for which the coupon is applicable. If no `entityId` is specified, the coupon applies to all items in the group. In some cases when a group is specified, an `entityId` is required.\\\\r\\\\n             */\\\\r\\\\n            entityId?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_media_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events fired by the Wix Media API.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a file has completed uploading.\\\\r\\\\n         */\\\\r\\\\n        onFileUploaded(event: wix_media_backend.Events.FileEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a video file has completed transcoding.\\\\r\\\\n         */\\\\r\\\\n        onVideoTranscoded(event: wix_media_backend.Events.FileEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an uploaded file and upload context.\\\\r\\\\n         */\\\\r\\\\n        type FileEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Information about the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            fileInfo: wix_media_backend.mediaManager.FileInfo;\\\\r\\\\n            /**\\\\r\\\\n             * An object of key:value string pairs that was sent\\\\r\\\\n             *  when the file was uploaded.\\\\r\\\\n             */\\\\r\\\\n            context: any;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The `mediaManager` module contains functionality for working with\\\\r\\\\n     *  the media that is stored in your site's Media Manager.\\\\r\\\\n     */\\\\r\\\\n    interface mediaManager {\\\\r\\\\n        /**\\\\r\\\\n         * Gets a file's information from the Media Manager by name or URL.\\\\r\\\\n         */\\\\r\\\\n        getFileInfo(fileName: string): Promise<wix_media_backend.mediaManager.FileInfo>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a file's URL from the Media Manager.\\\\r\\\\n         */\\\\r\\\\n        getFileUrl(fileName: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an upload URL and a corresponding upload token.\\\\r\\\\n         */\\\\r\\\\n        getUploadUrl(path: string, options: wix_media_backend.mediaManager.UploadOptions): Promise<wix_media_backend.mediaManager.UploadUrl>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a video file's playback URL from the Media Manager.\\\\r\\\\n         */\\\\r\\\\n        getVideoPlaybackUrl(fileName: string, format: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Imports a file to the Media Manager from a URL.\\\\r\\\\n         */\\\\r\\\\n        importFile(path: string, url: string, options: wix_media_backend.mediaManager.UploadOptions): Promise<wix_media_backend.mediaManager.FileInfo>;\\\\r\\\\n        /**\\\\r\\\\n         * Uploads a file to the Media Manager.\\\\r\\\\n         */\\\\r\\\\n        upload(path: string, fileContent: Buffer, fileName: string, options: wix_media_backend.mediaManager.UploadOptions): Promise<wix_media_backend.mediaManager.FileInfo>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace mediaManager {\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about the file that was uploaded.\\\\r\\\\n         */\\\\r\\\\n        type FileInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * File name of the file that was uploaded. This name\\\\r\\\\n             *  is used when calling the [`getFileInfo()`](#getFileInfo), [`getFileUrl()`](#getFileUrl),\\\\r\\\\n             *  and [`getVideoPlaybackUrl()`](#getVideoPlaybackUrl) functions.\\\\r\\\\n             */\\\\r\\\\n            fileName: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the file.\\\\r\\\\n             */\\\\r\\\\n            fileUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * File hash.\\\\r\\\\n             */\\\\r\\\\n            hash: string;\\\\r\\\\n            /**\\\\r\\\\n             * Size of the uploaded file in bytes.\\\\r\\\\n             */\\\\r\\\\n            sizeInBytes: number;\\\\r\\\\n            /**\\\\r\\\\n             * Mime type of\\\\r\\\\n             *  the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            mimeType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of the file that was uploaded.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"audio\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"document\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"image\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"shape\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"video\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            mediaType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the link to the uploaded file is\\\\r\\\\n             *  public or private. Private links require a token to be used.\\\\r\\\\n             */\\\\r\\\\n            isPrivate: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the uploaded files parent folder.\\\\r\\\\n             */\\\\r\\\\n            parentFolderId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the uploaded file. This is the name\\\\r\\\\n             *  that appears in the Media Manager.\\\\r\\\\n             */\\\\r\\\\n            originalFileName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the file that was uploaded.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"IN-DOWNLOAD-QUEUE\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"IN-QUEUE\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"READY\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            opStatus: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL where the file was uploaded from.\\\\r\\\\n             */\\\\r\\\\n            sourceURL: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the file's icon.\\\\r\\\\n             */\\\\r\\\\n            iconUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of labels assigned to the file by the Media Manager.\\\\r\\\\n             */\\\\r\\\\n            labels: string[];\\\\r\\\\n            /**\\\\r\\\\n             * File height.\\\\r\\\\n             */\\\\r\\\\n            height: string;\\\\r\\\\n            /**\\\\r\\\\n             * File width.\\\\r\\\\n             */\\\\r\\\\n            width: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about the media options of a file to upload.\\\\r\\\\n         */\\\\r\\\\n        type MediaOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Type of the file to upload.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"audio\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"document\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"image\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"shape\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"video\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            mediaType?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Mime type of\\\\r\\\\n             *  the file to import. The specified value must match the actual mime type of\\\\r\\\\n             *  the file's content.\\\\r\\\\n             */\\\\r\\\\n            mimeType?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about the metadata options of a file to upload.\\\\r\\\\n         */\\\\r\\\\n        type MetadataOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Whether the link to the uploaded file will\\\\r\\\\n             *  be public or private. Private links require a token to be used. Defaults to\\\\r\\\\n             *  `false`.\\\\r\\\\n             */\\\\r\\\\n            isPrivate?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates if the file was uploaded by a\\\\r\\\\n             *  site visitor. Files uploaded by visitors are tagged in the Media Manager as\\\\r\\\\n             *  being added by a visitor. Defaults to `true`.\\\\r\\\\n             */\\\\r\\\\n            isVisitorUpload?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * An object of key:value string pairs that is sent\\\\r\\\\n             *  back in the [`onFileUploaded()`](wix-media-backend.Events.html#onFileUploaded)\\\\r\\\\n             *  event.\\\\r\\\\n             */\\\\r\\\\n            context?: any;\\\\r\\\\n            /**\\\\r\\\\n             * The name of the file as it will appear in the Media Manager\\\\r\\\\n             */\\\\r\\\\n            fileName?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about the options of a file to upload.\\\\r\\\\n         */\\\\r\\\\n        type UploadOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Media options of the file to upload.\\\\r\\\\n             */\\\\r\\\\n            mediaOptions?: wix_media_backend.mediaManager.MediaOptions;\\\\r\\\\n            /**\\\\r\\\\n             * Metadata options of the file to upload.\\\\r\\\\n             */\\\\r\\\\n            metadataOptions?: wix_media_backend.mediaManager.MetadataOptions;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about an upload URL.\\\\r\\\\n         */\\\\r\\\\n        type UploadUrl = {\\\\r\\\\n            /**\\\\r\\\\n             * The URL to POST a file to.\\\\r\\\\n             */\\\\r\\\\n            uploadUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * The token to use with the file POST.\\\\r\\\\n             */\\\\r\\\\n            uploadToken: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_pay_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events fired by payments created using the Pay API.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a payment's transaction status is changed.\\\\r\\\\n         */\\\\r\\\\n        onPaymentUpdate(event: wix_pay_backend.Events.PaymentUpdateEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a payment update.\\\\r\\\\n         */\\\\r\\\\n        type PaymentUpdateEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * The payment's information.\\\\r\\\\n             */\\\\r\\\\n            payment: wix_pay_backend.Payment;\\\\r\\\\n            /**\\\\r\\\\n             * Payment status.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Successful\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Pending\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Failed\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Chargeback\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Refunded\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Offline\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"PartiallyRefunded\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Cancelled\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Undefined\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the payment transaction.\\\\r\\\\n             */\\\\r\\\\n            transactionId: string;\\\\r\\\\n            /**\\\\r\\\\n             * User information.\\\\r\\\\n             */\\\\r\\\\n            userInfo: wix_pay_backend.PaymentUserInfo;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment.\\\\r\\\\n     */\\\\r\\\\n    type Payment = {\\\\r\\\\n        /**\\\\r\\\\n         * Payment transaction ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment total amount.\\\\r\\\\n         */\\\\r\\\\n        amount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment currency. A three-letter\\\\r\\\\n         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_pay_backend.PaymentItem[];\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information about the user.\\\\r\\\\n         */\\\\r\\\\n        userInfo: wix_pay_backend.PaymentUserInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing information for creating a payment.\\\\r\\\\n     */\\\\r\\\\n    type PaymentInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Total payment amount. Must equal\\\\r\\\\n         *  the sum of the `price` properties in the `items` list while taking the\\\\r\\\\n         *  `quantity` into account.\\\\r\\\\n         */\\\\r\\\\n        amount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment currency. A three-letter\\\\r\\\\n         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code. Defaults to\\\\r\\\\n         *  the currency defined by the site's [Regional Settings](https://support.wix.com/en/article/changing-your-sites-regional-settings).\\\\r\\\\n         */\\\\r\\\\n        currency?: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of payment items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_pay_backend.PaymentItem;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information about the user. It will be used to prefill\\\\r\\\\n         *  the user info form during the payment process.\\\\r\\\\n         */\\\\r\\\\n        userInfo?: wix_pay_backend.PaymentUserInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment item.\\\\r\\\\n     */\\\\r\\\\n    type PaymentItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Payment item name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment item price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment item quantity.\\\\r\\\\n         */\\\\r\\\\n        quantity: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing information about the user.\\\\r\\\\n     */\\\\r\\\\n    type PaymentUserInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * User's first name. Value is `null` if\\\\r\\\\n         *  there is no first name information.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's last name. Value is `null` if\\\\r\\\\n         *  there is no last name information.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's phone number. Value is `null` if\\\\r\\\\n         *  there is no phone number information.\\\\r\\\\n         */\\\\r\\\\n        phone: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's email address. Value is `null` if\\\\r\\\\n         *  there is no email address information.\\\\r\\\\n         */\\\\r\\\\n        email: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's country code. A three-letter\\\\r\\\\n         *  [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) country code. Value\\\\r\\\\n         *  is `null` if there is no country information.\\\\r\\\\n         */\\\\r\\\\n        countryCode: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_router {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an incoming page request received by a router.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterRequest {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the base URL of the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly baseUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the form factor of the device used to make the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly formFactor: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the remote IP address of the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly ip: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the names of the pages associated with this router.\\\\r\\\\n         */\\\\r\\\\n        readonly pages: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the path of the router request URL.\\\\r\\\\n         */\\\\r\\\\n        readonly path: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the router prefix of the router request URL.\\\\r\\\\n         */\\\\r\\\\n        readonly prefix: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the protocol of the router request URL.\\\\r\\\\n         */\\\\r\\\\n        readonly protocol: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the query fields and values of the request URL.\\\\r\\\\n         */\\\\r\\\\n        readonly query: any;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the `referrer` header from the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly referrer: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the full URL of the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly url: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the details of the current site user who is logged in.\\\\r\\\\n         */\\\\r\\\\n        readonly user: wix_router.WixRouterUser;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the `user-agent` header as sent from the device used to make the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly userAgent: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a response to a request received by a router.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterResponse {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the data to pass with the response.\\\\r\\\\n         */\\\\r\\\\n        data: any;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the members to be written to the HTML head of the page.\\\\r\\\\n         */\\\\r\\\\n        head: wix_router.WixRouterResponse.HeadOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the response message to be used when responding with status codes 4xx and 5xx.\\\\r\\\\n         */\\\\r\\\\n        message: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the page to route to.\\\\r\\\\n         */\\\\r\\\\n        page: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the url to redirect to when responding with status codes 301 and 302.\\\\r\\\\n         */\\\\r\\\\n        redirectUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the response's HTTP status code.\\\\r\\\\n         */\\\\r\\\\n        status: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace WixRouterResponse {\\\\r\\\\n        /**\\\\r\\\\n         * Members of the HTML head.\\\\r\\\\n         */\\\\r\\\\n        type HeadOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * The page title. Written to the `` tag.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * **Deprecated: Use the new `metaTags` format instead.** \\\\r\\\\n             * \\\\r\\\\n             * The page description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * **Deprecated: Use the new `metaTags` format instead.**\\\\r\\\\n             * \\\\r\\\\n             *  The page keywords.\\\\r\\\\n             */\\\\r\\\\n            keywords: string;\\\\r\\\\n            /**\\\\r\\\\n             * **Deprecated: Use the new `metaTags` format instead.**\\\\r\\\\n             * \\\\r\\\\n             *  Indicates whether to add a meta tag that prevents search engines from indexing the\\\\r\\\\n             *  page.\\\\r\\\\n             */\\\\r\\\\n            noIndex: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * The page's SEO-related meta tags.\\\\r\\\\n             * \\\\r\\\\n             *  When setting `og:image` meta tags, the `content` can be and external image URL\\\\r\\\\n             *  or a Media Manager image URL as described [here]($w.Image.html#src).\\\\r\\\\n             * \\\\r\\\\n             *  **Deprecated format:** An object with key:value pairs where the key is the meta tag name\\\\r\\\\n             *  and the value is the content.\\\\r\\\\n             */\\\\r\\\\n            metaTags: wix_router.WixRouterResponse.MetaTag[];\\\\r\\\\n            /**\\\\r\\\\n             * The page's SEO-related link tags\\\\r\\\\n             *  which provide additional SEO information about the page. For example, you can set a\\\\r\\\\n             *  link to a canonical or alternate version of the page.\\\\r\\\\n             */\\\\r\\\\n            links: wix_router.WixRouterResponse.Link[];\\\\r\\\\n            /**\\\\r\\\\n             * The page's structured data, which helps search engines \\\\r\\\\n             *  understand more about the page and your business so they can display a richer snippet of the\\\\r\\\\n             *  page in search results.\\\\r\\\\n             */\\\\r\\\\n            structuredData: any[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a link tag.\\\\r\\\\n         */\\\\r\\\\n        type Link = {\\\\r\\\\n            /**\\\\r\\\\n             * The relationship of the linked resource to the current page.\\\\r\\\\n             */\\\\r\\\\n            rel?: string;\\\\r\\\\n            /**\\\\r\\\\n             * The URL of the linked resource.\\\\r\\\\n             */\\\\r\\\\n            href?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a meta tag.\\\\r\\\\n         */\\\\r\\\\n        type MetaTag = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the meta tag. Either `name` or `property` are required.\\\\r\\\\n             */\\\\r\\\\n            name?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the meta tag property. Either `property` or `name` are required.\\\\r\\\\n             */\\\\r\\\\n            property?: string;\\\\r\\\\n            /**\\\\r\\\\n             * HTTP header that corresponds to the `content`.\\\\r\\\\n             */\\\\r\\\\n            \\\\\\\"http-equiv\\\\\\\"?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Meta tag value. For `og:image` meta tags, the `content` can\\\\r\\\\n             *  be an external image URL or a Media Manager image URL as described [here]($w.Image.html#src).\\\\r\\\\n             */\\\\r\\\\n            content: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a single entry in a sitemap.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterSitemapEntry {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets how frequently the page is likely to change.\\\\r\\\\n         */\\\\r\\\\n        changeFrequency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets when was the page data last modified.\\\\r\\\\n         */\\\\r\\\\n        lastModified: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the page name.\\\\r\\\\n         */\\\\r\\\\n        pageName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the priority of this URL relative to other URLs on your site.\\\\r\\\\n         */\\\\r\\\\n        priority: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the page title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the relative url of the page.\\\\r\\\\n         */\\\\r\\\\n        url: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a request for a sitemap.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterSitemapRequest {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the base URL of the request.\\\\r\\\\n         */\\\\r\\\\n        readonly baseUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the page name.\\\\r\\\\n         */\\\\r\\\\n        readonly pageName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the names of the pages associated with this router.\\\\r\\\\n         */\\\\r\\\\n        readonly pages: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the router prefix of the request.\\\\r\\\\n         */\\\\r\\\\n        readonly prefix: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the details of the current site user who is logged in.\\\\r\\\\n         */\\\\r\\\\n        readonly user: wix_router.WixRouterUser;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the current site visitor who is logged in.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterUser {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's role.\\\\r\\\\n         */\\\\r\\\\n        readonly role: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_site_backend {\\\\r\\\\n    /**\\\\r\\\\n     * The General Info API contains functionality for getting\\\\r\\\\n     *  the information about your business that\\\\r\\\\n     *  has been entered in the **General Info** section of your site's **Dashboard**.\\\\r\\\\n     */\\\\r\\\\n    interface generalInfo {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the physical address of the site's business.\\\\r\\\\n         */\\\\r\\\\n        getAddress(): Promise<wix_site_backend.generalInfo.GeneralInfoAddress>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site business name.\\\\r\\\\n         */\\\\r\\\\n        getBusinessName(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the business hours of the site's business.\\\\r\\\\n         */\\\\r\\\\n        getBusinessSchedule(): Promise<wix_site_backend.generalInfo.GeneralInfoSchedule>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site category information.\\\\r\\\\n         */\\\\r\\\\n        getCategories(): Promise<wix_site_backend.generalInfo.GeneralInfoCategories>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site description.\\\\r\\\\n         */\\\\r\\\\n        getDescription(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the email address used for notifications of activities on your site.\\\\r\\\\n         */\\\\r\\\\n        getEmail(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the fax number used for notifications of activities on your site.\\\\r\\\\n         */\\\\r\\\\n        getFax(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site language information.\\\\r\\\\n         */\\\\r\\\\n        getLanguage(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site locale information.\\\\r\\\\n         */\\\\r\\\\n        getLocale(): Promise<wix_site_backend.generalInfo.GeneralInfoLocale>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site logo file name.\\\\r\\\\n         */\\\\r\\\\n        getLogo(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site multilingual information.\\\\r\\\\n         */\\\\r\\\\n        getMultilingual(): Promise<wix_site_backend.generalInfo.GeneralInfoLanguages>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site payment currency information.\\\\r\\\\n         */\\\\r\\\\n        getPaymentCurrency(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the phone number used for notifications of activities on your site.\\\\r\\\\n         */\\\\r\\\\n        getPhone(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site display name.\\\\r\\\\n         */\\\\r\\\\n        getSiteDisplayName(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site time zone information.\\\\r\\\\n         */\\\\r\\\\n        getTimeZone(): Promise<string>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace generalInfo {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a site's corresponding physical address.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoAddress = {\\\\r\\\\n            /**\\\\r\\\\n             * Address street.\\\\r\\\\n             */\\\\r\\\\n            street: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address state.\\\\r\\\\n             */\\\\r\\\\n            state: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address zip code.\\\\r\\\\n             */\\\\r\\\\n            zip: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address description.\\\\r\\\\n             */\\\\r\\\\n            hint: wix_site_backend.generalInfo.GeneralInfoAddressHint;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the business has a physical address.\\\\r\\\\n             */\\\\r\\\\n            isPhysical: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Address as formatted by Google.\\\\r\\\\n             */\\\\r\\\\n            googleFormattedAddress: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address street number.\\\\r\\\\n             */\\\\r\\\\n            streetNumber: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address apartment number.\\\\r\\\\n             */\\\\r\\\\n            apartmentNumber: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address coordinates.\\\\r\\\\n             */\\\\r\\\\n            coordinates: wix_site_backend.generalInfo.GeneralInfoAddressCoordinates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the coordinates of the site address.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoAddressCoordinates = {\\\\r\\\\n            /**\\\\r\\\\n             * Address latitude.\\\\r\\\\n             */\\\\r\\\\n            latitude: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address longitude.\\\\r\\\\n             */\\\\r\\\\n            longitude: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a description of a site's address.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoAddressHint = {\\\\r\\\\n            /**\\\\r\\\\n             * Address description.\\\\r\\\\n             */\\\\r\\\\n            text: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether description is shown before, after, or instead of the actual address.\\\\r\\\\n             */\\\\r\\\\n            placement: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the categories that describe your site's business.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoCategories = {\\\\r\\\\n            /**\\\\r\\\\n             * Primary site category.\\\\r\\\\n             */\\\\r\\\\n            primary: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of secondary site categories.\\\\r\\\\n             */\\\\r\\\\n            secondary: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the site's languages.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoLanguages = {\\\\r\\\\n            /**\\\\r\\\\n             * List supported languages.\\\\r\\\\n             */\\\\r\\\\n            supportedLanguages: wix_site_backend.generalInfo.GeneralInfoLanguagesSupported[];\\\\r\\\\n            /**\\\\r\\\\n             * Whether to automatically redirect users based on their browser's settings.\\\\r\\\\n             */\\\\r\\\\n            autoRedirect: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the site's supported languages.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoLanguagesSupported = {\\\\r\\\\n            /**\\\\r\\\\n             * Language code.\\\\r\\\\n             */\\\\r\\\\n            languageCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Language locale.\\\\r\\\\n             */\\\\r\\\\n            locale: wix_site_backend.generalInfo.GeneralInfoLocale;\\\\r\\\\n            /**\\\\r\\\\n             * Country Code for the Language icon.\\\\r\\\\n             */\\\\r\\\\n            countryCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the language is the primary language.\\\\r\\\\n             */\\\\r\\\\n            isPrimary: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a site's locale.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoLocale = {\\\\r\\\\n            /**\\\\r\\\\n             * Site country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Site language code.\\\\r\\\\n             */\\\\r\\\\n            languageCode: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing business hours.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoSchedule = {\\\\r\\\\n            /**\\\\r\\\\n             * List of opening and closing days and times.\\\\r\\\\n             */\\\\r\\\\n            periods: wix_site_backend.generalInfo.GeneralInfoSchedulePeriods[];\\\\r\\\\n            /**\\\\r\\\\n             * Special hours.\\\\r\\\\n             */\\\\r\\\\n            specialHourPeriod: wix_site_backend.generalInfo.GeneralInfoScheduleSpecial[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing business opened and closed hours.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoSchedulePeriods = {\\\\r\\\\n            /**\\\\r\\\\n             * Business opening day.\\\\r\\\\n             */\\\\r\\\\n            openDay: string;\\\\r\\\\n            /**\\\\r\\\\n             * Business opening time.\\\\r\\\\n             */\\\\r\\\\n            openTime: string;\\\\r\\\\n            /**\\\\r\\\\n             * Business closing day.\\\\r\\\\n             */\\\\r\\\\n            closeDay: string;\\\\r\\\\n            /**\\\\r\\\\n             * Business closing time.\\\\r\\\\n             */\\\\r\\\\n            closeTime: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing special business hours.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoScheduleSpecial = {\\\\r\\\\n            /**\\\\r\\\\n             * Special hours start date.\\\\r\\\\n             */\\\\r\\\\n            startDate: string;\\\\r\\\\n            /**\\\\r\\\\n             * Special hours end date.\\\\r\\\\n             */\\\\r\\\\n            endDate: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the business is closed.\\\\r\\\\n             */\\\\r\\\\n            isClosed: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Special hours comment.\\\\r\\\\n             */\\\\r\\\\n            comment: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_stores_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired from a Wix Store.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a visitor abandons a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        onCartAbandoned(event: wix_stores_backend.Events.CartAbandonedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a visitor completes a purchase from a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        onCartCompleted(event: wix_stores_backend.Events.CartCompletedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a visitor adds a product to a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        onCartCreated(event: wix_stores_backend.Events.CartCreatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a visitor completes a purchase from an abandoned shopping cart.\\\\r\\\\n         */\\\\r\\\\n        onCartRecovered(event: wix_stores_backend.Events.CartRecoveredEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product collection is created.\\\\r\\\\n         */\\\\r\\\\n        onCollectionCreated(event: wix_stores_backend.Events.CollectionCreatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product collection is deleted.\\\\r\\\\n         */\\\\r\\\\n        onCollectionDeleted(event: wix_stores_backend.Events.CollectionDeletedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product collection is updated.\\\\r\\\\n         */\\\\r\\\\n        onCollectionUpdated(event: wix_stores_backend.Events.CollectionUpdatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an inventory item's information is updated.\\\\r\\\\n         */\\\\r\\\\n        onInventoryItemUpdated(event: wix_stores_backend.Events.InventoryItemUpdatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when the inventory information of a product variant is updated.\\\\r\\\\n         */\\\\r\\\\n        onInventoryVariantUpdated(event: wix_stores_backend.Events.InventoryVariantUpdatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a new order is placed.\\\\r\\\\n         */\\\\r\\\\n        onNewOrder(event: wix_stores_backend.Events.NewOrderEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product is created.\\\\r\\\\n         */\\\\r\\\\n        onProductCreated(event: wix_stores_backend.Events.ProductCreatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product is deleted.\\\\r\\\\n         */\\\\r\\\\n        onProductDeleted(event: wix_stores_backend.Events.ProductDeletedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product is updated.\\\\r\\\\n         */\\\\r\\\\n        onProductUpdated(event: wix_stores_backend.Events.ProductUpdatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when variant information for a product is updated.\\\\r\\\\n         */\\\\r\\\\n        onVariantsUpdated(event: wix_stores_backend.Events.VariantsUpdatedEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a shopping cart that was abandoned.\\\\r\\\\n         */\\\\r\\\\n        type CartAbandonedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Time the abandoned cart was abandoned.\\\\r\\\\n             */\\\\r\\\\n            abandonTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Information about the visitor who abandoned the shopping cart.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the shopping cart that was abandoned.\\\\r\\\\n             */\\\\r\\\\n            cartId: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the abandoned cart's checkout page.\\\\r\\\\n             */\\\\r\\\\n            checkoutUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of coupon used in the abandoned cart.\\\\r\\\\n             */\\\\r\\\\n            couponId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Time the abandoned cart was created.\\\\r\\\\n             */\\\\r\\\\n            creationTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in the abandoned cart.\\\\r\\\\n             */\\\\r\\\\n            itemsCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Abandoned cart totals.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_stores_backend.Events.CartTotals;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a shopping cart that was completed.\\\\r\\\\n         */\\\\r\\\\n        type CartCompletedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the shopping cart that was completed.\\\\r\\\\n             */\\\\r\\\\n            cartId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Time the shopping cart was completed.\\\\r\\\\n             */\\\\r\\\\n            completedTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The buyer's information.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * Message from the buyer.\\\\r\\\\n             */\\\\r\\\\n            buyerNote: string;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon applied in the shopping cart.\\\\r\\\\n             */\\\\r\\\\n            appliedCoupon: wix_stores_backend.AppliedCoupon;\\\\r\\\\n            /**\\\\r\\\\n             * Billing address.\\\\r\\\\n             */\\\\r\\\\n            billingAddress: wix_stores_backend.Address;\\\\r\\\\n            /**\\\\r\\\\n             * Currency of the shopping cart.\\\\r\\\\n             */\\\\r\\\\n            currency: wix_stores_backend.Currency;\\\\r\\\\n            /**\\\\r\\\\n             * The order's units of weight. One of: `\\\\\\\"KG\\\\\\\"`, `\\\\\\\"LB\\\\\\\"`, or `\\\\\\\"UNSPECIFIED_WEIGHT_UNIT\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            weightUnit: string;\\\\r\\\\n            /**\\\\r\\\\n             * The shopping cart's totals.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_stores_backend.OrderTotals;\\\\r\\\\n            /**\\\\r\\\\n             * The shopping cart's shipping information.\\\\r\\\\n             */\\\\r\\\\n            shippingInfo: wix_stores_backend.ShippingInfo;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a shopping cart that was created.\\\\r\\\\n         */\\\\r\\\\n        type CartCreatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the shopping cart that was created.\\\\r\\\\n             */\\\\r\\\\n            cartId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Time the shopping cart was created.\\\\r\\\\n             */\\\\r\\\\n            creationTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The buyer's information.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * The order's units of weight. One of: `\\\\\\\"KG\\\\\\\"`, `\\\\\\\"LB\\\\\\\"`, or `\\\\\\\"UNSPECIFIED_WEIGHT_UNIT\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            weightUnit: string;\\\\r\\\\n            /**\\\\r\\\\n             * Currency of the shopping cart.\\\\r\\\\n             */\\\\r\\\\n            currency: wix_stores_backend.Currency;\\\\r\\\\n            /**\\\\r\\\\n             * The shopping cart's totals.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_stores_backend.OrderTotals;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a shopping cart that was recovered.\\\\r\\\\n         */\\\\r\\\\n        type CartRecoveredEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Time the recovered cart was abandoned.\\\\r\\\\n             */\\\\r\\\\n            abandonedTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the shopping cart that was abandoned.\\\\r\\\\n             */\\\\r\\\\n            cartId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Time the recovered cart was originally created.\\\\r\\\\n             */\\\\r\\\\n            creationTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Time the cart was recovered.\\\\r\\\\n             */\\\\r\\\\n            recoveredTime: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the totals of a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        type CartTotals = {\\\\r\\\\n            /**\\\\r\\\\n             * Subtotal of all the line items in the abandoned cart, not including shipping and tax.\\\\r\\\\n             */\\\\r\\\\n            subtotal: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total of all the line items in the abandoned cart, including shipping and tax.\\\\r\\\\n             */\\\\r\\\\n            total: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total formatted with currency symbol.\\\\r\\\\n             */\\\\r\\\\n            formattedTotal: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product collection that was created.\\\\r\\\\n         */\\\\r\\\\n        type CollectionCreatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the created collection.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Collection name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Main product media item (image) URL.\\\\r\\\\n             */\\\\r\\\\n            mainMedia: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product collection that was deleted.\\\\r\\\\n         */\\\\r\\\\n        type CollectionDeletedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the delete collection.\\\\r\\\\n             */\\\\r\\\\n            collectionId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product collection that was updated.\\\\r\\\\n         */\\\\r\\\\n        type CollectionUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the updated collection.\\\\r\\\\n             */\\\\r\\\\n            collectionId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Names of the collection fields that were updated.\\\\r\\\\n             */\\\\r\\\\n            updatedFields: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an inventory item that was updated.\\\\r\\\\n         */\\\\r\\\\n        type InventoryItemUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the inventory item.\\\\r\\\\n             */\\\\r\\\\n            inventoryItemId: string;\\\\r\\\\n            /**\\\\r\\\\n             * External ID of the inventory item. For example, the product ID for\\\\\\\\n inventory items which are store products.\\\\r\\\\n             */\\\\r\\\\n            externalId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the item's inventory is tracked.\\\\r\\\\n             */\\\\r\\\\n            trackInventory: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing product variant information that was updated.\\\\r\\\\n         */\\\\r\\\\n        type InventoryVariantUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the inventory item.\\\\r\\\\n             */\\\\r\\\\n            inventoryItemId: string;\\\\r\\\\n            /**\\\\r\\\\n             * External ID of the inventory item. For example, the product ID for\\\\\\\\n inventory items which are store products.\\\\r\\\\n             */\\\\r\\\\n            externalId: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of variants that were updated.\\\\r\\\\n             */\\\\r\\\\n            variants: wix_stores_backend.Events.UpdatedVariantInventory[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a new order from a store.\\\\r\\\\n         */\\\\r\\\\n        type NewOrderEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * The ID of the order, auto-generated when an order is created an unique within all Wix Stores.\\\\r\\\\n             */\\\\r\\\\n            orderId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Running order number unique to the current store.\\\\r\\\\n             */\\\\r\\\\n            number: string;\\\\r\\\\n            /**\\\\r\\\\n             * The date the order was created.\\\\r\\\\n             */\\\\r\\\\n            dateCreated: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The buyer's information.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * The currency code for all of the order's prices.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * The order's units of weight. One of: `\\\\\\\"KG\\\\\\\"`, `\\\\\\\"LB\\\\\\\"`, or `\\\\\\\"UNSPECIFIED_WEIGHT_UNIT\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            weightUnit: string;\\\\r\\\\n            /**\\\\r\\\\n             * The order's totals.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_stores_backend.OrderTotals;\\\\r\\\\n            /**\\\\r\\\\n             * The order's payment status. One of: `\\\\\\\"PAID\\\\\\\"` or `\\\\\\\"NOT_PAID\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            paymentStatus: string;\\\\r\\\\n            /**\\\\r\\\\n             * The order's fulfillment status. One of: `\\\\\\\"FULFILLED\\\\\\\"` or `\\\\\\\"NOT_FULFILLED\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            fulfillmentStatus: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the specific choices from the product's options.\\\\r\\\\n         */\\\\r\\\\n        type ProductChoices = {\\\\r\\\\n            /**\\\\r\\\\n             * Value of the option. This key name is\\\\r\\\\n             *  dependent on the option changed in the product. For example, if a product\\\\r\\\\n             *  has a size option, this key value will be something like \\\\\\\"Size\\\\\\\" and its value\\\\r\\\\n             *  will be something like \\\\\\\"Large\\\\\\\".\\\\r\\\\n             *  \\\\r\\\\n             *  `optionKey` is not case-sensitive. Therefore the values for the option keys `\\\\\\\"Size\\\\\\\"` `\\\\\\\"SIZE\\\\\\\"` and `\\\\\\\"size\\\\\\\"` are combined.\\\\r\\\\n             */\\\\r\\\\n            optionKey: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product that was created.\\\\r\\\\n         */\\\\r\\\\n        type ProductCreatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product stock keeping unit.\\\\r\\\\n             */\\\\r\\\\n            sku: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted product price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedDiscountedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the product is shown in the store.\\\\r\\\\n             */\\\\r\\\\n            visible: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Main product media item (image or video) URL.\\\\r\\\\n             */\\\\r\\\\n            mainMedia: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted product price.\\\\r\\\\n             */\\\\r\\\\n            discountedPrice: number;\\\\r\\\\n            /**\\\\r\\\\n             * Product price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Product media items.\\\\r\\\\n             */\\\\r\\\\n            mediaItems: wix_stores_backend.MediaItem[] | $w.Gallery.VideoItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Product currency.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL to the product's page.\\\\r\\\\n             */\\\\r\\\\n            productPageUrl: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product that was deleted.\\\\r\\\\n         */\\\\r\\\\n        type ProductDeletedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the deleted product.\\\\r\\\\n             */\\\\r\\\\n            productId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product that was updated.\\\\r\\\\n         */\\\\r\\\\n        type ProductUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the updated product.\\\\r\\\\n             */\\\\r\\\\n            productId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Names of the product fields that were updated.\\\\r\\\\n             */\\\\r\\\\n            updatedFields: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product variants that was updated.\\\\r\\\\n         */\\\\r\\\\n        type UpdatedVariant = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the variant that was updated.\\\\r\\\\n             */\\\\r\\\\n            variantId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Names of the product variant fields that were updated.\\\\r\\\\n             */\\\\r\\\\n            updatedFields: string[];\\\\r\\\\n            choices: wix_stores_backend.Events.ProductChoices;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing product variant that was updated.\\\\r\\\\n         */\\\\r\\\\n        type UpdatedVariantInventory = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the productVariant that was updated.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Old variant value.\\\\r\\\\n             */\\\\r\\\\n            oldValue: wix_stores_backend.Events.VariantInventoryValue;\\\\r\\\\n            /**\\\\r\\\\n             * Updated variant value.\\\\r\\\\n             */\\\\r\\\\n            newValue: wix_stores_backend.Events.VariantInventoryValue;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product variant value.\\\\r\\\\n         */\\\\r\\\\n        type VariantInventoryValue = {\\\\r\\\\n            /**\\\\r\\\\n             * Whether the variant is in stock.\\\\r\\\\n             */\\\\r\\\\n            inStock: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in stock.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing product variants that were updated.\\\\r\\\\n         */\\\\r\\\\n        type VariantsUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the product in which variants were updated.\\\\r\\\\n             */\\\\r\\\\n            productId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variants that were updated.\\\\r\\\\n             */\\\\r\\\\n            variants: wix_stores_backend.Events.UpdatedVariant[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an abandoned shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type AbandonedCart = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique identifier of the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Date and time the shopping cart was abandoned.\\\\r\\\\n         */\\\\r\\\\n        abandonTime: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Total price of all items in the cart.\\\\r\\\\n         */\\\\r\\\\n        total: string;\\\\r\\\\n        /**\\\\r\\\\n         * The buyer's information.\\\\r\\\\n         */\\\\r\\\\n        buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n        activities: wix_stores_backend.Activity;\\\\r\\\\n        /**\\\\r\\\\n         * Status of the abandoned cart. Either `\\\\\\\"ABANDONED\\\\\\\"` or `\\\\\\\"RECOVERED\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a shopping cart activity.\\\\r\\\\n     */\\\\r\\\\n    type Activity = {\\\\r\\\\n        /**\\\\r\\\\n         * One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"CUSTOM_ACTIVITY\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"EMAIL_NOT_SENT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"EMAIL_SENT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"NOTIFICATION_SENT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"SCHEDULED\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"TASK_CREATED\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"UNRECOGNIZED_TYPE\\\\\\\"`\\\\r\\\\n         */\\\\r\\\\n        activityType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Activity message.\\\\r\\\\n         */\\\\r\\\\n        message: string;\\\\r\\\\n        /**\\\\r\\\\n         * Time activity occurred.\\\\r\\\\n         */\\\\r\\\\n        timestamp: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Custom activity data.\\\\r\\\\n         */\\\\r\\\\n        customData: wix_stores_backend.CustomData;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an address.\\\\r\\\\n     */\\\\r\\\\n    type Address = {\\\\r\\\\n        /**\\\\r\\\\n         * First name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Email address.\\\\r\\\\n         */\\\\r\\\\n        email: string;\\\\r\\\\n        /**\\\\r\\\\n         * Phone number.\\\\r\\\\n         */\\\\r\\\\n        phone: string;\\\\r\\\\n        /**\\\\r\\\\n         * Address.\\\\r\\\\n         */\\\\r\\\\n        address: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a coupon applied in a shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type AppliedCoupon = {\\\\r\\\\n        /**\\\\r\\\\n         * Coupon code.\\\\r\\\\n         */\\\\r\\\\n        code: string;\\\\r\\\\n        /**\\\\r\\\\n         * Coupon unique identifier.\\\\r\\\\n         */\\\\r\\\\n        couponId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Coupon name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Type of coupon.\\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"BuyXGetY\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"FixedPriceAmount\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"FreeShipping\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"MoneyOffAmount\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"PercentOffRate\\\\\\\"`\\\\r\\\\n         */\\\\r\\\\n        couponType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Value of the coupon discount.\\\\r\\\\n         */\\\\r\\\\n        discountValue: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a visitor who abandoned a shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type BuyerInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's unique ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's email address.\\\\r\\\\n         */\\\\r\\\\n        email: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's first name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's identity.\\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"ADMIN\\\\\\\"`: Buyer is the site owner.\\\\r\\\\n         *  + `\\\\\\\"MEMBER\\\\\\\"`: Buyer is a logged-in site member.\\\\r\\\\n         *  + `\\\\\\\"VISITOR\\\\\\\"`: Buyer is not logged in.\\\\r\\\\n         *  + `\\\\\\\"CONTACT\\\\\\\"`: A contact has been created for the buyer.\\\\r\\\\n         */\\\\r\\\\n        identityType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's phone number.\\\\r\\\\n         */\\\\r\\\\n        phone: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type Cart = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique identifier of the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Coupon applied in the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        appliedCoupon: wix_stores_backend.AppliedCoupon;\\\\r\\\\n        /**\\\\r\\\\n         * Cart billing address.\\\\r\\\\n         */\\\\r\\\\n        billingAddress: wix_stores_backend.Address;\\\\r\\\\n        /**\\\\r\\\\n         * The buyer's information.\\\\r\\\\n         */\\\\r\\\\n        buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n        /**\\\\r\\\\n         * Cart status. Either `\\\\\\\"INCOMPLETE\\\\\\\"` or `\\\\\\\"COMPLETE\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * Currency of the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        currency: wix_stores_backend.Currency;\\\\r\\\\n        /**\\\\r\\\\n         * The shopping cart's shipping information.\\\\r\\\\n         */\\\\r\\\\n        shippingInfo: wix_stores_backend.ShippingInfo;\\\\r\\\\n        /**\\\\r\\\\n         * Items in the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        lineItems: wix_stores_backend.LineItem[];\\\\r\\\\n        /**\\\\r\\\\n         * The shopping cart's totals.\\\\r\\\\n         */\\\\r\\\\n        totals: wix_stores_backend.OrderTotals;\\\\r\\\\n        /**\\\\r\\\\n         * The order's units of weight. One of: `\\\\\\\"KG\\\\\\\"`, `\\\\\\\"LB\\\\\\\"`, or `\\\\\\\"UNSPECIFIED_WEIGHT_UNIT\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        weightUnit: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the choice for a product variant.\\\\r\\\\n     */\\\\r\\\\n    type Choice = {\\\\r\\\\n        /**\\\\r\\\\n         * Product options to use when creating or updating the\\\\r\\\\n         *  product. The object contains key:value pairs where the key is the\\\\r\\\\n         *  option name and the value is the chosen option value.\\\\r\\\\n         */\\\\r\\\\n        choices: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the choice for a product variant.\\\\r\\\\n     */\\\\r\\\\n    type Choices = {\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        option: string;\\\\r\\\\n        /**\\\\r\\\\n         * Choice name.\\\\r\\\\n         */\\\\r\\\\n        choice: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a currency.\\\\r\\\\n     */\\\\r\\\\n    type Currency = {\\\\r\\\\n        /**\\\\r\\\\n         * The currency code.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * The currency symbol.\\\\r\\\\n         */\\\\r\\\\n        symbol: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing custom activity data.\\\\r\\\\n     */\\\\r\\\\n    type CustomData = {\\\\r\\\\n        /**\\\\r\\\\n         * Activity namespace.\\\\r\\\\n         */\\\\r\\\\n        namespace: string;\\\\r\\\\n        /**\\\\r\\\\n         * JSON object containing custom data.\\\\r\\\\n         */\\\\r\\\\n        customValue: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a custom text field.\\\\r\\\\n     */\\\\r\\\\n    type CustomTextField = {\\\\r\\\\n        /**\\\\r\\\\n         * Field title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Field value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a line item in a shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type LineItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the line item.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Notes about the line item.\\\\r\\\\n         */\\\\r\\\\n        notes: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item price.\\\\r\\\\n         */\\\\r\\\\n        price: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item product ID.\\\\r\\\\n         */\\\\r\\\\n        productId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item quantity.\\\\r\\\\n         */\\\\r\\\\n        quantity: number;\\\\r\\\\n        /**\\\\r\\\\n         * Line item stock keeping unit.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Total price charged to the customer for all line items after any applicable discounts.\\\\r\\\\n         */\\\\r\\\\n        totalPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item weight.\\\\r\\\\n         */\\\\r\\\\n        weight: string;\\\\r\\\\n        /**\\\\r\\\\n         * Type of the line item.\\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"DIGITAL\\\\\\\"`: Digital item.\\\\r\\\\n         *  + `\\\\\\\"PHYSICAL\\\\\\\"`: Physical item.\\\\r\\\\n         *  + `\\\\\\\"CUSTOM_AMOUNT_ITEM\\\\\\\"`: Item with a custom price.\\\\r\\\\n         *  + `\\\\\\\"UNSPECIFIED\\\\\\\"`: Type can't be classified due to an error.\\\\r\\\\n         */\\\\r\\\\n        lineItemType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item options.\\\\r\\\\n         */\\\\r\\\\n        options: wix_stores_backend.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Media item.\\\\r\\\\n         */\\\\r\\\\n        mediaItem: wix_stores_backend.MediaItem;\\\\r\\\\n        /**\\\\r\\\\n         * Custom text.\\\\r\\\\n         */\\\\r\\\\n        customTextFields: wix_stores_backend.CustomTextField[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the media item for a product.\\\\r\\\\n     */\\\\r\\\\n    type Media = {\\\\r\\\\n        /**\\\\r\\\\n         * One of:\\\\r\\\\n         * \\\\r\\\\n         *  + A Wix media item's ID, or\\\\r\\\\n         *  + A media item's URL\\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         *  Use `mediaId` (preferred) for images hosted by Wix. Use `url` for other images. \\\\r\\\\n         * \\\\r\\\\n         *  If you specify both, `mediaId` takes precedence. We recommend only specifying one to avoid unpredictable results. \\\\r\\\\n         * \\\\r\\\\n         *  You can get the `mediaId` from: \\\\r\\\\n         * \\\\r\\\\n         *   + A query of the [`Product`](https://www.wix.com/corvid/reference/$w.ProductPage.html#Product) object. \\\\r\\\\n         *   + The [`UploadedFile`](https://www.wix.com/corvid/reference/$w.UploadButton.html#UploadedFile)'s properties when uploading an image.\\\\r\\\\n         */\\\\r\\\\n        \\\\\\\"(mediaId|url)\\\\\\\": string;\\\\r\\\\n        /**\\\\r\\\\n         * A choice of the product variant.\\\\r\\\\n         */\\\\r\\\\n        choice: wix_stores_backend.Choice;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the media item for a product's choices.\\\\r\\\\n     */\\\\r\\\\n    type MediaChoices = {\\\\r\\\\n        /**\\\\r\\\\n         * Wix media item IDs.\\\\r\\\\n         */\\\\r\\\\n        mediaIds: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        option: string;\\\\r\\\\n        /**\\\\r\\\\n         * Choice name.\\\\r\\\\n         */\\\\r\\\\n        choice: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a media item.\\\\r\\\\n     */\\\\r\\\\n    type MediaItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Media item ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media items type. Can be \\\\\\\"image\\\\\\\" or \\\\\\\"video.\\\\\\\"\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item URL.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Thumbnail URL for videos only.\\\\r\\\\n         */\\\\r\\\\n        thumbnail?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a line item option.\\\\r\\\\n     */\\\\r\\\\n    type Option = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the product option.\\\\r\\\\n         */\\\\r\\\\n        option: string;\\\\r\\\\n        /**\\\\r\\\\n         * Selected option.\\\\r\\\\n         */\\\\r\\\\n        selection: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an order's totals.\\\\r\\\\n     */\\\\r\\\\n    type OrderTotals = {\\\\r\\\\n        /**\\\\r\\\\n         * The subtotal of all the order's line items, excluding tax.\\\\r\\\\n         */\\\\r\\\\n        subtotal: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total shipping price, including tax.\\\\r\\\\n         */\\\\r\\\\n        shipping: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total amount of tax.\\\\r\\\\n         */\\\\r\\\\n        tax: string;\\\\r\\\\n        /**\\\\r\\\\n         * The total calculated discount amount.\\\\r\\\\n         */\\\\r\\\\n        discount: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total price.\\\\r\\\\n         */\\\\r\\\\n        total: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total weight of the order's items.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total quantity of the the order's line items.\\\\r\\\\n         */\\\\r\\\\n        quantity: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing paging options.\\\\r\\\\n     */\\\\r\\\\n    type PagingOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Maximum number of variants to retrieve. Defaults to 300.\\\\r\\\\n         */\\\\r\\\\n        limit: number;\\\\r\\\\n        /**\\\\r\\\\n         * Number of variants to skip before the retrieved variants. Defaults to 0.\\\\r\\\\n         */\\\\r\\\\n        skip: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product in a store.\\\\r\\\\n     */\\\\r\\\\n    type Product = {\\\\r\\\\n        /**\\\\r\\\\n         * Product ID.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Date product was last updated.\\\\r\\\\n         */\\\\r\\\\n        _updatedDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Product name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Main product media item (image or video thumbnail) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of product media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores_backend.MediaItem;\\\\r\\\\n        /**\\\\r\\\\n         * Product stock keeping unit value. Must be unique.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of product ribbons.\\\\r\\\\n         */\\\\r\\\\n        ribbons: wix_stores_backend.ProductRibbon[];\\\\r\\\\n        /**\\\\r\\\\n         * Product currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product price. \\\\r\\\\n         *  The price must be greater than its discount.\\\\r\\\\n         *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Product price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID for the inventory item.\\\\r\\\\n         */\\\\r\\\\n        inventoryItemId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product discount.\\\\r\\\\n         */\\\\r\\\\n        discount: wix_stores_backend.ProductDiscount;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether inventory is tracked for the product.\\\\r\\\\n         */\\\\r\\\\n        trackInventory: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product is in stock.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Number of units currently in stock.\\\\r\\\\n         */\\\\r\\\\n        quantityInStock: number;\\\\r\\\\n        /**\\\\r\\\\n         * Additional product information sections.\\\\r\\\\n         */\\\\r\\\\n        additionalInfoSections: wix_stores_backend.ProductAdditionalInfoSection[];\\\\r\\\\n        /**\\\\r\\\\n         * All the available options for a store product.\\\\r\\\\n         */\\\\r\\\\n        productOptions: wix_stores_backend.ProductOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Product page relative URL.\\\\r\\\\n         */\\\\r\\\\n        productPageUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether product variants are managed. Can be set to true only if the product has options. Once set to true, can be reset to false only if no variants exist. Use [`getProductVariants()`](https://www.wix.com/corvid/reference/wix-stores.html#getProductVariants) to check if variants exist. You cannot set `manageVariants` to true if more than 300 variants are defined.\\\\r\\\\n         */\\\\r\\\\n        manageVariants: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * List of product customization fields.\\\\r\\\\n         */\\\\r\\\\n        customTextFields: wix_stores_backend.ProductCustomTextFields[];\\\\r\\\\n        /**\\\\r\\\\n         * Product type. Either `\\\\\\\"physical\\\\\\\"` or `\\\\\\\"digital\\\\\\\"`. When creating a product using the API, currently only `\\\\\\\"physical\\\\\\\"` is supported.\\\\r\\\\n         */\\\\r\\\\n        productType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product slug.\\\\r\\\\n         */\\\\r\\\\n        slug: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product weight.\\\\r\\\\n         */\\\\r\\\\n        weight: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variants.\\\\r\\\\n         */\\\\r\\\\n        variants: wix_stores_backend.ProductVariants;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an additional info section for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductAdditionalInfoSection = {\\\\r\\\\n        /**\\\\r\\\\n         * Section title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Section description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variant's option choices.\\\\r\\\\n     */\\\\r\\\\n    type ProductChoices = {\\\\r\\\\n        /**\\\\r\\\\n         * Value of the choice. This key name is dependent on the\\\\r\\\\n         *  product option. For example, if a product has a size option, this\\\\r\\\\n         *  key value will be something like `\\\\\\\"Size\\\\\\\"` and its value will be something like\\\\r\\\\n         *  `\\\\\\\"Large\\\\\\\"`.\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\", are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a custom text field for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductCustomTextFields = {\\\\r\\\\n        /**\\\\r\\\\n         * Product customization field title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Maximum length of product customization field in characters.\\\\r\\\\n         */\\\\r\\\\n        maxLength: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product discount.\\\\r\\\\n     */\\\\r\\\\n    type ProductDiscount = {\\\\r\\\\n        /**\\\\r\\\\n         * Discount type. Required.\\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         *  - `\\\\\\\"AMOUNT\\\\\\\"` \\\\r\\\\n         * \\\\r\\\\n         *  - `\\\\\\\"PERCENT\\\\\\\"`\\\\r\\\\n         * \\\\r\\\\n         *  - `\\\\\\\"NONE\\\\\\\"`\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discount value. The discount value cannot be greater than the price of the product or the variant.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing information for creating or updating a product in a store.\\\\r\\\\n     */\\\\r\\\\n    type ProductInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Product name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product stock keeping unit value. Must be unique.\\\\r\\\\n         */\\\\r\\\\n        sku: number;\\\\r\\\\n        /**\\\\r\\\\n         * Product price. \\\\r\\\\n         *  The price must be greater than its discount.\\\\r\\\\n         *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product discount.\\\\r\\\\n         */\\\\r\\\\n        discount: wix_stores_backend.ProductDiscount;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing all the available options for a store product.\\\\r\\\\n         */\\\\r\\\\n        productOptions: wix_stores_backend.ProductOptionsInfo;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether product variants can be managed. Can be set to true only if the product has options. Once set to true, can be reset to false only if no variants exist. Use [`getProductVariants()`](https://www.wix.com/corvid/reference/wix-stores.html#getProductVariants) to check if variants exist.  You cannot set `manageVariants` to true if more than 300 variants are defined.\\\\r\\\\n         */\\\\r\\\\n        manageVariants: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Product type. Currently only \\\\\\\"physical\\\\\\\" is supported for creating a new product using the API. Soon \\\\\\\"digital\\\\\\\" will also be supported.\\\\r\\\\n         */\\\\r\\\\n        productType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an option for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOption = {\\\\r\\\\n        /**\\\\r\\\\n         * Option type. Either `\\\\\\\"color\\\\\\\"` or `\\\\\\\"drop_down\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        optionType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductOptionsChoice[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an option for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductOptionsChoice[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing all the available options for a store product, such as \\\\\\\"Size\\\\\\\" or \\\\\\\"Color.\\\\\\\"\\\\r\\\\n     */\\\\r\\\\n    type ProductOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the option. This key name\\\\r\\\\n         *  is dependent on the options added to the product. For example, if a product has a size \\\\r\\\\n         *  option, this key will be something like `\\\\\\\"Size\\\\\\\"`.\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: wix_stores_backend.ProductOption;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by the `getProductOptionsAvailability()` function representing the availability of a product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsAvailability = {\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product with the specified option choices is available for purchase.\\\\r\\\\n         */\\\\r\\\\n        availableForPurchase: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing all the available options for a store product.\\\\r\\\\n         */\\\\r\\\\n        productOptions: wix_stores_backend.ProductOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Main product media item (image or video) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of product media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores_backend.MediaItem;\\\\r\\\\n        /**\\\\r\\\\n         * The variant of the product selected using the specified option choices if there is one.\\\\r\\\\n         */\\\\r\\\\n        selectedVariant: wix_stores_backend.ProductOptionsAvailabilitySelectedVariant;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the product variant selected using the `getProductOptionsAvailability()` function.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsAvailabilitySelectedVariant = {\\\\r\\\\n        /**\\\\r\\\\n         * Product variant stock keeping unit value.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant price. The variant price must be greater than its discount.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product variant is shown in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product variant is in stock.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an options choice for a store product for a store product, such as choice \\\\\\\"Small\\\\\\\" for the option \\\\\\\"Size.\\\\\\\"\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsChoice = {\\\\r\\\\n        /**\\\\r\\\\n         * Choice value.\\\\r\\\\n         */\\\\r\\\\n        value: number;\\\\r\\\\n        /**\\\\r\\\\n         * Choice description.\\\\r\\\\n         */\\\\r\\\\n        description: number;\\\\r\\\\n        /**\\\\r\\\\n         * Choice media.\\\\r\\\\n         */\\\\r\\\\n        media: wix_stores_backend.ProductOptionsChoiceMedia[];\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product with this choice is in stock. When adding a product, this property is read-only.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product with this option is visible.  When adding a product, this property is read-only.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the choice media.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsChoiceMedia = {\\\\r\\\\n        /**\\\\r\\\\n         * Main choice media item (image or video thumbnail) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of choice media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores_backend.MediaItem;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing all the available options for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the option. This key name\\\\r\\\\n         *  is dependent on the options added to the product. For example, if a product has a size \\\\r\\\\n         *  option, this key will be something like `\\\\\\\"Size\\\\\\\"`.\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: wix_stores_backend.ProductOptionInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a ribbon for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductRibbon = {\\\\r\\\\n        /**\\\\r\\\\n         * Ribbon text.\\\\r\\\\n         */\\\\r\\\\n        text: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variant information to use when creating or updating variants.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price. The variant price must be greater than its discount.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Formatted variant price.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant stock keeping unit number.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the variant is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variant item.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique product variant ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant information.\\\\r\\\\n         */\\\\r\\\\n        variant: wix_stores_backend.ProductVariantInfo[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the selection of specific variants of a product. Use only one of\\\\r\\\\n     *  `choices` or `variantIds`.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * The choices the retrieved variants will have.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * IDs of variants to retrieve.\\\\r\\\\n         */\\\\r\\\\n        variantIds: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Paging options.\\\\r\\\\n         */\\\\r\\\\n        paging: wix_stores_backend.PagingOptions;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variants.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariants = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_stores_backend.ProductVariantItem[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing shipping information.\\\\r\\\\n     */\\\\r\\\\n    type ShippingInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Shipment address.\\\\r\\\\n         */\\\\r\\\\n        shippingAddress?: wix_stores_backend.Address;\\\\r\\\\n        /**\\\\r\\\\n         * Pickup address.\\\\r\\\\n         */\\\\r\\\\n        pickupInfo?: wix_stores_backend.Address;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object containing variant information.\\\\r\\\\n     */\\\\r\\\\n    type VariantInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price. The variant price must be greater than its discount.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant stock keeping unit value.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the variant is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variant item.\\\\r\\\\n     */\\\\r\\\\n    type VariantItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique variant ID.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n        /**\\\\r\\\\n         * The choices of the retrieved variant.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * Variant information.\\\\r\\\\n         */\\\\r\\\\n        variant: wix_stores_backend.VariantInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variants.\\\\r\\\\n     */\\\\r\\\\n    type Variants = {\\\\r\\\\n        /**\\\\r\\\\n         * List of variant items that match the specified choices or variant IDs.\\\\r\\\\n         */\\\\r\\\\n        items: wix_stores_backend.VariantItem[];\\\\r\\\\n        /**\\\\r\\\\n         * Number of items in the current results page.\\\\r\\\\n         */\\\\r\\\\n        length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Total number of variants with the specified choices.\\\\r\\\\n         */\\\\r\\\\n        totalCount: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_users_backend {\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site member's address.\\\\r\\\\n     */\\\\r\\\\n    type Address = {\\\\r\\\\n        /**\\\\r\\\\n         * Address street address.\\\\r\\\\n         */\\\\r\\\\n        street: string;\\\\r\\\\n        /**\\\\r\\\\n         * Address city.\\\\r\\\\n         */\\\\r\\\\n        city: string;\\\\r\\\\n        /**\\\\r\\\\n         * Address country.\\\\r\\\\n         */\\\\r\\\\n        country: string;\\\\r\\\\n        /**\\\\r\\\\n         * Address postal code.\\\\r\\\\n         */\\\\r\\\\n        postalCode: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site member's picture.\\\\r\\\\n     */\\\\r\\\\n    type Picture = {\\\\r\\\\n        /**\\\\r\\\\n         * Member's image URL.\\\\r\\\\n         */\\\\r\\\\n        url: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the results of a site registration.\\\\r\\\\n     */\\\\r\\\\n    type RegistrationResult = {\\\\r\\\\n        /**\\\\r\\\\n         * Registration status. Either \\\\\\\"Pending\\\\\\\" or \\\\\\\"Active\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * A token used to log in the current\\\\r\\\\n         *  user as a site member. Pass the token from your backend code to client-side\\\\r\\\\n         *  code and use it when calling the [applySessionToken()](wix-users.html#applySessionToken)\\\\r\\\\n         *  function. The token is only available when `status` is \\\\\\\"Active\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        sessionToken?: string;\\\\r\\\\n        /**\\\\r\\\\n         * A token for approving the user as\\\\r\\\\n         *  a site member using the [approveByToken()](wix-users-backend.html#approveByToken)\\\\r\\\\n         *  function. The token is safe to pass via email or from client-side code to\\\\r\\\\n         *  backend code. The token is only available when `status` is \\\\\\\"Pending\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        approvalToken?: string;\\\\r\\\\n        /**\\\\r\\\\n         * The user that has been registered.\\\\r\\\\n         */\\\\r\\\\n        user: wix_users.User;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site member.\\\\r\\\\n     */\\\\r\\\\n    type UserInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Member's unique id.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * The member's full name. This information is concatenated from the \\\\\\\"First Name\\\\\\\" and \\\\\\\"Last Name\\\\\\\" fields.\\\\r\\\\n         */\\\\r\\\\n        memberName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Member's first name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Member's last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * The email address the member uses to log in to your site. This is the address they supplied when they signed up.\\\\r\\\\n         */\\\\r\\\\n        loginEmail: string;\\\\r\\\\n        /**\\\\r\\\\n         * The name the member specified on their profile.\\\\r\\\\n         */\\\\r\\\\n        nickname: string;\\\\r\\\\n        /**\\\\r\\\\n         * The member's URL-friendly name that is unique across your site. Typically this is made up of the member's email prefix.\\\\r\\\\n         */\\\\r\\\\n        slug: string;\\\\r\\\\n        /**\\\\r\\\\n         * The member's locale based on their last login.\\\\r\\\\n         */\\\\r\\\\n        language: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates the member's current status, between `Applicant`, `Active`, `Blocked`.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * The date and time the member registered to the site.\\\\r\\\\n         */\\\\r\\\\n        creationDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * The last date and time the member's details were updated.\\\\r\\\\n         */\\\\r\\\\n        lastUpdateDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * The date and time when the member last logged in.\\\\r\\\\n         */\\\\r\\\\n        lastLoginDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * List of the member's email addresses.\\\\r\\\\n         */\\\\r\\\\n        emails: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of the member's phone numbers.\\\\r\\\\n         */\\\\r\\\\n        phones: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of the member's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)\\\\r\\\\n         *  are used to organize contacts. When setting the `labels` property, you can\\\\r\\\\n         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         */\\\\r\\\\n        labels: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Member's picture.\\\\r\\\\n         */\\\\r\\\\n        picture: wix_users_backend.Picture;\\\\r\\\\n        /**\\\\r\\\\n         * Any\\\\r\\\\n         *  number of custom fields. [Customs fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\\\\r\\\\n         *  are used to store additional information about your site's contacts. When\\\\r\\\\n         *  setting a custom field, use key:value pairs where the key matches the names\\\\r\\\\n         *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         *  You can only set values for custom fields that already exist in the Contacts\\\\r\\\\n         *  application.\\\\r\\\\n         */\\\\r\\\\n        customFields: string | number | Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_bookings {\\\\r\\\\n    /**\\\\r\\\\n     * An object used when calling [`getServiceAvailability()`](#getServiceAvailability)\\\\r\\\\n     *  containing options for which slots should be returned.\\\\r\\\\n     */\\\\r\\\\n    type AvailabilityOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Start date and time of the slots\\\\r\\\\n         *  to be returned. Defaults to the current date and time.\\\\r\\\\n         */\\\\r\\\\n        startDateTime?: Date;\\\\r\\\\n        /**\\\\r\\\\n         * End date and time of the slots to\\\\r\\\\n         *  be returned. Defaults to one week from `startDateTime`, which is one week\\\\r\\\\n         *  from the current date and time if `startDateTime` is also omitted.\\\\r\\\\n         */\\\\r\\\\n        endDateTime?: Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when calling [`checkoutBooking()`](#checkoutBooking)\\\\r\\\\n     *  containing information about the slot to be booked.\\\\r\\\\n     */\\\\r\\\\n    type BookingInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * The slot to be booked.\\\\r\\\\n         */\\\\r\\\\n        slot: wix_bookings.Slot;\\\\r\\\\n        /**\\\\r\\\\n         * Number of spots to book. Defaults to `1`.\\\\r\\\\n         */\\\\r\\\\n        numberOfSpots?: number;\\\\r\\\\n        /**\\\\r\\\\n         * List of form field values required to book the session.\\\\r\\\\n         */\\\\r\\\\n        formFields: wix_bookings.FormField[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the result of a call to [`checkoutBooking()`](#checkoutBooking).\\\\r\\\\n     */\\\\r\\\\n    type BookingResult = {\\\\r\\\\n        /**\\\\r\\\\n         * Status of the booking that was checked out.\\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"Confirmed\\\\\\\"`: Payment was successful or payment is to be done offline.\\\\r\\\\n         *  + `\\\\\\\"Pending Payment\\\\\\\"`: Payment is pending.\\\\r\\\\n         *  + `\\\\\\\"Terminated\\\\\\\"`: Payment failed or was cancelled.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the booking that was checked out.\\\\r\\\\n         */\\\\r\\\\n        bookingId: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned after calling [`getCheckoutOptions()`](#getCheckoutOptions)\\\\r\\\\n     *  containing information about the available payment options for the service and the logged-in user.\\\\r\\\\n     */\\\\r\\\\n    type CheckoutOption = {\\\\r\\\\n        /**\\\\r\\\\n         * Type of the available payment option. Valid options are:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"wixPay_Online\\\\\\\"` for online collections\\\\r\\\\n         *  + `\\\\\\\"wixPay_Offline\\\\\\\"` for offline collections\\\\r\\\\n         *  + `\\\\\\\"package\\\\\\\"` for a package-type paid plan \\\\r\\\\n         *  + `\\\\\\\"membership\\\\\\\"` for a membership-type paid plan\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Name of the plan package or membership. For booking with paid plans only.\\\\r\\\\n         */\\\\r\\\\n        planName?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Order ID of the plan package or membership. For booking with paid plans only.\\\\r\\\\n         */\\\\r\\\\n        planOrderId?: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the benefit provided by the plan package. For booking with package-type paid plans only.\\\\r\\\\n         */\\\\r\\\\n        benefitId?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Number of sessions remaining in the plan package. For booking with package-type paid plans only.\\\\r\\\\n         */\\\\r\\\\n        remainingCredits?: number;\\\\r\\\\n        /**\\\\r\\\\n         * Number of sessions initially provided with the plan package.  For booking with package-type paid plans only.\\\\r\\\\n         */\\\\r\\\\n        totalCredits?: number;\\\\r\\\\n        /**\\\\r\\\\n         * Date by which the plan package or membership expires. For booking with paid plans only.\\\\r\\\\n         */\\\\r\\\\n        planExpiration?: Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when calling [`checkoutBooking()`](#checkoutBooking)\\\\r\\\\n     *  containing values for form fields required to book the session.\\\\r\\\\n     */\\\\r\\\\n    type FormField = {\\\\r\\\\n        /**\\\\r\\\\n         * Form field value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the form field from the **form** property in the **Booking/Sessions** collection.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when calling [`checkoutBooking()`](#checkoutBooking)\\\\r\\\\n     *  containing information about the payment options.\\\\r\\\\n     */\\\\r\\\\n    type PaymentOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * A coupon code to be used with the payment.\\\\r\\\\n         */\\\\r\\\\n        couponCode?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Type of the payment. Valid options are: \\\\r\\\\n         * \\\\r\\\\n         *   + `\\\\\\\"wixPay_Online\\\\\\\"` for online collections\\\\r\\\\n         *   + `\\\\\\\"wixPay_Offline\\\\\\\"` for offline collections\\\\r\\\\n         *   + `\\\\\\\"package\\\\\\\"` for a package-type paid plan\\\\r\\\\n         *   + `\\\\\\\"membership\\\\\\\"` for a membership-type paid plan\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned from [`getServiceAvailability()`](#getServiceAvailability)\\\\r\\\\n     *  containing the available bookings slots.\\\\r\\\\n     */\\\\r\\\\n    type ServiceAvailability = {\\\\r\\\\n        /**\\\\r\\\\n         * List of available slots.\\\\r\\\\n         */\\\\r\\\\n        slots: wix_bookings.Slot[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a booking slot.\\\\r\\\\n     */\\\\r\\\\n    type Slot = {\\\\r\\\\n        /**\\\\r\\\\n         * Starting date and time of the slot.\\\\r\\\\n         */\\\\r\\\\n        startDateTime: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Ending date and time of the slot.\\\\r\\\\n         */\\\\r\\\\n        endDateTime: Date;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the service that the slot belongs to.\\\\r\\\\n         */\\\\r\\\\n        serviceId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Maximum number of participants that can book the service for this slot.\\\\r\\\\n         */\\\\r\\\\n        capacity: number;\\\\r\\\\n        /**\\\\r\\\\n         * Number of remaining spots that can be booked for the slot.\\\\r\\\\n         */\\\\r\\\\n        remainingSpots: number;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the slot's staff member.\\\\r\\\\n         */\\\\r\\\\n        staffMemberId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Unique slot identifier.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_crm {\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site contact.\\\\r\\\\n     */\\\\r\\\\n    type ContactInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Contact's first name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Contact's last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Contact's image source.\\\\r\\\\n         */\\\\r\\\\n        picture: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's email addresses.\\\\r\\\\n         */\\\\r\\\\n        emails: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Email address the contact who is also\\\\r\\\\n         *  a member uses to log into the system.\\\\r\\\\n         */\\\\r\\\\n        loginEmail: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's phone numbers.\\\\r\\\\n         */\\\\r\\\\n        phones: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)\\\\r\\\\n         *  are used to organize contacts. When setting the `labels` property, you can\\\\r\\\\n         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         */\\\\r\\\\n        labels: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Contact's language.\\\\r\\\\n         */\\\\r\\\\n        language: string;\\\\r\\\\n        /**\\\\r\\\\n         * Any\\\\r\\\\n         *  number of custom fields. [Customs fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\\\\r\\\\n         *  are used to store additional information about your site's contacts. When\\\\r\\\\n         *  setting a custom field, use key:value pairs where the key matches the names\\\\r\\\\n         *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         *  You can only set values for custom fields that already exist in the Contacts\\\\r\\\\n         *  application.\\\\r\\\\n         */\\\\r\\\\n        customFields: string | number | Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_events {\\\\r\\\\n    /**\\\\r\\\\n     * A form for creating an RSVP to an event.\\\\r\\\\n     */\\\\r\\\\n    interface RsvpForm {\\\\r\\\\n        /**\\\\r\\\\n         * Gets information about the event's RSVP form and status.\\\\r\\\\n         */\\\\r\\\\n        getRsvpData(): Promise<wix_events.RsvpForm.RsvpData>;\\\\r\\\\n        /**\\\\r\\\\n         * Submits an RSVP form and adds the new guests to the event's guest list.\\\\r\\\\n         */\\\\r\\\\n        submit(formValues: wix_events.RsvpForm.FormValue[]): Promise<wix_events.RsvpForm.RsvpResponse>;\\\\r\\\\n        /**\\\\r\\\\n         * Validates form fields and values against the registration form as defined in the site Dashboard.\\\\r\\\\n         */\\\\r\\\\n        validate(formValues: wix_events.RsvpForm.FormValue[]): Promise<wix_events.RsvpForm.ValidationResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Validates an input form field value against the registration form as defined in the site Dashboard.\\\\r\\\\n         */\\\\r\\\\n        validateInput(inputName: string, formValues: wix_events.RsvpForm.FormValue[]): Promise<wix_events.RsvpForm.ValidationResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace RsvpForm {\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about a label for a complex input field type.\\\\r\\\\n         */\\\\r\\\\n        type AdditionalLabel = {\\\\r\\\\n            /**\\\\r\\\\n             * Additional label name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Additional label value.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an error that occurred during validation of an RSVP form's fields.\\\\r\\\\n         */\\\\r\\\\n        type FieldValidationError = {\\\\r\\\\n            /**\\\\r\\\\n             * Error message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of fields that caused the error when the form does not pass validation.\\\\r\\\\n             */\\\\r\\\\n            fields: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about form value to submit.\\\\r\\\\n         */\\\\r\\\\n        type FormValue = {\\\\r\\\\n            /**\\\\r\\\\n             * Form field name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Form field value.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a guest on an event RSVP.\\\\r\\\\n         */\\\\r\\\\n        type Guest = {\\\\r\\\\n            /**\\\\r\\\\n             * Index of the guest in the RSVP guest list. Indices are zero-based.\\\\r\\\\n             */\\\\r\\\\n            index: number;\\\\r\\\\n            /**\\\\r\\\\n             * Guest ID, which is unique within the RSVP.\\\\r\\\\n             */\\\\r\\\\n            id: number;\\\\r\\\\n            /**\\\\r\\\\n             * Full name of the guest\\\\r\\\\n             */\\\\r\\\\n            fullName: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a submitted RSVP form input value.\\\\r\\\\n         */\\\\r\\\\n        type InputValue = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the form input.\\\\r\\\\n             */\\\\r\\\\n            inputName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Value of the form input, when there is just one value.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * Value of the form input, when there are multiple values.\\\\r\\\\n             */\\\\r\\\\n            values: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the details needed to create an RSVP form for an event.\\\\r\\\\n         */\\\\r\\\\n        type RsvpData = {\\\\r\\\\n            /**\\\\r\\\\n             * Information about the input fields needed to create an RSVP form.\\\\r\\\\n             */\\\\r\\\\n            rsvpFormInputs: wix_events.RsvpForm.RsvpInputItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Allowed RSVP statuses for an event. \\\\r\\\\n             *  One of: \\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"YES_AND_NO\\\\\\\"`: Guests can RSVP for the event with a \\\\\\\"Yes\\\\\\\" or \\\\\\\"No\\\\\\\". \\\\r\\\\n             *  + `\\\\\\\"YES_ONLY\\\\\\\"`: Guests can only RSVP for the event with a \\\\\\\"Yes\\\\\\\".\\\\r\\\\n             *  + `\\\\\\\"WAITING\\\\\\\"`: The guest limit has been reached, but there is an open waitlist.\\\\r\\\\n             */\\\\r\\\\n            rsvpStatusOptions: string;\\\\r\\\\n            /**\\\\r\\\\n             * Event registration status.\\\\r\\\\n             *  One of:\\\\r\\\\n             *  \\\\r\\\\n             *  + `\\\\\\\"OPEN_RSVP\\\\\\\"`: Registration is open and guest limit has not been reached.\\\\r\\\\n             *  + `\\\\\\\"OPEN_RSVP_WAITLIST\\\\\\\"`: Registration is open, guest limit has been reached,\\\\r\\\\n             *    and additional registering guests are added to the waitlist.\\\\r\\\\n             *  + `\\\\\\\"CLOSED\\\\\\\"`: Registration is closed because the guest limit has been reached.\\\\r\\\\n             *  + `\\\\\\\"CLOSED_MANUALLY\\\\\\\"`: Registration was closed manually.\\\\r\\\\n             */\\\\r\\\\n            registrationStatus: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a submitted RSVP form.\\\\r\\\\n         */\\\\r\\\\n        type RsvpForm = {\\\\r\\\\n            /**\\\\r\\\\n             * Values that were entered in the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            inputValues: wix_events.RsvpForm.InputValue[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about an input field in an RSVP form.\\\\r\\\\n         */\\\\r\\\\n        type RsvpInputItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique input identifier.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the input field's value is an array.\\\\r\\\\n             */\\\\r\\\\n            array: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Input field display label.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n            /**\\\\r\\\\n             * Addition field display labels for complex fields.\\\\r\\\\n             */\\\\r\\\\n            additionalLabels: wix_events.RsvpForm.AdditionalLabel[];\\\\r\\\\n            /**\\\\r\\\\n             * List of value options where applicable.\\\\r\\\\n             */\\\\r\\\\n            options: string[];\\\\r\\\\n            /**\\\\r\\\\n             * Maximum length of the input field's value. A value of `0` indicates no maximum length.\\\\r\\\\n             */\\\\r\\\\n            maxLength: number;\\\\r\\\\n            /**\\\\r\\\\n             * Input field name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the input field is required.\\\\r\\\\n             */\\\\r\\\\n            required: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * The type of the input field.\\\\r\\\\n             *  One of:\\\\r\\\\n             *  \\\\r\\\\n             *  + `\\\\\\\"NAME\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"INPUT\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"RADIO\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"CHECKBOX\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"DROPDOWN\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"GUEST_CONTROL\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"ADDRESS_FULL\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"TEXTAREA\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"DATE\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            controlType: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a response to submitting an RSVP.\\\\r\\\\n         */\\\\r\\\\n        type RsvpResponse = {\\\\r\\\\n            /**\\\\r\\\\n             * RSVP ID\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the guest's personal information has been deleted or not.\\\\r\\\\n             */\\\\r\\\\n            anonymized: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Contact ID of the guest who submitted the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date when the RSVP was submitted.\\\\r\\\\n             */\\\\r\\\\n            createdDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Email address to the guest who submitted the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the event the RSVP is for.\\\\r\\\\n             */\\\\r\\\\n            eventId: string;\\\\r\\\\n            /**\\\\r\\\\n             * First name of the guest who submitted the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name of the guest who submitted the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * All of the guests included in the RSVP.\\\\r\\\\n             */\\\\r\\\\n            guests: wix_events.RsvpForm.Guest[];\\\\r\\\\n            /**\\\\r\\\\n             * A representation of the RSVP form that was submitted.\\\\r\\\\n             */\\\\r\\\\n            rsvpForm: wix_events.RsvpForm.RsvpForm;\\\\r\\\\n            /**\\\\r\\\\n             * Member ID of the guest who submitted the RSVP form if the guest is a site member.\\\\r\\\\n             */\\\\r\\\\n            memberId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date when RSVP was last modified.\\\\r\\\\n             */\\\\r\\\\n            updatedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * RSVP status.\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of guests included in the RSVP.\\\\r\\\\n             */\\\\r\\\\n            totalGuests: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an error that occurred during an RSVP form submission.\\\\r\\\\n         */\\\\r\\\\n        type SubmissionError = {\\\\r\\\\n            /**\\\\r\\\\n             * Error message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n            /**\\\\r\\\\n             * Error type.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"RSVP_CLOSED\\\\\\\"`: Event registration is closed.\\\\r\\\\n             *  + `\\\\\\\"GUEST_LIMIT_REACHED\\\\\\\"`: The maximum number of guests has already been reached.\\\\r\\\\n             *  + `\\\\\\\"MEMBER_ALREADY_REGISTERED\\\\\\\"`: The current registrant is already registered as a guest.\\\\r\\\\n             *  + `\\\\\\\"WAITING_LIST_UNAVAILABLE\\\\\\\"`: The maximum number of guests has already been reached and\\\\r\\\\n             *    there is no waitlist.\\\\r\\\\n             *  + `\\\\\\\"UNKNOWN_ERROR\\\\\\\"`: Unknown error.\\\\r\\\\n             */\\\\r\\\\n            errorType: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the result of a form validation.\\\\r\\\\n         */\\\\r\\\\n        type ValidationResult = {\\\\r\\\\n            /**\\\\r\\\\n             * Indicates that the RSVP form fields are valid.\\\\r\\\\n             */\\\\r\\\\n            valid: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an error that occurred during validation of an RSVP form's values.\\\\r\\\\n         */\\\\r\\\\n        type ValueValidationError = {\\\\r\\\\n            /**\\\\r\\\\n             * Error message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the input field that failed validation.\\\\r\\\\n             */\\\\r\\\\n            inputId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Error type.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"EMPTY_INPUT\\\\\\\"`: A required field is missing its value.\\\\r\\\\n             *  + `\\\\\\\"INVALID_INPUT_VALUE\\\\\\\"`: The value is not valid for the field type.\\\\r\\\\n             *  + `\\\\\\\"INPUT_TOO_LONG\\\\\\\"`: The value is too long.\\\\r\\\\n             *  + `\\\\\\\"INVALID_OPTION\\\\\\\"`: The value does not match one of the defined options for the field.\\\\r\\\\n             *  + `\\\\\\\"INVALID_STATUS\\\\\\\"`: The status value is not valid.\\\\r\\\\n             *  + `\\\\\\\"INVALID_NUMBER_OF_GUESTS\\\\\\\"`: The number of guests does not match the number defined for the form.\\\\r\\\\n             */\\\\r\\\\n            errorType: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_paid_plans_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired by actions relating to paid plans.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a user purchases a plan.\\\\r\\\\n         */\\\\r\\\\n        onPlanPurchased(event: wix_paid_plans_backend.Events.PlanPurchasedEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a new paid plan order.\\\\r\\\\n         */\\\\r\\\\n        type Order = {\\\\r\\\\n            /**\\\\r\\\\n             * Order ID of the purchase of the plan, auto-generated when an order is created.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the payment for the plan. Can be `PAID`, `REFUNDED`, `FAILED`, `UNPAID`, and `PAYMENT_STATUS_UNDEFINED`.\\\\r\\\\n             */\\\\r\\\\n            paymentStatus: string;\\\\r\\\\n            /**\\\\r\\\\n             * Object containing the price of the plan.\\\\r\\\\n             */\\\\r\\\\n            price: wix_paid_plans_backend.Events.Price;\\\\r\\\\n            /**\\\\r\\\\n             * If plan is cancelled, the reason why. Can be `OWNER_CANCELED`, `PAYMENT_PROVIDER_CANCELED`, `PAYMENT_FAILED`, `UOU_CANCELED`, and `CANCELLATION_REASON_UNDEFINED`.\\\\r\\\\n             */\\\\r\\\\n            cancellationReason: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time from which the plan is valid.\\\\r\\\\n             */\\\\r\\\\n            validFrom: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the plan.\\\\r\\\\n             */\\\\r\\\\n            planName: string;\\\\r\\\\n            /**\\\\r\\\\n             * If the plan is recurring. If true, the price is deducted weekly, monthly, or yearly.\\\\r\\\\n             */\\\\r\\\\n            recurring: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time the order was created.\\\\r\\\\n             */\\\\r\\\\n            dateCreated: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the order. Can be `ACTIVE`, `PENDING`, `CANCELED`, `EXPIRED`, `PENDING_CANCELLATION`, and `ORDER_STATUS_UNDEFINED`.\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * Role assigned after purchasing the plan.\\\\r\\\\n             */\\\\r\\\\n            roleID: string;\\\\r\\\\n            /**\\\\r\\\\n             * Description of the plan.\\\\r\\\\n             */\\\\r\\\\n            planDescription: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID for the visitor who purchased the plan.\\\\r\\\\n             */\\\\r\\\\n            memberId: string;\\\\r\\\\n            /**\\\\r\\\\n             * How the plan was purchased, either `ONLINE` pr `OFFLINE`.\\\\r\\\\n             */\\\\r\\\\n            orderType: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the plan.\\\\r\\\\n             */\\\\r\\\\n            planId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Object containing properties about how long the plan is valid.\\\\r\\\\n             */\\\\r\\\\n            validFor: wix_paid_plans_backend.Events.ValidFor;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the plan for wix Pay. If plan is free, this ID is blank.\\\\r\\\\n             */\\\\r\\\\n            wixPayOrderId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time until which the plan is valid.\\\\r\\\\n             */\\\\r\\\\n            validUntil: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the period for which a plan is valid.\\\\r\\\\n         */\\\\r\\\\n        type Period = {\\\\r\\\\n            /**\\\\r\\\\n             * The number of units until the plan expires.\\\\r\\\\n             */\\\\r\\\\n            amount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Time period for billing the plan, such as `MONTH`.\\\\r\\\\n             */\\\\r\\\\n            unit: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a new paid plan purchase.\\\\r\\\\n         */\\\\r\\\\n        type PlanPurchasedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Object containing the details about the plan's order.\\\\r\\\\n             */\\\\r\\\\n            order: wix_paid_plans_backend.Events.Order;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the price of a purchased plan.\\\\r\\\\n         */\\\\r\\\\n        type Price = {\\\\r\\\\n            /**\\\\r\\\\n             * Payment currency. A three-letter\\\\r\\\\n             *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * The cost of the plan.\\\\r\\\\n             */\\\\r\\\\n            amount: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing how long a plan is valid.\\\\r\\\\n         */\\\\r\\\\n        type ValidFor = {\\\\r\\\\n            /**\\\\r\\\\n             * If true, the plan does not expire.\\\\r\\\\n             */\\\\r\\\\n            forever: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Object containing the period for which the plan is valid.\\\\r\\\\n             */\\\\r\\\\n            period: wix_paid_plans_backend.Events.Period;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_paid_plans {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an order result.\\\\r\\\\n     */\\\\r\\\\n    type OrderResult = {\\\\r\\\\n        /**\\\\r\\\\n         * ID of the order.\\\\r\\\\n         */\\\\r\\\\n        orderId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Wix Pay ID of the order being purchased.\\\\r\\\\n         */\\\\r\\\\n        wixPayOrderId: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a purchase result for a non-free plan.\\\\r\\\\n     */\\\\r\\\\n    type PurchaseResult = {\\\\r\\\\n        /**\\\\r\\\\n         * ID of the order being purchased.\\\\r\\\\n         */\\\\r\\\\n        orderId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Wix Pay ID of the order being purchased. Returned for non-free plans.\\\\r\\\\n         */\\\\r\\\\n        wixPayOrderId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment status in Wix Pay. One of:\\\\r\\\\n         * \\\\r\\\\n         *  + \\\\\\\"`Successful`\\\\\\\": Payment was successfully received.\\\\r\\\\n         *  + \\\\\\\"`Pending`\\\\\\\": Payment is pending payment provider approval.\\\\r\\\\n         *  + \\\\\\\"`Failed`\\\\\\\": Payment has failed.\\\\r\\\\n         *  + \\\\\\\"`Chargeback`\\\\\\\": Payment is chargeback.\\\\r\\\\n         *  + \\\\\\\"`Refunded`\\\\\\\": Payment was fully refunded.\\\\r\\\\n         *  + \\\\\\\"`Offline`\\\\\\\": Payment will be executed offline.\\\\r\\\\n         *  + \\\\\\\"`PartiallyRefunded`\\\\\\\": Payment was partially refunded.\\\\r\\\\n         *  + \\\\\\\"`Cancelled`\\\\\\\": Payment was cancelled and was not processed.\\\\r\\\\n         *  + \\\\\\\"`Undefined`\\\\\\\": Payment status is pending payment provider input.\\\\r\\\\n         */\\\\r\\\\n        wixPayStatus: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a purchase result for a free plan.\\\\r\\\\n     */\\\\r\\\\n    type PurchaseResultFree = {\\\\r\\\\n        /**\\\\r\\\\n         * ID of the order being purchased.\\\\r\\\\n         */\\\\r\\\\n        orderId: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_pay {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment.\\\\r\\\\n     */\\\\r\\\\n    type Payment = {\\\\r\\\\n        /**\\\\r\\\\n         * Payment transaction ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment total amount.\\\\r\\\\n         */\\\\r\\\\n        amount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment currency. A three-letter\\\\r\\\\n         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_pay_backend.PaymentItem[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment item.\\\\r\\\\n     */\\\\r\\\\n    type PaymentItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Payment item name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment item quantity.\\\\r\\\\n         */\\\\r\\\\n        quantity: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment item price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the options of a payment.\\\\r\\\\n     */\\\\r\\\\n    type PaymentOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Absolute URL of a terms and conditions\\\\r\\\\n         *  page. If a link is present, an agreement checkbox will be presented alongside the link.\\\\r\\\\n         */\\\\r\\\\n        termsAndConditionsLink?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether to show a thank you page. Defaults to `true`.\\\\r\\\\n         */\\\\r\\\\n        showThankYouPage?: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information about the user. It will be used to prefill\\\\r\\\\n         *  user info form during payment process.\\\\r\\\\n         * \\\\r\\\\n         *  Deprecation note: Pass user information to [`createPayment( )`](wix-pay-backend.html#createPayment) instead.\\\\r\\\\n         */\\\\r\\\\n        userInfo?: wix_pay.PaymentUserInfo;\\\\r\\\\n        /**\\\\r\\\\n         * Whether to skip the user info page. Defaults to `false`.\\\\r\\\\n         *  The page will be skipped only if user info was passed to [`createPayment()`](wix-pay-backend.html#createPayment) as\\\\r\\\\n         *  a part of the [`PaymentInfo`](wix-pay-backend.html#PaymentInfo) object.\\\\r\\\\n         */\\\\r\\\\n        skipUserInfoPage?: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment result.\\\\r\\\\n     */\\\\r\\\\n    type PaymentResult = {\\\\r\\\\n        /**\\\\r\\\\n         * The payment.\\\\r\\\\n         */\\\\r\\\\n        payment: wix_pay.Payment;\\\\r\\\\n        /**\\\\r\\\\n         * Payment status. One of:\\\\r\\\\n         * \\\\r\\\\n         *  + \\\\\\\"`Successful`\\\\\\\": Payment was successfully received.\\\\r\\\\n         *  + \\\\\\\"`Pending`\\\\\\\": Payment is pending payment provider approval.\\\\r\\\\n         *  + \\\\\\\"`Failed`\\\\\\\": Payment has failed.\\\\r\\\\n         *  + \\\\\\\"`Chargeback`\\\\\\\": Payment is chargeback.\\\\r\\\\n         *  + \\\\\\\"`Refunded`\\\\\\\": Payment was fully refunded.\\\\r\\\\n         *  + \\\\\\\"`Offline`\\\\\\\": Payment will be executed offline.\\\\r\\\\n         *  + \\\\\\\"`PartiallyRefunded`\\\\\\\": Payment was partially refunded.\\\\r\\\\n         *  + \\\\\\\"`Cancelled`\\\\\\\": Payment was cancelled and was not processed.\\\\r\\\\n         *  + \\\\\\\"`Undefined`\\\\\\\": Payment status is pending payment provider input.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the payment transaction.\\\\r\\\\n         */\\\\r\\\\n        transactionId: string;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information about the user.\\\\r\\\\n         */\\\\r\\\\n        userInfo: wix_pay.PaymentUserInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing information about the user.\\\\r\\\\n     */\\\\r\\\\n    type PaymentUserInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * User's first name. Value is `null` if\\\\r\\\\n         *  there is no first name information.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's last name. Value is `null` if\\\\r\\\\n         *  there is no last name information.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's country code. A three-letter\\\\r\\\\n         *  [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) country code. Value\\\\r\\\\n         *  is `null` if there is no country information.\\\\r\\\\n         */\\\\r\\\\n        country: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's phone number. Value is `null` if\\\\r\\\\n         *  there is no phone number information.\\\\r\\\\n         */\\\\r\\\\n        phone: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's email address. Value is `null` if\\\\r\\\\n         *  there is no email address information.\\\\r\\\\n         */\\\\r\\\\n        email: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_search {\\\\r\\\\n    /**\\\\r\\\\n     * Contains functionality for refining a site search.\\\\r\\\\n     */\\\\r\\\\n    interface WixSearchBuilder {\\\\r\\\\n        /**\\\\r\\\\n         * Refines a search builder to only search for documents of the specified document type.\\\\r\\\\n         */\\\\r\\\\n        documentType(type: string): wix_search.WixSearchBuilder;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the documents that match the search.\\\\r\\\\n         */\\\\r\\\\n        find(): Promise<wix_search.WixSearchResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a search builder to search in the specified language.\\\\r\\\\n         */\\\\r\\\\n        language(language: string): wix_search.WixSearchBuilder;\\\\r\\\\n        /**\\\\r\\\\n         * Limits the number of documents the search returns.\\\\r\\\\n         */\\\\r\\\\n        limit(limit: number): wix_search.WixSearchBuilder;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the number of documents to skip before returning search results.\\\\r\\\\n         */\\\\r\\\\n        skip(skip: number): wix_search.WixSearchBuilder;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The results of a site search, containing the retrieved documents.\\\\r\\\\n     */\\\\r\\\\n    interface WixSearchResult {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the index of the current results page number.\\\\r\\\\n         */\\\\r\\\\n        readonly currentPage: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the documents that match the search.\\\\r\\\\n         */\\\\r\\\\n        readonly documents: wix_search.WixSearchResult.Document[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of documents in the current results page.\\\\r\\\\n         */\\\\r\\\\n        readonly length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the search page size.\\\\r\\\\n         */\\\\r\\\\n        readonly pageSize: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of documents that match the search.\\\\r\\\\n         */\\\\r\\\\n        readonly totalCount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of pages the search produced.\\\\r\\\\n         */\\\\r\\\\n        readonly totalPages: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the search has more results.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the search has previous results.\\\\r\\\\n         */\\\\r\\\\n        hasPrev(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the next page of search results.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<wix_search.WixSearchResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the previous page of search results.\\\\r\\\\n         */\\\\r\\\\n        prev(): Promise<wix_search.WixSearchResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace WixSearchResult {\\\\r\\\\n        /**\\\\r\\\\n         * A document returned by a site search.\\\\r\\\\n         */\\\\r\\\\n        type Document = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique document identifier.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Document image in the following format: `wix:image://v1//#originWidth=&originHeight=[&watermark=]`\\\\r\\\\n             */\\\\r\\\\n            image: string;\\\\r\\\\n            /**\\\\r\\\\n             * Document type. \\\\r\\\\n             *  One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `Site/Pages`\\\\r\\\\n             *  + `Blog/Posts`\\\\r\\\\n             *  + `Bookings/Services`\\\\r\\\\n             *  + `Forum/Posts`\\\\r\\\\n             *  + `Stores/Products`\\\\r\\\\n             */\\\\r\\\\n            documentType: string;\\\\r\\\\n            /**\\\\r\\\\n             * The relative page URL. For regular site pages, the URL defined in SEO settings. Note that the `url` for the home page is an empty string. For Wix app pages, the URL stored in the database collection.\\\\r\\\\n             */\\\\r\\\\n            url: string;\\\\r\\\\n            /**\\\\r\\\\n             * For regular site pages, all text on the page. For Wix app pages, the description or content stored in the database collection.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * For regular site pages, the SEO page title. For Wix app pages, the title or name stored in the database collection.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_seo {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a link tag.\\\\r\\\\n     */\\\\r\\\\n    type Link = {\\\\r\\\\n        /**\\\\r\\\\n         * The relationship of the linked resource to the current page.\\\\r\\\\n         */\\\\r\\\\n        rel?: string;\\\\r\\\\n        /**\\\\r\\\\n         * The URL of the linked resource.\\\\r\\\\n         */\\\\r\\\\n        href?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a meta tag.\\\\r\\\\n     */\\\\r\\\\n    type MetaTag = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the meta tag. Either `name` or `property` are required.\\\\r\\\\n         */\\\\r\\\\n        name?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Name of the meta tag property. Either `property` or `name` are required.\\\\r\\\\n         */\\\\r\\\\n        property?: string;\\\\r\\\\n        /**\\\\r\\\\n         * HTTP header that corresponds to the `content`.\\\\r\\\\n         */\\\\r\\\\n        \\\\\\\"http-equiv\\\\\\\"?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Meta tag value. For `og:image` meta tags, the `content` can\\\\r\\\\n         *  be an external image URL or a Media Manager image URL as described [here]($w.Image.html#src).\\\\r\\\\n         */\\\\r\\\\n        content: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_stores {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a media item.\\\\r\\\\n     */\\\\r\\\\n    type MediaItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Media item ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media items type. Can be \\\\\\\"image\\\\\\\" or \\\\\\\"video.\\\\\\\"\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item URL.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Thumbnail URL for videos only.\\\\r\\\\n         */\\\\r\\\\n        thumbnail?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing paging options.\\\\r\\\\n     */\\\\r\\\\n    type PagingOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Maximum number of variants to retrieve. Defaults to 300.\\\\r\\\\n         */\\\\r\\\\n        limit: number;\\\\r\\\\n        /**\\\\r\\\\n         * Number of variants to skip before the retrieved variants. Defaults to 0.\\\\r\\\\n         */\\\\r\\\\n        skip: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an additional info section for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductAdditionalInfoSection = {\\\\r\\\\n        /**\\\\r\\\\n         * Section title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Section description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variant's option choices.\\\\r\\\\n     */\\\\r\\\\n    type ProductChoices = {\\\\r\\\\n        /**\\\\r\\\\n         * Value of the choice. This key name is\\\\r\\\\n         *  dependent on the product option. For example, if a product\\\\r\\\\n         *  has a size option, this key value will be something like \\\\\\\"Size\\\\\\\" and its value\\\\r\\\\n         *  will be something like \\\\\\\"Large\\\\\\\".\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a custom text field for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductCustomTextFields = {\\\\r\\\\n        /**\\\\r\\\\n         * Product customization field title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Maximum length of product customization field in characters.\\\\r\\\\n         */\\\\r\\\\n        maxLength: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product discount.\\\\r\\\\n     */\\\\r\\\\n    type ProductDiscount = {\\\\r\\\\n        /**\\\\r\\\\n         * Discount type.\\\\r\\\\n         * \\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"AMOUNT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"PERCENT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"NONE\\\\\\\"`\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discount value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an option for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOption = {\\\\r\\\\n        /**\\\\r\\\\n         * Option type. Either `\\\\\\\"color\\\\\\\"` or `\\\\\\\"drop_down\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        optionType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores.ProductOptionsChoice[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing all the available options for a store product, such as \\\\\\\"Size\\\\\\\" or \\\\\\\"Color\\\\\\\".\\\\r\\\\n     */\\\\r\\\\n    type ProductOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the option. This key name\\\\r\\\\n         *  is dependent on the options added to the product. For example, if a product has a size \\\\r\\\\n         *  option, this key will be something like `\\\\\\\"Size\\\\\\\"`.\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: wix_stores.ProductOption;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by the `getProductOptionsAvailability()` function representing the availability of a product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsAvailability = {\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product with the specified option choices is available for purchase.\\\\r\\\\n         */\\\\r\\\\n        availableForPurchase: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing all the available options for a store product.\\\\r\\\\n         */\\\\r\\\\n        productOptions: wix_stores.ProductOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Main product media item (image or video) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of product media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores.MediaItem;\\\\r\\\\n        /**\\\\r\\\\n         * The variant of the product selected using the specified option choices if there is one.\\\\r\\\\n         */\\\\r\\\\n        selectedVariant: wix_stores.ProductOptionsAvailabilitySelectedVariant;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the product variant selected using the `getProductOptionsAvailability()` function.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsAvailabilitySelectedVariant = {\\\\r\\\\n        /**\\\\r\\\\n         * Product variant stock keeping unit value.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant price. The variant price must be greater than its discount.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product variant is shown in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product variant is in stock.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an options choice for a store product for a store product, such as choice \\\\\\\"Small\\\\\\\" for the option \\\\\\\"Size.\\\\\\\"\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsChoice = {\\\\r\\\\n        /**\\\\r\\\\n         * Choice value.\\\\r\\\\n         */\\\\r\\\\n        value: number;\\\\r\\\\n        /**\\\\r\\\\n         * Choice description.\\\\r\\\\n         */\\\\r\\\\n        description: number;\\\\r\\\\n        /**\\\\r\\\\n         * Choice media.\\\\r\\\\n         */\\\\r\\\\n        media: wix_stores.ProductOptionsChoiceMedia;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product with this choice is in stock.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product with this option is visible.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the choice media.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsChoiceMedia = {\\\\r\\\\n        /**\\\\r\\\\n         * Main choice media item (image or video thumbnail) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of choice media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores.MediaItem;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a ribbon for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductRibbon = {\\\\r\\\\n        /**\\\\r\\\\n         * Ribbon text.\\\\r\\\\n         */\\\\r\\\\n        text: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variant information, used when creating or updating variants.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Formatted variant price.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant stock keeping unit number.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the variant is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variant item.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique product variant ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant information.\\\\r\\\\n         */\\\\r\\\\n        variant: wix_stores.ProductVariantInfo[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the selection of specific variants of a product. Use only one of\\\\r\\\\n     *  `choices` or `variantIds`.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * The choices the retrieved variants will have.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * IDs of variants to retrieve.\\\\r\\\\n         */\\\\r\\\\n        variantIds: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Paging options.\\\\r\\\\n         */\\\\r\\\\n        paging: wix_stores.PagingOptions;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variants.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariants = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_stores.ProductVariantItem[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object containing variant information to use when creating or updating variants.\\\\r\\\\n     */\\\\r\\\\n    type VariantInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price. The variant price must be greater than its discount. If the variant price has been updated, changes to the product price do not affect the variant price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant stock keeping unit value.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the variant is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variant item.\\\\r\\\\n     */\\\\r\\\\n    type VariantItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique variant ID.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n        /**\\\\r\\\\n         * The choices of the retrieved variant.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * Variant information. *\\\\r\\\\n         */\\\\r\\\\n        variant: wix_stores.VariantInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing product variants.\\\\r\\\\n     */\\\\r\\\\n    type VariantList = {\\\\r\\\\n        /**\\\\r\\\\n         * List of variant items that match the specified choices or variant IDs.\\\\r\\\\n         */\\\\r\\\\n        items: wix_stores.VariantItem[];\\\\r\\\\n        /**\\\\r\\\\n         * Number of items in the current results page.\\\\r\\\\n         */\\\\r\\\\n        length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Total number of variants with the specified choices.\\\\r\\\\n         */\\\\r\\\\n        totalCount: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_users {\\\\r\\\\n    /**\\\\r\\\\n     * A site user.\\\\r\\\\n     */\\\\r\\\\n    interface User {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the user is logged in or not.\\\\r\\\\n         */\\\\r\\\\n        readonly loggedIn: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Deprecated: Gets the user's role.\\\\r\\\\n         */\\\\r\\\\n        readonly role: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the email of the current user.\\\\r\\\\n         */\\\\r\\\\n        getEmail(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's member pricing plan.\\\\r\\\\n         */\\\\r\\\\n        getPricingPlans(): Promise<wix_users.User.PricingPlan[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's member roles.\\\\r\\\\n         */\\\\r\\\\n        getRoles(): Promise<wix_users.User.UserRole[]>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace User {\\\\r\\\\n        /**\\\\r\\\\n         * An object returned by the `getPricingPlans()` function representing a user's pricing plans.\\\\r\\\\n         */\\\\r\\\\n        type PricingPlan = {\\\\r\\\\n            /**\\\\r\\\\n             * The pricing plan's name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * The pricing plan's start date.\\\\r\\\\n             */\\\\r\\\\n            startDate?: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The pricing plan's expiry date.\\\\r\\\\n             */\\\\r\\\\n            expiryDate?: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object returned by the `getRoles()` function representing a user's roles.\\\\r\\\\n         */\\\\r\\\\n        type UserRole = {\\\\r\\\\n            /**\\\\r\\\\n             * Role name as defined in the site's dashboard or one of \\\\\\\"Admin\\\\\\\" or \\\\\\\"Member\\\\\\\".\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Role description, if defined in the site's dashboard.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used by the `promptLogin()` function to determine how the login dialog box appears.\\\\r\\\\n     */\\\\r\\\\n    type LoginOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * What type of login experience to present: `\\\\\\\"login\\\\\\\"` or `\\\\\\\"signup\\\\\\\"`. Defaults to the option chosen in the Member Signup Settings panel in the Editor.\\\\r\\\\n         */\\\\r\\\\n        mode?: string;\\\\r\\\\n        /**\\\\r\\\\n         * The two letter language code of the language to show the login form in. Defaults to `\\\\\\\"en\\\\\\\"` if the property doesn't exist or the given language is not one of the languages found in the Permissions tab of the Page Settings panel in the Editor.\\\\r\\\\n         */\\\\r\\\\n        lang?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site registration.\\\\r\\\\n     */\\\\r\\\\n    type RegistrationOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Contact information.\\\\r\\\\n         */\\\\r\\\\n        contactInfo: wix_crm.ContactInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the results of a site registration.\\\\r\\\\n     */\\\\r\\\\n    type RegistrationResult = {\\\\r\\\\n        /**\\\\r\\\\n         * Registration status. Either \\\\\\\"Pending\\\\\\\" or \\\\\\\"Active\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * A token for approving the user as\\\\r\\\\n         *  a site member using the [approveByToken()](wix-users-backend.html#approveByToken)\\\\r\\\\n         *  function. The token is safe to pass via email or from client-side code to\\\\r\\\\n         *  backend code. The token is only available when `status` is \\\\\\\"Pending\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        approvalToken?: string;\\\\r\\\\n        /**\\\\r\\\\n         * The user that has been registered.\\\\r\\\\n         */\\\\r\\\\n        user: wix_users.User;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when sending a Triggered Email.\\\\r\\\\n     */\\\\r\\\\n    type TriggeredEmailOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * An object with `key:value` pairs where each\\\\r\\\\n         *  `key` is a variable in the email template created in Triggered Emails and its\\\\r\\\\n         *  corresponding `value` is the value to insert into the template in place of\\\\r\\\\n         *  variable. The values must be strings.\\\\r\\\\n         */\\\\r\\\\n        variables: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function that runs when a user has logged in.\\\\r\\\\n     */\\\\r\\\\n    type LoginHandler = (user: wix_users.User)=>void;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/types/common/void$w$w.d.ts\\\",\\\"content\\\":\\\"declare namespace $w {\\\\n    type $w = () => void;\\\\n}\\\"},{\\\"path\\\":\\\"/types/backend/index.d.ts\\\",\\\"content\\\":\\\"/// <reference path=\\\\\\\"../common/declaration.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"../common/void$w$w.d.ts\\\\\\\" />\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/globals.d.ts\\\",\\\"content\\\":\\\"// This needs to be global to avoid TS2403 in case lib.dom.d.ts is present in the same build\\\\ninterface Console {\\\\n    Console: NodeJS.ConsoleConstructor;\\\\n    /**\\\\n     * A simple assertion test that verifies whether `value` is truthy.\\\\n     * If it is not, an `AssertionError` is thrown.\\\\n     * If provided, the error `message` is formatted using `util.format()` and used as the error message.\\\\n     */\\\\n    assert(value: any, message?: string, ...optionalParams: any[]): void;\\\\n    /**\\\\n     * When `stdout` is a TTY, calling `console.clear()` will attempt to clear the TTY.\\\\n     * When `stdout` is not a TTY, this method does nothing.\\\\n     */\\\\n    clear(): void;\\\\n    /**\\\\n     * Maintains an internal counter specific to `label` and outputs to `stdout` the number of times `console.count()` has been called with the given `label`.\\\\n     */\\\\n    count(label?: string): void;\\\\n    /**\\\\n     * Resets the internal counter specific to `label`.\\\\n     */\\\\n    countReset(label?: string): void;\\\\n    /**\\\\n     * The `console.debug()` function is an alias for {@link console.log()}.\\\\n     */\\\\n    debug(message?: any, ...optionalParams: any[]): void;\\\\n    /**\\\\n     * Uses {@link util.inspect()} on `obj` and prints the resulting string to `stdout`.\\\\n     * This function bypasses any custom `inspect()` function defined on `obj`.\\\\n     */\\\\n    dir(obj: any, options?: NodeJS.InspectOptions): void;\\\\n    /**\\\\n     * This method calls {@link console.log()} passing it the arguments received. Please note that this method does not produce any XML formatting\\\\n     */\\\\n    dirxml(...data: any[]): void;\\\\n    /**\\\\n     * Prints to `stderr` with newline.\\\\n     */\\\\n    error(message?: any, ...optionalParams: any[]): void;\\\\n    /**\\\\n     * Increases indentation of subsequent lines by two spaces.\\\\n     * If one or more `label`s are provided, those are printed first without the additional indentation.\\\\n     */\\\\n    group(...label: any[]): void;\\\\n    /**\\\\n     * The `console.groupCollapsed()` function is an alias for {@link console.group()}.\\\\n     */\\\\n    groupCollapsed(...label: any[]): void;\\\\n    /**\\\\n     * Decreases indentation of subsequent lines by two spaces.\\\\n     */\\\\n    groupEnd(): void;\\\\n    /**\\\\n     * The {@link console.info()} function is an alias for {@link console.log()}.\\\\n     */\\\\n    info(message?: any, ...optionalParams: any[]): void;\\\\n    /**\\\\n     * Prints to `stdout` with newline.\\\\n     */\\\\n    log(message?: any, ...optionalParams: any[]): void;\\\\n    /**\\\\n     * This method does not display anything unless used in the inspector.\\\\n     *  Prints to `stdout` the array `array` formatted as a table.\\\\n     */\\\\n    table(tabularData: any, properties?: string[]): void;\\\\n    /**\\\\n     * Starts a timer that can be used to compute the duration of an operation. Timers are identified by a unique `label`.\\\\n     */\\\\n    time(label?: string): void;\\\\n    /**\\\\n     * Stops a timer that was previously started by calling {@link console.time()} and prints the result to `stdout`.\\\\n     */\\\\n    timeEnd(label?: string): void;\\\\n    /**\\\\n     * For a timer that was previously started by calling {@link console.time()}, prints the elapsed time and other `data` arguments to `stdout`.\\\\n     */\\\\n    timeLog(label?: string, ...data: any[]): void;\\\\n    /**\\\\n     * Prints to `stderr` the string 'Trace :', followed by the {@link util.format()} formatted message and stack trace to the current position in the code.\\\\n     */\\\\n    trace(message?: any, ...optionalParams: any[]): void;\\\\n    /**\\\\n     * The {@link console.warn()} function is an alias for {@link console.error()}.\\\\n     */\\\\n    warn(message?: any, ...optionalParams: any[]): void;\\\\n\\\\n    // --- Inspector mode only ---\\\\n    /**\\\\n     * This method does not display anything unless used in the inspector.\\\\n     *  The console.markTimeline() method is the deprecated form of console.timeStamp().\\\\n     *\\\\n     * @deprecated Use console.timeStamp() instead.\\\\n     */\\\\n    markTimeline(label?: string): void;\\\\n    /**\\\\n     * This method does not display anything unless used in the inspector.\\\\n     *  Starts a JavaScript CPU profile with an optional label.\\\\n     */\\\\n    profile(label?: string): void;\\\\n    /**\\\\n     * This method does not display anything unless used in the inspector.\\\\n     *  Stops the current JavaScript CPU profiling session if one has been started and prints the report to the Profiles panel of the inspector.\\\\n     */\\\\n    profileEnd(label?: string): void;\\\\n    /**\\\\n     * This method does not display anything unless used in the inspector.\\\\n     *  Adds an event with the label `label` to the Timeline panel of the inspector.\\\\n     */\\\\n    timeStamp(label?: string): void;\\\\n    /**\\\\n     * This method does not display anything unless used in the inspector.\\\\n     *  The console.timeline() method is the deprecated form of console.time().\\\\n     *\\\\n     * @deprecated Use console.time() instead.\\\\n     */\\\\n    timeline(label?: string): void;\\\\n    /**\\\\n     * This method does not display anything unless used in the inspector.\\\\n     *  The console.timelineEnd() method is the deprecated form of console.timeEnd().\\\\n     *\\\\n     * @deprecated Use console.timeEnd() instead.\\\\n     */\\\\n    timelineEnd(label?: string): void;\\\\n}\\\\n\\\\ninterface Error {\\\\n    stack?: string;\\\\n}\\\\n\\\\n// Declare \\\\\\\"static\\\\\\\" methods in Error\\\\ninterface ErrorConstructor {\\\\n    /** Create .stack property on a target object */\\\\n    captureStackTrace(targetObject: Object, constructorOpt?: Function): void;\\\\n\\\\n    /**\\\\n     * Optional override for formatting stack traces\\\\n     *\\\\n     * @see https://github.com/v8/v8/wiki/Stack%20Trace%20API#customizing-stack-traces\\\\n     */\\\\n    prepareStackTrace?: (err: Error, stackTraces: NodeJS.CallSite[]) => any;\\\\n\\\\n    stackTraceLimit: number;\\\\n}\\\\n\\\\ninterface SymbolConstructor {\\\\n    readonly observable: symbol;\\\\n}\\\\n\\\\n// Node.js ESNEXT support\\\\ninterface String {\\\\n    /** Removes whitespace from the left end of a string. */\\\\n    trimLeft(): string;\\\\n    /** Removes whitespace from the right end of a string. */\\\\n    trimRight(): string;\\\\n}\\\\n\\\\ninterface ImportMeta {\\\\n    url: string;\\\\n}\\\\n\\\\n/*-----------------------------------------------*\\\\n *                                               *\\\\n *                   GLOBAL                      *\\\\n *                                               *\\\\n ------------------------------------------------*/\\\\ndeclare var process: NodeJS.Process;\\\\ndeclare var global: NodeJS.Global;\\\\ndeclare var console: Console;\\\\n\\\\ndeclare var __filename: string;\\\\ndeclare var __dirname: string;\\\\n\\\\ndeclare function setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timeout;\\\\ndeclare namespace setTimeout {\\\\n    function __promisify__(ms: number): Promise<void>;\\\\n    function __promisify__<T>(ms: number, value: T): Promise<T>;\\\\n}\\\\ndeclare function clearTimeout(timeoutId: NodeJS.Timeout): void;\\\\ndeclare function setInterval(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timeout;\\\\ndeclare function clearInterval(intervalId: NodeJS.Timeout): void;\\\\ndeclare function setImmediate(callback: (...args: any[]) => void, ...args: any[]): NodeJS.Immediate;\\\\ndeclare namespace setImmediate {\\\\n    function __promisify__(): Promise<void>;\\\\n    function __promisify__<T>(value: T): Promise<T>;\\\\n}\\\\ndeclare function clearImmediate(immediateId: NodeJS.Immediate): void;\\\\n\\\\n/**\\\\n * @experimental\\\\n */\\\\ndeclare function queueMicrotask(callback: () => void): void;\\\\n\\\\n// TODO: change to `type NodeRequireFunction = (id: string) => any;` in next mayor version.\\\\ninterface NodeRequireFunction {\\\\n    /* tslint:disable-next-line:callable-types */\\\\n    (id: string): any;\\\\n}\\\\n\\\\ninterface NodeRequire extends NodeRequireFunction {\\\\n    resolve: RequireResolve;\\\\n    cache: any;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    extensions: NodeExtensions;\\\\n    main: NodeModule | undefined;\\\\n}\\\\n\\\\ninterface RequireResolve {\\\\n    (id: string, options?: { paths?: string[]; }): string;\\\\n    paths(request: string): string[] | null;\\\\n}\\\\n\\\\ninterface NodeExtensions {\\\\n    '.js': (m: NodeModule, filename: string) => any;\\\\n    '.json': (m: NodeModule, filename: string) => any;\\\\n    '.node': (m: NodeModule, filename: string) => any;\\\\n    [ext: string]: (m: NodeModule, filename: string) => any;\\\\n}\\\\n\\\\ndeclare var require: NodeRequire;\\\\n\\\\ninterface NodeModule {\\\\n    exports: any;\\\\n    require: NodeRequireFunction;\\\\n    id: string;\\\\n    filename: string;\\\\n    loaded: boolean;\\\\n    parent: NodeModule | null;\\\\n    children: NodeModule[];\\\\n    paths: string[];\\\\n}\\\\n\\\\ndeclare var module: NodeModule;\\\\n\\\\n// Same as module.exports\\\\ndeclare var exports: any;\\\\n\\\\n// Buffer class\\\\ntype BufferEncoding = \\\\\\\"ascii\\\\\\\" | \\\\\\\"utf8\\\\\\\" | \\\\\\\"utf-8\\\\\\\" | \\\\\\\"utf16le\\\\\\\" | \\\\\\\"ucs2\\\\\\\" | \\\\\\\"ucs-2\\\\\\\" | \\\\\\\"base64\\\\\\\" | \\\\\\\"latin1\\\\\\\" | \\\\\\\"binary\\\\\\\" | \\\\\\\"hex\\\\\\\";\\\\n\\\\ninterface Buffer {\\\\n    constructor: typeof Buffer;\\\\n}\\\\n\\\\n/**\\\\n * Raw data is stored in instances of the Buffer class.\\\\n * A Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized.\\\\n * Valid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'\\\\n */\\\\ndeclare class Buffer extends Uint8Array {\\\\n    /**\\\\n     * Allocates a new buffer containing the given {str}.\\\\n     *\\\\n     * @param str String to store in buffer.\\\\n     * @param encoding encoding to use, optional.  Default is 'utf8'\\\\n     * @deprecated since v10.0.0 - Use `Buffer.from(string[, encoding])` instead.\\\\n     */\\\\n    constructor(str: string, encoding?: BufferEncoding);\\\\n    /**\\\\n     * Allocates a new buffer of {size} octets.\\\\n     *\\\\n     * @param size count of octets to allocate.\\\\n     * @deprecated since v10.0.0 - Use `Buffer.alloc()` instead (also see `Buffer.allocUnsafe()`).\\\\n     */\\\\n    constructor(size: number);\\\\n    /**\\\\n     * Allocates a new buffer containing the given {array} of octets.\\\\n     *\\\\n     * @param array The octets to store.\\\\n     * @deprecated since v10.0.0 - Use `Buffer.from(array)` instead.\\\\n     */\\\\n    constructor(array: Uint8Array);\\\\n    /**\\\\n     * Produces a Buffer backed by the same allocated memory as\\\\n     * the given {ArrayBuffer}/{SharedArrayBuffer}.\\\\n     *\\\\n     *\\\\n     * @param arrayBuffer The ArrayBuffer with which to share memory.\\\\n     * @deprecated since v10.0.0 - Use `Buffer.from(arrayBuffer[, byteOffset[, length]])` instead.\\\\n     */\\\\n    constructor(arrayBuffer: ArrayBuffer | SharedArrayBuffer);\\\\n    /**\\\\n     * Allocates a new buffer containing the given {array} of octets.\\\\n     *\\\\n     * @param array The octets to store.\\\\n     * @deprecated since v10.0.0 - Use `Buffer.from(array)` instead.\\\\n     */\\\\n    constructor(array: any[]);\\\\n    /**\\\\n     * Copies the passed {buffer} data onto a new {Buffer} instance.\\\\n     *\\\\n     * @param buffer The buffer to copy.\\\\n     * @deprecated since v10.0.0 - Use `Buffer.from(buffer)` instead.\\\\n     */\\\\n    constructor(buffer: Buffer);\\\\n    /**\\\\n     * When passed a reference to the .buffer property of a TypedArray instance,\\\\n     * the newly created Buffer will share the same allocated memory as the TypedArray.\\\\n     * The optional {byteOffset} and {length} arguments specify a memory range\\\\n     * within the {arrayBuffer} that will be shared by the Buffer.\\\\n     *\\\\n     * @param arrayBuffer The .buffer property of any TypedArray or a new ArrayBuffer()\\\\n     */\\\\n    static from(arrayBuffer: ArrayBuffer | SharedArrayBuffer, byteOffset?: number, length?: number): Buffer;\\\\n    /**\\\\n     * Creates a new Buffer using the passed {data}\\\\n     * @param data data to create a new Buffer\\\\n     */\\\\n    static from(data: number[]): Buffer;\\\\n    static from(data: Uint8Array): Buffer;\\\\n    /**\\\\n     * Creates a new Buffer containing the given JavaScript string {str}.\\\\n     * If provided, the {encoding} parameter identifies the character encoding.\\\\n     * If not provided, {encoding} defaults to 'utf8'.\\\\n     */\\\\n    static from(str: string, encoding?: BufferEncoding): Buffer;\\\\n    /**\\\\n     * Creates a new Buffer using the passed {data}\\\\n     * @param values to create a new Buffer\\\\n     */\\\\n    static of(...items: number[]): Buffer;\\\\n    /**\\\\n     * Returns true if {obj} is a Buffer\\\\n     *\\\\n     * @param obj object to test.\\\\n     */\\\\n    static isBuffer(obj: any): obj is Buffer;\\\\n    /**\\\\n     * Returns true if {encoding} is a valid encoding argument.\\\\n     * Valid string encodings in Node 0.12: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'\\\\n     *\\\\n     * @param encoding string to test.\\\\n     */\\\\n    static isEncoding(encoding: string): encoding is BufferEncoding;\\\\n    /**\\\\n     * Gives the actual byte length of a string. encoding defaults to 'utf8'.\\\\n     * This is not the same as String.prototype.length since that returns the number of characters in a string.\\\\n     *\\\\n     * @param string string to test.\\\\n     * @param encoding encoding used to evaluate (defaults to 'utf8')\\\\n     */\\\\n    static byteLength(\\\\n        string: string | NodeJS.TypedArray | DataView | ArrayBuffer | SharedArrayBuffer,\\\\n        encoding?: BufferEncoding\\\\n    ): number;\\\\n    /**\\\\n     * Returns a buffer which is the result of concatenating all the buffers in the list together.\\\\n     *\\\\n     * If the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.\\\\n     * If the list has exactly one item, then the first item of the list is returned.\\\\n     * If the list has more than one item, then a new Buffer is created.\\\\n     *\\\\n     * @param list An array of Buffer objects to concatenate\\\\n     * @param totalLength Total length of the buffers when concatenated.\\\\n     *   If totalLength is not provided, it is read from the buffers in the list. However, this adds an additional loop to the function, so it is faster to provide the length explicitly.\\\\n     */\\\\n    static concat(list: Uint8Array[], totalLength?: number): Buffer;\\\\n    /**\\\\n     * The same as buf1.compare(buf2).\\\\n     */\\\\n    static compare(buf1: Uint8Array, buf2: Uint8Array): number;\\\\n    /**\\\\n     * Allocates a new buffer of {size} octets.\\\\n     *\\\\n     * @param size count of octets to allocate.\\\\n     * @param fill if specified, buffer will be initialized by calling buf.fill(fill).\\\\n     *    If parameter is omitted, buffer will be filled with zeros.\\\\n     * @param encoding encoding used for call to buf.fill while initalizing\\\\n     */\\\\n    static alloc(size: number, fill?: string | Buffer | number, encoding?: BufferEncoding): Buffer;\\\\n    /**\\\\n     * Allocates a new buffer of {size} octets, leaving memory not initialized, so the contents\\\\n     * of the newly created Buffer are unknown and may contain sensitive data.\\\\n     *\\\\n     * @param size count of octets to allocate\\\\n     */\\\\n    static allocUnsafe(size: number): Buffer;\\\\n    /**\\\\n     * Allocates a new non-pooled buffer of {size} octets, leaving memory not initialized, so the contents\\\\n     * of the newly created Buffer are unknown and may contain sensitive data.\\\\n     *\\\\n     * @param size count of octets to allocate\\\\n     */\\\\n    static allocUnsafeSlow(size: number): Buffer;\\\\n    /**\\\\n     * This is the number of bytes used to determine the size of pre-allocated, internal Buffer instances used for pooling. This value may be modified.\\\\n     */\\\\n    static poolSize: number;\\\\n\\\\n    write(string: string, encoding?: BufferEncoding): number;\\\\n    write(string: string, offset: number, encoding?: BufferEncoding): number;\\\\n    write(string: string, offset: number, length: number, encoding?: BufferEncoding): number;\\\\n    toString(encoding?: string, start?: number, end?: number): string;\\\\n    toJSON(): { type: 'Buffer'; data: number[] };\\\\n    equals(otherBuffer: Uint8Array): boolean;\\\\n    compare(\\\\n        otherBuffer: Uint8Array,\\\\n        targetStart?: number,\\\\n        targetEnd?: number,\\\\n        sourceStart?: number,\\\\n        sourceEnd?: number\\\\n    ): number;\\\\n    copy(targetBuffer: Uint8Array, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;\\\\n    /**\\\\n     * Returns a new `Buffer` that references **the same memory as the original**, but offset and cropped by the start and end indices.\\\\n     *\\\\n     * This method is incompatible with `Uint8Array#slice()`, which returns a copy of the original memory.\\\\n     *\\\\n     * @param begin Where the new `Buffer` will start. Default: `0`.\\\\n     * @param end Where the new `Buffer` will end (not inclusive). Default: `buf.length`.\\\\n     */\\\\n    slice(begin?: number, end?: number): Buffer;\\\\n    /**\\\\n     * Returns a new `Buffer` that references **the same memory as the original**, but offset and cropped by the start and end indices.\\\\n     *\\\\n     * This method is compatible with `Uint8Array#subarray()`.\\\\n     *\\\\n     * @param begin Where the new `Buffer` will start. Default: `0`.\\\\n     * @param end Where the new `Buffer` will end (not inclusive). Default: `buf.length`.\\\\n     */\\\\n    subarray(begin?: number, end?: number): Buffer;\\\\n    writeUIntLE(value: number, offset: number, byteLength: number): number;\\\\n    writeUIntBE(value: number, offset: number, byteLength: number): number;\\\\n    writeIntLE(value: number, offset: number, byteLength: number): number;\\\\n    writeIntBE(value: number, offset: number, byteLength: number): number;\\\\n    readUIntLE(offset: number, byteLength: number): number;\\\\n    readUIntBE(offset: number, byteLength: number): number;\\\\n    readIntLE(offset: number, byteLength: number): number;\\\\n    readIntBE(offset: number, byteLength: number): number;\\\\n    readUInt8(offset: number): number;\\\\n    readUInt16LE(offset: number): number;\\\\n    readUInt16BE(offset: number): number;\\\\n    readUInt32LE(offset: number): number;\\\\n    readUInt32BE(offset: number): number;\\\\n    readInt8(offset: number): number;\\\\n    readInt16LE(offset: number): number;\\\\n    readInt16BE(offset: number): number;\\\\n    readInt32LE(offset: number): number;\\\\n    readInt32BE(offset: number): number;\\\\n    readFloatLE(offset: number): number;\\\\n    readFloatBE(offset: number): number;\\\\n    readDoubleLE(offset: number): number;\\\\n    readDoubleBE(offset: number): number;\\\\n    reverse(): this;\\\\n    swap16(): Buffer;\\\\n    swap32(): Buffer;\\\\n    swap64(): Buffer;\\\\n    writeUInt8(value: number, offset: number): number;\\\\n    writeUInt16LE(value: number, offset: number): number;\\\\n    writeUInt16BE(value: number, offset: number): number;\\\\n    writeUInt32LE(value: number, offset: number): number;\\\\n    writeUInt32BE(value: number, offset: number): number;\\\\n    writeInt8(value: number, offset: number): number;\\\\n    writeInt16LE(value: number, offset: number): number;\\\\n    writeInt16BE(value: number, offset: number): number;\\\\n    writeInt32LE(value: number, offset: number): number;\\\\n    writeInt32BE(value: number, offset: number): number;\\\\n    writeFloatLE(value: number, offset: number): number;\\\\n    writeFloatBE(value: number, offset: number): number;\\\\n    writeDoubleLE(value: number, offset: number): number;\\\\n    writeDoubleBE(value: number, offset: number): number;\\\\n\\\\n    fill(value: string | Uint8Array | number, offset?: number, end?: number, encoding?: BufferEncoding): this;\\\\n\\\\n    indexOf(value: string | number | Uint8Array, byteOffset?: number, encoding?: BufferEncoding): number;\\\\n    lastIndexOf(value: string | number | Uint8Array, byteOffset?: number, encoding?: BufferEncoding): number;\\\\n    entries(): IterableIterator<[number, number]>;\\\\n    includes(value: string | number | Buffer, byteOffset?: number, encoding?: BufferEncoding): boolean;\\\\n    keys(): IterableIterator<number>;\\\\n    values(): IterableIterator<number>;\\\\n}\\\\n\\\\n/*----------------------------------------------*\\\\n*                                               *\\\\n*               GLOBAL INTERFACES               *\\\\n*                                               *\\\\n*-----------------------------------------------*/\\\\ndeclare namespace NodeJS {\\\\n    interface InspectOptions {\\\\n        /**\\\\n         * If set to `true`, getters are going to be\\\\n         * inspected as well. If set to `'get'` only getters without setter are going\\\\n         * to be inspected. If set to `'set'` only getters having a corresponding\\\\n         * setter are going to be inspected. This might cause side effects depending on\\\\n         * the getter function.\\\\n         * @default `false`\\\\n         */\\\\n        getters?: 'get' | 'set' | boolean;\\\\n        showHidden?: boolean;\\\\n        /**\\\\n         * @default 2\\\\n         */\\\\n        depth?: number | null;\\\\n        colors?: boolean;\\\\n        customInspect?: boolean;\\\\n        showProxy?: boolean;\\\\n        maxArrayLength?: number | null;\\\\n        breakLength?: number;\\\\n        /**\\\\n         * Setting this to `false` causes each object key\\\\n         * to be displayed on a new line. It will also add new lines to text that is\\\\n         * longer than `breakLength`. If set to a number, the most `n` inner elements\\\\n         * are united on a single line as long as all properties fit into\\\\n         * `breakLength`. Short array elements are also grouped together. Note that no\\\\n         * text will be reduced below 16 characters, no matter the `breakLength` size.\\\\n         * For more information, see the example below.\\\\n         * @default `true`\\\\n         */\\\\n        compact?: boolean | number;\\\\n        sorted?: boolean | ((a: string, b: string) => number);\\\\n    }\\\\n\\\\n    interface ConsoleConstructorOptions {\\\\n        stdout: WritableStream;\\\\n        stderr?: WritableStream;\\\\n        ignoreErrors?: boolean;\\\\n        colorMode?: boolean | 'auto';\\\\n        inspectOptions?: InspectOptions;\\\\n    }\\\\n\\\\n    interface ConsoleConstructor {\\\\n        prototype: Console;\\\\n        new(stdout: WritableStream, stderr?: WritableStream, ignoreErrors?: boolean): Console;\\\\n        new(options: ConsoleConstructorOptions): Console;\\\\n    }\\\\n\\\\n    interface CallSite {\\\\n        /**\\\\n         * Value of \\\\\\\"this\\\\\\\"\\\\n         */\\\\n        getThis(): any;\\\\n\\\\n        /**\\\\n         * Type of \\\\\\\"this\\\\\\\" as a string.\\\\n         * This is the name of the function stored in the constructor field of\\\\n         * \\\\\\\"this\\\\\\\", if available.  Otherwise the object's [[Class]] internal\\\\n         * property.\\\\n         */\\\\n        getTypeName(): string | null;\\\\n\\\\n        /**\\\\n         * Current function\\\\n         */\\\\n        getFunction(): Function | undefined;\\\\n\\\\n        /**\\\\n         * Name of the current function, typically its name property.\\\\n         * If a name property is not available an attempt will be made to try\\\\n         * to infer a name from the function's context.\\\\n         */\\\\n        getFunctionName(): string | null;\\\\n\\\\n        /**\\\\n         * Name of the property [of \\\\\\\"this\\\\\\\" or one of its prototypes] that holds\\\\n         * the current function\\\\n         */\\\\n        getMethodName(): string | null;\\\\n\\\\n        /**\\\\n         * Name of the script [if this function was defined in a script]\\\\n         */\\\\n        getFileName(): string | null;\\\\n\\\\n        /**\\\\n         * Current line number [if this function was defined in a script]\\\\n         */\\\\n        getLineNumber(): number | null;\\\\n\\\\n        /**\\\\n         * Current column number [if this function was defined in a script]\\\\n         */\\\\n        getColumnNumber(): number | null;\\\\n\\\\n        /**\\\\n         * A call site object representing the location where eval was called\\\\n         * [if this function was created using a call to eval]\\\\n         */\\\\n        getEvalOrigin(): string | undefined;\\\\n\\\\n        /**\\\\n         * Is this a toplevel invocation, that is, is \\\\\\\"this\\\\\\\" the global object?\\\\n         */\\\\n        isToplevel(): boolean;\\\\n\\\\n        /**\\\\n         * Does this call take place in code defined by a call to eval?\\\\n         */\\\\n        isEval(): boolean;\\\\n\\\\n        /**\\\\n         * Is this call in native V8 code?\\\\n         */\\\\n        isNative(): boolean;\\\\n\\\\n        /**\\\\n         * Is this a constructor call?\\\\n         */\\\\n        isConstructor(): boolean;\\\\n    }\\\\n\\\\n    interface ErrnoException extends Error {\\\\n        errno?: number;\\\\n        code?: string;\\\\n        path?: string;\\\\n        syscall?: string;\\\\n        stack?: string;\\\\n    }\\\\n\\\\n    class EventEmitter {\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n        removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n        off(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n        removeAllListeners(event?: string | symbol): this;\\\\n        setMaxListeners(n: number): this;\\\\n        getMaxListeners(): number;\\\\n        listeners(event: string | symbol): Function[];\\\\n        rawListeners(event: string | symbol): Function[];\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        listenerCount(type: string | symbol): number;\\\\n        // Added in Node 6...\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n        eventNames(): Array<string | symbol>;\\\\n    }\\\\n\\\\n    interface ReadableStream extends EventEmitter {\\\\n        readable: boolean;\\\\n        read(size?: number): string | Buffer;\\\\n        setEncoding(encoding: string): this;\\\\n        pause(): this;\\\\n        resume(): this;\\\\n        isPaused(): boolean;\\\\n        pipe<T extends WritableStream>(destination: T, options?: { end?: boolean; }): T;\\\\n        unpipe(destination?: WritableStream): this;\\\\n        unshift(chunk: string | Uint8Array, encoding?: BufferEncoding): void;\\\\n        wrap(oldStream: ReadableStream): this;\\\\n        [Symbol.asyncIterator](): AsyncIterableIterator<string | Buffer>;\\\\n    }\\\\n\\\\n    interface WritableStream extends EventEmitter {\\\\n        writable: boolean;\\\\n        write(buffer: Uint8Array | string, cb?: (err?: Error | null) => void): boolean;\\\\n        write(str: string, encoding?: string, cb?: (err?: Error | null) => void): boolean;\\\\n        end(cb?: () => void): void;\\\\n        end(data: string | Uint8Array, cb?: () => void): void;\\\\n        end(str: string, encoding?: string, cb?: () => void): void;\\\\n    }\\\\n\\\\n    interface ReadWriteStream extends ReadableStream, WritableStream { }\\\\n\\\\n    interface Events extends EventEmitter { }\\\\n\\\\n    interface Domain extends Events {\\\\n        run<T>(fn: (...args: any[]) => T, ...args: any[]): T;\\\\n        add(emitter: EventEmitter | Timer): void;\\\\n        remove(emitter: EventEmitter | Timer): void;\\\\n        bind<T extends Function>(cb: T): T;\\\\n        intercept<T extends Function>(cb: T): T;\\\\n\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        removeListener(event: string, listener: (...args: any[]) => void): this;\\\\n        removeAllListeners(event?: string): this;\\\\n    }\\\\n\\\\n    interface MemoryUsage {\\\\n        rss: number;\\\\n        heapTotal: number;\\\\n        heapUsed: number;\\\\n        external: number;\\\\n    }\\\\n\\\\n    interface CpuUsage {\\\\n        user: number;\\\\n        system: number;\\\\n    }\\\\n\\\\n    interface ProcessRelease {\\\\n        name: string;\\\\n        sourceUrl?: string;\\\\n        headersUrl?: string;\\\\n        libUrl?: string;\\\\n        lts?: string;\\\\n    }\\\\n\\\\n    interface ProcessVersions {\\\\n        http_parser: string;\\\\n        node: string;\\\\n        v8: string;\\\\n        ares: string;\\\\n        uv: string;\\\\n        zlib: string;\\\\n        modules: string;\\\\n        openssl: string;\\\\n    }\\\\n\\\\n    type Platform = 'aix'\\\\n        | 'android'\\\\n        | 'darwin'\\\\n        | 'freebsd'\\\\n        | 'linux'\\\\n        | 'openbsd'\\\\n        | 'sunos'\\\\n        | 'win32'\\\\n        | 'cygwin';\\\\n\\\\n    type Signals =\\\\n        \\\\\\\"SIGABRT\\\\\\\" | \\\\\\\"SIGALRM\\\\\\\" | \\\\\\\"SIGBUS\\\\\\\" | \\\\\\\"SIGCHLD\\\\\\\" | \\\\\\\"SIGCONT\\\\\\\" | \\\\\\\"SIGFPE\\\\\\\" | \\\\\\\"SIGHUP\\\\\\\" | \\\\\\\"SIGILL\\\\\\\" | \\\\\\\"SIGINT\\\\\\\" | \\\\\\\"SIGIO\\\\\\\" |\\\\n        \\\\\\\"SIGIOT\\\\\\\" | \\\\\\\"SIGKILL\\\\\\\" | \\\\\\\"SIGPIPE\\\\\\\" | \\\\\\\"SIGPOLL\\\\\\\" | \\\\\\\"SIGPROF\\\\\\\" | \\\\\\\"SIGPWR\\\\\\\" | \\\\\\\"SIGQUIT\\\\\\\" | \\\\\\\"SIGSEGV\\\\\\\" | \\\\\\\"SIGSTKFLT\\\\\\\" |\\\\n        \\\\\\\"SIGSTOP\\\\\\\" | \\\\\\\"SIGSYS\\\\\\\" | \\\\\\\"SIGTERM\\\\\\\" | \\\\\\\"SIGTRAP\\\\\\\" | \\\\\\\"SIGTSTP\\\\\\\" | \\\\\\\"SIGTTIN\\\\\\\" | \\\\\\\"SIGTTOU\\\\\\\" | \\\\\\\"SIGUNUSED\\\\\\\" | \\\\\\\"SIGURG\\\\\\\" |\\\\n        \\\\\\\"SIGUSR1\\\\\\\" | \\\\\\\"SIGUSR2\\\\\\\" | \\\\\\\"SIGVTALRM\\\\\\\" | \\\\\\\"SIGWINCH\\\\\\\" | \\\\\\\"SIGXCPU\\\\\\\" | \\\\\\\"SIGXFSZ\\\\\\\" | \\\\\\\"SIGBREAK\\\\\\\" | \\\\\\\"SIGLOST\\\\\\\" | \\\\\\\"SIGINFO\\\\\\\";\\\\n\\\\n    type MultipleResolveType = 'resolve' | 'reject';\\\\n\\\\n    type BeforeExitListener = (code: number) => void;\\\\n    type DisconnectListener = () => void;\\\\n    type ExitListener = (code: number) => void;\\\\n    type RejectionHandledListener = (promise: Promise<any>) => void;\\\\n    type UncaughtExceptionListener = (error: Error) => void;\\\\n    type UnhandledRejectionListener = (reason: {} | null | undefined, promise: Promise<any>) => void;\\\\n    type WarningListener = (warning: Error) => void;\\\\n    type MessageListener = (message: any, sendHandle: any) => void;\\\\n    type SignalsListener = (signal: Signals) => void;\\\\n    type NewListenerListener = (type: string | symbol, listener: (...args: any[]) => void) => void;\\\\n    type RemoveListenerListener = (type: string | symbol, listener: (...args: any[]) => void) => void;\\\\n    type MultipleResolveListener = (type: MultipleResolveType, promise: Promise<any>, value: any) => void;\\\\n\\\\n    interface Socket extends ReadWriteStream {\\\\n        isTTY?: true;\\\\n    }\\\\n\\\\n    interface ProcessEnv {\\\\n        [key: string]: string | undefined;\\\\n    }\\\\n\\\\n    interface WriteStream extends Socket {\\\\n        readonly writableFinished: boolean;\\\\n        readonly writableHighWaterMark: number;\\\\n        readonly writableLength: number;\\\\n        columns?: number;\\\\n        rows?: number;\\\\n        _write(chunk: any, encoding: string, callback: (err?: null | Error) => void): void;\\\\n        _destroy(err: Error | null, callback: (err?: null | Error) => void): void;\\\\n        _final(callback: (err?: null | Error) => void): void;\\\\n        setDefaultEncoding(encoding: string): this;\\\\n        cork(): void;\\\\n        uncork(): void;\\\\n        destroy(error?: Error): void;\\\\n    }\\\\n    interface ReadStream extends Socket {\\\\n        readonly readableHighWaterMark: number;\\\\n        readonly readableLength: number;\\\\n        isRaw?: boolean;\\\\n        setRawMode?(mode: boolean): void;\\\\n        _read(size: number): void;\\\\n        _destroy(err: Error | null, callback: (err?: null | Error) => void): void;\\\\n        push(chunk: any, encoding?: string): boolean;\\\\n        destroy(error?: Error): void;\\\\n    }\\\\n\\\\n    interface HRTime {\\\\n        (time?: [number, number]): [number, number];\\\\n    }\\\\n\\\\n    interface ProcessReport {\\\\n        /**\\\\n         * Directory where the report is written.\\\\n         * working directory of the Node.js process.\\\\n         * @default '' indicating that reports are written to the current\\\\n         */\\\\n        directory: string;\\\\n\\\\n        /**\\\\n         * Filename where the report is written.\\\\n         * The default value is the empty string.\\\\n         * @default '' the output filename will be comprised of a timestamp,\\\\n         * PID, and sequence number.\\\\n         */\\\\n        filename: string;\\\\n\\\\n        /**\\\\n         * Returns a JSON-formatted diagnostic report for the running process.\\\\n         * The report's JavaScript stack trace is taken from err, if present.\\\\n         */\\\\n        getReport(err?: Error): string;\\\\n\\\\n        /**\\\\n         * If true, a diagnostic report is generated on fatal errors,\\\\n         * such as out of memory errors or failed C++ assertions.\\\\n         * @default false\\\\n         */\\\\n        reportOnFatalError: boolean;\\\\n\\\\n        /**\\\\n         * If true, a diagnostic report is generated when the process\\\\n         * receives the signal specified by process.report.signal.\\\\n         * @defaul false\\\\n         */\\\\n        reportOnSignal: boolean;\\\\n\\\\n        /**\\\\n         * If true, a diagnostic report is generated on uncaught exception.\\\\n         * @default false\\\\n         */\\\\n        reportOnUncaughtException: boolean;\\\\n\\\\n        /**\\\\n         * The signal used to trigger the creation of a diagnostic report.\\\\n         * @default 'SIGUSR2'\\\\n         */\\\\n        signal: Signals;\\\\n\\\\n        /**\\\\n         * Writes a diagnostic report to a file. If filename is not provided, the default filename\\\\n         * includes the date, time, PID, and a sequence number.\\\\n         * The report's JavaScript stack trace is taken from err, if present.\\\\n         *\\\\n         * @param fileName Name of the file where the report is written.\\\\n         * This should be a relative path, that will be appended to the directory specified in\\\\n         * `process.report.directory`, or the current working directory of the Node.js process,\\\\n         * if unspecified.\\\\n         * @param error A custom error used for reporting the JavaScript stack.\\\\n         * @return Filename of the generated report.\\\\n         */\\\\n        writeReport(fileName?: string): string;\\\\n        writeReport(error?: Error): string;\\\\n        writeReport(fileName?: string, err?: Error): string;\\\\n    }\\\\n\\\\n    interface ResourceUsage {\\\\n        fsRead: number;\\\\n        fsWrite: number;\\\\n        involuntaryContextSwitches: number;\\\\n        ipcReceived: number;\\\\n        ipcSent: number;\\\\n        majorPageFault: number;\\\\n        maxRSS: number;\\\\n        minorPageFault: number;\\\\n        sharedMemorySize: number;\\\\n        signalsCount: number;\\\\n        swappedOut: number;\\\\n        systemCPUTime: number;\\\\n        unsharedDataSize: number;\\\\n        unsharedStackSize: number;\\\\n        userCPUTime: number;\\\\n        voluntaryContextSwitches: number;\\\\n    }\\\\n\\\\n    interface Process extends EventEmitter {\\\\n        /**\\\\n         * Can also be a tty.WriteStream, not typed due to limitation.s\\\\n         */\\\\n        stdout: WriteStream;\\\\n        /**\\\\n         * Can also be a tty.WriteStream, not typed due to limitation.s\\\\n         */\\\\n        stderr: WriteStream;\\\\n        stdin: ReadStream;\\\\n        openStdin(): Socket;\\\\n        argv: string[];\\\\n        argv0: string;\\\\n        execArgv: string[];\\\\n        execPath: string;\\\\n        abort(): void;\\\\n        chdir(directory: string): void;\\\\n        cwd(): string;\\\\n        debugPort: number;\\\\n        emitWarning(warning: string | Error, name?: string, ctor?: Function): void;\\\\n        env: ProcessEnv;\\\\n        exit(code?: number): never;\\\\n        exitCode?: number;\\\\n        getgid(): number;\\\\n        setgid(id: number | string): void;\\\\n        getuid(): number;\\\\n        setuid(id: number | string): void;\\\\n        geteuid(): number;\\\\n        seteuid(id: number | string): void;\\\\n        getegid(): number;\\\\n        setegid(id: number | string): void;\\\\n        getgroups(): number[];\\\\n        setgroups(groups: Array<string | number>): void;\\\\n        setUncaughtExceptionCaptureCallback(cb: ((err: Error) => void) | null): void;\\\\n        hasUncaughtExceptionCaptureCallback(): boolean;\\\\n        version: string;\\\\n        versions: ProcessVersions;\\\\n        config: {\\\\n            target_defaults: {\\\\n                cflags: any[];\\\\n                default_configuration: string;\\\\n                defines: string[];\\\\n                include_dirs: string[];\\\\n                libraries: string[];\\\\n            };\\\\n            variables: {\\\\n                clang: number;\\\\n                host_arch: string;\\\\n                node_install_npm: boolean;\\\\n                node_install_waf: boolean;\\\\n                node_prefix: string;\\\\n                node_shared_openssl: boolean;\\\\n                node_shared_v8: boolean;\\\\n                node_shared_zlib: boolean;\\\\n                node_use_dtrace: boolean;\\\\n                node_use_etw: boolean;\\\\n                node_use_openssl: boolean;\\\\n                target_arch: string;\\\\n                v8_no_strict_aliasing: number;\\\\n                v8_use_snapshot: boolean;\\\\n                visibility: string;\\\\n            };\\\\n        };\\\\n        kill(pid: number, signal?: string | number): void;\\\\n        pid: number;\\\\n        ppid: number;\\\\n        title: string;\\\\n        arch: string;\\\\n        platform: Platform;\\\\n        mainModule?: NodeModule;\\\\n        memoryUsage(): MemoryUsage;\\\\n        cpuUsage(previousValue?: CpuUsage): CpuUsage;\\\\n        nextTick(callback: Function, ...args: any[]): void;\\\\n        release: ProcessRelease;\\\\n        features: {\\\\n            inspector: boolean;\\\\n            debug: boolean;\\\\n            uv: boolean;\\\\n            ipv6: boolean;\\\\n            tls_alpn: boolean;\\\\n            tls_sni: boolean;\\\\n            tls_ocsp: boolean;\\\\n            tls: boolean;\\\\n        };\\\\n        /**\\\\n         * Can only be set if not in worker thread.\\\\n         */\\\\n        umask(mask?: number): number;\\\\n        uptime(): number;\\\\n        hrtime: HRTime;\\\\n        domain: Domain;\\\\n\\\\n        // Worker\\\\n        send?(message: any, sendHandle?: any, options?: { swallowErrors?: boolean}, callback?: (error: Error | null) => void): boolean;\\\\n        disconnect(): void;\\\\n        connected: boolean;\\\\n\\\\n        /**\\\\n         * The `process.allowedNodeEnvironmentFlags` property is a special,\\\\n         * read-only `Set` of flags allowable within the [`NODE_OPTIONS`][]\\\\n         * environment variable.\\\\n         */\\\\n        allowedNodeEnvironmentFlags: ReadonlySet<string>;\\\\n\\\\n        /**\\\\n         * Only available with `--experimental-report`\\\\n         */\\\\n        report?: ProcessReport;\\\\n\\\\n        resourceUsage(): ResourceUsage;\\\\n\\\\n        /**\\\\n         * EventEmitter\\\\n         *   1. beforeExit\\\\n         *   2. disconnect\\\\n         *   3. exit\\\\n         *   4. message\\\\n         *   5. rejectionHandled\\\\n         *   6. uncaughtException\\\\n         *   7. unhandledRejection\\\\n         *   8. warning\\\\n         *   9. message\\\\n         *  10. <All OS Signals>\\\\n         *  11. newListener/removeListener inherited from EventEmitter\\\\n         */\\\\n        addListener(event: \\\\\\\"beforeExit\\\\\\\", listener: BeforeExitListener): this;\\\\n        addListener(event: \\\\\\\"disconnect\\\\\\\", listener: DisconnectListener): this;\\\\n        addListener(event: \\\\\\\"exit\\\\\\\", listener: ExitListener): this;\\\\n        addListener(event: \\\\\\\"rejectionHandled\\\\\\\", listener: RejectionHandledListener): this;\\\\n        addListener(event: \\\\\\\"uncaughtException\\\\\\\", listener: UncaughtExceptionListener): this;\\\\n        addListener(event: \\\\\\\"unhandledRejection\\\\\\\", listener: UnhandledRejectionListener): this;\\\\n        addListener(event: \\\\\\\"warning\\\\\\\", listener: WarningListener): this;\\\\n        addListener(event: \\\\\\\"message\\\\\\\", listener: MessageListener): this;\\\\n        addListener(event: Signals, listener: SignalsListener): this;\\\\n        addListener(event: \\\\\\\"newListener\\\\\\\", listener: NewListenerListener): this;\\\\n        addListener(event: \\\\\\\"removeListener\\\\\\\", listener: RemoveListenerListener): this;\\\\n        addListener(event: \\\\\\\"multipleResolves\\\\\\\", listener: MultipleResolveListener): this;\\\\n\\\\n        emit(event: \\\\\\\"beforeExit\\\\\\\", code: number): boolean;\\\\n        emit(event: \\\\\\\"disconnect\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"exit\\\\\\\", code: number): boolean;\\\\n        emit(event: \\\\\\\"rejectionHandled\\\\\\\", promise: Promise<any>): boolean;\\\\n        emit(event: \\\\\\\"uncaughtException\\\\\\\", error: Error): boolean;\\\\n        emit(event: \\\\\\\"unhandledRejection\\\\\\\", reason: any, promise: Promise<any>): boolean;\\\\n        emit(event: \\\\\\\"warning\\\\\\\", warning: Error): boolean;\\\\n        emit(event: \\\\\\\"message\\\\\\\", message: any, sendHandle: any): this;\\\\n        emit(event: Signals, signal: Signals): boolean;\\\\n        emit(event: \\\\\\\"newListener\\\\\\\", eventName: string | symbol, listener: (...args: any[]) => void): this;\\\\n        emit(event: \\\\\\\"removeListener\\\\\\\", eventName: string, listener: (...args: any[]) => void): this;\\\\n        emit(event: \\\\\\\"multipleResolves\\\\\\\", listener: MultipleResolveListener): this;\\\\n\\\\n        on(event: \\\\\\\"beforeExit\\\\\\\", listener: BeforeExitListener): this;\\\\n        on(event: \\\\\\\"disconnect\\\\\\\", listener: DisconnectListener): this;\\\\n        on(event: \\\\\\\"exit\\\\\\\", listener: ExitListener): this;\\\\n        on(event: \\\\\\\"rejectionHandled\\\\\\\", listener: RejectionHandledListener): this;\\\\n        on(event: \\\\\\\"uncaughtException\\\\\\\", listener: UncaughtExceptionListener): this;\\\\n        on(event: \\\\\\\"unhandledRejection\\\\\\\", listener: UnhandledRejectionListener): this;\\\\n        on(event: \\\\\\\"warning\\\\\\\", listener: WarningListener): this;\\\\n        on(event: \\\\\\\"message\\\\\\\", listener: MessageListener): this;\\\\n        on(event: Signals, listener: SignalsListener): this;\\\\n        on(event: \\\\\\\"newListener\\\\\\\", listener: NewListenerListener): this;\\\\n        on(event: \\\\\\\"removeListener\\\\\\\", listener: RemoveListenerListener): this;\\\\n        on(event: \\\\\\\"multipleResolves\\\\\\\", listener: MultipleResolveListener): this;\\\\n\\\\n        once(event: \\\\\\\"beforeExit\\\\\\\", listener: BeforeExitListener): this;\\\\n        once(event: \\\\\\\"disconnect\\\\\\\", listener: DisconnectListener): this;\\\\n        once(event: \\\\\\\"exit\\\\\\\", listener: ExitListener): this;\\\\n        once(event: \\\\\\\"rejectionHandled\\\\\\\", listener: RejectionHandledListener): this;\\\\n        once(event: \\\\\\\"uncaughtException\\\\\\\", listener: UncaughtExceptionListener): this;\\\\n        once(event: \\\\\\\"unhandledRejection\\\\\\\", listener: UnhandledRejectionListener): this;\\\\n        once(event: \\\\\\\"warning\\\\\\\", listener: WarningListener): this;\\\\n        once(event: \\\\\\\"message\\\\\\\", listener: MessageListener): this;\\\\n        once(event: Signals, listener: SignalsListener): this;\\\\n        once(event: \\\\\\\"newListener\\\\\\\", listener: NewListenerListener): this;\\\\n        once(event: \\\\\\\"removeListener\\\\\\\", listener: RemoveListenerListener): this;\\\\n        once(event: \\\\\\\"multipleResolves\\\\\\\", listener: MultipleResolveListener): this;\\\\n\\\\n        prependListener(event: \\\\\\\"beforeExit\\\\\\\", listener: BeforeExitListener): this;\\\\n        prependListener(event: \\\\\\\"disconnect\\\\\\\", listener: DisconnectListener): this;\\\\n        prependListener(event: \\\\\\\"exit\\\\\\\", listener: ExitListener): this;\\\\n        prependListener(event: \\\\\\\"rejectionHandled\\\\\\\", listener: RejectionHandledListener): this;\\\\n        prependListener(event: \\\\\\\"uncaughtException\\\\\\\", listener: UncaughtExceptionListener): this;\\\\n        prependListener(event: \\\\\\\"unhandledRejection\\\\\\\", listener: UnhandledRejectionListener): this;\\\\n        prependListener(event: \\\\\\\"warning\\\\\\\", listener: WarningListener): this;\\\\n        prependListener(event: \\\\\\\"message\\\\\\\", listener: MessageListener): this;\\\\n        prependListener(event: Signals, listener: SignalsListener): this;\\\\n        prependListener(event: \\\\\\\"newListener\\\\\\\", listener: NewListenerListener): this;\\\\n        prependListener(event: \\\\\\\"removeListener\\\\\\\", listener: RemoveListenerListener): this;\\\\n        prependListener(event: \\\\\\\"multipleResolves\\\\\\\", listener: MultipleResolveListener): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"beforeExit\\\\\\\", listener: BeforeExitListener): this;\\\\n        prependOnceListener(event: \\\\\\\"disconnect\\\\\\\", listener: DisconnectListener): this;\\\\n        prependOnceListener(event: \\\\\\\"exit\\\\\\\", listener: ExitListener): this;\\\\n        prependOnceListener(event: \\\\\\\"rejectionHandled\\\\\\\", listener: RejectionHandledListener): this;\\\\n        prependOnceListener(event: \\\\\\\"uncaughtException\\\\\\\", listener: UncaughtExceptionListener): this;\\\\n        prependOnceListener(event: \\\\\\\"unhandledRejection\\\\\\\", listener: UnhandledRejectionListener): this;\\\\n        prependOnceListener(event: \\\\\\\"warning\\\\\\\", listener: WarningListener): this;\\\\n        prependOnceListener(event: \\\\\\\"message\\\\\\\", listener: MessageListener): this;\\\\n        prependOnceListener(event: Signals, listener: SignalsListener): this;\\\\n        prependOnceListener(event: \\\\\\\"newListener\\\\\\\", listener: NewListenerListener): this;\\\\n        prependOnceListener(event: \\\\\\\"removeListener\\\\\\\", listener: RemoveListenerListener): this;\\\\n        prependOnceListener(event: \\\\\\\"multipleResolves\\\\\\\", listener: MultipleResolveListener): this;\\\\n\\\\n        listeners(event: \\\\\\\"beforeExit\\\\\\\"): BeforeExitListener[];\\\\n        listeners(event: \\\\\\\"disconnect\\\\\\\"): DisconnectListener[];\\\\n        listeners(event: \\\\\\\"exit\\\\\\\"): ExitListener[];\\\\n        listeners(event: \\\\\\\"rejectionHandled\\\\\\\"): RejectionHandledListener[];\\\\n        listeners(event: \\\\\\\"uncaughtException\\\\\\\"): UncaughtExceptionListener[];\\\\n        listeners(event: \\\\\\\"unhandledRejection\\\\\\\"): UnhandledRejectionListener[];\\\\n        listeners(event: \\\\\\\"warning\\\\\\\"): WarningListener[];\\\\n        listeners(event: \\\\\\\"message\\\\\\\"): MessageListener[];\\\\n        listeners(event: Signals): SignalsListener[];\\\\n        listeners(event: \\\\\\\"newListener\\\\\\\"): NewListenerListener[];\\\\n        listeners(event: \\\\\\\"removeListener\\\\\\\"): RemoveListenerListener[];\\\\n        listeners(event: \\\\\\\"multipleResolves\\\\\\\"): MultipleResolveListener[];\\\\n    }\\\\n\\\\n    interface Global {\\\\n        Array: typeof Array;\\\\n        ArrayBuffer: typeof ArrayBuffer;\\\\n        Boolean: typeof Boolean;\\\\n        Buffer: typeof Buffer;\\\\n        DataView: typeof DataView;\\\\n        Date: typeof Date;\\\\n        Error: typeof Error;\\\\n        EvalError: typeof EvalError;\\\\n        Float32Array: typeof Float32Array;\\\\n        Float64Array: typeof Float64Array;\\\\n        Function: typeof Function;\\\\n        GLOBAL: Global;\\\\n        Infinity: typeof Infinity;\\\\n        Int16Array: typeof Int16Array;\\\\n        Int32Array: typeof Int32Array;\\\\n        Int8Array: typeof Int8Array;\\\\n        Intl: typeof Intl;\\\\n        JSON: typeof JSON;\\\\n        Map: MapConstructor;\\\\n        Math: typeof Math;\\\\n        NaN: typeof NaN;\\\\n        Number: typeof Number;\\\\n        Object: typeof Object;\\\\n        Promise: Function;\\\\n        RangeError: typeof RangeError;\\\\n        ReferenceError: typeof ReferenceError;\\\\n        RegExp: typeof RegExp;\\\\n        Set: SetConstructor;\\\\n        String: typeof String;\\\\n        Symbol: Function;\\\\n        SyntaxError: typeof SyntaxError;\\\\n        TypeError: typeof TypeError;\\\\n        URIError: typeof URIError;\\\\n        Uint16Array: typeof Uint16Array;\\\\n        Uint32Array: typeof Uint32Array;\\\\n        Uint8Array: typeof Uint8Array;\\\\n        Uint8ClampedArray: Function;\\\\n        WeakMap: WeakMapConstructor;\\\\n        WeakSet: WeakSetConstructor;\\\\n        clearImmediate: (immediateId: Immediate) => void;\\\\n        clearInterval: (intervalId: Timeout) => void;\\\\n        clearTimeout: (timeoutId: Timeout) => void;\\\\n        console: typeof console;\\\\n        decodeURI: typeof decodeURI;\\\\n        decodeURIComponent: typeof decodeURIComponent;\\\\n        encodeURI: typeof encodeURI;\\\\n        encodeURIComponent: typeof encodeURIComponent;\\\\n        escape: (str: string) => string;\\\\n        eval: typeof eval;\\\\n        global: Global;\\\\n        isFinite: typeof isFinite;\\\\n        isNaN: typeof isNaN;\\\\n        parseFloat: typeof parseFloat;\\\\n        parseInt: typeof parseInt;\\\\n        process: Process;\\\\n        root: Global;\\\\n        setImmediate: (callback: (...args: any[]) => void, ...args: any[]) => Immediate;\\\\n        setInterval: (callback: (...args: any[]) => void, ms: number, ...args: any[]) => Timeout;\\\\n        setTimeout: (callback: (...args: any[]) => void, ms: number, ...args: any[]) => Timeout;\\\\n        queueMicrotask: typeof queueMicrotask;\\\\n        undefined: typeof undefined;\\\\n        unescape: (str: string) => string;\\\\n        gc: () => void;\\\\n        v8debug?: any;\\\\n    }\\\\n\\\\n    // compatibility with older typings\\\\n    interface Timer {\\\\n        hasRef(): boolean;\\\\n        ref(): this;\\\\n        refresh(): this;\\\\n        unref(): this;\\\\n    }\\\\n\\\\n    class Immediate {\\\\n        hasRef(): boolean;\\\\n        ref(): this;\\\\n        unref(): this;\\\\n        _onImmediate: Function; // to distinguish it from the Timeout class\\\\n    }\\\\n\\\\n    class Timeout implements Timer {\\\\n        hasRef(): boolean;\\\\n        ref(): this;\\\\n        refresh(): this;\\\\n        unref(): this;\\\\n    }\\\\n\\\\n    class Module {\\\\n        static runMain(): void;\\\\n        static wrap(code: string): string;\\\\n        static createRequireFromPath(path: string): (path: string) => any;\\\\n        static builtinModules: string[];\\\\n\\\\n        static Module: typeof Module;\\\\n\\\\n        exports: any;\\\\n        require: NodeRequireFunction;\\\\n        id: string;\\\\n        filename: string;\\\\n        loaded: boolean;\\\\n        parent: Module | null;\\\\n        children: Module[];\\\\n        paths: string[];\\\\n\\\\n        constructor(id: string, parent?: Module);\\\\n    }\\\\n\\\\n    type TypedArray = Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/assert.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"assert\\\\\\\" {\\\\n    function internal(value: any, message?: string | Error): void;\\\\n    namespace internal {\\\\n        class AssertionError implements Error {\\\\n            name: string;\\\\n            message: string;\\\\n            actual: any;\\\\n            expected: any;\\\\n            operator: string;\\\\n            generatedMessage: boolean;\\\\n            code: 'ERR_ASSERTION';\\\\n\\\\n            constructor(options?: {\\\\n                message?: string; actual?: any; expected?: any;\\\\n                operator?: string; stackStartFn?: Function\\\\n            });\\\\n        }\\\\n\\\\n        function fail(message?: string | Error): never;\\\\n        /** @deprecated since v10.0.0 - use fail([message]) or other assert functions instead. */\\\\n        function fail(actual: any, expected: any, message?: string | Error, operator?: string, stackStartFn?: Function): never;\\\\n        function ok(value: any, message?: string | Error): void;\\\\n        /** @deprecated since v9.9.0 - use strictEqual() instead. */\\\\n        function equal(actual: any, expected: any, message?: string | Error): void;\\\\n        /** @deprecated since v9.9.0 - use notStrictEqual() instead. */\\\\n        function notEqual(actual: any, expected: any, message?: string | Error): void;\\\\n        /** @deprecated since v9.9.0 - use deepStrictEqual() instead. */\\\\n        function deepEqual(actual: any, expected: any, message?: string | Error): void;\\\\n        /** @deprecated since v9.9.0 - use notDeepStrictEqual() instead. */\\\\n        function notDeepEqual(actual: any, expected: any, message?: string | Error): void;\\\\n        function strictEqual(actual: any, expected: any, message?: string | Error): void;\\\\n        function notStrictEqual(actual: any, expected: any, message?: string | Error): void;\\\\n        function deepStrictEqual(actual: any, expected: any, message?: string | Error): void;\\\\n        function notDeepStrictEqual(actual: any, expected: any, message?: string | Error): void;\\\\n\\\\n        function throws(block: () => any, message?: string | Error): void;\\\\n        function throws(block: () => any, error: RegExp | Function | Object | Error, message?: string | Error): void;\\\\n        function doesNotThrow(block: () => any, message?: string | Error): void;\\\\n        function doesNotThrow(block: () => any, error: RegExp | Function, message?: string | Error): void;\\\\n\\\\n        function ifError(value: any): void;\\\\n\\\\n        function rejects(block: (() => Promise<any>) | Promise<any>, message?: string | Error): Promise<void>;\\\\n        function rejects(block: (() => Promise<any>) | Promise<any>, error: RegExp | Function | Object | Error, message?: string | Error): Promise<void>;\\\\n        function doesNotReject(block: (() => Promise<any>) | Promise<any>, message?: string | Error): Promise<void>;\\\\n        function doesNotReject(block: (() => Promise<any>) | Promise<any>, error: RegExp | Function, message?: string | Error): Promise<void>;\\\\n\\\\n        const strict: typeof internal;\\\\n    }\\\\n\\\\n    export = internal;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/async_hooks.d.ts\\\",\\\"content\\\":\\\"/**\\\\n * Async Hooks module: https://nodejs.org/api/async_hooks.html\\\\n */\\\\ndeclare module \\\\\\\"async_hooks\\\\\\\" {\\\\n    /**\\\\n     * Returns the asyncId of the current execution context.\\\\n     */\\\\n    function executionAsyncId(): number;\\\\n\\\\n    /**\\\\n     * Returns the ID of the resource responsible for calling the callback that is currently being executed.\\\\n     */\\\\n    function triggerAsyncId(): number;\\\\n\\\\n    interface HookCallbacks {\\\\n        /**\\\\n         * Called when a class is constructed that has the possibility to emit an asynchronous event.\\\\n         * @param asyncId a unique ID for the async resource\\\\n         * @param type the type of the async resource\\\\n         * @param triggerAsyncId the unique ID of the async resource in whose execution context this async resource was created\\\\n         * @param resource reference to the resource representing the async operation, needs to be released during destroy\\\\n         */\\\\n        init?(asyncId: number, type: string, triggerAsyncId: number, resource: Object): void;\\\\n\\\\n        /**\\\\n         * When an asynchronous operation is initiated or completes a callback is called to notify the user.\\\\n         * The before callback is called just before said callback is executed.\\\\n         * @param asyncId the unique identifier assigned to the resource about to execute the callback.\\\\n         */\\\\n        before?(asyncId: number): void;\\\\n\\\\n        /**\\\\n         * Called immediately after the callback specified in before is completed.\\\\n         * @param asyncId the unique identifier assigned to the resource which has executed the callback.\\\\n         */\\\\n        after?(asyncId: number): void;\\\\n\\\\n        /**\\\\n         * Called when a promise has resolve() called. This may not be in the same execution id\\\\n         * as the promise itself.\\\\n         * @param asyncId the unique id for the promise that was resolve()d.\\\\n         */\\\\n        promiseResolve?(asyncId: number): void;\\\\n\\\\n        /**\\\\n         * Called after the resource corresponding to asyncId is destroyed\\\\n         * @param asyncId a unique ID for the async resource\\\\n         */\\\\n        destroy?(asyncId: number): void;\\\\n    }\\\\n\\\\n    interface AsyncHook {\\\\n        /**\\\\n         * Enable the callbacks for a given AsyncHook instance. If no callbacks are provided enabling is a noop.\\\\n         */\\\\n        enable(): this;\\\\n\\\\n        /**\\\\n         * Disable the callbacks for a given AsyncHook instance from the global pool of AsyncHook callbacks to be executed. Once a hook has been disabled it will not be called again until enabled.\\\\n         */\\\\n        disable(): this;\\\\n    }\\\\n\\\\n    /**\\\\n     * Registers functions to be called for different lifetime events of each async operation.\\\\n     * @param options the callbacks to register\\\\n     * @return an AsyncHooks instance used for disabling and enabling hooks\\\\n     */\\\\n    function createHook(options: HookCallbacks): AsyncHook;\\\\n\\\\n    interface AsyncResourceOptions {\\\\n      /**\\\\n       * The ID of the execution context that created this async event.\\\\n       * Default: `executionAsyncId()`\\\\n       */\\\\n      triggerAsyncId?: number;\\\\n\\\\n      /**\\\\n       * Disables automatic `emitDestroy` when the object is garbage collected.\\\\n       * This usually does not need to be set (even if `emitDestroy` is called\\\\n       * manually), unless the resource's `asyncId` is retrieved and the\\\\n       * sensitive API's `emitDestroy` is called with it.\\\\n       * Default: `false`\\\\n       */\\\\n      requireManualDestroy?: boolean;\\\\n    }\\\\n\\\\n    /**\\\\n     * The class AsyncResource was designed to be extended by the embedder's async resources.\\\\n     * Using this users can easily trigger the lifetime events of their own resources.\\\\n     */\\\\n    class AsyncResource {\\\\n        /**\\\\n         * AsyncResource() is meant to be extended. Instantiating a\\\\n         * new AsyncResource() also triggers init. If triggerAsyncId is omitted then\\\\n         * async_hook.executionAsyncId() is used.\\\\n         * @param type The type of async event.\\\\n         * @param triggerAsyncId The ID of the execution context that created\\\\n         *   this async event (default: `executionAsyncId()`), or an\\\\n         *   AsyncResourceOptions object (since 9.3)\\\\n         */\\\\n        constructor(type: string, triggerAsyncId?: number|AsyncResourceOptions);\\\\n\\\\n        /**\\\\n         * Call the provided function with the provided arguments in the\\\\n         * execution context of the async resource. This will establish the\\\\n         * context, trigger the AsyncHooks before callbacks, call the function,\\\\n         * trigger the AsyncHooks after callbacks, and then restore the original\\\\n         * execution context.\\\\n         * @param fn The function to call in the execution context of this\\\\n         *   async resource.\\\\n         * @param thisArg The receiver to be used for the function call.\\\\n         * @param args Optional arguments to pass to the function.\\\\n         */\\\\n        runInAsyncScope<This, Result>(fn: (this: This, ...args: any[]) => Result, thisArg?: This, ...args: any[]): Result;\\\\n\\\\n        /**\\\\n         * Call AsyncHooks destroy callbacks.\\\\n         */\\\\n        emitDestroy(): void;\\\\n\\\\n        /**\\\\n         * @return the unique ID assigned to this AsyncResource instance.\\\\n         */\\\\n        asyncId(): number;\\\\n\\\\n        /**\\\\n         * @return the trigger ID for this AsyncResource instance.\\\\n         */\\\\n        triggerAsyncId(): number;\\\\n    }\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/buffer.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"buffer\\\\\\\" {\\\\n    export const INSPECT_MAX_BYTES: number;\\\\n    export const kMaxLength: number;\\\\n    export const kStringMaxLength: number;\\\\n    export const constants: {\\\\n        MAX_LENGTH: number;\\\\n        MAX_STRING_LENGTH: number;\\\\n    };\\\\n    const BuffType: typeof Buffer;\\\\n\\\\n    export type TranscodeEncoding = \\\\\\\"ascii\\\\\\\" | \\\\\\\"utf8\\\\\\\" | \\\\\\\"utf16le\\\\\\\" | \\\\\\\"ucs2\\\\\\\" | \\\\\\\"latin1\\\\\\\" | \\\\\\\"binary\\\\\\\";\\\\n\\\\n    export function transcode(source: Uint8Array, fromEnc: TranscodeEncoding, toEnc: TranscodeEncoding): Buffer;\\\\n\\\\n    export const SlowBuffer: {\\\\n        /** @deprecated since v6.0.0, use Buffer.allocUnsafeSlow() */\\\\n        new(size: number): Buffer;\\\\n        prototype: Buffer;\\\\n    };\\\\n\\\\n    export { BuffType as Buffer };\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/events.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"events\\\\\\\" {\\\\n    class internal extends NodeJS.EventEmitter { }\\\\n\\\\n    namespace internal {\\\\n        function once(emitter: EventEmitter, event: string | symbol): Promise<any[]>;\\\\n         class EventEmitter extends internal {\\\\n            /** @deprecated since v4.0.0 */\\\\n            static listenerCount(emitter: EventEmitter, event: string | symbol): number;\\\\n            static defaultMaxListeners: number;\\\\n\\\\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n            off(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n            removeAllListeners(event?: string | symbol): this;\\\\n            setMaxListeners(n: number): this;\\\\n            getMaxListeners(): number;\\\\n            listeners(event: string | symbol): Function[];\\\\n            rawListeners(event: string | symbol): Function[];\\\\n            emit(event: string | symbol, ...args: any[]): boolean;\\\\n            eventNames(): Array<string | symbol>;\\\\n            listenerCount(type: string | symbol): number;\\\\n        }\\\\n    }\\\\n\\\\n    export = internal;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/stream.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"stream\\\\\\\" {\\\\n    import * as events from \\\\\\\"events\\\\\\\";\\\\n\\\\n    class internal extends events.EventEmitter {\\\\n        pipe<T extends NodeJS.WritableStream>(destination: T, options?: { end?: boolean; }): T;\\\\n    }\\\\n\\\\n    namespace internal {\\\\n        class Stream extends internal { }\\\\n\\\\n        interface ReadableOptions {\\\\n            highWaterMark?: number;\\\\n            encoding?: string;\\\\n            objectMode?: boolean;\\\\n            read?(this: Readable, size: number): void;\\\\n            destroy?(this: Readable, error: Error | null, callback: (error: Error | null) => void): void;\\\\n            autoDestroy?: boolean;\\\\n        }\\\\n\\\\n        class Readable extends Stream implements NodeJS.ReadableStream {\\\\n            /**\\\\n             * A utility method for creating Readable Streams out of iterators.\\\\n             */\\\\n            static from(iterable: Iterable<any> | AsyncIterable<any>, options?: ReadableOptions): Readable;\\\\n\\\\n            readable: boolean;\\\\n            readonly readableHighWaterMark: number;\\\\n            readonly readableLength: number;\\\\n            constructor(opts?: ReadableOptions);\\\\n            _read(size: number): void;\\\\n            read(size?: number): any;\\\\n            setEncoding(encoding: string): this;\\\\n            pause(): this;\\\\n            resume(): this;\\\\n            isPaused(): boolean;\\\\n            unpipe(destination?: NodeJS.WritableStream): this;\\\\n            unshift(chunk: any, encoding?: BufferEncoding): void;\\\\n            wrap(oldStream: NodeJS.ReadableStream): this;\\\\n            push(chunk: any, encoding?: string): boolean;\\\\n            _destroy(error: Error | null, callback: (error?: Error | null) => void): void;\\\\n            destroy(error?: Error): void;\\\\n\\\\n            /**\\\\n             * Event emitter\\\\n             * The defined events on documents including:\\\\n             * 1. close\\\\n             * 2. data\\\\n             * 3. end\\\\n             * 4. readable\\\\n             * 5. error\\\\n             */\\\\n            addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n            addListener(event: \\\\\\\"data\\\\\\\", listener: (chunk: any) => void): this;\\\\n            addListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n            addListener(event: \\\\\\\"readable\\\\\\\", listener: () => void): this;\\\\n            addListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n            emit(event: \\\\\\\"close\\\\\\\"): boolean;\\\\n            emit(event: \\\\\\\"data\\\\\\\", chunk: any): boolean;\\\\n            emit(event: \\\\\\\"end\\\\\\\"): boolean;\\\\n            emit(event: \\\\\\\"readable\\\\\\\"): boolean;\\\\n            emit(event: \\\\\\\"error\\\\\\\", err: Error): boolean;\\\\n            emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n            on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n            on(event: \\\\\\\"data\\\\\\\", listener: (chunk: any) => void): this;\\\\n            on(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n            on(event: \\\\\\\"readable\\\\\\\", listener: () => void): this;\\\\n            on(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n            once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n            once(event: \\\\\\\"data\\\\\\\", listener: (chunk: any) => void): this;\\\\n            once(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n            once(event: \\\\\\\"readable\\\\\\\", listener: () => void): this;\\\\n            once(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n            prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n            prependListener(event: \\\\\\\"data\\\\\\\", listener: (chunk: any) => void): this;\\\\n            prependListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n            prependListener(event: \\\\\\\"readable\\\\\\\", listener: () => void): this;\\\\n            prependListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n            prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n            prependOnceListener(event: \\\\\\\"data\\\\\\\", listener: (chunk: any) => void): this;\\\\n            prependOnceListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n            prependOnceListener(event: \\\\\\\"readable\\\\\\\", listener: () => void): this;\\\\n            prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n            removeListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n            removeListener(event: \\\\\\\"data\\\\\\\", listener: (chunk: any) => void): this;\\\\n            removeListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n            removeListener(event: \\\\\\\"readable\\\\\\\", listener: () => void): this;\\\\n            removeListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n            [Symbol.asyncIterator](): AsyncIterableIterator<any>;\\\\n        }\\\\n\\\\n        interface WritableOptions {\\\\n            highWaterMark?: number;\\\\n            decodeStrings?: boolean;\\\\n            defaultEncoding?: string;\\\\n            objectMode?: boolean;\\\\n            emitClose?: boolean;\\\\n            write?(this: Writable, chunk: any, encoding: string, callback: (error?: Error | null) => void): void;\\\\n            writev?(this: Writable, chunks: Array<{ chunk: any, encoding: string }>, callback: (error?: Error | null) => void): void;\\\\n            destroy?(this: Writable, error: Error | null, callback: (error: Error | null) => void): void;\\\\n            final?(this: Writable, callback: (error?: Error | null) => void): void;\\\\n            autoDestroy?: boolean;\\\\n        }\\\\n\\\\n        class Writable extends Stream implements NodeJS.WritableStream {\\\\n            readonly writable: boolean;\\\\n            readonly writableFinished: boolean;\\\\n            readonly writableHighWaterMark: number;\\\\n            readonly writableLength: number;\\\\n            constructor(opts?: WritableOptions);\\\\n            _write(chunk: any, encoding: string, callback: (error?: Error | null) => void): void;\\\\n            _writev?(chunks: Array<{ chunk: any, encoding: string }>, callback: (error?: Error | null) => void): void;\\\\n            _destroy(error: Error | null, callback: (error?: Error | null) => void): void;\\\\n            _final(callback: (error?: Error | null) => void): void;\\\\n            write(chunk: any, cb?: (error: Error | null | undefined) => void): boolean;\\\\n            write(chunk: any, encoding: string, cb?: (error: Error | null | undefined) => void): boolean;\\\\n            setDefaultEncoding(encoding: string): this;\\\\n            end(cb?: () => void): void;\\\\n            end(chunk: any, cb?: () => void): void;\\\\n            end(chunk: any, encoding: string, cb?: () => void): void;\\\\n            cork(): void;\\\\n            uncork(): void;\\\\n            destroy(error?: Error): void;\\\\n\\\\n            /**\\\\n             * Event emitter\\\\n             * The defined events on documents including:\\\\n             * 1. close\\\\n             * 2. drain\\\\n             * 3. error\\\\n             * 4. finish\\\\n             * 5. pipe\\\\n             * 6. unpipe\\\\n             */\\\\n            addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n            addListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n            addListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n            addListener(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n            addListener(event: \\\\\\\"pipe\\\\\\\", listener: (src: Readable) => void): this;\\\\n            addListener(event: \\\\\\\"unpipe\\\\\\\", listener: (src: Readable) => void): this;\\\\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n            emit(event: \\\\\\\"close\\\\\\\"): boolean;\\\\n            emit(event: \\\\\\\"drain\\\\\\\"): boolean;\\\\n            emit(event: \\\\\\\"error\\\\\\\", err: Error): boolean;\\\\n            emit(event: \\\\\\\"finish\\\\\\\"): boolean;\\\\n            emit(event: \\\\\\\"pipe\\\\\\\", src: Readable): boolean;\\\\n            emit(event: \\\\\\\"unpipe\\\\\\\", src: Readable): boolean;\\\\n            emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n            on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n            on(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n            on(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n            on(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n            on(event: \\\\\\\"pipe\\\\\\\", listener: (src: Readable) => void): this;\\\\n            on(event: \\\\\\\"unpipe\\\\\\\", listener: (src: Readable) => void): this;\\\\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n            once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n            once(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n            once(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n            once(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n            once(event: \\\\\\\"pipe\\\\\\\", listener: (src: Readable) => void): this;\\\\n            once(event: \\\\\\\"unpipe\\\\\\\", listener: (src: Readable) => void): this;\\\\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n            prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n            prependListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n            prependListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n            prependListener(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n            prependListener(event: \\\\\\\"pipe\\\\\\\", listener: (src: Readable) => void): this;\\\\n            prependListener(event: \\\\\\\"unpipe\\\\\\\", listener: (src: Readable) => void): this;\\\\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n            prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n            prependOnceListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n            prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n            prependOnceListener(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n            prependOnceListener(event: \\\\\\\"pipe\\\\\\\", listener: (src: Readable) => void): this;\\\\n            prependOnceListener(event: \\\\\\\"unpipe\\\\\\\", listener: (src: Readable) => void): this;\\\\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n            removeListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n            removeListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n            removeListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n            removeListener(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n            removeListener(event: \\\\\\\"pipe\\\\\\\", listener: (src: Readable) => void): this;\\\\n            removeListener(event: \\\\\\\"unpipe\\\\\\\", listener: (src: Readable) => void): this;\\\\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n        }\\\\n\\\\n        interface DuplexOptions extends ReadableOptions, WritableOptions {\\\\n            allowHalfOpen?: boolean;\\\\n            readableObjectMode?: boolean;\\\\n            writableObjectMode?: boolean;\\\\n            read?(this: Duplex, size: number): void;\\\\n            write?(this: Duplex, chunk: any, encoding: string, callback: (error?: Error | null) => void): void;\\\\n            writev?(this: Duplex, chunks: Array<{ chunk: any, encoding: string }>, callback: (error?: Error | null) => void): void;\\\\n            final?(this: Duplex, callback: (error?: Error | null) => void): void;\\\\n            destroy?(this: Duplex, error: Error | null, callback: (error: Error | null) => void): void;\\\\n        }\\\\n\\\\n        // Note: Duplex extends both Readable and Writable.\\\\n        class Duplex extends Readable implements Writable {\\\\n            readonly writable: boolean;\\\\n            readonly writableFinished: boolean;\\\\n            readonly writableHighWaterMark: number;\\\\n            readonly writableLength: number;\\\\n            constructor(opts?: DuplexOptions);\\\\n            _write(chunk: any, encoding: string, callback: (error?: Error | null) => void): void;\\\\n            _writev?(chunks: Array<{ chunk: any, encoding: string }>, callback: (error?: Error | null) => void): void;\\\\n            _destroy(error: Error | null, callback: (error: Error | null) => void): void;\\\\n            _final(callback: (error?: Error | null) => void): void;\\\\n            write(chunk: any, encoding?: string, cb?: (error: Error | null | undefined) => void): boolean;\\\\n            write(chunk: any, cb?: (error: Error | null | undefined) => void): boolean;\\\\n            setDefaultEncoding(encoding: string): this;\\\\n            end(cb?: () => void): void;\\\\n            end(chunk: any, cb?: () => void): void;\\\\n            end(chunk: any, encoding?: string, cb?: () => void): void;\\\\n            cork(): void;\\\\n            uncork(): void;\\\\n        }\\\\n\\\\n        type TransformCallback = (error?: Error | null, data?: any) => void;\\\\n\\\\n        interface TransformOptions extends DuplexOptions {\\\\n            read?(this: Transform, size: number): void;\\\\n            write?(this: Transform, chunk: any, encoding: string, callback: (error?: Error | null) => void): void;\\\\n            writev?(this: Transform, chunks: Array<{ chunk: any, encoding: string }>, callback: (error?: Error | null) => void): void;\\\\n            final?(this: Transform, callback: (error?: Error | null) => void): void;\\\\n            destroy?(this: Transform, error: Error | null, callback: (error: Error | null) => void): void;\\\\n            transform?(this: Transform, chunk: any, encoding: string, callback: TransformCallback): void;\\\\n            flush?(this: Transform, callback: TransformCallback): void;\\\\n        }\\\\n\\\\n        class Transform extends Duplex {\\\\n            constructor(opts?: TransformOptions);\\\\n            _transform(chunk: any, encoding: string, callback: TransformCallback): void;\\\\n            _flush(callback: TransformCallback): void;\\\\n        }\\\\n\\\\n        class PassThrough extends Transform { }\\\\n\\\\n        function finished(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, callback: (err?: NodeJS.ErrnoException | null) => void): () => void;\\\\n        namespace finished {\\\\n            function __promisify__(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream): Promise<void>;\\\\n        }\\\\n\\\\n        function pipeline<T extends NodeJS.WritableStream>(stream1: NodeJS.ReadableStream, stream2: T, callback?: (err: NodeJS.ErrnoException | null) => void): T;\\\\n        function pipeline<T extends NodeJS.WritableStream>(stream1: NodeJS.ReadableStream, stream2: NodeJS.ReadWriteStream, stream3: T, callback?: (err: NodeJS.ErrnoException | null) => void): T;\\\\n        function pipeline<T extends NodeJS.WritableStream>(\\\\n            stream1: NodeJS.ReadableStream,\\\\n            stream2: NodeJS.ReadWriteStream,\\\\n            stream3: NodeJS.ReadWriteStream,\\\\n            stream4: T,\\\\n            callback?: (err: NodeJS.ErrnoException | null) => void,\\\\n        ): T;\\\\n        function pipeline<T extends NodeJS.WritableStream>(\\\\n            stream1: NodeJS.ReadableStream,\\\\n            stream2: NodeJS.ReadWriteStream,\\\\n            stream3: NodeJS.ReadWriteStream,\\\\n            stream4: NodeJS.ReadWriteStream,\\\\n            stream5: T,\\\\n            callback?: (err: NodeJS.ErrnoException | null) => void,\\\\n        ): T;\\\\n        function pipeline(streams: Array<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>, callback?: (err: NodeJS.ErrnoException | null) => void): NodeJS.WritableStream;\\\\n        function pipeline(\\\\n            stream1: NodeJS.ReadableStream,\\\\n            stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\\\\n            ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | ((err: NodeJS.ErrnoException | null) => void)>,\\\\n        ): NodeJS.WritableStream;\\\\n        namespace pipeline {\\\\n            function __promisify__(stream1: NodeJS.ReadableStream, stream2: NodeJS.WritableStream): Promise<void>;\\\\n            function __promisify__(stream1: NodeJS.ReadableStream, stream2: NodeJS.ReadWriteStream, stream3: NodeJS.WritableStream): Promise<void>;\\\\n            function __promisify__(stream1: NodeJS.ReadableStream, stream2: NodeJS.ReadWriteStream, stream3: NodeJS.ReadWriteStream, stream4: NodeJS.WritableStream): Promise<void>;\\\\n            function __promisify__(\\\\n                stream1: NodeJS.ReadableStream,\\\\n                stream2: NodeJS.ReadWriteStream,\\\\n                stream3: NodeJS.ReadWriteStream,\\\\n                stream4: NodeJS.ReadWriteStream,\\\\n                stream5: NodeJS.WritableStream,\\\\n            ): Promise<void>;\\\\n            function __promisify__(streams: Array<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>): Promise<void>;\\\\n            function __promisify__(\\\\n                stream1: NodeJS.ReadableStream,\\\\n                stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\\\\n                ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream>,\\\\n            ): Promise<void>;\\\\n        }\\\\n\\\\n        interface Pipe { }\\\\n    }\\\\n\\\\n    export = internal;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/dns.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"dns\\\\\\\" {\\\\n    // Supported getaddrinfo flags.\\\\n    const ADDRCONFIG: number;\\\\n    const V4MAPPED: number;\\\\n\\\\n    interface LookupOptions {\\\\n        family?: number;\\\\n        hints?: number;\\\\n        all?: boolean;\\\\n        verbatim?: boolean;\\\\n    }\\\\n\\\\n    interface LookupOneOptions extends LookupOptions {\\\\n        all?: false;\\\\n    }\\\\n\\\\n    interface LookupAllOptions extends LookupOptions {\\\\n        all: true;\\\\n    }\\\\n\\\\n    interface LookupAddress {\\\\n        address: string;\\\\n        family: number;\\\\n    }\\\\n\\\\n    function lookup(hostname: string, family: number, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void): void;\\\\n    function lookup(hostname: string, options: LookupOneOptions, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void): void;\\\\n    function lookup(hostname: string, options: LookupAllOptions, callback: (err: NodeJS.ErrnoException | null, addresses: LookupAddress[]) => void): void;\\\\n    function lookup(hostname: string, options: LookupOptions, callback: (err: NodeJS.ErrnoException | null, address: string | LookupAddress[], family: number) => void): void;\\\\n    function lookup(hostname: string, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace lookup {\\\\n        function __promisify__(hostname: string, options: LookupAllOptions): Promise<LookupAddress[]>;\\\\n        function __promisify__(hostname: string, options?: LookupOneOptions | number): Promise<LookupAddress>;\\\\n        function __promisify__(hostname: string, options: LookupOptions): Promise<LookupAddress | LookupAddress[]>;\\\\n    }\\\\n\\\\n    function lookupService(address: string, port: number, callback: (err: NodeJS.ErrnoException | null, hostname: string, service: string) => void): void;\\\\n\\\\n    namespace lookupService {\\\\n        function __promisify__(address: string, port: number): Promise<{ hostname: string, service: string }>;\\\\n    }\\\\n\\\\n    interface ResolveOptions {\\\\n        ttl: boolean;\\\\n    }\\\\n\\\\n    interface ResolveWithTtlOptions extends ResolveOptions {\\\\n        ttl: true;\\\\n    }\\\\n\\\\n    interface RecordWithTtl {\\\\n        address: string;\\\\n        ttl: number;\\\\n    }\\\\n\\\\n    /** @deprecated Use AnyARecord or AnyAaaaRecord instead. */\\\\n    type AnyRecordWithTtl = AnyARecord | AnyAaaaRecord;\\\\n\\\\n    interface AnyARecord extends RecordWithTtl {\\\\n        type: \\\\\\\"A\\\\\\\";\\\\n    }\\\\n\\\\n    interface AnyAaaaRecord extends RecordWithTtl {\\\\n        type: \\\\\\\"AAAA\\\\\\\";\\\\n    }\\\\n\\\\n    interface MxRecord {\\\\n        priority: number;\\\\n        exchange: string;\\\\n    }\\\\n\\\\n    interface AnyMxRecord extends MxRecord {\\\\n        type: \\\\\\\"MX\\\\\\\";\\\\n    }\\\\n\\\\n    interface NaptrRecord {\\\\n        flags: string;\\\\n        service: string;\\\\n        regexp: string;\\\\n        replacement: string;\\\\n        order: number;\\\\n        preference: number;\\\\n    }\\\\n\\\\n    interface AnyNaptrRecord extends NaptrRecord {\\\\n        type: \\\\\\\"NAPTR\\\\\\\";\\\\n    }\\\\n\\\\n    interface SoaRecord {\\\\n        nsname: string;\\\\n        hostmaster: string;\\\\n        serial: number;\\\\n        refresh: number;\\\\n        retry: number;\\\\n        expire: number;\\\\n        minttl: number;\\\\n    }\\\\n\\\\n    interface AnySoaRecord extends SoaRecord {\\\\n        type: \\\\\\\"SOA\\\\\\\";\\\\n    }\\\\n\\\\n    interface SrvRecord {\\\\n        priority: number;\\\\n        weight: number;\\\\n        port: number;\\\\n        name: string;\\\\n    }\\\\n\\\\n    interface AnySrvRecord extends SrvRecord {\\\\n        type: \\\\\\\"SRV\\\\\\\";\\\\n    }\\\\n\\\\n    interface AnyTxtRecord {\\\\n        type: \\\\\\\"TXT\\\\\\\";\\\\n        entries: string[];\\\\n    }\\\\n\\\\n    interface AnyNsRecord {\\\\n        type: \\\\\\\"NS\\\\\\\";\\\\n        value: string;\\\\n    }\\\\n\\\\n    interface AnyPtrRecord {\\\\n        type: \\\\\\\"PTR\\\\\\\";\\\\n        value: string;\\\\n    }\\\\n\\\\n    interface AnyCnameRecord {\\\\n        type: \\\\\\\"CNAME\\\\\\\";\\\\n        value: string;\\\\n    }\\\\n\\\\n    type AnyRecord = AnyARecord |\\\\n        AnyAaaaRecord |\\\\n        AnyCnameRecord |\\\\n        AnyMxRecord |\\\\n        AnyNaptrRecord |\\\\n        AnyNsRecord |\\\\n        AnyPtrRecord |\\\\n        AnySoaRecord |\\\\n        AnySrvRecord |\\\\n        AnyTxtRecord;\\\\n\\\\n    function resolve(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\\\n    function resolve(hostname: string, rrtype: \\\\\\\"A\\\\\\\", callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\\\n    function resolve(hostname: string, rrtype: \\\\\\\"AAAA\\\\\\\", callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\\\n    function resolve(hostname: string, rrtype: \\\\\\\"ANY\\\\\\\", callback: (err: NodeJS.ErrnoException | null, addresses: AnyRecord[]) => void): void;\\\\n    function resolve(hostname: string, rrtype: \\\\\\\"CNAME\\\\\\\", callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\\\n    function resolve(hostname: string, rrtype: \\\\\\\"MX\\\\\\\", callback: (err: NodeJS.ErrnoException | null, addresses: MxRecord[]) => void): void;\\\\n    function resolve(hostname: string, rrtype: \\\\\\\"NAPTR\\\\\\\", callback: (err: NodeJS.ErrnoException | null, addresses: NaptrRecord[]) => void): void;\\\\n    function resolve(hostname: string, rrtype: \\\\\\\"NS\\\\\\\", callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\\\n    function resolve(hostname: string, rrtype: \\\\\\\"PTR\\\\\\\", callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\\\n    function resolve(hostname: string, rrtype: \\\\\\\"SOA\\\\\\\", callback: (err: NodeJS.ErrnoException | null, addresses: SoaRecord) => void): void;\\\\n    function resolve(hostname: string, rrtype: \\\\\\\"SRV\\\\\\\", callback: (err: NodeJS.ErrnoException | null, addresses: SrvRecord[]) => void): void;\\\\n    function resolve(hostname: string, rrtype: \\\\\\\"TXT\\\\\\\", callback: (err: NodeJS.ErrnoException | null, addresses: string[][]) => void): void;\\\\n    function resolve(\\\\n        hostname: string,\\\\n        rrtype: string,\\\\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]) => void,\\\\n    ): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace resolve {\\\\n        function __promisify__(hostname: string, rrtype?: \\\\\\\"A\\\\\\\" | \\\\\\\"AAAA\\\\\\\" | \\\\\\\"CNAME\\\\\\\" | \\\\\\\"NS\\\\\\\" | \\\\\\\"PTR\\\\\\\"): Promise<string[]>;\\\\n        function __promisify__(hostname: string, rrtype: \\\\\\\"ANY\\\\\\\"): Promise<AnyRecord[]>;\\\\n        function __promisify__(hostname: string, rrtype: \\\\\\\"MX\\\\\\\"): Promise<MxRecord[]>;\\\\n        function __promisify__(hostname: string, rrtype: \\\\\\\"NAPTR\\\\\\\"): Promise<NaptrRecord[]>;\\\\n        function __promisify__(hostname: string, rrtype: \\\\\\\"SOA\\\\\\\"): Promise<SoaRecord>;\\\\n        function __promisify__(hostname: string, rrtype: \\\\\\\"SRV\\\\\\\"): Promise<SrvRecord[]>;\\\\n        function __promisify__(hostname: string, rrtype: \\\\\\\"TXT\\\\\\\"): Promise<string[][]>;\\\\n        function __promisify__(hostname: string, rrtype: string): Promise<string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]>;\\\\n    }\\\\n\\\\n    function resolve4(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\\\n    function resolve4(hostname: string, options: ResolveWithTtlOptions, callback: (err: NodeJS.ErrnoException | null, addresses: RecordWithTtl[]) => void): void;\\\\n    function resolve4(hostname: string, options: ResolveOptions, callback: (err: NodeJS.ErrnoException | null, addresses: string[] | RecordWithTtl[]) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace resolve4 {\\\\n        function __promisify__(hostname: string): Promise<string[]>;\\\\n        function __promisify__(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\\\\n        function __promisify__(hostname: string, options?: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\\\\n    }\\\\n\\\\n    function resolve6(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\\\n    function resolve6(hostname: string, options: ResolveWithTtlOptions, callback: (err: NodeJS.ErrnoException | null, addresses: RecordWithTtl[]) => void): void;\\\\n    function resolve6(hostname: string, options: ResolveOptions, callback: (err: NodeJS.ErrnoException | null, addresses: string[] | RecordWithTtl[]) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace resolve6 {\\\\n        function __promisify__(hostname: string): Promise<string[]>;\\\\n        function __promisify__(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\\\\n        function __promisify__(hostname: string, options?: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\\\\n    }\\\\n\\\\n    function resolveCname(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\\\n    namespace resolveCname {\\\\n        function __promisify__(hostname: string): Promise<string[]>;\\\\n    }\\\\n\\\\n    function resolveMx(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: MxRecord[]) => void): void;\\\\n    namespace resolveMx {\\\\n        function __promisify__(hostname: string): Promise<MxRecord[]>;\\\\n    }\\\\n\\\\n    function resolveNaptr(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: NaptrRecord[]) => void): void;\\\\n    namespace resolveNaptr {\\\\n        function __promisify__(hostname: string): Promise<NaptrRecord[]>;\\\\n    }\\\\n\\\\n    function resolveNs(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\\\n    namespace resolveNs {\\\\n        function __promisify__(hostname: string): Promise<string[]>;\\\\n    }\\\\n\\\\n    function resolvePtr(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void): void;\\\\n    namespace resolvePtr {\\\\n        function __promisify__(hostname: string): Promise<string[]>;\\\\n    }\\\\n\\\\n    function resolveSoa(hostname: string, callback: (err: NodeJS.ErrnoException | null, address: SoaRecord) => void): void;\\\\n    namespace resolveSoa {\\\\n        function __promisify__(hostname: string): Promise<SoaRecord>;\\\\n    }\\\\n\\\\n    function resolveSrv(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: SrvRecord[]) => void): void;\\\\n    namespace resolveSrv {\\\\n        function __promisify__(hostname: string): Promise<SrvRecord[]>;\\\\n    }\\\\n\\\\n    function resolveTxt(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: string[][]) => void): void;\\\\n    namespace resolveTxt {\\\\n        function __promisify__(hostname: string): Promise<string[][]>;\\\\n    }\\\\n\\\\n    function resolveAny(hostname: string, callback: (err: NodeJS.ErrnoException | null, addresses: AnyRecord[]) => void): void;\\\\n    namespace resolveAny {\\\\n        function __promisify__(hostname: string): Promise<AnyRecord[]>;\\\\n    }\\\\n\\\\n    function reverse(ip: string, callback: (err: NodeJS.ErrnoException | null, hostnames: string[]) => void): void;\\\\n    function setServers(servers: ReadonlyArray<string>): void;\\\\n    function getServers(): string[];\\\\n\\\\n    // Error codes\\\\n    const NODATA: string;\\\\n    const FORMERR: string;\\\\n    const SERVFAIL: string;\\\\n    const NOTFOUND: string;\\\\n    const NOTIMP: string;\\\\n    const REFUSED: string;\\\\n    const BADQUERY: string;\\\\n    const BADNAME: string;\\\\n    const BADFAMILY: string;\\\\n    const BADRESP: string;\\\\n    const CONNREFUSED: string;\\\\n    const TIMEOUT: string;\\\\n    const EOF: string;\\\\n    const FILE: string;\\\\n    const NOMEM: string;\\\\n    const DESTRUCTION: string;\\\\n    const BADSTR: string;\\\\n    const BADFLAGS: string;\\\\n    const NONAME: string;\\\\n    const BADHINTS: string;\\\\n    const NOTINITIALIZED: string;\\\\n    const LOADIPHLPAPI: string;\\\\n    const ADDRGETNETWORKPARAMS: string;\\\\n    const CANCELLED: string;\\\\n\\\\n    class Resolver {\\\\n        getServers: typeof getServers;\\\\n        setServers: typeof setServers;\\\\n        resolve: typeof resolve;\\\\n        resolve4: typeof resolve4;\\\\n        resolve6: typeof resolve6;\\\\n        resolveAny: typeof resolveAny;\\\\n        resolveCname: typeof resolveCname;\\\\n        resolveMx: typeof resolveMx;\\\\n        resolveNaptr: typeof resolveNaptr;\\\\n        resolveNs: typeof resolveNs;\\\\n        resolvePtr: typeof resolvePtr;\\\\n        resolveSoa: typeof resolveSoa;\\\\n        resolveSrv: typeof resolveSrv;\\\\n        resolveTxt: typeof resolveTxt;\\\\n        reverse: typeof reverse;\\\\n        cancel(): void;\\\\n    }\\\\n\\\\n    namespace promises {\\\\n        function getServers(): string[];\\\\n\\\\n        function lookup(hostname: string, family: number): Promise<LookupAddress>;\\\\n        function lookup(hostname: string, options: LookupOneOptions): Promise<LookupAddress>;\\\\n        function lookup(hostname: string, options: LookupAllOptions): Promise<LookupAddress[]>;\\\\n        function lookup(hostname: string, options: LookupOptions): Promise<LookupAddress | LookupAddress[]>;\\\\n        function lookup(hostname: string): Promise<LookupAddress>;\\\\n\\\\n        function lookupService(address: string, port: number): Promise<{ hostname: string, service: string }>;\\\\n\\\\n        function resolve(hostname: string): Promise<string[]>;\\\\n        function resolve(hostname: string, rrtype: \\\\\\\"A\\\\\\\"): Promise<string[]>;\\\\n        function resolve(hostname: string, rrtype: \\\\\\\"AAAA\\\\\\\"): Promise<string[]>;\\\\n        function resolve(hostname: string, rrtype: \\\\\\\"ANY\\\\\\\"): Promise<AnyRecord[]>;\\\\n        function resolve(hostname: string, rrtype: \\\\\\\"CNAME\\\\\\\"): Promise<string[]>;\\\\n        function resolve(hostname: string, rrtype: \\\\\\\"MX\\\\\\\"): Promise<MxRecord[]>;\\\\n        function resolve(hostname: string, rrtype: \\\\\\\"NAPTR\\\\\\\"): Promise<NaptrRecord[]>;\\\\n        function resolve(hostname: string, rrtype: \\\\\\\"NS\\\\\\\"): Promise<string[]>;\\\\n        function resolve(hostname: string, rrtype: \\\\\\\"PTR\\\\\\\"): Promise<string[]>;\\\\n        function resolve(hostname: string, rrtype: \\\\\\\"SOA\\\\\\\"): Promise<SoaRecord>;\\\\n        function resolve(hostname: string, rrtype: \\\\\\\"SRV\\\\\\\"): Promise<SrvRecord[]>;\\\\n        function resolve(hostname: string, rrtype: \\\\\\\"TXT\\\\\\\"): Promise<string[][]>;\\\\n        function resolve(hostname: string, rrtype: string): Promise<string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]>;\\\\n\\\\n        function resolve4(hostname: string): Promise<string[]>;\\\\n        function resolve4(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\\\\n        function resolve4(hostname: string, options: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\\\\n\\\\n        function resolve6(hostname: string): Promise<string[]>;\\\\n        function resolve6(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\\\\n        function resolve6(hostname: string, options: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\\\\n\\\\n        function resolveAny(hostname: string): Promise<AnyRecord[]>;\\\\n\\\\n        function resolveCname(hostname: string): Promise<string[]>;\\\\n\\\\n        function resolveMx(hostname: string): Promise<MxRecord[]>;\\\\n\\\\n        function resolveNaptr(hostname: string): Promise<NaptrRecord[]>;\\\\n\\\\n        function resolveNs(hostname: string): Promise<string[]>;\\\\n\\\\n        function resolvePtr(hostname: string): Promise<string[]>;\\\\n\\\\n        function resolveSoa(hostname: string): Promise<SoaRecord>;\\\\n\\\\n        function resolveSrv(hostname: string): Promise<SrvRecord[]>;\\\\n\\\\n        function resolveTxt(hostname: string): Promise<string[][]>;\\\\n\\\\n        function reverse(ip: string): Promise<string[]>;\\\\n\\\\n        function setServers(servers: ReadonlyArray<string>): void;\\\\n\\\\n        class Resolver {\\\\n            getServers: typeof getServers;\\\\n            resolve: typeof resolve;\\\\n            resolve4: typeof resolve4;\\\\n            resolve6: typeof resolve6;\\\\n            resolveAny: typeof resolveAny;\\\\n            resolveCname: typeof resolveCname;\\\\n            resolveMx: typeof resolveMx;\\\\n            resolveNaptr: typeof resolveNaptr;\\\\n            resolveNs: typeof resolveNs;\\\\n            resolvePtr: typeof resolvePtr;\\\\n            resolveSoa: typeof resolveSoa;\\\\n            resolveSrv: typeof resolveSrv;\\\\n            resolveTxt: typeof resolveTxt;\\\\n            reverse: typeof reverse;\\\\n            setServers: typeof setServers;\\\\n        }\\\\n    }\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/net.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"net\\\\\\\" {\\\\n    import * as stream from \\\\\\\"stream\\\\\\\";\\\\n    import * as events from \\\\\\\"events\\\\\\\";\\\\n    import * as dns from \\\\\\\"dns\\\\\\\";\\\\n\\\\n    type LookupFunction = (hostname: string, options: dns.LookupOneOptions, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void) => void;\\\\n\\\\n    interface AddressInfo {\\\\n        address: string;\\\\n        family: string;\\\\n        port: number;\\\\n    }\\\\n\\\\n    interface SocketConstructorOpts {\\\\n        fd?: number;\\\\n        allowHalfOpen?: boolean;\\\\n        readable?: boolean;\\\\n        writable?: boolean;\\\\n    }\\\\n\\\\n    interface TcpSocketConnectOpts {\\\\n        port: number;\\\\n        host?: string;\\\\n        localAddress?: string;\\\\n        localPort?: number;\\\\n        hints?: number;\\\\n        family?: number;\\\\n        lookup?: LookupFunction;\\\\n    }\\\\n\\\\n    interface IpcSocketConnectOpts {\\\\n        path: string;\\\\n    }\\\\n\\\\n    type SocketConnectOpts = TcpSocketConnectOpts | IpcSocketConnectOpts;\\\\n\\\\n    class Socket extends stream.Duplex {\\\\n        constructor(options?: SocketConstructorOpts);\\\\n\\\\n        // Extended base methods\\\\n        write(buffer: Uint8Array | string, cb?: (err?: Error) => void): boolean;\\\\n        write(str: Uint8Array | string, encoding?: string, cb?: (err?: Error) => void): boolean;\\\\n\\\\n        connect(options: SocketConnectOpts, connectionListener?: () => void): this;\\\\n        connect(port: number, host: string, connectionListener?: () => void): this;\\\\n        connect(port: number, connectionListener?: () => void): this;\\\\n        connect(path: string, connectionListener?: () => void): this;\\\\n\\\\n        setEncoding(encoding?: string): this;\\\\n        pause(): this;\\\\n        resume(): this;\\\\n        setTimeout(timeout: number, callback?: () => void): this;\\\\n        setNoDelay(noDelay?: boolean): this;\\\\n        setKeepAlive(enable?: boolean, initialDelay?: number): this;\\\\n        address(): AddressInfo | string;\\\\n        unref(): void;\\\\n        ref(): void;\\\\n\\\\n        readonly bufferSize: number;\\\\n        readonly bytesRead: number;\\\\n        readonly bytesWritten: number;\\\\n        readonly connecting: boolean;\\\\n        readonly destroyed: boolean;\\\\n        readonly localAddress: string;\\\\n        readonly localPort: number;\\\\n        readonly remoteAddress?: string;\\\\n        readonly remoteFamily?: string;\\\\n        readonly remotePort?: number;\\\\n\\\\n        // Extended base methods\\\\n        end(cb?: () => void): void;\\\\n        end(buffer: Uint8Array | string, cb?: () => void): void;\\\\n        end(str: Uint8Array | string, encoding?: string, cb?: () => void): void;\\\\n\\\\n        /**\\\\n         * events.EventEmitter\\\\n         *   1. close\\\\n         *   2. connect\\\\n         *   3. data\\\\n         *   4. drain\\\\n         *   5. end\\\\n         *   6. error\\\\n         *   7. lookup\\\\n         *   8. timeout\\\\n         */\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: (had_error: boolean) => void): this;\\\\n        addListener(event: \\\\\\\"connect\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"data\\\\\\\", listener: (data: Buffer) => void): this;\\\\n        addListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        addListener(event: \\\\\\\"lookup\\\\\\\", listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\\\n        addListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        emit(event: \\\\\\\"close\\\\\\\", had_error: boolean): boolean;\\\\n        emit(event: \\\\\\\"connect\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"data\\\\\\\", data: Buffer): boolean;\\\\n        emit(event: \\\\\\\"drain\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"end\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"error\\\\\\\", err: Error): boolean;\\\\n        emit(event: \\\\\\\"lookup\\\\\\\", err: Error, address: string, family: string | number, host: string): boolean;\\\\n        emit(event: \\\\\\\"timeout\\\\\\\"): boolean;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: (had_error: boolean) => void): this;\\\\n        on(event: \\\\\\\"connect\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"data\\\\\\\", listener: (data: Buffer) => void): this;\\\\n        on(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        on(event: \\\\\\\"lookup\\\\\\\", listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\\\n        on(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: (had_error: boolean) => void): this;\\\\n        once(event: \\\\\\\"connect\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"data\\\\\\\", listener: (data: Buffer) => void): this;\\\\n        once(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        once(event: \\\\\\\"lookup\\\\\\\", listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\\\n        once(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: (had_error: boolean) => void): this;\\\\n        prependListener(event: \\\\\\\"connect\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"data\\\\\\\", listener: (data: Buffer) => void): this;\\\\n        prependListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependListener(event: \\\\\\\"lookup\\\\\\\", listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\\\n        prependListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: (had_error: boolean) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"connect\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"data\\\\\\\", listener: (data: Buffer) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"lookup\\\\\\\", listener: (err: Error, address: string, family: string | number, host: string) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n    }\\\\n\\\\n    interface ListenOptions {\\\\n        port?: number;\\\\n        host?: string;\\\\n        backlog?: number;\\\\n        path?: string;\\\\n        exclusive?: boolean;\\\\n        readableAll?: boolean;\\\\n        writableAll?: boolean;\\\\n        /**\\\\n         * @default false\\\\n         */\\\\n        ipv6Only?: boolean;\\\\n    }\\\\n\\\\n    // https://github.com/nodejs/node/blob/master/lib/net.js\\\\n    class Server extends events.EventEmitter {\\\\n        constructor(connectionListener?: (socket: Socket) => void);\\\\n        constructor(options?: { allowHalfOpen?: boolean, pauseOnConnect?: boolean }, connectionListener?: (socket: Socket) => void);\\\\n\\\\n        listen(port?: number, hostname?: string, backlog?: number, listeningListener?: () => void): this;\\\\n        listen(port?: number, hostname?: string, listeningListener?: () => void): this;\\\\n        listen(port?: number, backlog?: number, listeningListener?: () => void): this;\\\\n        listen(port?: number, listeningListener?: () => void): this;\\\\n        listen(path: string, backlog?: number, listeningListener?: () => void): this;\\\\n        listen(path: string, listeningListener?: () => void): this;\\\\n        listen(options: ListenOptions, listeningListener?: () => void): this;\\\\n        listen(handle: any, backlog?: number, listeningListener?: () => void): this;\\\\n        listen(handle: any, listeningListener?: () => void): this;\\\\n        close(callback?: (err?: Error) => void): this;\\\\n        address(): AddressInfo | string | null;\\\\n        getConnections(cb: (error: Error | null, count: number) => void): void;\\\\n        ref(): this;\\\\n        unref(): this;\\\\n        maxConnections: number;\\\\n        connections: number;\\\\n        listening: boolean;\\\\n\\\\n        /**\\\\n         * events.EventEmitter\\\\n         *   1. close\\\\n         *   2. connection\\\\n         *   3. error\\\\n         *   4. listening\\\\n         */\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"connection\\\\\\\", listener: (socket: Socket) => void): this;\\\\n        addListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        addListener(event: \\\\\\\"listening\\\\\\\", listener: () => void): this;\\\\n\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        emit(event: \\\\\\\"close\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"connection\\\\\\\", socket: Socket): boolean;\\\\n        emit(event: \\\\\\\"error\\\\\\\", err: Error): boolean;\\\\n        emit(event: \\\\\\\"listening\\\\\\\"): boolean;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"connection\\\\\\\", listener: (socket: Socket) => void): this;\\\\n        on(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        on(event: \\\\\\\"listening\\\\\\\", listener: () => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"connection\\\\\\\", listener: (socket: Socket) => void): this;\\\\n        once(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        once(event: \\\\\\\"listening\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"connection\\\\\\\", listener: (socket: Socket) => void): this;\\\\n        prependListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependListener(event: \\\\\\\"listening\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"connection\\\\\\\", listener: (socket: Socket) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"listening\\\\\\\", listener: () => void): this;\\\\n    }\\\\n\\\\n    interface TcpNetConnectOpts extends TcpSocketConnectOpts, SocketConstructorOpts {\\\\n        timeout?: number;\\\\n    }\\\\n\\\\n    interface IpcNetConnectOpts extends IpcSocketConnectOpts, SocketConstructorOpts {\\\\n        timeout?: number;\\\\n    }\\\\n\\\\n    type NetConnectOpts = TcpNetConnectOpts | IpcNetConnectOpts;\\\\n\\\\n    function createServer(connectionListener?: (socket: Socket) => void): Server;\\\\n    function createServer(options?: { allowHalfOpen?: boolean, pauseOnConnect?: boolean }, connectionListener?: (socket: Socket) => void): Server;\\\\n    function connect(options: NetConnectOpts, connectionListener?: () => void): Socket;\\\\n    function connect(port: number, host?: string, connectionListener?: () => void): Socket;\\\\n    function connect(path: string, connectionListener?: () => void): Socket;\\\\n    function createConnection(options: NetConnectOpts, connectionListener?: () => void): Socket;\\\\n    function createConnection(port: number, host?: string, connectionListener?: () => void): Socket;\\\\n    function createConnection(path: string, connectionListener?: () => void): Socket;\\\\n    function isIP(input: string): number;\\\\n    function isIPv4(input: string): boolean;\\\\n    function isIPv6(input: string): boolean;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/child_process.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"child_process\\\\\\\" {\\\\n    import * as events from \\\\\\\"events\\\\\\\";\\\\n    import * as net from \\\\\\\"net\\\\\\\";\\\\n    import { Writable, Readable, Stream, Pipe } from \\\\\\\"stream\\\\\\\";\\\\n\\\\n    interface ChildProcess extends events.EventEmitter {\\\\n        stdin: Writable | null;\\\\n        stdout: Readable | null;\\\\n        stderr: Readable | null;\\\\n        readonly channel?: Pipe | null;\\\\n        readonly stdio: [\\\\n            Writable | null, // stdin\\\\n            Readable | null, // stdout\\\\n            Readable | null, // stderr\\\\n            Readable | Writable | null | undefined, // extra\\\\n            Readable | Writable | null | undefined // extra\\\\n        ];\\\\n        readonly killed: boolean;\\\\n        readonly pid: number;\\\\n        readonly connected: boolean;\\\\n        kill(signal?: string): void;\\\\n        send(message: any, callback?: (error: Error | null) => void): boolean;\\\\n        send(message: any, sendHandle?: net.Socket | net.Server, callback?: (error: Error | null) => void): boolean;\\\\n        send(message: any, sendHandle?: net.Socket | net.Server, options?: MessageOptions, callback?: (error: Error | null) => void): boolean;\\\\n        disconnect(): void;\\\\n        unref(): void;\\\\n        ref(): void;\\\\n\\\\n        /**\\\\n         * events.EventEmitter\\\\n         * 1. close\\\\n         * 2. disconnect\\\\n         * 3. error\\\\n         * 4. exit\\\\n         * 5. message\\\\n         */\\\\n\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: (code: number, signal: string) => void): this;\\\\n        addListener(event: \\\\\\\"disconnect\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        addListener(event: \\\\\\\"exit\\\\\\\", listener: (code: number | null, signal: string | null) => void): this;\\\\n        addListener(event: \\\\\\\"message\\\\\\\", listener: (message: any, sendHandle: net.Socket | net.Server) => void): this;\\\\n\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        emit(event: \\\\\\\"close\\\\\\\", code: number, signal: string): boolean;\\\\n        emit(event: \\\\\\\"disconnect\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"error\\\\\\\", err: Error): boolean;\\\\n        emit(event: \\\\\\\"exit\\\\\\\", code: number | null, signal: string | null): boolean;\\\\n        emit(event: \\\\\\\"message\\\\\\\", message: any, sendHandle: net.Socket | net.Server): boolean;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: (code: number, signal: string) => void): this;\\\\n        on(event: \\\\\\\"disconnect\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        on(event: \\\\\\\"exit\\\\\\\", listener: (code: number | null, signal: string | null) => void): this;\\\\n        on(event: \\\\\\\"message\\\\\\\", listener: (message: any, sendHandle: net.Socket | net.Server) => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: (code: number, signal: string) => void): this;\\\\n        once(event: \\\\\\\"disconnect\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        once(event: \\\\\\\"exit\\\\\\\", listener: (code: number | null, signal: string | null) => void): this;\\\\n        once(event: \\\\\\\"message\\\\\\\", listener: (message: any, sendHandle: net.Socket | net.Server) => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: (code: number, signal: string) => void): this;\\\\n        prependListener(event: \\\\\\\"disconnect\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependListener(event: \\\\\\\"exit\\\\\\\", listener: (code: number | null, signal: string | null) => void): this;\\\\n        prependListener(event: \\\\\\\"message\\\\\\\", listener: (message: any, sendHandle: net.Socket | net.Server) => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: (code: number, signal: string) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"disconnect\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"exit\\\\\\\", listener: (code: number | null, signal: string | null) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"message\\\\\\\", listener: (message: any, sendHandle: net.Socket | net.Server) => void): this;\\\\n    }\\\\n\\\\n    // return this object when stdio option is undefined or not specified\\\\n    interface ChildProcessWithoutNullStreams extends ChildProcess {\\\\n        stdin: Writable;\\\\n        stdout: Readable;\\\\n        stderr: Readable;\\\\n        readonly stdio: [\\\\n            Writable, // stdin\\\\n            Readable, // stdout\\\\n            Readable, // stderr\\\\n            Readable | Writable | null | undefined, // extra, no modification\\\\n            Readable | Writable | null | undefined // extra, no modification\\\\n        ];\\\\n    }\\\\n\\\\n    // return this object when stdio option is a tuple of 3\\\\n    interface ChildProcessByStdio<\\\\n        I extends null | Writable,\\\\n        O extends null | Readable,\\\\n        E extends null | Readable,\\\\n    > extends ChildProcess {\\\\n        stdin: I;\\\\n        stdout: O;\\\\n        stderr: E;\\\\n        readonly stdio: [\\\\n            I,\\\\n            O,\\\\n            E,\\\\n            Readable | Writable | null | undefined, // extra, no modification\\\\n            Readable | Writable | null | undefined // extra, no modification\\\\n        ];\\\\n    }\\\\n\\\\n    interface MessageOptions {\\\\n        keepOpen?: boolean;\\\\n    }\\\\n\\\\n    type StdioOptions = \\\\\\\"pipe\\\\\\\" | \\\\\\\"ignore\\\\\\\" | \\\\\\\"inherit\\\\\\\" | Array<(\\\\\\\"pipe\\\\\\\" | \\\\\\\"ipc\\\\\\\" | \\\\\\\"ignore\\\\\\\" | \\\\\\\"inherit\\\\\\\" | Stream | number | null | undefined)>;\\\\n\\\\n    interface ProcessEnvOptions {\\\\n        uid?: number;\\\\n        gid?: number;\\\\n        cwd?: string;\\\\n        env?: NodeJS.ProcessEnv;\\\\n    }\\\\n\\\\n    interface CommonOptions extends ProcessEnvOptions {\\\\n        /**\\\\n         * @default true\\\\n         */\\\\n        windowsHide?: boolean;\\\\n        /**\\\\n         * @default 0\\\\n         */\\\\n        timeout?: number;\\\\n    }\\\\n\\\\n    interface SpawnOptions extends CommonOptions {\\\\n        argv0?: string;\\\\n        stdio?: StdioOptions;\\\\n        detached?: boolean;\\\\n        shell?: boolean | string;\\\\n        windowsVerbatimArguments?: boolean;\\\\n    }\\\\n\\\\n    interface SpawnOptionsWithoutStdio extends SpawnOptions {\\\\n        stdio?: 'pipe' | Array<null | undefined | 'pipe'>;\\\\n    }\\\\n\\\\n    type StdioNull = 'inherit' | 'ignore' | Stream;\\\\n    type StdioPipe = undefined | null | 'pipe';\\\\n\\\\n    interface SpawnOptionsWithStdioTuple<\\\\n        Stdin extends StdioNull | StdioPipe,\\\\n        Stdout extends StdioNull | StdioPipe,\\\\n        Stderr extends StdioNull | StdioPipe,\\\\n    > extends SpawnOptions {\\\\n        stdio: [Stdin, Stdout, Stderr];\\\\n    }\\\\n\\\\n    // overloads of spawn without 'args'\\\\n    function spawn(command: string, options?: SpawnOptionsWithoutStdio): ChildProcessWithoutNullStreams;\\\\n\\\\n    function spawn(\\\\n        command: string,\\\\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>,\\\\n    ): ChildProcessByStdio<Writable, Readable, Readable>;\\\\n    function spawn(\\\\n        command: string,\\\\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioNull>,\\\\n    ): ChildProcessByStdio<Writable, Readable, null>;\\\\n    function spawn(\\\\n        command: string,\\\\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioPipe>,\\\\n    ): ChildProcessByStdio<Writable, null, Readable>;\\\\n    function spawn(\\\\n        command: string,\\\\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioPipe>,\\\\n    ): ChildProcessByStdio<null, Readable, Readable>;\\\\n    function spawn(\\\\n        command: string,\\\\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioNull>,\\\\n    ): ChildProcessByStdio<Writable, null, null>;\\\\n    function spawn(\\\\n        command: string,\\\\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioNull>,\\\\n    ): ChildProcessByStdio<null, Readable, null>;\\\\n    function spawn(\\\\n        command: string,\\\\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioPipe>,\\\\n    ): ChildProcessByStdio<null, null, Readable>;\\\\n    function spawn(\\\\n        command: string,\\\\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioNull>,\\\\n    ): ChildProcessByStdio<null, null, null>;\\\\n\\\\n    function spawn(command: string, options: SpawnOptions): ChildProcess;\\\\n\\\\n    // overloads of spawn with 'args'\\\\n    function spawn(command: string, args?: ReadonlyArray<string>, options?: SpawnOptionsWithoutStdio): ChildProcessWithoutNullStreams;\\\\n\\\\n    function spawn(\\\\n        command: string,\\\\n        args: ReadonlyArray<string>,\\\\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>,\\\\n    ): ChildProcessByStdio<Writable, Readable, Readable>;\\\\n    function spawn(\\\\n        command: string,\\\\n        args: ReadonlyArray<string>,\\\\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioNull>,\\\\n    ): ChildProcessByStdio<Writable, Readable, null>;\\\\n    function spawn(\\\\n        command: string,\\\\n        args: ReadonlyArray<string>,\\\\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioPipe>,\\\\n    ): ChildProcessByStdio<Writable, null, Readable>;\\\\n    function spawn(\\\\n        command: string,\\\\n        args: ReadonlyArray<string>,\\\\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioPipe>,\\\\n    ): ChildProcessByStdio<null, Readable, Readable>;\\\\n    function spawn(\\\\n        command: string,\\\\n        args: ReadonlyArray<string>,\\\\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioNull>,\\\\n    ): ChildProcessByStdio<Writable, null, null>;\\\\n    function spawn(\\\\n        command: string,\\\\n        args: ReadonlyArray<string>,\\\\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioNull>,\\\\n    ): ChildProcessByStdio<null, Readable, null>;\\\\n    function spawn(\\\\n        command: string,\\\\n        args: ReadonlyArray<string>,\\\\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioPipe>,\\\\n    ): ChildProcessByStdio<null, null, Readable>;\\\\n    function spawn(\\\\n        command: string,\\\\n        args: ReadonlyArray<string>,\\\\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioNull>,\\\\n    ): ChildProcessByStdio<null, null, null>;\\\\n\\\\n    function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptions): ChildProcess;\\\\n\\\\n    interface ExecOptions extends CommonOptions {\\\\n        shell?: string;\\\\n        maxBuffer?: number;\\\\n        killSignal?: string;\\\\n    }\\\\n\\\\n    interface ExecOptionsWithStringEncoding extends ExecOptions {\\\\n        encoding: BufferEncoding;\\\\n    }\\\\n\\\\n    interface ExecOptionsWithBufferEncoding extends ExecOptions {\\\\n        encoding: string | null; // specify `null`.\\\\n    }\\\\n\\\\n    interface ExecException extends Error {\\\\n        cmd?: string;\\\\n        killed?: boolean;\\\\n        code?: number;\\\\n        signal?: string;\\\\n    }\\\\n\\\\n    // no `options` definitely means stdout/stderr are `string`.\\\\n    function exec(command: string, callback?: (error: ExecException | null, stdout: string, stderr: string) => void): ChildProcess;\\\\n\\\\n    // `options` with `\\\\\\\"buffer\\\\\\\"` or `null` for `encoding` means stdout/stderr are definitely `Buffer`.\\\\n    function exec(command: string, options: { encoding: \\\\\\\"buffer\\\\\\\" | null } & ExecOptions, callback?: (error: ExecException | null, stdout: Buffer, stderr: Buffer) => void): ChildProcess;\\\\n\\\\n    // `options` with well known `encoding` means stdout/stderr are definitely `string`.\\\\n    function exec(command: string, options: { encoding: BufferEncoding } & ExecOptions, callback?: (error: ExecException | null, stdout: string, stderr: string) => void): ChildProcess;\\\\n\\\\n    // `options` with an `encoding` whose type is `string` means stdout/stderr could either be `Buffer` or `string`.\\\\n    // There is no guarantee the `encoding` is unknown as `string` is a superset of `BufferEncoding`.\\\\n    function exec(command: string, options: { encoding: string } & ExecOptions, callback?: (error: ExecException | null, stdout: string | Buffer, stderr: string | Buffer) => void): ChildProcess;\\\\n\\\\n    // `options` without an `encoding` means stdout/stderr are definitely `string`.\\\\n    function exec(command: string, options: ExecOptions, callback?: (error: ExecException | null, stdout: string, stderr: string) => void): ChildProcess;\\\\n\\\\n    // fallback if nothing else matches. Worst case is always `string | Buffer`.\\\\n    function exec(\\\\n        command: string,\\\\n        options: ({ encoding?: string | null } & ExecOptions) | undefined | null,\\\\n        callback?: (error: ExecException | null, stdout: string | Buffer, stderr: string | Buffer) => void,\\\\n    ): ChildProcess;\\\\n\\\\n    interface PromiseWithChild<T> extends Promise<T> {\\\\n        child: ChildProcess;\\\\n    }\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace exec {\\\\n        function __promisify__(command: string): PromiseWithChild<{ stdout: string, stderr: string }>;\\\\n        function __promisify__(command: string, options: { encoding: \\\\\\\"buffer\\\\\\\" | null } & ExecOptions): PromiseWithChild<{ stdout: Buffer, stderr: Buffer }>;\\\\n        function __promisify__(command: string, options: { encoding: BufferEncoding } & ExecOptions): PromiseWithChild<{ stdout: string, stderr: string }>;\\\\n        function __promisify__(command: string, options: ExecOptions): PromiseWithChild<{ stdout: string, stderr: string }>;\\\\n        function __promisify__(command: string, options?: ({ encoding?: string | null } & ExecOptions) | null): PromiseWithChild<{ stdout: string | Buffer, stderr: string | Buffer }>;\\\\n    }\\\\n\\\\n    interface ExecFileOptions extends CommonOptions {\\\\n        maxBuffer?: number;\\\\n        killSignal?: string;\\\\n        windowsVerbatimArguments?: boolean;\\\\n        shell?: boolean | string;\\\\n    }\\\\n    interface ExecFileOptionsWithStringEncoding extends ExecFileOptions {\\\\n        encoding: BufferEncoding;\\\\n    }\\\\n    interface ExecFileOptionsWithBufferEncoding extends ExecFileOptions {\\\\n        encoding: 'buffer' | null;\\\\n    }\\\\n    interface ExecFileOptionsWithOtherEncoding extends ExecFileOptions {\\\\n        encoding: string;\\\\n    }\\\\n\\\\n    function execFile(file: string): ChildProcess;\\\\n    function execFile(file: string, options: ({ encoding?: string | null } & ExecFileOptions) | undefined | null): ChildProcess;\\\\n    function execFile(file: string, args?: ReadonlyArray<string> | null): ChildProcess;\\\\n    function execFile(file: string, args: ReadonlyArray<string> | undefined | null, options: ({ encoding?: string | null } & ExecFileOptions) | undefined | null): ChildProcess;\\\\n\\\\n    // no `options` definitely means stdout/stderr are `string`.\\\\n    function execFile(file: string, callback: (error: Error | null, stdout: string, stderr: string) => void): ChildProcess;\\\\n    function execFile(file: string, args: ReadonlyArray<string> | undefined | null, callback: (error: Error | null, stdout: string, stderr: string) => void): ChildProcess;\\\\n\\\\n    // `options` with `\\\\\\\"buffer\\\\\\\"` or `null` for `encoding` means stdout/stderr are definitely `Buffer`.\\\\n    function execFile(file: string, options: ExecFileOptionsWithBufferEncoding, callback: (error: Error | null, stdout: Buffer, stderr: Buffer) => void): ChildProcess;\\\\n    function execFile(\\\\n        file: string,\\\\n        args: ReadonlyArray<string> | undefined | null,\\\\n        options: ExecFileOptionsWithBufferEncoding,\\\\n        callback: (error: Error | null, stdout: Buffer, stderr: Buffer) => void,\\\\n    ): ChildProcess;\\\\n\\\\n    // `options` with well known `encoding` means stdout/stderr are definitely `string`.\\\\n    function execFile(file: string, options: ExecFileOptionsWithStringEncoding, callback: (error: Error | null, stdout: string, stderr: string) => void): ChildProcess;\\\\n    function execFile(\\\\n        file: string,\\\\n        args: ReadonlyArray<string> | undefined | null,\\\\n        options: ExecFileOptionsWithStringEncoding,\\\\n        callback: (error: Error | null, stdout: string, stderr: string) => void,\\\\n    ): ChildProcess;\\\\n\\\\n    // `options` with an `encoding` whose type is `string` means stdout/stderr could either be `Buffer` or `string`.\\\\n    // There is no guarantee the `encoding` is unknown as `string` is a superset of `BufferEncoding`.\\\\n    function execFile(\\\\n        file: string,\\\\n        options: ExecFileOptionsWithOtherEncoding,\\\\n        callback: (error: Error | null, stdout: string | Buffer, stderr: string | Buffer) => void,\\\\n    ): ChildProcess;\\\\n    function execFile(\\\\n        file: string,\\\\n        args: ReadonlyArray<string> | undefined | null,\\\\n        options: ExecFileOptionsWithOtherEncoding,\\\\n        callback: (error: Error | null, stdout: string | Buffer, stderr: string | Buffer) => void,\\\\n    ): ChildProcess;\\\\n\\\\n    // `options` without an `encoding` means stdout/stderr are definitely `string`.\\\\n    function execFile(file: string, options: ExecFileOptions, callback: (error: Error | null, stdout: string, stderr: string) => void): ChildProcess;\\\\n    function execFile(file: string, args: ReadonlyArray<string> | undefined | null, options: ExecFileOptions, callback: (error: Error | null, stdout: string, stderr: string) => void): ChildProcess;\\\\n\\\\n    // fallback if nothing else matches. Worst case is always `string | Buffer`.\\\\n    function execFile(\\\\n        file: string,\\\\n        options: ({ encoding?: string | null } & ExecFileOptions) | undefined | null,\\\\n        callback: ((error: Error | null, stdout: string | Buffer, stderr: string | Buffer) => void) | undefined | null,\\\\n    ): ChildProcess;\\\\n    function execFile(\\\\n        file: string,\\\\n        args: ReadonlyArray<string> | undefined | null,\\\\n        options: ({ encoding?: string | null } & ExecFileOptions) | undefined | null,\\\\n        callback: ((error: Error | null, stdout: string | Buffer, stderr: string | Buffer) => void) | undefined | null,\\\\n    ): ChildProcess;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace execFile {\\\\n        function __promisify__(file: string): PromiseWithChild<{ stdout: string, stderr: string }>;\\\\n        function __promisify__(file: string, args: string[] | undefined | null): PromiseWithChild<{ stdout: string, stderr: string }>;\\\\n        function __promisify__(file: string, options: ExecFileOptionsWithBufferEncoding): PromiseWithChild<{ stdout: Buffer, stderr: Buffer }>;\\\\n        function __promisify__(file: string, args: string[] | undefined | null, options: ExecFileOptionsWithBufferEncoding): PromiseWithChild<{ stdout: Buffer, stderr: Buffer }>;\\\\n        function __promisify__(file: string, options: ExecFileOptionsWithStringEncoding): PromiseWithChild<{ stdout: string, stderr: string }>;\\\\n        function __promisify__(file: string, args: string[] | undefined | null, options: ExecFileOptionsWithStringEncoding): PromiseWithChild<{ stdout: string, stderr: string }>;\\\\n        function __promisify__(file: string, options: ExecFileOptionsWithOtherEncoding): PromiseWithChild<{ stdout: string | Buffer, stderr: string | Buffer }>;\\\\n        function __promisify__(file: string, args: string[] | undefined | null, options: ExecFileOptionsWithOtherEncoding): PromiseWithChild<{ stdout: string | Buffer, stderr: string | Buffer }>;\\\\n        function __promisify__(file: string, options: ExecFileOptions): PromiseWithChild<{ stdout: string, stderr: string }>;\\\\n        function __promisify__(file: string, args: string[] | undefined | null, options: ExecFileOptions): PromiseWithChild<{ stdout: string, stderr: string }>;\\\\n        function __promisify__(file: string, options: ({ encoding?: string | null } & ExecFileOptions) | undefined | null): PromiseWithChild<{ stdout: string | Buffer, stderr: string | Buffer }>;\\\\n        function __promisify__(\\\\n            file: string,\\\\n            args: string[] | undefined | null,\\\\n            options: ({ encoding?: string | null } & ExecFileOptions) | undefined | null,\\\\n        ): PromiseWithChild<{ stdout: string | Buffer, stderr: string | Buffer }>;\\\\n    }\\\\n\\\\n    interface ForkOptions extends ProcessEnvOptions {\\\\n        execPath?: string;\\\\n        execArgv?: string[];\\\\n        silent?: boolean;\\\\n        stdio?: StdioOptions;\\\\n        detached?: boolean;\\\\n        windowsVerbatimArguments?: boolean;\\\\n    }\\\\n    function fork(modulePath: string, args?: ReadonlyArray<string>, options?: ForkOptions): ChildProcess;\\\\n\\\\n    interface SpawnSyncOptions extends CommonOptions {\\\\n        argv0?: string; // Not specified in the docs\\\\n        input?: string | NodeJS.TypedArray | DataView;\\\\n        stdio?: StdioOptions;\\\\n        killSignal?: string | number;\\\\n        maxBuffer?: number;\\\\n        encoding?: string;\\\\n        shell?: boolean | string;\\\\n        windowsVerbatimArguments?: boolean;\\\\n    }\\\\n    interface SpawnSyncOptionsWithStringEncoding extends SpawnSyncOptions {\\\\n        encoding: BufferEncoding;\\\\n    }\\\\n    interface SpawnSyncOptionsWithBufferEncoding extends SpawnSyncOptions {\\\\n        encoding: string; // specify `null`.\\\\n    }\\\\n    interface SpawnSyncReturns<T> {\\\\n        pid: number;\\\\n        output: string[];\\\\n        stdout: T;\\\\n        stderr: T;\\\\n        status: number | null;\\\\n        signal: string | null;\\\\n        error?: Error;\\\\n    }\\\\n    function spawnSync(command: string): SpawnSyncReturns<Buffer>;\\\\n    function spawnSync(command: string, options?: SpawnSyncOptionsWithStringEncoding): SpawnSyncReturns<string>;\\\\n    function spawnSync(command: string, options?: SpawnSyncOptionsWithBufferEncoding): SpawnSyncReturns<Buffer>;\\\\n    function spawnSync(command: string, options?: SpawnSyncOptions): SpawnSyncReturns<Buffer>;\\\\n    function spawnSync(command: string, args?: ReadonlyArray<string>, options?: SpawnSyncOptionsWithStringEncoding): SpawnSyncReturns<string>;\\\\n    function spawnSync(command: string, args?: ReadonlyArray<string>, options?: SpawnSyncOptionsWithBufferEncoding): SpawnSyncReturns<Buffer>;\\\\n    function spawnSync(command: string, args?: ReadonlyArray<string>, options?: SpawnSyncOptions): SpawnSyncReturns<Buffer>;\\\\n\\\\n    interface ExecSyncOptions extends CommonOptions {\\\\n        input?: string | Uint8Array;\\\\n        stdio?: StdioOptions;\\\\n        shell?: string;\\\\n        killSignal?: string | number;\\\\n        maxBuffer?: number;\\\\n        encoding?: string;\\\\n    }\\\\n    interface ExecSyncOptionsWithStringEncoding extends ExecSyncOptions {\\\\n        encoding: BufferEncoding;\\\\n    }\\\\n    interface ExecSyncOptionsWithBufferEncoding extends ExecSyncOptions {\\\\n        encoding: string; // specify `null`.\\\\n    }\\\\n    function execSync(command: string): Buffer;\\\\n    function execSync(command: string, options?: ExecSyncOptionsWithStringEncoding): string;\\\\n    function execSync(command: string, options?: ExecSyncOptionsWithBufferEncoding): Buffer;\\\\n    function execSync(command: string, options?: ExecSyncOptions): Buffer;\\\\n\\\\n    interface ExecFileSyncOptions extends CommonOptions {\\\\n        input?: string | NodeJS.TypedArray | DataView;\\\\n        stdio?: StdioOptions;\\\\n        killSignal?: string | number;\\\\n        maxBuffer?: number;\\\\n        encoding?: string;\\\\n        shell?: boolean | string;\\\\n    }\\\\n    interface ExecFileSyncOptionsWithStringEncoding extends ExecFileSyncOptions {\\\\n        encoding: BufferEncoding;\\\\n    }\\\\n    interface ExecFileSyncOptionsWithBufferEncoding extends ExecFileSyncOptions {\\\\n        encoding: string; // specify `null`.\\\\n    }\\\\n    function execFileSync(command: string): Buffer;\\\\n    function execFileSync(command: string, options?: ExecFileSyncOptionsWithStringEncoding): string;\\\\n    function execFileSync(command: string, options?: ExecFileSyncOptionsWithBufferEncoding): Buffer;\\\\n    function execFileSync(command: string, options?: ExecFileSyncOptions): Buffer;\\\\n    function execFileSync(command: string, args?: ReadonlyArray<string>, options?: ExecFileSyncOptionsWithStringEncoding): string;\\\\n    function execFileSync(command: string, args?: ReadonlyArray<string>, options?: ExecFileSyncOptionsWithBufferEncoding): Buffer;\\\\n    function execFileSync(command: string, args?: ReadonlyArray<string>, options?: ExecFileSyncOptions): Buffer;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/cluster.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"cluster\\\\\\\" {\\\\n    import * as child from \\\\\\\"child_process\\\\\\\";\\\\n    import * as events from \\\\\\\"events\\\\\\\";\\\\n    import * as net from \\\\\\\"net\\\\\\\";\\\\n\\\\n    // interfaces\\\\n    interface ClusterSettings {\\\\n        execArgv?: string[]; // default: process.execArgv\\\\n        exec?: string;\\\\n        args?: string[];\\\\n        silent?: boolean;\\\\n        stdio?: any[];\\\\n        uid?: number;\\\\n        gid?: number;\\\\n        inspectPort?: number | (() => number);\\\\n    }\\\\n\\\\n    interface Address {\\\\n        address: string;\\\\n        port: number;\\\\n        addressType: number | \\\\\\\"udp4\\\\\\\" | \\\\\\\"udp6\\\\\\\";  // 4, 6, -1, \\\\\\\"udp4\\\\\\\", \\\\\\\"udp6\\\\\\\"\\\\n    }\\\\n\\\\n    class Worker extends events.EventEmitter {\\\\n        id: number;\\\\n        process: child.ChildProcess;\\\\n        send(message: any, sendHandle?: any, callback?: (error: Error | null) => void): boolean;\\\\n        kill(signal?: string): void;\\\\n        destroy(signal?: string): void;\\\\n        disconnect(): void;\\\\n        isConnected(): boolean;\\\\n        isDead(): boolean;\\\\n        exitedAfterDisconnect: boolean;\\\\n\\\\n        /**\\\\n         * events.EventEmitter\\\\n         *   1. disconnect\\\\n         *   2. error\\\\n         *   3. exit\\\\n         *   4. listening\\\\n         *   5. message\\\\n         *   6. online\\\\n         */\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"disconnect\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n        addListener(event: \\\\\\\"exit\\\\\\\", listener: (code: number, signal: string) => void): this;\\\\n        addListener(event: \\\\\\\"listening\\\\\\\", listener: (address: Address) => void): this;\\\\n        addListener(event: \\\\\\\"message\\\\\\\", listener: (message: any, handle: net.Socket | net.Server) => void): this;  // the handle is a net.Socket or net.Server object, or undefined.\\\\n        addListener(event: \\\\\\\"online\\\\\\\", listener: () => void): this;\\\\n\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        emit(event: \\\\\\\"disconnect\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"error\\\\\\\", error: Error): boolean;\\\\n        emit(event: \\\\\\\"exit\\\\\\\", code: number, signal: string): boolean;\\\\n        emit(event: \\\\\\\"listening\\\\\\\", address: Address): boolean;\\\\n        emit(event: \\\\\\\"message\\\\\\\", message: any, handle: net.Socket | net.Server): boolean;\\\\n        emit(event: \\\\\\\"online\\\\\\\"): boolean;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"disconnect\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n        on(event: \\\\\\\"exit\\\\\\\", listener: (code: number, signal: string) => void): this;\\\\n        on(event: \\\\\\\"listening\\\\\\\", listener: (address: Address) => void): this;\\\\n        on(event: \\\\\\\"message\\\\\\\", listener: (message: any, handle: net.Socket | net.Server) => void): this;  // the handle is a net.Socket or net.Server object, or undefined.\\\\n        on(event: \\\\\\\"online\\\\\\\", listener: () => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"disconnect\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n        once(event: \\\\\\\"exit\\\\\\\", listener: (code: number, signal: string) => void): this;\\\\n        once(event: \\\\\\\"listening\\\\\\\", listener: (address: Address) => void): this;\\\\n        once(event: \\\\\\\"message\\\\\\\", listener: (message: any, handle: net.Socket | net.Server) => void): this;  // the handle is a net.Socket or net.Server object, or undefined.\\\\n        once(event: \\\\\\\"online\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"disconnect\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n        prependListener(event: \\\\\\\"exit\\\\\\\", listener: (code: number, signal: string) => void): this;\\\\n        prependListener(event: \\\\\\\"listening\\\\\\\", listener: (address: Address) => void): this;\\\\n        prependListener(event: \\\\\\\"message\\\\\\\", listener: (message: any, handle: net.Socket | net.Server) => void): this;  // the handle is a net.Socket or net.Server object, or undefined.\\\\n        prependListener(event: \\\\\\\"online\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"disconnect\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"exit\\\\\\\", listener: (code: number, signal: string) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"listening\\\\\\\", listener: (address: Address) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"message\\\\\\\", listener: (message: any, handle: net.Socket | net.Server) => void): this;  // the handle is a net.Socket or net.Server object, or undefined.\\\\n        prependOnceListener(event: \\\\\\\"online\\\\\\\", listener: () => void): this;\\\\n    }\\\\n\\\\n    interface Cluster extends events.EventEmitter {\\\\n        Worker: Worker;\\\\n        disconnect(callback?: () => void): void;\\\\n        fork(env?: any): Worker;\\\\n        isMaster: boolean;\\\\n        isWorker: boolean;\\\\n        // TODO: cluster.schedulingPolicy\\\\n        settings: ClusterSettings;\\\\n        setupMaster(settings?: ClusterSettings): void;\\\\n        worker?: Worker;\\\\n        workers?: {\\\\n            [index: string]: Worker | undefined\\\\n        };\\\\n\\\\n        /**\\\\n         * events.EventEmitter\\\\n         *   1. disconnect\\\\n         *   2. exit\\\\n         *   3. fork\\\\n         *   4. listening\\\\n         *   5. message\\\\n         *   6. online\\\\n         *   7. setup\\\\n         */\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"disconnect\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        addListener(event: \\\\\\\"exit\\\\\\\", listener: (worker: Worker, code: number, signal: string) => void): this;\\\\n        addListener(event: \\\\\\\"fork\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        addListener(event: \\\\\\\"listening\\\\\\\", listener: (worker: Worker, address: Address) => void): this;\\\\n        addListener(event: \\\\\\\"message\\\\\\\", listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this;  // the handle is a net.Socket or net.Server object, or undefined.\\\\n        addListener(event: \\\\\\\"online\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        addListener(event: \\\\\\\"setup\\\\\\\", listener: (settings: ClusterSettings) => void): this;\\\\n\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        emit(event: \\\\\\\"disconnect\\\\\\\", worker: Worker): boolean;\\\\n        emit(event: \\\\\\\"exit\\\\\\\", worker: Worker, code: number, signal: string): boolean;\\\\n        emit(event: \\\\\\\"fork\\\\\\\", worker: Worker): boolean;\\\\n        emit(event: \\\\\\\"listening\\\\\\\", worker: Worker, address: Address): boolean;\\\\n        emit(event: \\\\\\\"message\\\\\\\", worker: Worker, message: any, handle: net.Socket | net.Server): boolean;\\\\n        emit(event: \\\\\\\"online\\\\\\\", worker: Worker): boolean;\\\\n        emit(event: \\\\\\\"setup\\\\\\\", settings: ClusterSettings): boolean;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"disconnect\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        on(event: \\\\\\\"exit\\\\\\\", listener: (worker: Worker, code: number, signal: string) => void): this;\\\\n        on(event: \\\\\\\"fork\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        on(event: \\\\\\\"listening\\\\\\\", listener: (worker: Worker, address: Address) => void): this;\\\\n        on(event: \\\\\\\"message\\\\\\\", listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this;  // the handle is a net.Socket or net.Server object, or undefined.\\\\n        on(event: \\\\\\\"online\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        on(event: \\\\\\\"setup\\\\\\\", listener: (settings: ClusterSettings) => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"disconnect\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        once(event: \\\\\\\"exit\\\\\\\", listener: (worker: Worker, code: number, signal: string) => void): this;\\\\n        once(event: \\\\\\\"fork\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        once(event: \\\\\\\"listening\\\\\\\", listener: (worker: Worker, address: Address) => void): this;\\\\n        once(event: \\\\\\\"message\\\\\\\", listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this;  // the handle is a net.Socket or net.Server object, or undefined.\\\\n        once(event: \\\\\\\"online\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        once(event: \\\\\\\"setup\\\\\\\", listener: (settings: ClusterSettings) => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"disconnect\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        prependListener(event: \\\\\\\"exit\\\\\\\", listener: (worker: Worker, code: number, signal: string) => void): this;\\\\n        prependListener(event: \\\\\\\"fork\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        prependListener(event: \\\\\\\"listening\\\\\\\", listener: (worker: Worker, address: Address) => void): this;\\\\n        prependListener(event: \\\\\\\"message\\\\\\\", listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this;  // the handle is a net.Socket or net.Server object, or undefined.\\\\n        prependListener(event: \\\\\\\"online\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        prependListener(event: \\\\\\\"setup\\\\\\\", listener: (settings: ClusterSettings) => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"disconnect\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"exit\\\\\\\", listener: (worker: Worker, code: number, signal: string) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"fork\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"listening\\\\\\\", listener: (worker: Worker, address: Address) => void): this;\\\\n        // the handle is a net.Socket or net.Server object, or undefined.\\\\n        prependOnceListener(event: \\\\\\\"message\\\\\\\", listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"online\\\\\\\", listener: (worker: Worker) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"setup\\\\\\\", listener: (settings: ClusterSettings) => void): this;\\\\n    }\\\\n\\\\n    function disconnect(callback?: () => void): void;\\\\n    function fork(env?: any): Worker;\\\\n    const isMaster: boolean;\\\\n    const isWorker: boolean;\\\\n    // TODO: cluster.schedulingPolicy\\\\n    const settings: ClusterSettings;\\\\n    function setupMaster(settings?: ClusterSettings): void;\\\\n    const worker: Worker;\\\\n    const workers: {\\\\n        [index: string]: Worker | undefined\\\\n    };\\\\n\\\\n    /**\\\\n     * events.EventEmitter\\\\n     *   1. disconnect\\\\n     *   2. exit\\\\n     *   3. fork\\\\n     *   4. listening\\\\n     *   5. message\\\\n     *   6. online\\\\n     *   7. setup\\\\n     */\\\\n    function addListener(event: string, listener: (...args: any[]) => void): Cluster;\\\\n    function addListener(event: \\\\\\\"disconnect\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function addListener(event: \\\\\\\"exit\\\\\\\", listener: (worker: Worker, code: number, signal: string) => void): Cluster;\\\\n    function addListener(event: \\\\\\\"fork\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function addListener(event: \\\\\\\"listening\\\\\\\", listener: (worker: Worker, address: Address) => void): Cluster;\\\\n     // the handle is a net.Socket or net.Server object, or undefined.\\\\n    function addListener(event: \\\\\\\"message\\\\\\\", listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): Cluster;\\\\n    function addListener(event: \\\\\\\"online\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function addListener(event: \\\\\\\"setup\\\\\\\", listener: (settings: ClusterSettings) => void): Cluster;\\\\n\\\\n    function emit(event: string | symbol, ...args: any[]): boolean;\\\\n    function emit(event: \\\\\\\"disconnect\\\\\\\", worker: Worker): boolean;\\\\n    function emit(event: \\\\\\\"exit\\\\\\\", worker: Worker, code: number, signal: string): boolean;\\\\n    function emit(event: \\\\\\\"fork\\\\\\\", worker: Worker): boolean;\\\\n    function emit(event: \\\\\\\"listening\\\\\\\", worker: Worker, address: Address): boolean;\\\\n    function emit(event: \\\\\\\"message\\\\\\\", worker: Worker, message: any, handle: net.Socket | net.Server): boolean;\\\\n    function emit(event: \\\\\\\"online\\\\\\\", worker: Worker): boolean;\\\\n    function emit(event: \\\\\\\"setup\\\\\\\", settings: ClusterSettings): boolean;\\\\n\\\\n    function on(event: string, listener: (...args: any[]) => void): Cluster;\\\\n    function on(event: \\\\\\\"disconnect\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function on(event: \\\\\\\"exit\\\\\\\", listener: (worker: Worker, code: number, signal: string) => void): Cluster;\\\\n    function on(event: \\\\\\\"fork\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function on(event: \\\\\\\"listening\\\\\\\", listener: (worker: Worker, address: Address) => void): Cluster;\\\\n    function on(event: \\\\\\\"message\\\\\\\", listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): Cluster;  // the handle is a net.Socket or net.Server object, or undefined.\\\\n    function on(event: \\\\\\\"online\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function on(event: \\\\\\\"setup\\\\\\\", listener: (settings: ClusterSettings) => void): Cluster;\\\\n\\\\n    function once(event: string, listener: (...args: any[]) => void): Cluster;\\\\n    function once(event: \\\\\\\"disconnect\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function once(event: \\\\\\\"exit\\\\\\\", listener: (worker: Worker, code: number, signal: string) => void): Cluster;\\\\n    function once(event: \\\\\\\"fork\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function once(event: \\\\\\\"listening\\\\\\\", listener: (worker: Worker, address: Address) => void): Cluster;\\\\n    function once(event: \\\\\\\"message\\\\\\\", listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): Cluster;  // the handle is a net.Socket or net.Server object, or undefined.\\\\n    function once(event: \\\\\\\"online\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function once(event: \\\\\\\"setup\\\\\\\", listener: (settings: ClusterSettings) => void): Cluster;\\\\n\\\\n    function removeListener(event: string, listener: (...args: any[]) => void): Cluster;\\\\n    function removeAllListeners(event?: string): Cluster;\\\\n    function setMaxListeners(n: number): Cluster;\\\\n    function getMaxListeners(): number;\\\\n    function listeners(event: string): Function[];\\\\n    function listenerCount(type: string): number;\\\\n\\\\n    function prependListener(event: string, listener: (...args: any[]) => void): Cluster;\\\\n    function prependListener(event: \\\\\\\"disconnect\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function prependListener(event: \\\\\\\"exit\\\\\\\", listener: (worker: Worker, code: number, signal: string) => void): Cluster;\\\\n    function prependListener(event: \\\\\\\"fork\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function prependListener(event: \\\\\\\"listening\\\\\\\", listener: (worker: Worker, address: Address) => void): Cluster;\\\\n     // the handle is a net.Socket or net.Server object, or undefined.\\\\n    function prependListener(event: \\\\\\\"message\\\\\\\", listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): Cluster;\\\\n    function prependListener(event: \\\\\\\"online\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function prependListener(event: \\\\\\\"setup\\\\\\\", listener: (settings: ClusterSettings) => void): Cluster;\\\\n\\\\n    function prependOnceListener(event: string, listener: (...args: any[]) => void): Cluster;\\\\n    function prependOnceListener(event: \\\\\\\"disconnect\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function prependOnceListener(event: \\\\\\\"exit\\\\\\\", listener: (worker: Worker, code: number, signal: string) => void): Cluster;\\\\n    function prependOnceListener(event: \\\\\\\"fork\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function prependOnceListener(event: \\\\\\\"listening\\\\\\\", listener: (worker: Worker, address: Address) => void): Cluster;\\\\n     // the handle is a net.Socket or net.Server object, or undefined.\\\\n    function prependOnceListener(event: \\\\\\\"message\\\\\\\", listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): Cluster;\\\\n    function prependOnceListener(event: \\\\\\\"online\\\\\\\", listener: (worker: Worker) => void): Cluster;\\\\n    function prependOnceListener(event: \\\\\\\"setup\\\\\\\", listener: (settings: ClusterSettings) => void): Cluster;\\\\n\\\\n    function eventNames(): string[];\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/console.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"console\\\\\\\" {\\\\n    export = console;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/constants.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"constants\\\\\\\" {\\\\n    const E2BIG: number;\\\\n    const EACCES: number;\\\\n    const EADDRINUSE: number;\\\\n    const EADDRNOTAVAIL: number;\\\\n    const EAFNOSUPPORT: number;\\\\n    const EAGAIN: number;\\\\n    const EALREADY: number;\\\\n    const EBADF: number;\\\\n    const EBADMSG: number;\\\\n    const EBUSY: number;\\\\n    const ECANCELED: number;\\\\n    const ECHILD: number;\\\\n    const ECONNABORTED: number;\\\\n    const ECONNREFUSED: number;\\\\n    const ECONNRESET: number;\\\\n    const EDEADLK: number;\\\\n    const EDESTADDRREQ: number;\\\\n    const EDOM: number;\\\\n    const EEXIST: number;\\\\n    const EFAULT: number;\\\\n    const EFBIG: number;\\\\n    const EHOSTUNREACH: number;\\\\n    const EIDRM: number;\\\\n    const EILSEQ: number;\\\\n    const EINPROGRESS: number;\\\\n    const EINTR: number;\\\\n    const EINVAL: number;\\\\n    const EIO: number;\\\\n    const EISCONN: number;\\\\n    const EISDIR: number;\\\\n    const ELOOP: number;\\\\n    const EMFILE: number;\\\\n    const EMLINK: number;\\\\n    const EMSGSIZE: number;\\\\n    const ENAMETOOLONG: number;\\\\n    const ENETDOWN: number;\\\\n    const ENETRESET: number;\\\\n    const ENETUNREACH: number;\\\\n    const ENFILE: number;\\\\n    const ENOBUFS: number;\\\\n    const ENODATA: number;\\\\n    const ENODEV: number;\\\\n    const ENOENT: number;\\\\n    const ENOEXEC: number;\\\\n    const ENOLCK: number;\\\\n    const ENOLINK: number;\\\\n    const ENOMEM: number;\\\\n    const ENOMSG: number;\\\\n    const ENOPROTOOPT: number;\\\\n    const ENOSPC: number;\\\\n    const ENOSR: number;\\\\n    const ENOSTR: number;\\\\n    const ENOSYS: number;\\\\n    const ENOTCONN: number;\\\\n    const ENOTDIR: number;\\\\n    const ENOTEMPTY: number;\\\\n    const ENOTSOCK: number;\\\\n    const ENOTSUP: number;\\\\n    const ENOTTY: number;\\\\n    const ENXIO: number;\\\\n    const EOPNOTSUPP: number;\\\\n    const EOVERFLOW: number;\\\\n    const EPERM: number;\\\\n    const EPIPE: number;\\\\n    const EPROTO: number;\\\\n    const EPROTONOSUPPORT: number;\\\\n    const EPROTOTYPE: number;\\\\n    const ERANGE: number;\\\\n    const EROFS: number;\\\\n    const ESPIPE: number;\\\\n    const ESRCH: number;\\\\n    const ETIME: number;\\\\n    const ETIMEDOUT: number;\\\\n    const ETXTBSY: number;\\\\n    const EWOULDBLOCK: number;\\\\n    const EXDEV: number;\\\\n    const WSAEINTR: number;\\\\n    const WSAEBADF: number;\\\\n    const WSAEACCES: number;\\\\n    const WSAEFAULT: number;\\\\n    const WSAEINVAL: number;\\\\n    const WSAEMFILE: number;\\\\n    const WSAEWOULDBLOCK: number;\\\\n    const WSAEINPROGRESS: number;\\\\n    const WSAEALREADY: number;\\\\n    const WSAENOTSOCK: number;\\\\n    const WSAEDESTADDRREQ: number;\\\\n    const WSAEMSGSIZE: number;\\\\n    const WSAEPROTOTYPE: number;\\\\n    const WSAENOPROTOOPT: number;\\\\n    const WSAEPROTONOSUPPORT: number;\\\\n    const WSAESOCKTNOSUPPORT: number;\\\\n    const WSAEOPNOTSUPP: number;\\\\n    const WSAEPFNOSUPPORT: number;\\\\n    const WSAEAFNOSUPPORT: number;\\\\n    const WSAEADDRINUSE: number;\\\\n    const WSAEADDRNOTAVAIL: number;\\\\n    const WSAENETDOWN: number;\\\\n    const WSAENETUNREACH: number;\\\\n    const WSAENETRESET: number;\\\\n    const WSAECONNABORTED: number;\\\\n    const WSAECONNRESET: number;\\\\n    const WSAENOBUFS: number;\\\\n    const WSAEISCONN: number;\\\\n    const WSAENOTCONN: number;\\\\n    const WSAESHUTDOWN: number;\\\\n    const WSAETOOMANYREFS: number;\\\\n    const WSAETIMEDOUT: number;\\\\n    const WSAECONNREFUSED: number;\\\\n    const WSAELOOP: number;\\\\n    const WSAENAMETOOLONG: number;\\\\n    const WSAEHOSTDOWN: number;\\\\n    const WSAEHOSTUNREACH: number;\\\\n    const WSAENOTEMPTY: number;\\\\n    const WSAEPROCLIM: number;\\\\n    const WSAEUSERS: number;\\\\n    const WSAEDQUOT: number;\\\\n    const WSAESTALE: number;\\\\n    const WSAEREMOTE: number;\\\\n    const WSASYSNOTREADY: number;\\\\n    const WSAVERNOTSUPPORTED: number;\\\\n    const WSANOTINITIALISED: number;\\\\n    const WSAEDISCON: number;\\\\n    const WSAENOMORE: number;\\\\n    const WSAECANCELLED: number;\\\\n    const WSAEINVALIDPROCTABLE: number;\\\\n    const WSAEINVALIDPROVIDER: number;\\\\n    const WSAEPROVIDERFAILEDINIT: number;\\\\n    const WSASYSCALLFAILURE: number;\\\\n    const WSASERVICE_NOT_FOUND: number;\\\\n    const WSATYPE_NOT_FOUND: number;\\\\n    const WSA_E_NO_MORE: number;\\\\n    const WSA_E_CANCELLED: number;\\\\n    const WSAEREFUSED: number;\\\\n    const SIGHUP: number;\\\\n    const SIGINT: number;\\\\n    const SIGILL: number;\\\\n    const SIGABRT: number;\\\\n    const SIGFPE: number;\\\\n    const SIGKILL: number;\\\\n    const SIGSEGV: number;\\\\n    const SIGTERM: number;\\\\n    const SIGBREAK: number;\\\\n    const SIGWINCH: number;\\\\n    const SSL_OP_ALL: number;\\\\n    const SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION: number;\\\\n    const SSL_OP_CIPHER_SERVER_PREFERENCE: number;\\\\n    const SSL_OP_CISCO_ANYCONNECT: number;\\\\n    const SSL_OP_COOKIE_EXCHANGE: number;\\\\n    const SSL_OP_CRYPTOPRO_TLSEXT_BUG: number;\\\\n    const SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS: number;\\\\n    const SSL_OP_EPHEMERAL_RSA: number;\\\\n    const SSL_OP_LEGACY_SERVER_CONNECT: number;\\\\n    const SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER: number;\\\\n    const SSL_OP_MICROSOFT_SESS_ID_BUG: number;\\\\n    const SSL_OP_MSIE_SSLV2_RSA_PADDING: number;\\\\n    const SSL_OP_NETSCAPE_CA_DN_BUG: number;\\\\n    const SSL_OP_NETSCAPE_CHALLENGE_BUG: number;\\\\n    const SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG: number;\\\\n    const SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG: number;\\\\n    const SSL_OP_NO_COMPRESSION: number;\\\\n    const SSL_OP_NO_QUERY_MTU: number;\\\\n    const SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION: number;\\\\n    const SSL_OP_NO_SSLv2: number;\\\\n    const SSL_OP_NO_SSLv3: number;\\\\n    const SSL_OP_NO_TICKET: number;\\\\n    const SSL_OP_NO_TLSv1: number;\\\\n    const SSL_OP_NO_TLSv1_1: number;\\\\n    const SSL_OP_NO_TLSv1_2: number;\\\\n    const SSL_OP_PKCS1_CHECK_1: number;\\\\n    const SSL_OP_PKCS1_CHECK_2: number;\\\\n    const SSL_OP_SINGLE_DH_USE: number;\\\\n    const SSL_OP_SINGLE_ECDH_USE: number;\\\\n    const SSL_OP_SSLEAY_080_CLIENT_DH_BUG: number;\\\\n    const SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG: number;\\\\n    const SSL_OP_TLS_BLOCK_PADDING_BUG: number;\\\\n    const SSL_OP_TLS_D5_BUG: number;\\\\n    const SSL_OP_TLS_ROLLBACK_BUG: number;\\\\n    const ENGINE_METHOD_DSA: number;\\\\n    const ENGINE_METHOD_DH: number;\\\\n    const ENGINE_METHOD_RAND: number;\\\\n    const ENGINE_METHOD_ECDH: number;\\\\n    const ENGINE_METHOD_ECDSA: number;\\\\n    const ENGINE_METHOD_CIPHERS: number;\\\\n    const ENGINE_METHOD_DIGESTS: number;\\\\n    const ENGINE_METHOD_STORE: number;\\\\n    const ENGINE_METHOD_PKEY_METHS: number;\\\\n    const ENGINE_METHOD_PKEY_ASN1_METHS: number;\\\\n    const ENGINE_METHOD_ALL: number;\\\\n    const ENGINE_METHOD_NONE: number;\\\\n    const DH_CHECK_P_NOT_SAFE_PRIME: number;\\\\n    const DH_CHECK_P_NOT_PRIME: number;\\\\n    const DH_UNABLE_TO_CHECK_GENERATOR: number;\\\\n    const DH_NOT_SUITABLE_GENERATOR: number;\\\\n    const RSA_PKCS1_PADDING: number;\\\\n    const RSA_SSLV23_PADDING: number;\\\\n    const RSA_NO_PADDING: number;\\\\n    const RSA_PKCS1_OAEP_PADDING: number;\\\\n    const RSA_X931_PADDING: number;\\\\n    const RSA_PKCS1_PSS_PADDING: number;\\\\n    const POINT_CONVERSION_COMPRESSED: number;\\\\n    const POINT_CONVERSION_UNCOMPRESSED: number;\\\\n    const POINT_CONVERSION_HYBRID: number;\\\\n    const O_RDONLY: number;\\\\n    const O_WRONLY: number;\\\\n    const O_RDWR: number;\\\\n    const S_IFMT: number;\\\\n    const S_IFREG: number;\\\\n    const S_IFDIR: number;\\\\n    const S_IFCHR: number;\\\\n    const S_IFBLK: number;\\\\n    const S_IFIFO: number;\\\\n    const S_IFSOCK: number;\\\\n    const S_IRWXU: number;\\\\n    const S_IRUSR: number;\\\\n    const S_IWUSR: number;\\\\n    const S_IXUSR: number;\\\\n    const S_IRWXG: number;\\\\n    const S_IRGRP: number;\\\\n    const S_IWGRP: number;\\\\n    const S_IXGRP: number;\\\\n    const S_IRWXO: number;\\\\n    const S_IROTH: number;\\\\n    const S_IWOTH: number;\\\\n    const S_IXOTH: number;\\\\n    const S_IFLNK: number;\\\\n    const O_CREAT: number;\\\\n    const O_EXCL: number;\\\\n    const O_NOCTTY: number;\\\\n    const O_DIRECTORY: number;\\\\n    const O_NOATIME: number;\\\\n    const O_NOFOLLOW: number;\\\\n    const O_SYNC: number;\\\\n    const O_DSYNC: number;\\\\n    const O_SYMLINK: number;\\\\n    const O_DIRECT: number;\\\\n    const O_NONBLOCK: number;\\\\n    const O_TRUNC: number;\\\\n    const O_APPEND: number;\\\\n    const F_OK: number;\\\\n    const R_OK: number;\\\\n    const W_OK: number;\\\\n    const X_OK: number;\\\\n    const COPYFILE_EXCL: number;\\\\n    const COPYFILE_FICLONE: number;\\\\n    const COPYFILE_FICLONE_FORCE: number;\\\\n    const UV_UDP_REUSEADDR: number;\\\\n    const SIGQUIT: number;\\\\n    const SIGTRAP: number;\\\\n    const SIGIOT: number;\\\\n    const SIGBUS: number;\\\\n    const SIGUSR1: number;\\\\n    const SIGUSR2: number;\\\\n    const SIGPIPE: number;\\\\n    const SIGALRM: number;\\\\n    const SIGCHLD: number;\\\\n    const SIGSTKFLT: number;\\\\n    const SIGCONT: number;\\\\n    const SIGSTOP: number;\\\\n    const SIGTSTP: number;\\\\n    const SIGTTIN: number;\\\\n    const SIGTTOU: number;\\\\n    const SIGURG: number;\\\\n    const SIGXCPU: number;\\\\n    const SIGXFSZ: number;\\\\n    const SIGVTALRM: number;\\\\n    const SIGPROF: number;\\\\n    const SIGIO: number;\\\\n    const SIGPOLL: number;\\\\n    const SIGPWR: number;\\\\n    const SIGSYS: number;\\\\n    const SIGUNUSED: number;\\\\n    const defaultCoreCipherList: string;\\\\n    const defaultCipherList: string;\\\\n    const ENGINE_METHOD_RSA: number;\\\\n    const ALPN_ENABLED: number;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/crypto.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"crypto\\\\\\\" {\\\\n    import * as stream from \\\\\\\"stream\\\\\\\";\\\\n\\\\n    interface Certificate {\\\\n        exportChallenge(spkac: BinaryLike): Buffer;\\\\n        exportPublicKey(spkac: BinaryLike): Buffer;\\\\n        verifySpkac(spkac: Binary): boolean;\\\\n    }\\\\n    const Certificate: {\\\\n        new(): Certificate;\\\\n        (): Certificate;\\\\n    };\\\\n\\\\n    namespace constants { // https://nodejs.org/dist/latest-v10.x/docs/api/crypto.html#crypto_crypto_constants\\\\n        const OPENSSL_VERSION_NUMBER: number;\\\\n\\\\n        /** Applies multiple bug workarounds within OpenSSL. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html for detail. */\\\\n        const SSL_OP_ALL: number;\\\\n        /** Allows legacy insecure renegotiation between OpenSSL and unpatched clients or servers. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html. */\\\\n        const SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION: number;\\\\n        /** Attempts to use the server's preferences instead of the client's when selecting a cipher. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html. */\\\\n        const SSL_OP_CIPHER_SERVER_PREFERENCE: number;\\\\n        /** Instructs OpenSSL to use Cisco's \\\\\\\"speshul\\\\\\\" version of DTLS_BAD_VER. */\\\\n        const SSL_OP_CISCO_ANYCONNECT: number;\\\\n        /** Instructs OpenSSL to turn on cookie exchange. */\\\\n        const SSL_OP_COOKIE_EXCHANGE: number;\\\\n        /** Instructs OpenSSL to add server-hello extension from an early version of the cryptopro draft. */\\\\n        const SSL_OP_CRYPTOPRO_TLSEXT_BUG: number;\\\\n        /** Instructs OpenSSL to disable a SSL 3.0/TLS 1.0 vulnerability workaround added in OpenSSL 0.9.6d. */\\\\n        const SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS: number;\\\\n        /** Instructs OpenSSL to always use the tmp_rsa key when performing RSA operations. */\\\\n        const SSL_OP_EPHEMERAL_RSA: number;\\\\n        /** Allows initial connection to servers that do not support RI. */\\\\n        const SSL_OP_LEGACY_SERVER_CONNECT: number;\\\\n        const SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER: number;\\\\n        const SSL_OP_MICROSOFT_SESS_ID_BUG: number;\\\\n        /** Instructs OpenSSL to disable the workaround for a man-in-the-middle protocol-version vulnerability in the SSL 2.0 server implementation. */\\\\n        const SSL_OP_MSIE_SSLV2_RSA_PADDING: number;\\\\n        const SSL_OP_NETSCAPE_CA_DN_BUG: number;\\\\n        const SSL_OP_NETSCAPE_CHALLENGE_BUG: number;\\\\n        const SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG: number;\\\\n        const SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG: number;\\\\n        /** Instructs OpenSSL to disable support for SSL/TLS compression. */\\\\n        const SSL_OP_NO_COMPRESSION: number;\\\\n        const SSL_OP_NO_QUERY_MTU: number;\\\\n        /** Instructs OpenSSL to always start a new session when performing renegotiation. */\\\\n        const SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION: number;\\\\n        const SSL_OP_NO_SSLv2: number;\\\\n        const SSL_OP_NO_SSLv3: number;\\\\n        const SSL_OP_NO_TICKET: number;\\\\n        const SSL_OP_NO_TLSv1: number;\\\\n        const SSL_OP_NO_TLSv1_1: number;\\\\n        const SSL_OP_NO_TLSv1_2: number;\\\\n        const SSL_OP_PKCS1_CHECK_1: number;\\\\n        const SSL_OP_PKCS1_CHECK_2: number;\\\\n        /** Instructs OpenSSL to always create a new key when using temporary/ephemeral DH parameters. */\\\\n        const SSL_OP_SINGLE_DH_USE: number;\\\\n        /** Instructs OpenSSL to always create a new key when using temporary/ephemeral ECDH parameters. */\\\\n        const SSL_OP_SINGLE_ECDH_USE: number;\\\\n        const SSL_OP_SSLEAY_080_CLIENT_DH_BUG: number;\\\\n        const SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG: number;\\\\n        const SSL_OP_TLS_BLOCK_PADDING_BUG: number;\\\\n        const SSL_OP_TLS_D5_BUG: number;\\\\n        /** Instructs OpenSSL to disable version rollback attack detection. */\\\\n        const SSL_OP_TLS_ROLLBACK_BUG: number;\\\\n\\\\n        const ENGINE_METHOD_RSA: number;\\\\n        const ENGINE_METHOD_DSA: number;\\\\n        const ENGINE_METHOD_DH: number;\\\\n        const ENGINE_METHOD_RAND: number;\\\\n        const ENGINE_METHOD_EC: number;\\\\n        const ENGINE_METHOD_CIPHERS: number;\\\\n        const ENGINE_METHOD_DIGESTS: number;\\\\n        const ENGINE_METHOD_PKEY_METHS: number;\\\\n        const ENGINE_METHOD_PKEY_ASN1_METHS: number;\\\\n        const ENGINE_METHOD_ALL: number;\\\\n        const ENGINE_METHOD_NONE: number;\\\\n\\\\n        const DH_CHECK_P_NOT_SAFE_PRIME: number;\\\\n        const DH_CHECK_P_NOT_PRIME: number;\\\\n        const DH_UNABLE_TO_CHECK_GENERATOR: number;\\\\n        const DH_NOT_SUITABLE_GENERATOR: number;\\\\n\\\\n        const ALPN_ENABLED: number;\\\\n\\\\n        const RSA_PKCS1_PADDING: number;\\\\n        const RSA_SSLV23_PADDING: number;\\\\n        const RSA_NO_PADDING: number;\\\\n        const RSA_PKCS1_OAEP_PADDING: number;\\\\n        const RSA_X931_PADDING: number;\\\\n        const RSA_PKCS1_PSS_PADDING: number;\\\\n        /** Sets the salt length for RSA_PKCS1_PSS_PADDING to the digest size when signing or verifying. */\\\\n        const RSA_PSS_SALTLEN_DIGEST: number;\\\\n        /** Sets the salt length for RSA_PKCS1_PSS_PADDING to the maximum permissible value when signing data. */\\\\n        const RSA_PSS_SALTLEN_MAX_SIGN: number;\\\\n        /** Causes the salt length for RSA_PKCS1_PSS_PADDING to be determined automatically when verifying a signature. */\\\\n        const RSA_PSS_SALTLEN_AUTO: number;\\\\n\\\\n        const POINT_CONVERSION_COMPRESSED: number;\\\\n        const POINT_CONVERSION_UNCOMPRESSED: number;\\\\n        const POINT_CONVERSION_HYBRID: number;\\\\n\\\\n        /** Specifies the built-in default cipher list used by Node.js (colon-separated values). */\\\\n        const defaultCoreCipherList: string;\\\\n        /** Specifies the active default cipher list used by the current Node.js process  (colon-separated values). */\\\\n        const defaultCipherList: string;\\\\n    }\\\\n\\\\n    /** @deprecated since v10.0.0 */\\\\n    const fips: boolean;\\\\n\\\\n    function createHash(algorithm: string, options?: stream.TransformOptions): Hash;\\\\n    function createHmac(algorithm: string, key: BinaryLike, options?: stream.TransformOptions): Hmac;\\\\n\\\\n    type Utf8AsciiLatin1Encoding = \\\\\\\"utf8\\\\\\\" | \\\\\\\"ascii\\\\\\\" | \\\\\\\"latin1\\\\\\\";\\\\n    type HexBase64Latin1Encoding = \\\\\\\"latin1\\\\\\\" | \\\\\\\"hex\\\\\\\" | \\\\\\\"base64\\\\\\\";\\\\n    type Utf8AsciiBinaryEncoding = \\\\\\\"utf8\\\\\\\" | \\\\\\\"ascii\\\\\\\" | \\\\\\\"binary\\\\\\\";\\\\n    type HexBase64BinaryEncoding = \\\\\\\"binary\\\\\\\" | \\\\\\\"base64\\\\\\\" | \\\\\\\"hex\\\\\\\";\\\\n    type ECDHKeyFormat = \\\\\\\"compressed\\\\\\\" | \\\\\\\"uncompressed\\\\\\\" | \\\\\\\"hybrid\\\\\\\";\\\\n\\\\n    class Hash extends stream.Transform {\\\\n        private constructor();\\\\n        update(data: BinaryLike): Hash;\\\\n        update(data: string, input_encoding: Utf8AsciiLatin1Encoding): Hash;\\\\n        digest(): Buffer;\\\\n        digest(encoding: HexBase64Latin1Encoding): string;\\\\n    }\\\\n    class Hmac extends stream.Transform {\\\\n        private constructor();\\\\n        update(data: BinaryLike): Hmac;\\\\n        update(data: string, input_encoding: Utf8AsciiLatin1Encoding): Hmac;\\\\n        digest(): Buffer;\\\\n        digest(encoding: HexBase64Latin1Encoding): string;\\\\n    }\\\\n\\\\n    export type KeyObjectType = 'secret' | 'public' | 'private';\\\\n\\\\n    interface KeyExportOptions<T extends KeyFormat> {\\\\n        type: 'pkcs1' | 'spki' | 'pkcs8' | 'sec1';\\\\n        format: T;\\\\n        cipher?: string;\\\\n        passphrase?: string | Buffer;\\\\n    }\\\\n\\\\n    class KeyObject {\\\\n        private constructor();\\\\n        asymmetricKeyType?: KeyType;\\\\n        /**\\\\n         * For asymmetric keys, this property represents the size of the embedded key in\\\\n         * bytes. This property is `undefined` for symmetric keys.\\\\n         */\\\\n        asymmetricKeySize?: number;\\\\n        export(options: KeyExportOptions<'pem'>): string | Buffer;\\\\n        export(options?: KeyExportOptions<'der'>): Buffer;\\\\n        symmetricSize?: number;\\\\n        type: KeyObjectType;\\\\n    }\\\\n\\\\n    type CipherCCMTypes = 'aes-128-ccm' | 'aes-192-ccm' | 'aes-256-ccm';\\\\n    type CipherGCMTypes = 'aes-128-gcm' | 'aes-192-gcm' | 'aes-256-gcm';\\\\n\\\\n    type Binary = NodeJS.TypedArray | DataView;\\\\n    type BinaryLike = string | Binary;\\\\n\\\\n    type CipherKey = BinaryLike | KeyObject;\\\\n\\\\n    interface CipherCCMOptions extends stream.TransformOptions {\\\\n        authTagLength: number;\\\\n    }\\\\n    interface CipherGCMOptions extends stream.TransformOptions {\\\\n        authTagLength?: number;\\\\n    }\\\\n    /** @deprecated since v10.0.0 use createCipheriv() */\\\\n    function createCipher(algorithm: CipherCCMTypes, password: BinaryLike, options: CipherCCMOptions): CipherCCM;\\\\n    /** @deprecated since v10.0.0 use createCipheriv() */\\\\n    function createCipher(algorithm: CipherGCMTypes, password: BinaryLike, options?: CipherGCMOptions): CipherGCM;\\\\n    /** @deprecated since v10.0.0 use createCipheriv() */\\\\n    function createCipher(algorithm: string, password: BinaryLike, options?: stream.TransformOptions): Cipher;\\\\n\\\\n    function createCipheriv(\\\\n        algorithm: CipherCCMTypes,\\\\n        key: CipherKey,\\\\n        iv: BinaryLike | null,\\\\n        options: CipherCCMOptions\\\\n    ): CipherCCM;\\\\n    function createCipheriv(\\\\n        algorithm: CipherGCMTypes,\\\\n        key: CipherKey,\\\\n        iv: BinaryLike | null,\\\\n        options?: CipherGCMOptions\\\\n    ): CipherGCM;\\\\n    function createCipheriv(\\\\n        algorithm: string, key: CipherKey, iv: BinaryLike | null, options?: stream.TransformOptions\\\\n    ): Cipher;\\\\n\\\\n    class Cipher extends stream.Transform {\\\\n        private constructor();\\\\n        update(data: BinaryLike): Buffer;\\\\n        update(data: string, input_encoding: Utf8AsciiBinaryEncoding): Buffer;\\\\n        update(data: Binary, input_encoding: undefined, output_encoding: HexBase64BinaryEncoding): string;\\\\n        update(data: string, input_encoding: Utf8AsciiBinaryEncoding | undefined, output_encoding: HexBase64BinaryEncoding): string;\\\\n        final(): Buffer;\\\\n        final(output_encoding: string): string;\\\\n        setAutoPadding(auto_padding?: boolean): this;\\\\n        // getAuthTag(): Buffer;\\\\n        // setAAD(buffer: Buffer): this; // docs only say buffer\\\\n    }\\\\n    interface CipherCCM extends Cipher {\\\\n        setAAD(buffer: Buffer, options: { plaintextLength: number }): this;\\\\n        getAuthTag(): Buffer;\\\\n    }\\\\n    interface CipherGCM extends Cipher {\\\\n        setAAD(buffer: Buffer, options?: { plaintextLength: number }): this;\\\\n        getAuthTag(): Buffer;\\\\n    }\\\\n    /** @deprecated since v10.0.0 use createCipheriv() */\\\\n    function createDecipher(algorithm: CipherCCMTypes, password: BinaryLike, options: CipherCCMOptions): DecipherCCM;\\\\n    /** @deprecated since v10.0.0 use createCipheriv() */\\\\n    function createDecipher(algorithm: CipherGCMTypes, password: BinaryLike, options?: CipherGCMOptions): DecipherGCM;\\\\n    /** @deprecated since v10.0.0 use createCipheriv() */\\\\n    function createDecipher(algorithm: string, password: BinaryLike, options?: stream.TransformOptions): Decipher;\\\\n\\\\n    function createDecipheriv(\\\\n        algorithm: CipherCCMTypes,\\\\n        key: BinaryLike,\\\\n        iv: BinaryLike | null,\\\\n        options: CipherCCMOptions,\\\\n    ): DecipherCCM;\\\\n    function createDecipheriv(\\\\n        algorithm: CipherGCMTypes,\\\\n        key: BinaryLike,\\\\n        iv: BinaryLike | null,\\\\n        options?: CipherGCMOptions,\\\\n    ): DecipherGCM;\\\\n    function createDecipheriv(algorithm: string, key: BinaryLike, iv: BinaryLike | null, options?: stream.TransformOptions): Decipher;\\\\n\\\\n    class Decipher extends stream.Transform {\\\\n        private constructor();\\\\n        update(data: Binary): Buffer;\\\\n        update(data: string, input_encoding: HexBase64BinaryEncoding): Buffer;\\\\n        update(data: Binary, input_encoding: undefined, output_encoding: Utf8AsciiBinaryEncoding): string;\\\\n        update(data: string, input_encoding: HexBase64BinaryEncoding | undefined, output_encoding: Utf8AsciiBinaryEncoding): string;\\\\n        final(): Buffer;\\\\n        final(output_encoding: string): string;\\\\n        setAutoPadding(auto_padding?: boolean): this;\\\\n        // setAuthTag(tag: Binary): this;\\\\n        // setAAD(buffer: Binary): this;\\\\n    }\\\\n    interface DecipherCCM extends Decipher {\\\\n        setAuthTag(buffer: Binary): this;\\\\n        setAAD(buffer: Binary, options: { plaintextLength: number }): this;\\\\n    }\\\\n    interface DecipherGCM extends Decipher {\\\\n        setAuthTag(buffer: Binary): this;\\\\n        setAAD(buffer: Binary, options?: { plaintextLength: number }): this;\\\\n    }\\\\n\\\\n    interface PrivateKeyInput {\\\\n        key: string | Buffer;\\\\n        format?: KeyFormat;\\\\n        type?: 'pkcs1' | 'pkcs8' | 'sec1';\\\\n        passphrase?: string | Buffer;\\\\n    }\\\\n\\\\n    interface PublicKeyInput {\\\\n        key: string | Buffer;\\\\n        format?: KeyFormat;\\\\n        type?: 'pkcs1' | 'spki';\\\\n    }\\\\n\\\\n    function createPrivateKey(key: PrivateKeyInput | string | Buffer): KeyObject;\\\\n    function createPublicKey(key: PublicKeyInput | string | Buffer | KeyObject): KeyObject;\\\\n    function createSecretKey(key: Buffer): KeyObject;\\\\n\\\\n    function createSign(algorithm: string, options?: stream.WritableOptions): Signer;\\\\n\\\\n    interface SigningOptions {\\\\n        /**\\\\n         * @See crypto.constants.RSA_PKCS1_PADDING\\\\n         */\\\\n        padding?: number;\\\\n        saltLength?: number;\\\\n    }\\\\n\\\\n    interface SignPrivateKeyInput extends PrivateKeyInput, SigningOptions {\\\\n    }\\\\n\\\\n    type KeyLike = string | Buffer | KeyObject;\\\\n\\\\n    class Signer extends stream.Writable {\\\\n        private constructor();\\\\n\\\\n        update(data: BinaryLike): Signer;\\\\n        update(data: string, input_encoding: Utf8AsciiLatin1Encoding): Signer;\\\\n        sign(private_key: SignPrivateKeyInput | KeyLike): Buffer;\\\\n        sign(private_key: SignPrivateKeyInput | KeyLike, output_format: HexBase64Latin1Encoding): string;\\\\n    }\\\\n\\\\n    function createVerify(algorithm: string, options?: stream.WritableOptions): Verify;\\\\n    class Verify extends stream.Writable {\\\\n        private constructor();\\\\n\\\\n        update(data: BinaryLike): Verify;\\\\n        update(data: string, input_encoding: Utf8AsciiLatin1Encoding): Verify;\\\\n        verify(object: Object | KeyLike, signature: Binary): boolean;\\\\n        verify(object: Object | KeyLike, signature: string, signature_format?: HexBase64Latin1Encoding): boolean;\\\\n        // https://nodejs.org/api/crypto.html#crypto_verifier_verify_object_signature_signature_format\\\\n        // The signature field accepts a TypedArray type, but it is only available starting ES2017\\\\n    }\\\\n    function createDiffieHellman(prime_length: number, generator?: number | Binary): DiffieHellman;\\\\n    function createDiffieHellman(prime: Binary): DiffieHellman;\\\\n    function createDiffieHellman(prime: string, prime_encoding: HexBase64Latin1Encoding): DiffieHellman;\\\\n    function createDiffieHellman(prime: string, prime_encoding: HexBase64Latin1Encoding, generator: number | Binary): DiffieHellman;\\\\n    function createDiffieHellman(prime: string, prime_encoding: HexBase64Latin1Encoding, generator: string, generator_encoding: HexBase64Latin1Encoding): DiffieHellman;\\\\n    class DiffieHellman {\\\\n        private constructor();\\\\n        generateKeys(): Buffer;\\\\n        generateKeys(encoding: HexBase64Latin1Encoding): string;\\\\n        computeSecret(other_public_key: Binary): Buffer;\\\\n        computeSecret(other_public_key: string, input_encoding: HexBase64Latin1Encoding): Buffer;\\\\n        computeSecret(other_public_key: Binary, output_encoding: HexBase64Latin1Encoding): string;\\\\n        computeSecret(other_public_key: string, input_encoding: HexBase64Latin1Encoding, output_encoding: HexBase64Latin1Encoding): string;\\\\n        getPrime(): Buffer;\\\\n        getPrime(encoding: HexBase64Latin1Encoding): string;\\\\n        getGenerator(): Buffer;\\\\n        getGenerator(encoding: HexBase64Latin1Encoding): string;\\\\n        getPublicKey(): Buffer;\\\\n        getPublicKey(encoding: HexBase64Latin1Encoding): string;\\\\n        getPrivateKey(): Buffer;\\\\n        getPrivateKey(encoding: HexBase64Latin1Encoding): string;\\\\n        setPublicKey(public_key: Binary): void;\\\\n        setPublicKey(public_key: string, encoding: string): void;\\\\n        setPrivateKey(private_key: Binary): void;\\\\n        setPrivateKey(private_key: string, encoding: string): void;\\\\n        verifyError: number;\\\\n    }\\\\n    function getDiffieHellman(group_name: string): DiffieHellman;\\\\n    function pbkdf2(\\\\n        password: BinaryLike,\\\\n        salt: BinaryLike,\\\\n        iterations: number,\\\\n        keylen: number,\\\\n        digest: string,\\\\n        callback: (err: Error | null, derivedKey: Buffer) => any,\\\\n    ): void;\\\\n    function pbkdf2Sync(password: BinaryLike, salt: BinaryLike, iterations: number, keylen: number, digest: string): Buffer;\\\\n\\\\n    function randomBytes(size: number): Buffer;\\\\n    function randomBytes(size: number, callback: (err: Error | null, buf: Buffer) => void): void;\\\\n    function pseudoRandomBytes(size: number): Buffer;\\\\n    function pseudoRandomBytes(size: number, callback: (err: Error | null, buf: Buffer) => void): void;\\\\n\\\\n    function randomFillSync<T extends Binary>(buffer: T, offset?: number, size?: number): T;\\\\n    function randomFill<T extends Binary>(buffer: T, callback: (err: Error | null, buf: T) => void): void;\\\\n    function randomFill<T extends Binary>(buffer: T, offset: number, callback: (err: Error | null, buf: T) => void): void;\\\\n    function randomFill<T extends Binary>(buffer: T, offset: number, size: number, callback: (err: Error | null, buf: T) => void): void;\\\\n\\\\n    interface ScryptOptions {\\\\n        N?: number;\\\\n        r?: number;\\\\n        p?: number;\\\\n        maxmem?: number;\\\\n    }\\\\n    function scrypt(\\\\n        password: BinaryLike,\\\\n        salt: BinaryLike,\\\\n        keylen: number, callback: (err: Error | null, derivedKey: Buffer) => void,\\\\n    ): void;\\\\n    function scrypt(\\\\n        password: BinaryLike,\\\\n        salt: BinaryLike,\\\\n        keylen: number,\\\\n        options: ScryptOptions,\\\\n        callback: (err: Error | null, derivedKey: Buffer) => void,\\\\n    ): void;\\\\n    function scryptSync(password: BinaryLike, salt: BinaryLike, keylen: number, options?: ScryptOptions): Buffer;\\\\n\\\\n    interface RsaPublicKey {\\\\n        key: KeyLike;\\\\n        padding?: number;\\\\n    }\\\\n    interface RsaPrivateKey {\\\\n        key: KeyLike;\\\\n        passphrase?: string;\\\\n        padding?: number;\\\\n    }\\\\n    function publicEncrypt(public_key: RsaPublicKey | KeyLike, buffer: Binary): Buffer;\\\\n    function privateDecrypt(private_key: RsaPrivateKey | KeyLike, buffer: Binary): Buffer;\\\\n    function privateEncrypt(private_key: RsaPrivateKey | KeyLike, buffer: Binary): Buffer;\\\\n    function publicDecrypt(public_key: RsaPublicKey | KeyLike, buffer: Binary): Buffer;\\\\n    function getCiphers(): string[];\\\\n    function getCurves(): string[];\\\\n    function getHashes(): string[];\\\\n    class ECDH {\\\\n        private constructor();\\\\n        static convertKey(\\\\n            key: BinaryLike,\\\\n            curve: string,\\\\n            inputEncoding?: HexBase64Latin1Encoding,\\\\n            outputEncoding?: \\\\\\\"latin1\\\\\\\" | \\\\\\\"hex\\\\\\\" | \\\\\\\"base64\\\\\\\",\\\\n            format?: \\\\\\\"uncompressed\\\\\\\" | \\\\\\\"compressed\\\\\\\" | \\\\\\\"hybrid\\\\\\\",\\\\n        ): Buffer | string;\\\\n        generateKeys(): Buffer;\\\\n        generateKeys(encoding: HexBase64Latin1Encoding, format?: ECDHKeyFormat): string;\\\\n        computeSecret(other_public_key: Binary): Buffer;\\\\n        computeSecret(other_public_key: string, input_encoding: HexBase64Latin1Encoding): Buffer;\\\\n        computeSecret(other_public_key: Binary, output_encoding: HexBase64Latin1Encoding): string;\\\\n        computeSecret(other_public_key: string, input_encoding: HexBase64Latin1Encoding, output_encoding: HexBase64Latin1Encoding): string;\\\\n        getPrivateKey(): Buffer;\\\\n        getPrivateKey(encoding: HexBase64Latin1Encoding): string;\\\\n        getPublicKey(): Buffer;\\\\n        getPublicKey(encoding: HexBase64Latin1Encoding, format?: ECDHKeyFormat): string;\\\\n        setPrivateKey(private_key: Binary): void;\\\\n        setPrivateKey(private_key: string, encoding: HexBase64Latin1Encoding): void;\\\\n    }\\\\n    function createECDH(curve_name: string): ECDH;\\\\n    function timingSafeEqual(a: Binary, b: Binary): boolean;\\\\n    /** @deprecated since v10.0.0 */\\\\n    const DEFAULT_ENCODING: string;\\\\n\\\\n    export type KeyType = 'rsa' | 'dsa' | 'ec';\\\\n    export type KeyFormat = 'pem' | 'der';\\\\n\\\\n    interface BasePrivateKeyEncodingOptions<T extends KeyFormat> {\\\\n        format: T;\\\\n        cipher?: string;\\\\n        passphrase?: string;\\\\n    }\\\\n\\\\n    interface KeyPairKeyObjectResult {\\\\n        publicKey: KeyObject;\\\\n        privateKey: KeyObject;\\\\n    }\\\\n\\\\n    interface ECKeyPairKeyObjectOptions {\\\\n        /**\\\\n         * Name of the curve to use.\\\\n         */\\\\n        namedCurve: string;\\\\n    }\\\\n\\\\n    interface RSAKeyPairKeyObjectOptions {\\\\n        /**\\\\n         * Key size in bits\\\\n         */\\\\n        modulusLength: number;\\\\n\\\\n        /**\\\\n         * @default 0x10001\\\\n         */\\\\n        publicExponent?: number;\\\\n    }\\\\n\\\\n    interface DSAKeyPairKeyObjectOptions {\\\\n        /**\\\\n         * Key size in bits\\\\n         */\\\\n        modulusLength: number;\\\\n\\\\n        /**\\\\n         * Size of q in bits\\\\n         */\\\\n        divisorLength: number;\\\\n    }\\\\n\\\\n    interface RSAKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\\\n        /**\\\\n         * Key size in bits\\\\n         */\\\\n        modulusLength: number;\\\\n        /**\\\\n         * @default 0x10001\\\\n         */\\\\n        publicExponent?: number;\\\\n\\\\n        publicKeyEncoding: {\\\\n            type: 'pkcs1' | 'spki';\\\\n            format: PubF;\\\\n        };\\\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\\\n            type: 'pkcs1' | 'pkcs8';\\\\n        };\\\\n    }\\\\n\\\\n    interface DSAKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\\\n        /**\\\\n         * Key size in bits\\\\n         */\\\\n        modulusLength: number;\\\\n        /**\\\\n         * Size of q in bits\\\\n         */\\\\n        divisorLength: number;\\\\n\\\\n        publicKeyEncoding: {\\\\n            type: 'spki';\\\\n            format: PubF;\\\\n        };\\\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\\\n            type: 'pkcs8';\\\\n        };\\\\n    }\\\\n\\\\n    interface ECKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\\\\n        /**\\\\n         * Name of the curve to use.\\\\n         */\\\\n        namedCurve: string;\\\\n\\\\n        publicKeyEncoding: {\\\\n            type: 'pkcs1' | 'spki';\\\\n            format: PubF;\\\\n        };\\\\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\\\\n            type: 'sec1' | 'pkcs8';\\\\n        };\\\\n    }\\\\n\\\\n    interface KeyPairSyncResult<T1 extends string | Buffer, T2 extends string | Buffer> {\\\\n        publicKey: T1;\\\\n        privateKey: T2;\\\\n    }\\\\n\\\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\\\n    function generateKeyPairSync(type: 'rsa', options: RSAKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\\\n\\\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\\\n    function generateKeyPairSync(type: 'dsa', options: DSAKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\\\n\\\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairOptions<'pem', 'pem'>): KeyPairSyncResult<string, string>;\\\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairOptions<'pem', 'der'>): KeyPairSyncResult<string, Buffer>;\\\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairOptions<'der', 'pem'>): KeyPairSyncResult<Buffer, string>;\\\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairOptions<'der', 'der'>): KeyPairSyncResult<Buffer, Buffer>;\\\\n    function generateKeyPairSync(type: 'ec', options: ECKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\\\\n\\\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\\\n    function generateKeyPair(type: 'rsa', options: RSAKeyPairKeyObjectOptions, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\\\n\\\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\\\n    function generateKeyPair(type: 'dsa', options: DSAKeyPairKeyObjectOptions, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\\\n\\\\n    function generateKeyPair(type: 'ec', options: ECKeyPairOptions<'pem', 'pem'>, callback: (err: Error | null, publicKey: string, privateKey: string) => void): void;\\\\n    function generateKeyPair(type: 'ec', options: ECKeyPairOptions<'pem', 'der'>, callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void): void;\\\\n    function generateKeyPair(type: 'ec', options: ECKeyPairOptions<'der', 'pem'>, callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void): void;\\\\n    function generateKeyPair(type: 'ec', options: ECKeyPairOptions<'der', 'der'>, callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void): void;\\\\n    function generateKeyPair(type: 'ec', options: ECKeyPairKeyObjectOptions, callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void): void;\\\\n\\\\n    namespace generateKeyPair {\\\\n        function __promisify__(type: \\\\\\\"rsa\\\\\\\", options: RSAKeyPairOptions<'pem', 'pem'>): Promise<{ publicKey: string, privateKey: string }>;\\\\n        function __promisify__(type: \\\\\\\"rsa\\\\\\\", options: RSAKeyPairOptions<'pem', 'der'>): Promise<{ publicKey: string, privateKey: Buffer }>;\\\\n        function __promisify__(type: \\\\\\\"rsa\\\\\\\", options: RSAKeyPairOptions<'der', 'pem'>): Promise<{ publicKey: Buffer, privateKey: string }>;\\\\n        function __promisify__(type: \\\\\\\"rsa\\\\\\\", options: RSAKeyPairOptions<'der', 'der'>): Promise<{ publicKey: Buffer, privateKey: Buffer }>;\\\\n        function __promisify__(type: \\\\\\\"rsa\\\\\\\", options: RSAKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\\\n\\\\n        function __promisify__(type: \\\\\\\"dsa\\\\\\\", options: DSAKeyPairOptions<'pem', 'pem'>): Promise<{ publicKey: string, privateKey: string }>;\\\\n        function __promisify__(type: \\\\\\\"dsa\\\\\\\", options: DSAKeyPairOptions<'pem', 'der'>): Promise<{ publicKey: string, privateKey: Buffer }>;\\\\n        function __promisify__(type: \\\\\\\"dsa\\\\\\\", options: DSAKeyPairOptions<'der', 'pem'>): Promise<{ publicKey: Buffer, privateKey: string }>;\\\\n        function __promisify__(type: \\\\\\\"dsa\\\\\\\", options: DSAKeyPairOptions<'der', 'der'>): Promise<{ publicKey: Buffer, privateKey: Buffer }>;\\\\n        function __promisify__(type: \\\\\\\"dsa\\\\\\\", options: DSAKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\\\n\\\\n        function __promisify__(type: \\\\\\\"ec\\\\\\\", options: ECKeyPairOptions<'pem', 'pem'>): Promise<{ publicKey: string, privateKey: string }>;\\\\n        function __promisify__(type: \\\\\\\"ec\\\\\\\", options: ECKeyPairOptions<'pem', 'der'>): Promise<{ publicKey: string, privateKey: Buffer }>;\\\\n        function __promisify__(type: \\\\\\\"ec\\\\\\\", options: ECKeyPairOptions<'der', 'pem'>): Promise<{ publicKey: Buffer, privateKey: string }>;\\\\n        function __promisify__(type: \\\\\\\"ec\\\\\\\", options: ECKeyPairOptions<'der', 'der'>): Promise<{ publicKey: Buffer, privateKey: Buffer }>;\\\\n        function __promisify__(type: \\\\\\\"ec\\\\\\\", options: ECKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Calculates and returns the signature for `data` using the given private key and\\\\n     * algorithm. If `algorithm` is `null` or `undefined`, then the algorithm is\\\\n     * dependent upon the key type (especially Ed25519 and Ed448).\\\\n     *\\\\n     * If `key` is not a [`KeyObject`][], this function behaves as if `key` had been\\\\n     * passed to [`crypto.createPrivateKey()`][].\\\\n     */\\\\n    function sign(algorithm: string | null | undefined, data: Binary, key: KeyLike | SignPrivateKeyInput): Buffer;\\\\n\\\\n    interface VerifyKeyWithOptions extends KeyObject, SigningOptions {\\\\n    }\\\\n\\\\n    /**\\\\n     * Calculates and returns the signature for `data` using the given private key and\\\\n     * algorithm. If `algorithm` is `null` or `undefined`, then the algorithm is\\\\n     * dependent upon the key type (especially Ed25519 and Ed448).\\\\n     *\\\\n     * If `key` is not a [`KeyObject`][], this function behaves as if `key` had been\\\\n     * passed to [`crypto.createPublicKey()`][].\\\\n     */\\\\n    function verify(algorithm: string | null | undefined, data: Binary, key: KeyLike | VerifyKeyWithOptions, signature: Binary): Buffer;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/dgram.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"dgram\\\\\\\" {\\\\n    import { AddressInfo } from \\\\\\\"net\\\\\\\";\\\\n    import * as dns from \\\\\\\"dns\\\\\\\";\\\\n    import * as events from \\\\\\\"events\\\\\\\";\\\\n\\\\n    interface RemoteInfo {\\\\n        address: string;\\\\n        family: 'IPv4' | 'IPv6';\\\\n        port: number;\\\\n        size: number;\\\\n    }\\\\n\\\\n    interface BindOptions {\\\\n        port: number;\\\\n        address?: string;\\\\n        exclusive?: boolean;\\\\n    }\\\\n\\\\n    type SocketType = \\\\\\\"udp4\\\\\\\" | \\\\\\\"udp6\\\\\\\";\\\\n\\\\n    interface SocketOptions {\\\\n        type: SocketType;\\\\n        reuseAddr?: boolean;\\\\n        /**\\\\n         * @default false\\\\n         */\\\\n        ipv6Only?: boolean;\\\\n        recvBufferSize?: number;\\\\n        sendBufferSize?: number;\\\\n        lookup?: (hostname: string, options: dns.LookupOneOptions, callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void) => void;\\\\n    }\\\\n\\\\n    function createSocket(type: SocketType, callback?: (msg: Buffer, rinfo: RemoteInfo) => void): Socket;\\\\n    function createSocket(options: SocketOptions, callback?: (msg: Buffer, rinfo: RemoteInfo) => void): Socket;\\\\n\\\\n    class Socket extends events.EventEmitter {\\\\n        send(msg: string | Uint8Array | any[], port: number, address?: string, callback?: (error: Error | null, bytes: number) => void): void;\\\\n        send(msg: string | Uint8Array, offset: number, length: number, port: number, address?: string, callback?: (error: Error | null, bytes: number) => void): void;\\\\n        bind(port?: number, address?: string, callback?: () => void): void;\\\\n        bind(port?: number, callback?: () => void): void;\\\\n        bind(callback?: () => void): void;\\\\n        bind(options: BindOptions, callback?: () => void): void;\\\\n        close(callback?: () => void): void;\\\\n        address(): AddressInfo | string;\\\\n        setBroadcast(flag: boolean): void;\\\\n        setTTL(ttl: number): void;\\\\n        setMulticastTTL(ttl: number): void;\\\\n        setMulticastInterface(multicastInterface: string): void;\\\\n        setMulticastLoopback(flag: boolean): void;\\\\n        addMembership(multicastAddress: string, multicastInterface?: string): void;\\\\n        dropMembership(multicastAddress: string, multicastInterface?: string): void;\\\\n        ref(): this;\\\\n        unref(): this;\\\\n        setRecvBufferSize(size: number): void;\\\\n        setSendBufferSize(size: number): void;\\\\n        getRecvBufferSize(): number;\\\\n        getSendBufferSize(): number;\\\\n\\\\n        /**\\\\n         * events.EventEmitter\\\\n         * 1. close\\\\n         * 2. error\\\\n         * 3. listening\\\\n         * 4. message\\\\n         */\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        addListener(event: \\\\\\\"listening\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"message\\\\\\\", listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\\\n\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        emit(event: \\\\\\\"close\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"error\\\\\\\", err: Error): boolean;\\\\n        emit(event: \\\\\\\"listening\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"message\\\\\\\", msg: Buffer, rinfo: RemoteInfo): boolean;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        on(event: \\\\\\\"listening\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"message\\\\\\\", listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        once(event: \\\\\\\"listening\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"message\\\\\\\", listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependListener(event: \\\\\\\"listening\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"message\\\\\\\", listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"listening\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"message\\\\\\\", listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\\\\n    }\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/domain.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"domain\\\\\\\" {\\\\n    import * as events from \\\\\\\"events\\\\\\\";\\\\n\\\\n    class Domain extends events.EventEmitter implements NodeJS.Domain {\\\\n        run<T>(fn: (...args: any[]) => T, ...args: any[]): T;\\\\n        add(emitter: events.EventEmitter | NodeJS.Timer): void;\\\\n        remove(emitter: events.EventEmitter | NodeJS.Timer): void;\\\\n        bind<T extends Function>(cb: T): T;\\\\n        intercept<T extends Function>(cb: T): T;\\\\n        members: Array<events.EventEmitter | NodeJS.Timer>;\\\\n        enter(): void;\\\\n        exit(): void;\\\\n    }\\\\n\\\\n    function create(): Domain;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/querystring.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"querystring\\\\\\\" {\\\\n    interface StringifyOptions {\\\\n        encodeURIComponent?: (str: string) => string;\\\\n    }\\\\n\\\\n    interface ParseOptions {\\\\n        maxKeys?: number;\\\\n        decodeURIComponent?: (str: string) => string;\\\\n    }\\\\n\\\\n    interface ParsedUrlQuery { [key: string]: string | string[]; }\\\\n\\\\n    interface ParsedUrlQueryInput {\\\\n        [key: string]:\\\\n        // The value type here is a \\\\\\\"poor man's `unknown`\\\\\\\". When these types support TypeScript\\\\n        // 3.0+, we can replace this with `unknown`.\\\\n        {} | null | undefined;\\\\n    }\\\\n\\\\n    function stringify(obj?: ParsedUrlQueryInput, sep?: string, eq?: string, options?: StringifyOptions): string;\\\\n    function parse(str: string, sep?: string, eq?: string, options?: ParseOptions): ParsedUrlQuery;\\\\n    /**\\\\n     * The querystring.encode() function is an alias for querystring.stringify().\\\\n     */\\\\n    const encode: typeof stringify;\\\\n    /**\\\\n     * The querystring.decode() function is an alias for querystring.parse().\\\\n     */\\\\n    const decode: typeof parse;\\\\n    function escape(str: string): string;\\\\n    function unescape(str: string): string;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/url.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"url\\\\\\\" {\\\\n    import { ParsedUrlQuery, ParsedUrlQueryInput } from 'querystring';\\\\n\\\\n    interface UrlObjectCommon {\\\\n        auth?: string;\\\\n        hash?: string;\\\\n        host?: string;\\\\n        hostname?: string;\\\\n        href?: string;\\\\n        path?: string;\\\\n        pathname?: string;\\\\n        protocol?: string;\\\\n        search?: string;\\\\n        slashes?: boolean;\\\\n    }\\\\n\\\\n    // Input to `url.format`\\\\n    interface UrlObject extends UrlObjectCommon {\\\\n        port?: string | number;\\\\n        query?: string | null | ParsedUrlQueryInput;\\\\n    }\\\\n\\\\n    // Output of `url.parse`\\\\n    interface Url extends UrlObjectCommon {\\\\n        port?: string;\\\\n        query?: string | null | ParsedUrlQuery;\\\\n    }\\\\n\\\\n    interface UrlWithParsedQuery extends Url {\\\\n        query: ParsedUrlQuery;\\\\n    }\\\\n\\\\n    interface UrlWithStringQuery extends Url {\\\\n        query: string | null;\\\\n    }\\\\n\\\\n    function parse(urlStr: string): UrlWithStringQuery;\\\\n    function parse(urlStr: string, parseQueryString: false | undefined, slashesDenoteHost?: boolean): UrlWithStringQuery;\\\\n    function parse(urlStr: string, parseQueryString: true, slashesDenoteHost?: boolean): UrlWithParsedQuery;\\\\n    function parse(urlStr: string, parseQueryString: boolean, slashesDenoteHost?: boolean): Url;\\\\n\\\\n    function format(URL: URL, options?: URLFormatOptions): string;\\\\n    function format(urlObject: UrlObject | string): string;\\\\n    function resolve(from: string, to: string): string;\\\\n\\\\n    function domainToASCII(domain: string): string;\\\\n    function domainToUnicode(domain: string): string;\\\\n\\\\n    /**\\\\n     * This function ensures the correct decodings of percent-encoded characters as\\\\n     * well as ensuring a cross-platform valid absolute path string.\\\\n     * @param url The file URL string or URL object to convert to a path.\\\\n     */\\\\n    function fileURLToPath(url: string | URL): string;\\\\n\\\\n    /**\\\\n     * This function ensures that path is resolved absolutely, and that the URL\\\\n     * control characters are correctly encoded when converting into a File URL.\\\\n     * @param url The path to convert to a File URL.\\\\n     */\\\\n    function pathToFileURL(url: string): URL;\\\\n\\\\n    interface URLFormatOptions {\\\\n        auth?: boolean;\\\\n        fragment?: boolean;\\\\n        search?: boolean;\\\\n        unicode?: boolean;\\\\n    }\\\\n\\\\n    class URL {\\\\n        constructor(input: string, base?: string | URL);\\\\n        hash: string;\\\\n        host: string;\\\\n        hostname: string;\\\\n        href: string;\\\\n        readonly origin: string;\\\\n        password: string;\\\\n        pathname: string;\\\\n        port: string;\\\\n        protocol: string;\\\\n        search: string;\\\\n        readonly searchParams: URLSearchParams;\\\\n        username: string;\\\\n        toString(): string;\\\\n        toJSON(): string;\\\\n    }\\\\n\\\\n    class URLSearchParams implements Iterable<[string, string]> {\\\\n        constructor(init?: URLSearchParams | string | { [key: string]: string | string[] | undefined } | Iterable<[string, string]> | Array<[string, string]>);\\\\n        append(name: string, value: string): void;\\\\n        delete(name: string): void;\\\\n        entries(): IterableIterator<[string, string]>;\\\\n        forEach(callback: (value: string, name: string, searchParams: this) => void): void;\\\\n        get(name: string): string | null;\\\\n        getAll(name: string): string[];\\\\n        has(name: string): boolean;\\\\n        keys(): IterableIterator<string>;\\\\n        set(name: string, value: string): void;\\\\n        sort(): void;\\\\n        toString(): string;\\\\n        values(): IterableIterator<string>;\\\\n        [Symbol.iterator](): IterableIterator<[string, string]>;\\\\n    }\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/fs.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"fs\\\\\\\" {\\\\n    import * as stream from \\\\\\\"stream\\\\\\\";\\\\n    import * as events from \\\\\\\"events\\\\\\\";\\\\n    import { URL } from \\\\\\\"url\\\\\\\";\\\\n\\\\n    /**\\\\n     * Valid types for path values in \\\\\\\"fs\\\\\\\".\\\\n     */\\\\n    type PathLike = string | Buffer | URL;\\\\n\\\\n    type BinaryData = DataView | NodeJS.TypedArray;\\\\n    class Stats {\\\\n        isFile(): boolean;\\\\n        isDirectory(): boolean;\\\\n        isBlockDevice(): boolean;\\\\n        isCharacterDevice(): boolean;\\\\n        isSymbolicLink(): boolean;\\\\n        isFIFO(): boolean;\\\\n        isSocket(): boolean;\\\\n        dev: number;\\\\n        ino: number;\\\\n        mode: number;\\\\n        nlink: number;\\\\n        uid: number;\\\\n        gid: number;\\\\n        rdev: number;\\\\n        size: number;\\\\n        blksize: number;\\\\n        blocks: number;\\\\n        atimeMs: number;\\\\n        mtimeMs: number;\\\\n        ctimeMs: number;\\\\n        birthtimeMs: number;\\\\n        atime: Date;\\\\n        mtime: Date;\\\\n        ctime: Date;\\\\n        birthtime: Date;\\\\n    }\\\\n\\\\n    class Dirent {\\\\n        isFile(): boolean;\\\\n        isDirectory(): boolean;\\\\n        isBlockDevice(): boolean;\\\\n        isCharacterDevice(): boolean;\\\\n        isSymbolicLink(): boolean;\\\\n        isFIFO(): boolean;\\\\n        isSocket(): boolean;\\\\n        name: string;\\\\n    }\\\\n\\\\n    interface FSWatcher extends events.EventEmitter {\\\\n        close(): void;\\\\n\\\\n        /**\\\\n         * events.EventEmitter\\\\n         *   1. change\\\\n         *   2. error\\\\n         */\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"change\\\\\\\", listener: (eventType: string, filename: string | Buffer) => void): this;\\\\n        addListener(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"change\\\\\\\", listener: (eventType: string, filename: string | Buffer) => void): this;\\\\n        on(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"change\\\\\\\", listener: (eventType: string, filename: string | Buffer) => void): this;\\\\n        once(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"change\\\\\\\", listener: (eventType: string, filename: string | Buffer) => void): this;\\\\n        prependListener(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"change\\\\\\\", listener: (eventType: string, filename: string | Buffer) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n    }\\\\n\\\\n    class ReadStream extends stream.Readable {\\\\n        close(): void;\\\\n        bytesRead: number;\\\\n        path: string | Buffer;\\\\n\\\\n        /**\\\\n         * events.EventEmitter\\\\n         *   1. open\\\\n         *   2. close\\\\n         */\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"open\\\\\\\", listener: (fd: number) => void): this;\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"open\\\\\\\", listener: (fd: number) => void): this;\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"open\\\\\\\", listener: (fd: number) => void): this;\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"open\\\\\\\", listener: (fd: number) => void): this;\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"open\\\\\\\", listener: (fd: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n    }\\\\n\\\\n    class WriteStream extends stream.Writable {\\\\n        close(): void;\\\\n        bytesWritten: number;\\\\n        path: string | Buffer;\\\\n\\\\n        /**\\\\n         * events.EventEmitter\\\\n         *   1. open\\\\n         *   2. close\\\\n         */\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"open\\\\\\\", listener: (fd: number) => void): this;\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"open\\\\\\\", listener: (fd: number) => void): this;\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"open\\\\\\\", listener: (fd: number) => void): this;\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"open\\\\\\\", listener: (fd: number) => void): this;\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"open\\\\\\\", listener: (fd: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n    }\\\\n\\\\n    /**\\\\n     * Asynchronous rename(2) - Change the name or location of a file or directory.\\\\n     * @param oldPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function rename(oldPath: PathLike, newPath: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace rename {\\\\n        /**\\\\n         * Asynchronous rename(2) - Change the name or location of a file or directory.\\\\n         * @param oldPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         */\\\\n        function __promisify__(oldPath: PathLike, newPath: PathLike): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous rename(2) - Change the name or location of a file or directory.\\\\n     * @param oldPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function renameSync(oldPath: PathLike, newPath: PathLike): void;\\\\n\\\\n    /**\\\\n     * Asynchronous truncate(2) - Truncate a file to a specified length.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param len If not specified, defaults to `0`.\\\\n     */\\\\n    function truncate(path: PathLike, len: number | undefined | null, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronous truncate(2) - Truncate a file to a specified length.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function truncate(path: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace truncate {\\\\n        /**\\\\n         * Asynchronous truncate(2) - Truncate a file to a specified length.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param len If not specified, defaults to `0`.\\\\n         */\\\\n        function __promisify__(path: PathLike, len?: number | null): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous truncate(2) - Truncate a file to a specified length.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param len If not specified, defaults to `0`.\\\\n     */\\\\n    function truncateSync(path: PathLike, len?: number | null): void;\\\\n\\\\n    /**\\\\n     * Asynchronous ftruncate(2) - Truncate a file to a specified length.\\\\n     * @param fd A file descriptor.\\\\n     * @param len If not specified, defaults to `0`.\\\\n     */\\\\n    function ftruncate(fd: number, len: number | undefined | null, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronous ftruncate(2) - Truncate a file to a specified length.\\\\n     * @param fd A file descriptor.\\\\n     */\\\\n    function ftruncate(fd: number, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace ftruncate {\\\\n        /**\\\\n         * Asynchronous ftruncate(2) - Truncate a file to a specified length.\\\\n         * @param fd A file descriptor.\\\\n         * @param len If not specified, defaults to `0`.\\\\n         */\\\\n        function __promisify__(fd: number, len?: number | null): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous ftruncate(2) - Truncate a file to a specified length.\\\\n     * @param fd A file descriptor.\\\\n     * @param len If not specified, defaults to `0`.\\\\n     */\\\\n    function ftruncateSync(fd: number, len?: number | null): void;\\\\n\\\\n    /**\\\\n     * Asynchronous chown(2) - Change ownership of a file.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function chown(path: PathLike, uid: number, gid: number, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace chown {\\\\n        /**\\\\n         * Asynchronous chown(2) - Change ownership of a file.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function __promisify__(path: PathLike, uid: number, gid: number): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous chown(2) - Change ownership of a file.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function chownSync(path: PathLike, uid: number, gid: number): void;\\\\n\\\\n    /**\\\\n     * Asynchronous fchown(2) - Change ownership of a file.\\\\n     * @param fd A file descriptor.\\\\n     */\\\\n    function fchown(fd: number, uid: number, gid: number, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace fchown {\\\\n        /**\\\\n         * Asynchronous fchown(2) - Change ownership of a file.\\\\n         * @param fd A file descriptor.\\\\n         */\\\\n        function __promisify__(fd: number, uid: number, gid: number): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous fchown(2) - Change ownership of a file.\\\\n     * @param fd A file descriptor.\\\\n     */\\\\n    function fchownSync(fd: number, uid: number, gid: number): void;\\\\n\\\\n    /**\\\\n     * Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function lchown(path: PathLike, uid: number, gid: number, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace lchown {\\\\n        /**\\\\n         * Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function __promisify__(path: PathLike, uid: number, gid: number): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function lchownSync(path: PathLike, uid: number, gid: number): void;\\\\n\\\\n    /**\\\\n     * Asynchronous chmod(2) - Change permissions of a file.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n     */\\\\n    function chmod(path: PathLike, mode: string | number, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace chmod {\\\\n        /**\\\\n         * Asynchronous chmod(2) - Change permissions of a file.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n         */\\\\n        function __promisify__(path: PathLike, mode: string | number): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous chmod(2) - Change permissions of a file.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n     */\\\\n    function chmodSync(path: PathLike, mode: string | number): void;\\\\n\\\\n    /**\\\\n     * Asynchronous fchmod(2) - Change permissions of a file.\\\\n     * @param fd A file descriptor.\\\\n     * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n     */\\\\n    function fchmod(fd: number, mode: string | number, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace fchmod {\\\\n        /**\\\\n         * Asynchronous fchmod(2) - Change permissions of a file.\\\\n         * @param fd A file descriptor.\\\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n         */\\\\n        function __promisify__(fd: number, mode: string | number): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous fchmod(2) - Change permissions of a file.\\\\n     * @param fd A file descriptor.\\\\n     * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n     */\\\\n    function fchmodSync(fd: number, mode: string | number): void;\\\\n\\\\n    /**\\\\n     * Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n     */\\\\n    function lchmod(path: PathLike, mode: string | number, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace lchmod {\\\\n        /**\\\\n         * Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n         */\\\\n        function __promisify__(path: PathLike, mode: string | number): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n     */\\\\n    function lchmodSync(path: PathLike, mode: string | number): void;\\\\n\\\\n    /**\\\\n     * Asynchronous stat(2) - Get file status.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function stat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace stat {\\\\n        /**\\\\n         * Asynchronous stat(2) - Get file status.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function __promisify__(path: PathLike): Promise<Stats>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous stat(2) - Get file status.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function statSync(path: PathLike): Stats;\\\\n\\\\n    /**\\\\n     * Asynchronous fstat(2) - Get file status.\\\\n     * @param fd A file descriptor.\\\\n     */\\\\n    function fstat(fd: number, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace fstat {\\\\n        /**\\\\n         * Asynchronous fstat(2) - Get file status.\\\\n         * @param fd A file descriptor.\\\\n         */\\\\n        function __promisify__(fd: number): Promise<Stats>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous fstat(2) - Get file status.\\\\n     * @param fd A file descriptor.\\\\n     */\\\\n    function fstatSync(fd: number): Stats;\\\\n\\\\n    /**\\\\n     * Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function lstat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace lstat {\\\\n        /**\\\\n         * Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function __promisify__(path: PathLike): Promise<Stats>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous lstat(2) - Get file status. Does not dereference symbolic links.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function lstatSync(path: PathLike): Stats;\\\\n\\\\n    /**\\\\n     * Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.\\\\n     * @param existingPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function link(existingPath: PathLike, newPath: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace link {\\\\n        /**\\\\n         * Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.\\\\n         * @param existingPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function link(existingPath: PathLike, newPath: PathLike): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.\\\\n     * @param existingPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function linkSync(existingPath: PathLike, newPath: PathLike): void;\\\\n\\\\n    /**\\\\n     * Asynchronous symlink(2) - Create a new symbolic link to an existing file.\\\\n     * @param target A path to an existing file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param path A path to the new symlink. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param type May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).\\\\n     * When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.\\\\n     */\\\\n    function symlink(target: PathLike, path: PathLike, type: symlink.Type | undefined | null, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronous symlink(2) - Create a new symbolic link to an existing file.\\\\n     * @param target A path to an existing file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param path A path to the new symlink. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function symlink(target: PathLike, path: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace symlink {\\\\n        /**\\\\n         * Asynchronous symlink(2) - Create a new symbolic link to an existing file.\\\\n         * @param target A path to an existing file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param path A path to the new symlink. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param type May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).\\\\n         * When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.\\\\n         */\\\\n        function __promisify__(target: PathLike, path: PathLike, type?: string | null): Promise<void>;\\\\n\\\\n        type Type = \\\\\\\"dir\\\\\\\" | \\\\\\\"file\\\\\\\" | \\\\\\\"junction\\\\\\\";\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous symlink(2) - Create a new symbolic link to an existing file.\\\\n     * @param target A path to an existing file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param path A path to the new symlink. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param type May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).\\\\n     * When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.\\\\n     */\\\\n    function symlinkSync(target: PathLike, path: PathLike, type?: symlink.Type | null): void;\\\\n\\\\n    /**\\\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function readlink(\\\\n        path: PathLike,\\\\n        options: { encoding?: BufferEncoding | null } | BufferEncoding | undefined | null,\\\\n        callback: (err: NodeJS.ErrnoException | null, linkString: string) => void\\\\n    ): void;\\\\n\\\\n    /**\\\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function readlink(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\", callback: (err: NodeJS.ErrnoException | null, linkString: Buffer) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function readlink(path: PathLike, options: { encoding?: string | null } | string | undefined | null, callback: (err: NodeJS.ErrnoException | null, linkString: string | Buffer) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronous readlink(2) - read value of a symbolic link.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function readlink(path: PathLike, callback: (err: NodeJS.ErrnoException | null, linkString: string) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace readlink {\\\\n        /**\\\\n         * Asynchronous readlink(2) - read value of a symbolic link.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function __promisify__(path: PathLike, options?: { encoding?: BufferEncoding | null } | BufferEncoding | null): Promise<string>;\\\\n\\\\n        /**\\\\n         * Asynchronous readlink(2) - read value of a symbolic link.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function __promisify__(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\"): Promise<Buffer>;\\\\n\\\\n        /**\\\\n         * Asynchronous readlink(2) - read value of a symbolic link.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function __promisify__(path: PathLike, options?: { encoding?: string | null } | string | null): Promise<string | Buffer>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous readlink(2) - read value of a symbolic link.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function readlinkSync(path: PathLike, options?: { encoding?: BufferEncoding | null } | BufferEncoding | null): string;\\\\n\\\\n    /**\\\\n     * Synchronous readlink(2) - read value of a symbolic link.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function readlinkSync(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\"): Buffer;\\\\n\\\\n    /**\\\\n     * Synchronous readlink(2) - read value of a symbolic link.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function readlinkSync(path: PathLike, options?: { encoding?: string | null } | string | null): string | Buffer;\\\\n\\\\n    /**\\\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function realpath(\\\\n        path: PathLike,\\\\n        options: { encoding?: BufferEncoding | null } | BufferEncoding | undefined | null,\\\\n        callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void\\\\n    ): void;\\\\n\\\\n    /**\\\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function realpath(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\", callback: (err: NodeJS.ErrnoException | null, resolvedPath: Buffer) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function realpath(path: PathLike, options: { encoding?: string | null } | string | undefined | null, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string | Buffer) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function realpath(path: PathLike, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace realpath {\\\\n        /**\\\\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function __promisify__(path: PathLike, options?: { encoding?: BufferEncoding | null } | BufferEncoding | null): Promise<string>;\\\\n\\\\n        /**\\\\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function __promisify__(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\"): Promise<Buffer>;\\\\n\\\\n        /**\\\\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function __promisify__(path: PathLike, options?: { encoding?: string | null } | string | null): Promise<string | Buffer>;\\\\n\\\\n        function native(\\\\n            path: PathLike,\\\\n            options: { encoding?: BufferEncoding | null } | BufferEncoding | undefined | null,\\\\n            callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void\\\\n        ): void;\\\\n        function native(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\", callback: (err: NodeJS.ErrnoException | null, resolvedPath: Buffer) => void): void;\\\\n        function native(path: PathLike, options: { encoding?: string | null } | string | undefined | null, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string | Buffer) => void): void;\\\\n        function native(path: PathLike, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void): void;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous realpath(3) - return the canonicalized absolute pathname.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function realpathSync(path: PathLike, options?: { encoding?: BufferEncoding | null } | BufferEncoding | null): string;\\\\n\\\\n    /**\\\\n     * Synchronous realpath(3) - return the canonicalized absolute pathname.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function realpathSync(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\"): Buffer;\\\\n\\\\n    /**\\\\n     * Synchronous realpath(3) - return the canonicalized absolute pathname.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function realpathSync(path: PathLike, options?: { encoding?: string | null } | string | null): string | Buffer;\\\\n\\\\n    namespace realpathSync {\\\\n        function native(path: PathLike, options?: { encoding?: BufferEncoding | null } | BufferEncoding | null): string;\\\\n        function native(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\"): Buffer;\\\\n        function native(path: PathLike, options?: { encoding?: string | null } | string | null): string | Buffer;\\\\n    }\\\\n\\\\n    /**\\\\n     * Asynchronous unlink(2) - delete a name and possibly the file it refers to.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function unlink(path: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace unlink {\\\\n        /**\\\\n         * Asynchronous unlink(2) - delete a name and possibly the file it refers to.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function __promisify__(path: PathLike): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous unlink(2) - delete a name and possibly the file it refers to.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function unlinkSync(path: PathLike): void;\\\\n\\\\n    /**\\\\n     * Asynchronous rmdir(2) - delete a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function rmdir(path: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace rmdir {\\\\n        /**\\\\n         * Asynchronous rmdir(2) - delete a directory.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function __promisify__(path: PathLike): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous rmdir(2) - delete a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function rmdirSync(path: PathLike): void;\\\\n\\\\n    export interface MakeDirectoryOptions {\\\\n        /**\\\\n         * Indicates whether parent folders should be created.\\\\n         * @default false\\\\n         */\\\\n        recursive?: boolean;\\\\n        /**\\\\n         * A file mode. If a string is passed, it is parsed as an octal integer. If not specified\\\\n         * @default 0o777.\\\\n         */\\\\n        mode?: number;\\\\n    }\\\\n\\\\n    /**\\\\n     * Asynchronous mkdir(2) - create a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\\\n     */\\\\n    function mkdir(path: PathLike, options: number | string | MakeDirectoryOptions | undefined | null, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronous mkdir(2) - create a directory with a mode of `0o777`.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function mkdir(path: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace mkdir {\\\\n        /**\\\\n         * Asynchronous mkdir(2) - create a directory.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\\\n         * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\\\n         */\\\\n        function __promisify__(path: PathLike, options?: number | string | MakeDirectoryOptions | null): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous mkdir(2) - create a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\\\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\\\n     */\\\\n    function mkdirSync(path: PathLike, options?: number | string | MakeDirectoryOptions | null): void;\\\\n\\\\n    /**\\\\n     * Asynchronously creates a unique temporary directory.\\\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function mkdtemp(prefix: string, options: { encoding?: BufferEncoding | null } | BufferEncoding | undefined | null, callback: (err: NodeJS.ErrnoException | null, folder: string) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronously creates a unique temporary directory.\\\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function mkdtemp(prefix: string, options: \\\\\\\"buffer\\\\\\\" | { encoding: \\\\\\\"buffer\\\\\\\" }, callback: (err: NodeJS.ErrnoException | null, folder: Buffer) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronously creates a unique temporary directory.\\\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function mkdtemp(prefix: string, options: { encoding?: string | null } | string | undefined | null, callback: (err: NodeJS.ErrnoException | null, folder: string | Buffer) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronously creates a unique temporary directory.\\\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\\\n     */\\\\n    function mkdtemp(prefix: string, callback: (err: NodeJS.ErrnoException | null, folder: string) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace mkdtemp {\\\\n        /**\\\\n         * Asynchronously creates a unique temporary directory.\\\\n         * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function __promisify__(prefix: string, options?: { encoding?: BufferEncoding | null } | BufferEncoding | null): Promise<string>;\\\\n\\\\n        /**\\\\n         * Asynchronously creates a unique temporary directory.\\\\n         * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function __promisify__(prefix: string, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\"): Promise<Buffer>;\\\\n\\\\n        /**\\\\n         * Asynchronously creates a unique temporary directory.\\\\n         * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function __promisify__(prefix: string, options?: { encoding?: string | null } | string | null): Promise<string | Buffer>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronously creates a unique temporary directory.\\\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function mkdtempSync(prefix: string, options?: { encoding?: BufferEncoding | null } | BufferEncoding | null): string;\\\\n\\\\n    /**\\\\n     * Synchronously creates a unique temporary directory.\\\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function mkdtempSync(prefix: string, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\"): Buffer;\\\\n\\\\n    /**\\\\n     * Synchronously creates a unique temporary directory.\\\\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function mkdtempSync(prefix: string, options?: { encoding?: string | null } | string | null): string | Buffer;\\\\n\\\\n    /**\\\\n     * Asynchronous readdir(3) - read a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function readdir(\\\\n        path: PathLike,\\\\n        options: { encoding: BufferEncoding | null; withFileTypes?: false } | BufferEncoding | undefined | null,\\\\n        callback: (err: NodeJS.ErrnoException | null, files: string[]) => void,\\\\n    ): void;\\\\n\\\\n    /**\\\\n     * Asynchronous readdir(3) - read a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function readdir(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\"; withFileTypes?: false } | \\\\\\\"buffer\\\\\\\", callback: (err: NodeJS.ErrnoException | null, files: Buffer[]) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronous readdir(3) - read a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function readdir(\\\\n        path: PathLike,\\\\n        options: { encoding?: string | null; withFileTypes?: false } | string | undefined | null,\\\\n        callback: (err: NodeJS.ErrnoException | null, files: string[] | Buffer[]) => void,\\\\n    ): void;\\\\n\\\\n    /**\\\\n     * Asynchronous readdir(3) - read a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function readdir(path: PathLike, callback: (err: NodeJS.ErrnoException | null, files: string[]) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronous readdir(3) - read a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\\\\n     */\\\\n    function readdir(path: PathLike, options: { encoding?: string | null; withFileTypes: true }, callback: (err: NodeJS.ErrnoException | null, files: Dirent[]) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace readdir {\\\\n        /**\\\\n         * Asynchronous readdir(3) - read a directory.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function __promisify__(path: PathLike, options?: { encoding: BufferEncoding | null; withFileTypes?: false } | BufferEncoding | null): Promise<string[]>;\\\\n\\\\n        /**\\\\n         * Asynchronous readdir(3) - read a directory.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function __promisify__(path: PathLike, options: \\\\\\\"buffer\\\\\\\" | { encoding: \\\\\\\"buffer\\\\\\\"; withFileTypes?: false }): Promise<Buffer[]>;\\\\n\\\\n        /**\\\\n         * Asynchronous readdir(3) - read a directory.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function __promisify__(path: PathLike, options?: { encoding?: string | null; withFileTypes?: false } | string | null): Promise<string[] | Buffer[]>;\\\\n\\\\n        /**\\\\n         * Asynchronous readdir(3) - read a directory.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options If called with `withFileTypes: true` the result data will be an array of Dirent\\\\n         */\\\\n        function __promisify__(path: PathLike, options: { encoding?: string | null; withFileTypes: true }): Promise<Dirent[]>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous readdir(3) - read a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function readdirSync(path: PathLike, options?: { encoding: BufferEncoding | null; withFileTypes?: false } | BufferEncoding | null): string[];\\\\n\\\\n    /**\\\\n     * Synchronous readdir(3) - read a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function readdirSync(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\"; withFileTypes?: false } | \\\\\\\"buffer\\\\\\\"): Buffer[];\\\\n\\\\n    /**\\\\n     * Synchronous readdir(3) - read a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n     */\\\\n    function readdirSync(path: PathLike, options?: { encoding?: string | null; withFileTypes?: false } | string | null): string[] | Buffer[];\\\\n\\\\n    /**\\\\n     * Synchronous readdir(3) - read a directory.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\\\\n     */\\\\n    function readdirSync(path: PathLike, options: { encoding?: string | null; withFileTypes: true }): Dirent[];\\\\n\\\\n    /**\\\\n     * Asynchronous close(2) - close a file descriptor.\\\\n     * @param fd A file descriptor.\\\\n     */\\\\n    function close(fd: number, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace close {\\\\n        /**\\\\n         * Asynchronous close(2) - close a file descriptor.\\\\n         * @param fd A file descriptor.\\\\n         */\\\\n        function __promisify__(fd: number): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous close(2) - close a file descriptor.\\\\n     * @param fd A file descriptor.\\\\n     */\\\\n    function closeSync(fd: number): void;\\\\n\\\\n    /**\\\\n     * Asynchronous open(2) - open and possibly create a file.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param mode A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.\\\\n     */\\\\n    function open(path: PathLike, flags: string | number, mode: string | number | undefined | null, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     */\\\\n    function open(path: PathLike, flags: string | number, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace open {\\\\n        /**\\\\n         * Asynchronous open(2) - open and possibly create a file.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.\\\\n         */\\\\n        function __promisify__(path: PathLike, flags: string | number, mode?: string | number | null): Promise<number>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous open(2) - open and possibly create a file, returning a file descriptor..\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param mode A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.\\\\n     */\\\\n    function openSync(path: PathLike, flags: string | number, mode?: string | number | null): number;\\\\n\\\\n    /**\\\\n     * Asynchronously change file timestamps of the file referenced by the supplied path.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param atime The last access time. If a string is provided, it will be coerced to number.\\\\n     * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\\\n     */\\\\n    function utimes(path: PathLike, atime: string | number | Date, mtime: string | number | Date, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace utimes {\\\\n        /**\\\\n         * Asynchronously change file timestamps of the file referenced by the supplied path.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\\\\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\\\n         */\\\\n        function __promisify__(path: PathLike, atime: string | number | Date, mtime: string | number | Date): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronously change file timestamps of the file referenced by the supplied path.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * @param atime The last access time. If a string is provided, it will be coerced to number.\\\\n     * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\\\n     */\\\\n    function utimesSync(path: PathLike, atime: string | number | Date, mtime: string | number | Date): void;\\\\n\\\\n    /**\\\\n     * Asynchronously change file timestamps of the file referenced by the supplied file descriptor.\\\\n     * @param fd A file descriptor.\\\\n     * @param atime The last access time. If a string is provided, it will be coerced to number.\\\\n     * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\\\n     */\\\\n    function futimes(fd: number, atime: string | number | Date, mtime: string | number | Date, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace futimes {\\\\n        /**\\\\n         * Asynchronously change file timestamps of the file referenced by the supplied file descriptor.\\\\n         * @param fd A file descriptor.\\\\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\\\\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\\\n         */\\\\n        function __promisify__(fd: number, atime: string | number | Date, mtime: string | number | Date): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronously change file timestamps of the file referenced by the supplied file descriptor.\\\\n     * @param fd A file descriptor.\\\\n     * @param atime The last access time. If a string is provided, it will be coerced to number.\\\\n     * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\\\n     */\\\\n    function futimesSync(fd: number, atime: string | number | Date, mtime: string | number | Date): void;\\\\n\\\\n    /**\\\\n     * Asynchronous fsync(2) - synchronize a file's in-core state with the underlying storage device.\\\\n     * @param fd A file descriptor.\\\\n     */\\\\n    function fsync(fd: number, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace fsync {\\\\n        /**\\\\n         * Asynchronous fsync(2) - synchronize a file's in-core state with the underlying storage device.\\\\n         * @param fd A file descriptor.\\\\n         */\\\\n        function __promisify__(fd: number): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous fsync(2) - synchronize a file's in-core state with the underlying storage device.\\\\n     * @param fd A file descriptor.\\\\n     */\\\\n    function fsyncSync(fd: number): void;\\\\n\\\\n    /**\\\\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\\\n     * @param fd A file descriptor.\\\\n     * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\\\n     * @param length The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\\\\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\\\n     */\\\\n    function write<TBuffer extends BinaryData>(\\\\n        fd: number,\\\\n        buffer: TBuffer,\\\\n        offset: number | undefined | null,\\\\n        length: number | undefined | null,\\\\n        position: number | undefined | null,\\\\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void,\\\\n    ): void;\\\\n\\\\n    /**\\\\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\\\n     * @param fd A file descriptor.\\\\n     * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\\\n     * @param length The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\\\\n     */\\\\n    function write<TBuffer extends BinaryData>(\\\\n        fd: number,\\\\n        buffer: TBuffer,\\\\n        offset: number | undefined | null,\\\\n        length: number | undefined | null,\\\\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void,\\\\n    ): void;\\\\n\\\\n    /**\\\\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\\\n     * @param fd A file descriptor.\\\\n     * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\\\n     */\\\\n    function write<TBuffer extends BinaryData>(\\\\n        fd: number,\\\\n        buffer: TBuffer,\\\\n        offset: number | undefined | null,\\\\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void\\\\n    ): void;\\\\n\\\\n    /**\\\\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\\\n     * @param fd A file descriptor.\\\\n     */\\\\n    function write<TBuffer extends BinaryData>(fd: number, buffer: TBuffer, callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\\\\n     * @param fd A file descriptor.\\\\n     * @param string A string to write. If something other than a string is supplied it will be coerced to a string.\\\\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\\\n     * @param encoding The expected string encoding.\\\\n     */\\\\n    function write(\\\\n        fd: number,\\\\n        string: any,\\\\n        position: number | undefined | null,\\\\n        encoding: string | undefined | null,\\\\n        callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void,\\\\n    ): void;\\\\n\\\\n    /**\\\\n     * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\\\\n     * @param fd A file descriptor.\\\\n     * @param string A string to write. If something other than a string is supplied it will be coerced to a string.\\\\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\\\n     */\\\\n    function write(fd: number, string: any, position: number | undefined | null, callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\\\\n     * @param fd A file descriptor.\\\\n     * @param string A string to write. If something other than a string is supplied it will be coerced to a string.\\\\n     */\\\\n    function write(fd: number, string: any, callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace write {\\\\n        /**\\\\n         * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\\\\n         * @param fd A file descriptor.\\\\n         * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\\\n         * @param length The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\\\\n         * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\\\n         */\\\\n        function __promisify__<TBuffer extends BinaryData>(\\\\n            fd: number,\\\\n            buffer?: TBuffer,\\\\n            offset?: number,\\\\n            length?: number,\\\\n            position?: number | null,\\\\n        ): Promise<{ bytesWritten: number, buffer: TBuffer }>;\\\\n\\\\n        /**\\\\n         * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\\\\n         * @param fd A file descriptor.\\\\n         * @param string A string to write. If something other than a string is supplied it will be coerced to a string.\\\\n         * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\\\n         * @param encoding The expected string encoding.\\\\n         */\\\\n        function __promisify__(fd: number, string: any, position?: number | null, encoding?: string | null): Promise<{ bytesWritten: number, buffer: string }>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.\\\\n     * @param fd A file descriptor.\\\\n     * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\\\n     * @param length The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\\\\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\\\n     */\\\\n    function writeSync(fd: number, buffer: BinaryData, offset?: number | null, length?: number | null, position?: number | null): number;\\\\n\\\\n    /**\\\\n     * Synchronously writes `string` to the file referenced by the supplied file descriptor, returning the number of bytes written.\\\\n     * @param fd A file descriptor.\\\\n     * @param string A string to write. If something other than a string is supplied it will be coerced to a string.\\\\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\\\n     * @param encoding The expected string encoding.\\\\n     */\\\\n    function writeSync(fd: number, string: any, position?: number | null, encoding?: string | null): number;\\\\n\\\\n    /**\\\\n     * Asynchronously reads data from the file referenced by the supplied file descriptor.\\\\n     * @param fd A file descriptor.\\\\n     * @param buffer The buffer that the data will be written to.\\\\n     * @param offset The offset in the buffer at which to start writing.\\\\n     * @param length The number of bytes to read.\\\\n     * @param position The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.\\\\n     */\\\\n    function read<TBuffer extends BinaryData>(\\\\n        fd: number,\\\\n        buffer: TBuffer,\\\\n        offset: number,\\\\n        length: number,\\\\n        position: number | null,\\\\n        callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void,\\\\n    ): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace read {\\\\n        /**\\\\n         * @param fd A file descriptor.\\\\n         * @param buffer The buffer that the data will be written to.\\\\n         * @param offset The offset in the buffer at which to start writing.\\\\n         * @param length The number of bytes to read.\\\\n         * @param position The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.\\\\n         */\\\\n        function __promisify__<TBuffer extends BinaryData>(fd: number, buffer: TBuffer, offset: number, length: number, position: number | null): Promise<{ bytesRead: number, buffer: TBuffer }>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronously reads data from the file referenced by the supplied file descriptor, returning the number of bytes read.\\\\n     * @param fd A file descriptor.\\\\n     * @param buffer The buffer that the data will be written to.\\\\n     * @param offset The offset in the buffer at which to start writing.\\\\n     * @param length The number of bytes to read.\\\\n     * @param position The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.\\\\n     */\\\\n    function readSync(fd: number, buffer: BinaryData, offset: number, length: number, position: number | null): number;\\\\n\\\\n    /**\\\\n     * Asynchronously reads the entire contents of a file.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     * @param options An object that may contain an optional flag.\\\\n     * If a flag is not provided, it defaults to `'r'`.\\\\n     */\\\\n    function readFile(path: PathLike | number, options: { encoding?: null; flag?: string; } | undefined | null, callback: (err: NodeJS.ErrnoException | null, data: Buffer) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronously reads the entire contents of a file.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\\\n     * If a flag is not provided, it defaults to `'r'`.\\\\n     */\\\\n    function readFile(path: PathLike | number, options: { encoding: string; flag?: string; } | string, callback: (err: NodeJS.ErrnoException | null, data: string) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronously reads the entire contents of a file.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\\\n     * If a flag is not provided, it defaults to `'r'`.\\\\n     */\\\\n    function readFile(\\\\n        path: PathLike | number,\\\\n        options: { encoding?: string | null; flag?: string; } | string | undefined | null,\\\\n        callback: (err: NodeJS.ErrnoException | null, data: string | Buffer) => void,\\\\n    ): void;\\\\n\\\\n    /**\\\\n     * Asynchronously reads the entire contents of a file.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     */\\\\n    function readFile(path: PathLike | number, callback: (err: NodeJS.ErrnoException | null, data: Buffer) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace readFile {\\\\n        /**\\\\n         * Asynchronously reads the entire contents of a file.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n         * @param options An object that may contain an optional flag.\\\\n         * If a flag is not provided, it defaults to `'r'`.\\\\n         */\\\\n        function __promisify__(path: PathLike | number, options?: { encoding?: null; flag?: string; } | null): Promise<Buffer>;\\\\n\\\\n        /**\\\\n         * Asynchronously reads the entire contents of a file.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n         * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\\\n         * If a flag is not provided, it defaults to `'r'`.\\\\n         */\\\\n        function __promisify__(path: PathLike | number, options: { encoding: string; flag?: string; } | string): Promise<string>;\\\\n\\\\n        /**\\\\n         * Asynchronously reads the entire contents of a file.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n         * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\\\n         * If a flag is not provided, it defaults to `'r'`.\\\\n         */\\\\n        function __promisify__(path: PathLike | number, options?: { encoding?: string | null; flag?: string; } | string | null): Promise<string | Buffer>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronously reads the entire contents of a file.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     * @param options An object that may contain an optional flag. If a flag is not provided, it defaults to `'r'`.\\\\n     */\\\\n    function readFileSync(path: PathLike | number, options?: { encoding?: null; flag?: string; } | null): Buffer;\\\\n\\\\n    /**\\\\n     * Synchronously reads the entire contents of a file.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\\\n     * If a flag is not provided, it defaults to `'r'`.\\\\n     */\\\\n    function readFileSync(path: PathLike | number, options: { encoding: string; flag?: string; } | string): string;\\\\n\\\\n    /**\\\\n     * Synchronously reads the entire contents of a file.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\\\\n     * If a flag is not provided, it defaults to `'r'`.\\\\n     */\\\\n    function readFileSync(path: PathLike | number, options?: { encoding?: string | null; flag?: string; } | string | null): string | Buffer;\\\\n\\\\n    type WriteFileOptions = { encoding?: string | null; mode?: number | string; flag?: string; } | string | null;\\\\n\\\\n    /**\\\\n     * Asynchronously writes data to a file, replacing the file if it already exists.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\\\n     * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n     * If `mode` is not supplied, the default of `0o666` is used.\\\\n     * If `mode` is a string, it is parsed as an octal integer.\\\\n     * If `flag` is not supplied, the default of `'w'` is used.\\\\n     */\\\\n    function writeFile(path: PathLike | number, data: any, options: WriteFileOptions, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronously writes data to a file, replacing the file if it already exists.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\\\n     */\\\\n    function writeFile(path: PathLike | number, data: any, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace writeFile {\\\\n        /**\\\\n         * Asynchronously writes data to a file, replacing the file if it already exists.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n         * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\\\n         * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\\\n         * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n         * If `mode` is not supplied, the default of `0o666` is used.\\\\n         * If `mode` is a string, it is parsed as an octal integer.\\\\n         * If `flag` is not supplied, the default of `'w'` is used.\\\\n         */\\\\n        function __promisify__(path: PathLike | number, data: any, options?: WriteFileOptions): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronously writes data to a file, replacing the file if it already exists.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\\\n     * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n     * If `mode` is not supplied, the default of `0o666` is used.\\\\n     * If `mode` is a string, it is parsed as an octal integer.\\\\n     * If `flag` is not supplied, the default of `'w'` is used.\\\\n     */\\\\n    function writeFileSync(path: PathLike | number, data: any, options?: WriteFileOptions): void;\\\\n\\\\n    /**\\\\n     * Asynchronously append data to a file, creating the file if it does not exist.\\\\n     * @param file A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\\\n     * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n     * If `mode` is not supplied, the default of `0o666` is used.\\\\n     * If `mode` is a string, it is parsed as an octal integer.\\\\n     * If `flag` is not supplied, the default of `'a'` is used.\\\\n     */\\\\n    function appendFile(file: PathLike | number, data: any, options: WriteFileOptions, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronously append data to a file, creating the file if it does not exist.\\\\n     * @param file A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\\\n     */\\\\n    function appendFile(file: PathLike | number, data: any, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace appendFile {\\\\n        /**\\\\n         * Asynchronously append data to a file, creating the file if it does not exist.\\\\n         * @param file A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n         * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\\\n         * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\\\n         * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n         * If `mode` is not supplied, the default of `0o666` is used.\\\\n         * If `mode` is a string, it is parsed as an octal integer.\\\\n         * If `flag` is not supplied, the default of `'a'` is used.\\\\n         */\\\\n        function __promisify__(file: PathLike | number, data: any, options?: WriteFileOptions): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronously append data to a file, creating the file if it does not exist.\\\\n     * @param file A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\\\\n     * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\\\\n     * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n     * If `mode` is not supplied, the default of `0o666` is used.\\\\n     * If `mode` is a string, it is parsed as an octal integer.\\\\n     * If `flag` is not supplied, the default of `'a'` is used.\\\\n     */\\\\n    function appendFileSync(file: PathLike | number, data: any, options?: WriteFileOptions): void;\\\\n\\\\n    /**\\\\n     * Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.\\\\n     */\\\\n    function watchFile(filename: PathLike, options: { persistent?: boolean; interval?: number; } | undefined, listener: (curr: Stats, prev: Stats) => void): void;\\\\n\\\\n    /**\\\\n     * Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.\\\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function watchFile(filename: PathLike, listener: (curr: Stats, prev: Stats) => void): void;\\\\n\\\\n    /**\\\\n     * Stop watching for changes on `filename`.\\\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function unwatchFile(filename: PathLike, listener?: (curr: Stats, prev: Stats) => void): void;\\\\n\\\\n    /**\\\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\\\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n     * If `persistent` is not supplied, the default of `true` is used.\\\\n     * If `recursive` is not supplied, the default of `false` is used.\\\\n     */\\\\n    function watch(\\\\n        filename: PathLike,\\\\n        options: { encoding?: BufferEncoding | null, persistent?: boolean, recursive?: boolean } | BufferEncoding | undefined | null,\\\\n        listener?: (event: string, filename: string) => void,\\\\n    ): FSWatcher;\\\\n\\\\n    /**\\\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\\\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n     * If `persistent` is not supplied, the default of `true` is used.\\\\n     * If `recursive` is not supplied, the default of `false` is used.\\\\n     */\\\\n    function watch(filename: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\", persistent?: boolean, recursive?: boolean } | \\\\\\\"buffer\\\\\\\", listener?: (event: string, filename: Buffer) => void): FSWatcher;\\\\n\\\\n    /**\\\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\\\\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n     * If `persistent` is not supplied, the default of `true` is used.\\\\n     * If `recursive` is not supplied, the default of `false` is used.\\\\n     */\\\\n    function watch(\\\\n        filename: PathLike,\\\\n        options: { encoding?: string | null, persistent?: boolean, recursive?: boolean } | string | null,\\\\n        listener?: (event: string, filename: string | Buffer) => void,\\\\n    ): FSWatcher;\\\\n\\\\n    /**\\\\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\\\\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function watch(filename: PathLike, listener?: (event: string, filename: string) => any): FSWatcher;\\\\n\\\\n    /**\\\\n     * Asynchronously tests whether or not the given path exists by checking with the file system.\\\\n     * @deprecated\\\\n     * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function exists(path: PathLike, callback: (exists: boolean) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace exists {\\\\n        /**\\\\n         * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         */\\\\n        function __promisify__(path: PathLike): Promise<boolean>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronously tests whether or not the given path exists by checking with the file system.\\\\n     * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function existsSync(path: PathLike): boolean;\\\\n\\\\n    namespace constants {\\\\n        // File Access Constants\\\\n\\\\n        /** Constant for fs.access(). File is visible to the calling process. */\\\\n        const F_OK: number;\\\\n\\\\n        /** Constant for fs.access(). File can be read by the calling process. */\\\\n        const R_OK: number;\\\\n\\\\n        /** Constant for fs.access(). File can be written by the calling process. */\\\\n        const W_OK: number;\\\\n\\\\n        /** Constant for fs.access(). File can be executed by the calling process. */\\\\n        const X_OK: number;\\\\n\\\\n        // File Copy Constants\\\\n\\\\n        /** Constant for fs.copyFile. Flag indicating the destination file should not be overwritten if it already exists. */\\\\n        const COPYFILE_EXCL: number;\\\\n\\\\n        /**\\\\n         * Constant for fs.copyFile. copy operation will attempt to create a copy-on-write reflink.\\\\n         * If the underlying platform does not support copy-on-write, then a fallback copy mechanism is used.\\\\n         */\\\\n        const COPYFILE_FICLONE: number;\\\\n\\\\n        /**\\\\n         * Constant for fs.copyFile. Copy operation will attempt to create a copy-on-write reflink.\\\\n         * If the underlying platform does not support copy-on-write, then the operation will fail with an error.\\\\n         */\\\\n        const COPYFILE_FICLONE_FORCE: number;\\\\n\\\\n        // File Open Constants\\\\n\\\\n        /** Constant for fs.open(). Flag indicating to open a file for read-only access. */\\\\n        const O_RDONLY: number;\\\\n\\\\n        /** Constant for fs.open(). Flag indicating to open a file for write-only access. */\\\\n        const O_WRONLY: number;\\\\n\\\\n        /** Constant for fs.open(). Flag indicating to open a file for read-write access. */\\\\n        const O_RDWR: number;\\\\n\\\\n        /** Constant for fs.open(). Flag indicating to create the file if it does not already exist. */\\\\n        const O_CREAT: number;\\\\n\\\\n        /** Constant for fs.open(). Flag indicating that opening a file should fail if the O_CREAT flag is set and the file already exists. */\\\\n        const O_EXCL: number;\\\\n\\\\n        /**\\\\n         * Constant for fs.open(). Flag indicating that if path identifies a terminal device,\\\\n         * opening the path shall not cause that terminal to become the controlling terminal for the process\\\\n         * (if the process does not already have one).\\\\n         */\\\\n        const O_NOCTTY: number;\\\\n\\\\n        /** Constant for fs.open(). Flag indicating that if the file exists and is a regular file, and the file is opened successfully for write access, its length shall be truncated to zero. */\\\\n        const O_TRUNC: number;\\\\n\\\\n        /** Constant for fs.open(). Flag indicating that data will be appended to the end of the file. */\\\\n        const O_APPEND: number;\\\\n\\\\n        /** Constant for fs.open(). Flag indicating that the open should fail if the path is not a directory. */\\\\n        const O_DIRECTORY: number;\\\\n\\\\n        /**\\\\n         * constant for fs.open().\\\\n         * Flag indicating reading accesses to the file system will no longer result in\\\\n         * an update to the atime information associated with the file.\\\\n         * This flag is available on Linux operating systems only.\\\\n         */\\\\n        const O_NOATIME: number;\\\\n\\\\n        /** Constant for fs.open(). Flag indicating that the open should fail if the path is a symbolic link. */\\\\n        const O_NOFOLLOW: number;\\\\n\\\\n        /** Constant for fs.open(). Flag indicating that the file is opened for synchronous I/O. */\\\\n        const O_SYNC: number;\\\\n\\\\n        /** Constant for fs.open(). Flag indicating that the file is opened for synchronous I/O with write operations waiting for data integrity. */\\\\n        const O_DSYNC: number;\\\\n\\\\n        /** Constant for fs.open(). Flag indicating to open the symbolic link itself rather than the resource it is pointing to. */\\\\n        const O_SYMLINK: number;\\\\n\\\\n        /** Constant for fs.open(). When set, an attempt will be made to minimize caching effects of file I/O. */\\\\n        const O_DIRECT: number;\\\\n\\\\n        /** Constant for fs.open(). Flag indicating to open the file in nonblocking mode when possible. */\\\\n        const O_NONBLOCK: number;\\\\n\\\\n        // File Type Constants\\\\n\\\\n        /** Constant for fs.Stats mode property for determining a file's type. Bit mask used to extract the file type code. */\\\\n        const S_IFMT: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a regular file. */\\\\n        const S_IFREG: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a directory. */\\\\n        const S_IFDIR: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a character-oriented device file. */\\\\n        const S_IFCHR: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a block-oriented device file. */\\\\n        const S_IFBLK: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a FIFO/pipe. */\\\\n        const S_IFIFO: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a symbolic link. */\\\\n        const S_IFLNK: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a socket. */\\\\n        const S_IFSOCK: number;\\\\n\\\\n        // File Mode Constants\\\\n\\\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by owner. */\\\\n        const S_IRWXU: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by owner. */\\\\n        const S_IRUSR: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by owner. */\\\\n        const S_IWUSR: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by owner. */\\\\n        const S_IXUSR: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by group. */\\\\n        const S_IRWXG: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by group. */\\\\n        const S_IRGRP: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by group. */\\\\n        const S_IWGRP: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by group. */\\\\n        const S_IXGRP: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by others. */\\\\n        const S_IRWXO: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by others. */\\\\n        const S_IROTH: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by others. */\\\\n        const S_IWOTH: number;\\\\n\\\\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by others. */\\\\n        const S_IXOTH: number;\\\\n    }\\\\n\\\\n    /**\\\\n     * Asynchronously tests a user's permissions for the file specified by path.\\\\n     * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function access(path: PathLike, mode: number | undefined, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    /**\\\\n     * Asynchronously tests a user's permissions for the file specified by path.\\\\n     * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function access(path: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace access {\\\\n        /**\\\\n         * Asynchronously tests a user's permissions for the file specified by path.\\\\n         * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         */\\\\n        function __promisify__(path: PathLike, mode?: number): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronously tests a user's permissions for the file specified by path.\\\\n     * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function accessSync(path: PathLike, mode?: number): void;\\\\n\\\\n    /**\\\\n     * Returns a new `ReadStream` object.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function createReadStream(path: PathLike, options?: string | {\\\\n        flags?: string;\\\\n        encoding?: string;\\\\n        fd?: number;\\\\n        mode?: number;\\\\n        autoClose?: boolean;\\\\n        start?: number;\\\\n        end?: number;\\\\n        highWaterMark?: number;\\\\n    }): ReadStream;\\\\n\\\\n    /**\\\\n     * Returns a new `WriteStream` object.\\\\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n     * URL support is _experimental_.\\\\n     */\\\\n    function createWriteStream(path: PathLike, options?: string | {\\\\n        flags?: string;\\\\n        encoding?: string;\\\\n        fd?: number;\\\\n        mode?: number;\\\\n        autoClose?: boolean;\\\\n        start?: number;\\\\n        highWaterMark?: number;\\\\n    }): WriteStream;\\\\n\\\\n    /**\\\\n     * Asynchronous fdatasync(2) - synchronize a file's in-core state with storage device.\\\\n     * @param fd A file descriptor.\\\\n     */\\\\n    function fdatasync(fd: number, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace fdatasync {\\\\n        /**\\\\n         * Asynchronous fdatasync(2) - synchronize a file's in-core state with storage device.\\\\n         * @param fd A file descriptor.\\\\n         */\\\\n        function __promisify__(fd: number): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronous fdatasync(2) - synchronize a file's in-core state with storage device.\\\\n     * @param fd A file descriptor.\\\\n     */\\\\n    function fdatasyncSync(fd: number): void;\\\\n\\\\n    /**\\\\n     * Asynchronously copies src to dest. By default, dest is overwritten if it already exists.\\\\n     * No arguments other than a possible exception are given to the callback function.\\\\n     * Node.js makes no guarantees about the atomicity of the copy operation.\\\\n     * If an error occurs after the destination file has been opened for writing, Node.js will attempt\\\\n     * to remove the destination.\\\\n     * @param src A path to the source file.\\\\n     * @param dest A path to the destination file.\\\\n     */\\\\n    function copyFile(src: PathLike, dest: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n    /**\\\\n     * Asynchronously copies src to dest. By default, dest is overwritten if it already exists.\\\\n     * No arguments other than a possible exception are given to the callback function.\\\\n     * Node.js makes no guarantees about the atomicity of the copy operation.\\\\n     * If an error occurs after the destination file has been opened for writing, Node.js will attempt\\\\n     * to remove the destination.\\\\n     * @param src A path to the source file.\\\\n     * @param dest A path to the destination file.\\\\n     * @param flags An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.\\\\n     */\\\\n    function copyFile(src: PathLike, dest: PathLike, flags: number, callback: (err: NodeJS.ErrnoException | null) => void): void;\\\\n\\\\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\\\\n    namespace copyFile {\\\\n        /**\\\\n         * Asynchronously copies src to dest. By default, dest is overwritten if it already exists.\\\\n         * No arguments other than a possible exception are given to the callback function.\\\\n         * Node.js makes no guarantees about the atomicity of the copy operation.\\\\n         * If an error occurs after the destination file has been opened for writing, Node.js will attempt\\\\n         * to remove the destination.\\\\n         * @param src A path to the source file.\\\\n         * @param dest A path to the destination file.\\\\n         * @param flags An optional integer that specifies the behavior of the copy operation.\\\\n         * The only supported flag is fs.constants.COPYFILE_EXCL,\\\\n         * which causes the copy operation to fail if dest already exists.\\\\n         */\\\\n        function __promisify__(src: PathLike, dst: PathLike, flags?: number): Promise<void>;\\\\n    }\\\\n\\\\n    /**\\\\n     * Synchronously copies src to dest. By default, dest is overwritten if it already exists.\\\\n     * Node.js makes no guarantees about the atomicity of the copy operation.\\\\n     * If an error occurs after the destination file has been opened for writing, Node.js will attempt\\\\n     * to remove the destination.\\\\n     * @param src A path to the source file.\\\\n     * @param dest A path to the destination file.\\\\n     * @param flags An optional integer that specifies the behavior of the copy operation.\\\\n     * The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.\\\\n     */\\\\n    function copyFileSync(src: PathLike, dest: PathLike, flags?: number): void;\\\\n\\\\n    namespace promises {\\\\n        interface FileHandle {\\\\n            /**\\\\n             * Gets the file descriptor for this file handle.\\\\n             */\\\\n            readonly fd: number;\\\\n\\\\n            /**\\\\n             * Asynchronously append data to a file, creating the file if it does not exist. The underlying file will _not_ be closed automatically.\\\\n             * The `FileHandle` must have been opened for appending.\\\\n             * @param data The data to write. If something other than a `Buffer` or `Uint8Array` is provided, the value is coerced to a string.\\\\n             * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\\\n             * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n             * If `mode` is not supplied, the default of `0o666` is used.\\\\n             * If `mode` is a string, it is parsed as an octal integer.\\\\n             * If `flag` is not supplied, the default of `'a'` is used.\\\\n             */\\\\n            appendFile(data: any, options?: { encoding?: string | null, mode?: string | number, flag?: string | number } | string | null): Promise<void>;\\\\n\\\\n            /**\\\\n             * Asynchronous fchown(2) - Change ownership of a file.\\\\n             */\\\\n            chown(uid: number, gid: number): Promise<void>;\\\\n\\\\n            /**\\\\n             * Asynchronous fchmod(2) - Change permissions of a file.\\\\n             * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n             */\\\\n            chmod(mode: string | number): Promise<void>;\\\\n\\\\n            /**\\\\n             * Asynchronous fdatasync(2) - synchronize a file's in-core state with storage device.\\\\n             */\\\\n            datasync(): Promise<void>;\\\\n\\\\n            /**\\\\n             * Asynchronous fsync(2) - synchronize a file's in-core state with the underlying storage device.\\\\n             */\\\\n            sync(): Promise<void>;\\\\n\\\\n            /**\\\\n             * Asynchronously reads data from the file.\\\\n             * The `FileHandle` must have been opened for reading.\\\\n             * @param buffer The buffer that the data will be written to.\\\\n             * @param offset The offset in the buffer at which to start writing.\\\\n             * @param length The number of bytes to read.\\\\n             * @param position The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.\\\\n             */\\\\n            read<TBuffer extends Uint8Array>(buffer: TBuffer, offset?: number | null, length?: number | null, position?: number | null): Promise<{ bytesRead: number, buffer: TBuffer }>;\\\\n\\\\n            /**\\\\n             * Asynchronously reads the entire contents of a file. The underlying file will _not_ be closed automatically.\\\\n             * The `FileHandle` must have been opened for reading.\\\\n             * @param options An object that may contain an optional flag.\\\\n             * If a flag is not provided, it defaults to `'r'`.\\\\n             */\\\\n            readFile(options?: { encoding?: null, flag?: string | number } | null): Promise<Buffer>;\\\\n\\\\n            /**\\\\n             * Asynchronously reads the entire contents of a file. The underlying file will _not_ be closed automatically.\\\\n             * The `FileHandle` must have been opened for reading.\\\\n             * @param options An object that may contain an optional flag.\\\\n             * If a flag is not provided, it defaults to `'r'`.\\\\n             */\\\\n            readFile(options: { encoding: BufferEncoding, flag?: string | number } | BufferEncoding): Promise<string>;\\\\n\\\\n            /**\\\\n             * Asynchronously reads the entire contents of a file. The underlying file will _not_ be closed automatically.\\\\n             * The `FileHandle` must have been opened for reading.\\\\n             * @param options An object that may contain an optional flag.\\\\n             * If a flag is not provided, it defaults to `'r'`.\\\\n             */\\\\n            readFile(options?: { encoding?: string | null, flag?: string | number } | string | null): Promise<string | Buffer>;\\\\n\\\\n            /**\\\\n             * Asynchronous fstat(2) - Get file status.\\\\n             */\\\\n            stat(): Promise<Stats>;\\\\n\\\\n            /**\\\\n             * Asynchronous ftruncate(2) - Truncate a file to a specified length.\\\\n             * @param len If not specified, defaults to `0`.\\\\n             */\\\\n            truncate(len?: number): Promise<void>;\\\\n\\\\n            /**\\\\n             * Asynchronously change file timestamps of the file.\\\\n             * @param atime The last access time. If a string is provided, it will be coerced to number.\\\\n             * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\\\n             */\\\\n            utimes(atime: string | number | Date, mtime: string | number | Date): Promise<void>;\\\\n\\\\n            /**\\\\n             * Asynchronously writes `buffer` to the file.\\\\n             * The `FileHandle` must have been opened for writing.\\\\n             * @param buffer The buffer that the data will be written to.\\\\n             * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\\\n             * @param length The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\\\\n             * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\\\n             */\\\\n            write<TBuffer extends Uint8Array>(buffer: TBuffer, offset?: number | null, length?: number | null, position?: number | null): Promise<{ bytesWritten: number, buffer: TBuffer }>;\\\\n\\\\n            /**\\\\n             * Asynchronously writes `string` to the file.\\\\n             * The `FileHandle` must have been opened for writing.\\\\n             * It is unsafe to call `write()` multiple times on the same file without waiting for the `Promise`\\\\n             * to be resolved (or rejected). For this scenario, `fs.createWriteStream` is strongly recommended.\\\\n             * @param string A string to write. If something other than a string is supplied it will be coerced to a string.\\\\n             * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\\\n             * @param encoding The expected string encoding.\\\\n             */\\\\n            write(data: any, position?: number | null, encoding?: string | null): Promise<{ bytesWritten: number, buffer: string }>;\\\\n\\\\n            /**\\\\n             * Asynchronously writes data to a file, replacing the file if it already exists. The underlying file will _not_ be closed automatically.\\\\n             * The `FileHandle` must have been opened for writing.\\\\n             * It is unsafe to call `writeFile()` multiple times on the same file without waiting for the `Promise` to be resolved (or rejected).\\\\n             * @param data The data to write. If something other than a `Buffer` or `Uint8Array` is provided, the value is coerced to a string.\\\\n             * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\\\n             * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n             * If `mode` is not supplied, the default of `0o666` is used.\\\\n             * If `mode` is a string, it is parsed as an octal integer.\\\\n             * If `flag` is not supplied, the default of `'w'` is used.\\\\n             */\\\\n            writeFile(data: any, options?: { encoding?: string | null, mode?: string | number, flag?: string | number } | string | null): Promise<void>;\\\\n\\\\n            /**\\\\n             * Asynchronous close(2) - close a `FileHandle`.\\\\n             */\\\\n            close(): Promise<void>;\\\\n        }\\\\n\\\\n        /**\\\\n         * Asynchronously tests a user's permissions for the file specified by path.\\\\n         * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         */\\\\n        function access(path: PathLike, mode?: number): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists.\\\\n         * Node.js makes no guarantees about the atomicity of the copy operation.\\\\n         * If an error occurs after the destination file has been opened for writing, Node.js will attempt\\\\n         * to remove the destination.\\\\n         * @param src A path to the source file.\\\\n         * @param dest A path to the destination file.\\\\n         * @param flags An optional integer that specifies the behavior of the copy operation. The only\\\\n         * supported flag is `fs.constants.COPYFILE_EXCL`, which causes the copy operation to fail if\\\\n         * `dest` already exists.\\\\n         */\\\\n        function copyFile(src: PathLike, dest: PathLike, flags?: number): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous open(2) - open and possibly create a file.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer. If not\\\\n         * supplied, defaults to `0o666`.\\\\n         */\\\\n        function open(path: PathLike, flags: string | number, mode?: string | number): Promise<FileHandle>;\\\\n\\\\n        /**\\\\n         * Asynchronously reads data from the file referenced by the supplied `FileHandle`.\\\\n         * @param handle A `FileHandle`.\\\\n         * @param buffer The buffer that the data will be written to.\\\\n         * @param offset The offset in the buffer at which to start writing.\\\\n         * @param length The number of bytes to read.\\\\n         * @param position The offset from the beginning of the file from which data should be read. If\\\\n         * `null`, data will be read from the current position.\\\\n         */\\\\n        function read<TBuffer extends Uint8Array>(\\\\n            handle: FileHandle,\\\\n            buffer: TBuffer,\\\\n            offset?: number | null,\\\\n            length?: number | null,\\\\n            position?: number | null,\\\\n        ): Promise<{ bytesRead: number, buffer: TBuffer }>;\\\\n\\\\n        /**\\\\n         * Asynchronously writes `buffer` to the file referenced by the supplied `FileHandle`.\\\\n         * It is unsafe to call `fsPromises.write()` multiple times on the same file without waiting for the `Promise`\\\\n         * to be resolved (or rejected). For this scenario, `fs.createWriteStream` is strongly recommended.\\\\n         * @param handle A `FileHandle`.\\\\n         * @param buffer The buffer that the data will be written to.\\\\n         * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\\\\n         * @param length The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\\\\n         * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\\\n         */\\\\n        function write<TBuffer extends Uint8Array>(\\\\n            handle: FileHandle,\\\\n            buffer: TBuffer,\\\\n            offset?: number | null,\\\\n            length?: number | null, position?: number | null): Promise<{ bytesWritten: number, buffer: TBuffer }>;\\\\n\\\\n        /**\\\\n         * Asynchronously writes `string` to the file referenced by the supplied `FileHandle`.\\\\n         * It is unsafe to call `fsPromises.write()` multiple times on the same file without waiting for the `Promise`\\\\n         * to be resolved (or rejected). For this scenario, `fs.createWriteStream` is strongly recommended.\\\\n         * @param handle A `FileHandle`.\\\\n         * @param string A string to write. If something other than a string is supplied it will be coerced to a string.\\\\n         * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\\\\n         * @param encoding The expected string encoding.\\\\n         */\\\\n        function write(handle: FileHandle, string: any, position?: number | null, encoding?: string | null): Promise<{ bytesWritten: number, buffer: string }>;\\\\n\\\\n        /**\\\\n         * Asynchronous rename(2) - Change the name or location of a file or directory.\\\\n         * @param oldPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         */\\\\n        function rename(oldPath: PathLike, newPath: PathLike): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous truncate(2) - Truncate a file to a specified length.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param len If not specified, defaults to `0`.\\\\n         */\\\\n        function truncate(path: PathLike, len?: number): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous ftruncate(2) - Truncate a file to a specified length.\\\\n         * @param handle A `FileHandle`.\\\\n         * @param len If not specified, defaults to `0`.\\\\n         */\\\\n        function ftruncate(handle: FileHandle, len?: number): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous rmdir(2) - delete a directory.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function rmdir(path: PathLike): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous fdatasync(2) - synchronize a file's in-core state with storage device.\\\\n         * @param handle A `FileHandle`.\\\\n         */\\\\n        function fdatasync(handle: FileHandle): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous fsync(2) - synchronize a file's in-core state with the underlying storage device.\\\\n         * @param handle A `FileHandle`.\\\\n         */\\\\n        function fsync(handle: FileHandle): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous mkdir(2) - create a directory.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\\\\n         * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\\\\n         */\\\\n        function mkdir(path: PathLike, options?: number | string | MakeDirectoryOptions | null): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous readdir(3) - read a directory.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function readdir(path: PathLike, options?: { encoding?: BufferEncoding | null; withFileTypes?: false } | BufferEncoding | null): Promise<string[]>;\\\\n\\\\n        /**\\\\n         * Asynchronous readdir(3) - read a directory.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function readdir(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\"; withFileTypes?: false } | \\\\\\\"buffer\\\\\\\"): Promise<Buffer[]>;\\\\n\\\\n        /**\\\\n         * Asynchronous readdir(3) - read a directory.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function readdir(path: PathLike, options?: { encoding?: string | null; withFileTypes?: false } | string | null): Promise<string[] | Buffer[]>;\\\\n\\\\n        /**\\\\n         * Asynchronous readdir(3) - read a directory.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\\\\n         */\\\\n        function readdir(path: PathLike, options: { encoding?: string | null; withFileTypes: true }): Promise<Dirent[]>;\\\\n\\\\n        /**\\\\n         * Asynchronous readlink(2) - read value of a symbolic link.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function readlink(path: PathLike, options?: { encoding?: BufferEncoding | null } | BufferEncoding | null): Promise<string>;\\\\n\\\\n        /**\\\\n         * Asynchronous readlink(2) - read value of a symbolic link.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function readlink(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\"): Promise<Buffer>;\\\\n\\\\n        /**\\\\n         * Asynchronous readlink(2) - read value of a symbolic link.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function readlink(path: PathLike, options?: { encoding?: string | null } | string | null): Promise<string | Buffer>;\\\\n\\\\n        /**\\\\n         * Asynchronous symlink(2) - Create a new symbolic link to an existing file.\\\\n         * @param target A path to an existing file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param path A path to the new symlink. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param type May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).\\\\n         * When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.\\\\n         */\\\\n        function symlink(target: PathLike, path: PathLike, type?: string | null): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous fstat(2) - Get file status.\\\\n         * @param handle A `FileHandle`.\\\\n         */\\\\n        function fstat(handle: FileHandle): Promise<Stats>;\\\\n\\\\n        /**\\\\n         * Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function lstat(path: PathLike): Promise<Stats>;\\\\n\\\\n        /**\\\\n         * Asynchronous stat(2) - Get file status.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function stat(path: PathLike): Promise<Stats>;\\\\n\\\\n        /**\\\\n         * Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.\\\\n         * @param existingPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function link(existingPath: PathLike, newPath: PathLike): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous unlink(2) - delete a name and possibly the file it refers to.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function unlink(path: PathLike): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous fchmod(2) - Change permissions of a file.\\\\n         * @param handle A `FileHandle`.\\\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n         */\\\\n        function fchmod(handle: FileHandle, mode: string | number): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous chmod(2) - Change permissions of a file.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n         */\\\\n        function chmod(path: PathLike, mode: string | number): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\\\\n         */\\\\n        function lchmod(path: PathLike, mode: string | number): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function lchown(path: PathLike, uid: number, gid: number): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous fchown(2) - Change ownership of a file.\\\\n         * @param handle A `FileHandle`.\\\\n         */\\\\n        function fchown(handle: FileHandle, uid: number, gid: number): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous chown(2) - Change ownership of a file.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         */\\\\n        function chown(path: PathLike, uid: number, gid: number): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronously change file timestamps of the file referenced by the supplied path.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\\\\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\\\n         */\\\\n        function utimes(path: PathLike, atime: string | number | Date, mtime: string | number | Date): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronously change file timestamps of the file referenced by the supplied `FileHandle`.\\\\n         * @param handle A `FileHandle`.\\\\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\\\\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\\\\n         */\\\\n        function futimes(handle: FileHandle, atime: string | number | Date, mtime: string | number | Date): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function realpath(path: PathLike, options?: { encoding?: BufferEncoding | null } | BufferEncoding | null): Promise<string>;\\\\n\\\\n        /**\\\\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function realpath(path: PathLike, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\"): Promise<Buffer>;\\\\n\\\\n        /**\\\\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function realpath(path: PathLike, options?: { encoding?: string | null } | string | null): Promise<string | Buffer>;\\\\n\\\\n        /**\\\\n         * Asynchronously creates a unique temporary directory.\\\\n         * Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function mkdtemp(prefix: string, options?: { encoding?: BufferEncoding | null } | BufferEncoding | null): Promise<string>;\\\\n\\\\n        /**\\\\n         * Asynchronously creates a unique temporary directory.\\\\n         * Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function mkdtemp(prefix: string, options: { encoding: \\\\\\\"buffer\\\\\\\" } | \\\\\\\"buffer\\\\\\\"): Promise<Buffer>;\\\\n\\\\n        /**\\\\n         * Asynchronously creates a unique temporary directory.\\\\n         * Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.\\\\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\\\\n         */\\\\n        function mkdtemp(prefix: string, options?: { encoding?: string | null } | string | null): Promise<string | Buffer>;\\\\n\\\\n        /**\\\\n         * Asynchronously writes data to a file, replacing the file if it already exists.\\\\n         * It is unsafe to call `fsPromises.writeFile()` multiple times on the same file without waiting for the `Promise` to be resolved (or rejected).\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         * If a `FileHandle` is provided, the underlying file will _not_ be closed automatically.\\\\n         * @param data The data to write. If something other than a `Buffer` or `Uint8Array` is provided, the value is coerced to a string.\\\\n         * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\\\n         * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n         * If `mode` is not supplied, the default of `0o666` is used.\\\\n         * If `mode` is a string, it is parsed as an octal integer.\\\\n         * If `flag` is not supplied, the default of `'w'` is used.\\\\n         */\\\\n        function writeFile(path: PathLike | FileHandle, data: any, options?: { encoding?: string | null, mode?: string | number, flag?: string | number } | string | null): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronously append data to a file, creating the file if it does not exist.\\\\n         * @param file A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * URL support is _experimental_.\\\\n         * If a `FileHandle` is provided, the underlying file will _not_ be closed automatically.\\\\n         * @param data The data to write. If something other than a `Buffer` or `Uint8Array` is provided, the value is coerced to a string.\\\\n         * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\\\\n         * If `encoding` is not supplied, the default of `'utf8'` is used.\\\\n         * If `mode` is not supplied, the default of `0o666` is used.\\\\n         * If `mode` is a string, it is parsed as an octal integer.\\\\n         * If `flag` is not supplied, the default of `'a'` is used.\\\\n         */\\\\n        function appendFile(path: PathLike | FileHandle, data: any, options?: { encoding?: string | null, mode?: string | number, flag?: string | number } | string | null): Promise<void>;\\\\n\\\\n        /**\\\\n         * Asynchronously reads the entire contents of a file.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * If a `FileHandle` is provided, the underlying file will _not_ be closed automatically.\\\\n         * @param options An object that may contain an optional flag.\\\\n         * If a flag is not provided, it defaults to `'r'`.\\\\n         */\\\\n        function readFile(path: PathLike | FileHandle, options?: { encoding?: null, flag?: string | number } | null): Promise<Buffer>;\\\\n\\\\n        /**\\\\n         * Asynchronously reads the entire contents of a file.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * If a `FileHandle` is provided, the underlying file will _not_ be closed automatically.\\\\n         * @param options An object that may contain an optional flag.\\\\n         * If a flag is not provided, it defaults to `'r'`.\\\\n         */\\\\n        function readFile(path: PathLike | FileHandle, options: { encoding: BufferEncoding, flag?: string | number } | BufferEncoding): Promise<string>;\\\\n\\\\n        /**\\\\n         * Asynchronously reads the entire contents of a file.\\\\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\\\\n         * If a `FileHandle` is provided, the underlying file will _not_ be closed automatically.\\\\n         * @param options An object that may contain an optional flag.\\\\n         * If a flag is not provided, it defaults to `'r'`.\\\\n         */\\\\n        function readFile(path: PathLike | FileHandle, options?: { encoding?: string | null, flag?: string | number } | string | null): Promise<string | Buffer>;\\\\n    }\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/http.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"http\\\\\\\" {\\\\n    import * as events from \\\\\\\"events\\\\\\\";\\\\n    import * as stream from \\\\\\\"stream\\\\\\\";\\\\n    import { URL } from \\\\\\\"url\\\\\\\";\\\\n    import { Socket, Server as NetServer } from \\\\\\\"net\\\\\\\";\\\\n\\\\n    // incoming headers will never contain number\\\\n    interface IncomingHttpHeaders {\\\\n        'accept'?: string;\\\\n        'accept-language'?: string;\\\\n        'accept-patch'?: string;\\\\n        'accept-ranges'?: string;\\\\n        'access-control-allow-credentials'?: string;\\\\n        'access-control-allow-headers'?: string;\\\\n        'access-control-allow-methods'?: string;\\\\n        'access-control-allow-origin'?: string;\\\\n        'access-control-expose-headers'?: string;\\\\n        'access-control-max-age'?: string;\\\\n        'age'?: string;\\\\n        'allow'?: string;\\\\n        'alt-svc'?: string;\\\\n        'authorization'?: string;\\\\n        'cache-control'?: string;\\\\n        'connection'?: string;\\\\n        'content-disposition'?: string;\\\\n        'content-encoding'?: string;\\\\n        'content-language'?: string;\\\\n        'content-length'?: string;\\\\n        'content-location'?: string;\\\\n        'content-range'?: string;\\\\n        'content-type'?: string;\\\\n        'cookie'?: string;\\\\n        'date'?: string;\\\\n        'expect'?: string;\\\\n        'expires'?: string;\\\\n        'forwarded'?: string;\\\\n        'from'?: string;\\\\n        'host'?: string;\\\\n        'if-match'?: string;\\\\n        'if-modified-since'?: string;\\\\n        'if-none-match'?: string;\\\\n        'if-unmodified-since'?: string;\\\\n        'last-modified'?: string;\\\\n        'location'?: string;\\\\n        'pragma'?: string;\\\\n        'proxy-authenticate'?: string;\\\\n        'proxy-authorization'?: string;\\\\n        'public-key-pins'?: string;\\\\n        'range'?: string;\\\\n        'referer'?: string;\\\\n        'retry-after'?: string;\\\\n        'set-cookie'?: string[];\\\\n        'strict-transport-security'?: string;\\\\n        'tk'?: string;\\\\n        'trailer'?: string;\\\\n        'transfer-encoding'?: string;\\\\n        'upgrade'?: string;\\\\n        'user-agent'?: string;\\\\n        'vary'?: string;\\\\n        'via'?: string;\\\\n        'warning'?: string;\\\\n        'www-authenticate'?: string;\\\\n        [header: string]: string | string[] | undefined;\\\\n    }\\\\n\\\\n    // outgoing headers allows numbers (as they are converted internally to strings)\\\\n    interface OutgoingHttpHeaders {\\\\n        [header: string]: number | string | string[] | undefined;\\\\n    }\\\\n\\\\n    interface ClientRequestArgs {\\\\n        protocol?: string;\\\\n        host?: string;\\\\n        hostname?: string;\\\\n        family?: number;\\\\n        port?: number | string;\\\\n        defaultPort?: number | string;\\\\n        localAddress?: string;\\\\n        socketPath?: string;\\\\n        method?: string;\\\\n        path?: string;\\\\n        headers?: OutgoingHttpHeaders;\\\\n        auth?: string;\\\\n        agent?: Agent | boolean;\\\\n        _defaultAgent?: Agent;\\\\n        timeout?: number;\\\\n        setHost?: boolean;\\\\n        // https://github.com/nodejs/node/blob/master/lib/_http_client.js#L278\\\\n        createConnection?: (options: ClientRequestArgs, oncreate: (err: Error, socket: Socket) => void) => Socket;\\\\n    }\\\\n\\\\n    interface ServerOptions {\\\\n        IncomingMessage?: typeof IncomingMessage;\\\\n        ServerResponse?: typeof ServerResponse;\\\\n    }\\\\n\\\\n    type RequestListener = (req: IncomingMessage, res: ServerResponse) => void;\\\\n\\\\n    class Server extends NetServer {\\\\n        constructor(requestListener?: RequestListener);\\\\n        constructor(options: ServerOptions, requestListener?: RequestListener);\\\\n\\\\n        setTimeout(msecs?: number, callback?: () => void): this;\\\\n        setTimeout(callback: () => void): this;\\\\n        /**\\\\n         * Limits maximum incoming headers count. If set to 0, no limit will be applied.\\\\n         * @default 2000\\\\n         * {@link https://nodejs.org/api/http.html#http_server_maxheaderscount}\\\\n         */\\\\n        maxHeadersCount: number | null;\\\\n        timeout: number;\\\\n        /**\\\\n         * Limit the amount of time the parser will wait to receive the complete HTTP headers.\\\\n         * @default 40000\\\\n         * {@link https://nodejs.org/api/http.html#http_server_headerstimeout}\\\\n         */\\\\n        headersTimeout: number;\\\\n        keepAliveTimeout: number;\\\\n    }\\\\n\\\\n    // https://github.com/nodejs/node/blob/master/lib/_http_outgoing.js\\\\n    class OutgoingMessage extends stream.Writable {\\\\n        upgrading: boolean;\\\\n        chunkedEncoding: boolean;\\\\n        shouldKeepAlive: boolean;\\\\n        useChunkedEncodingByDefault: boolean;\\\\n        sendDate: boolean;\\\\n        finished: boolean;\\\\n        headersSent: boolean;\\\\n        connection: Socket;\\\\n\\\\n        constructor();\\\\n\\\\n        setTimeout(msecs: number, callback?: () => void): this;\\\\n        setHeader(name: string, value: number | string | string[]): void;\\\\n        getHeader(name: string): number | string | string[] | undefined;\\\\n        getHeaders(): OutgoingHttpHeaders;\\\\n        getHeaderNames(): string[];\\\\n        hasHeader(name: string): boolean;\\\\n        removeHeader(name: string): void;\\\\n        addTrailers(headers: OutgoingHttpHeaders | Array<[string, string]>): void;\\\\n        flushHeaders(): void;\\\\n    }\\\\n\\\\n    // https://github.com/nodejs/node/blob/master/lib/_http_server.js#L108-L256\\\\n    class ServerResponse extends OutgoingMessage {\\\\n        statusCode: number;\\\\n        statusMessage: string;\\\\n        writableFinished: boolean;\\\\n\\\\n        constructor(req: IncomingMessage);\\\\n\\\\n        assignSocket(socket: Socket): void;\\\\n        detachSocket(socket: Socket): void;\\\\n        // https://github.com/nodejs/node/blob/master/test/parallel/test-http-write-callbacks.js#L53\\\\n        // no args in writeContinue callback\\\\n        writeContinue(callback?: () => void): void;\\\\n        writeHead(statusCode: number, reasonPhrase?: string, headers?: OutgoingHttpHeaders): this;\\\\n        writeHead(statusCode: number, headers?: OutgoingHttpHeaders): this;\\\\n    }\\\\n\\\\n    interface InformationEvent {\\\\n        statusCode: number;\\\\n        statusMessage: string;\\\\n        httpVersion: string;\\\\n        httpVersionMajor: number;\\\\n        httpVersionMinor: number;\\\\n        headers: IncomingHttpHeaders;\\\\n        rawHeaders: string[];\\\\n    }\\\\n\\\\n    // https://github.com/nodejs/node/blob/master/lib/_http_client.js#L77\\\\n    class ClientRequest extends OutgoingMessage {\\\\n        connection: Socket;\\\\n        socket: Socket;\\\\n        aborted: number;\\\\n\\\\n        constructor(url: string | URL | ClientRequestArgs, cb?: (res: IncomingMessage) => void);\\\\n\\\\n        readonly path: string;\\\\n        abort(): void;\\\\n        onSocket(socket: Socket): void;\\\\n        setTimeout(timeout: number, callback?: () => void): this;\\\\n        setNoDelay(noDelay?: boolean): void;\\\\n        setSocketKeepAlive(enable?: boolean, initialDelay?: number): void;\\\\n\\\\n        addListener(event: 'abort', listener: () => void): this;\\\\n        addListener(event: 'connect', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\\\n        addListener(event: 'continue', listener: () => void): this;\\\\n        addListener(event: 'information', listener: (info: InformationEvent) => void): this;\\\\n        addListener(event: 'response', listener: (response: IncomingMessage) => void): this;\\\\n        addListener(event: 'socket', listener: (socket: Socket) => void): this;\\\\n        addListener(event: 'timeout', listener: () => void): this;\\\\n        addListener(event: 'upgrade', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\\\n        addListener(event: 'close', listener: () => void): this;\\\\n        addListener(event: 'drain', listener: () => void): this;\\\\n        addListener(event: 'error', listener: (err: Error) => void): this;\\\\n        addListener(event: 'finish', listener: () => void): this;\\\\n        addListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\\\n        addListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        on(event: 'abort', listener: () => void): this;\\\\n        on(event: 'connect', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\\\n        on(event: 'continue', listener: () => void): this;\\\\n        on(event: 'information', listener: (info: InformationEvent) => void): this;\\\\n        on(event: 'response', listener: (response: IncomingMessage) => void): this;\\\\n        on(event: 'socket', listener: (socket: Socket) => void): this;\\\\n        on(event: 'timeout', listener: () => void): this;\\\\n        on(event: 'upgrade', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\\\n        on(event: 'close', listener: () => void): this;\\\\n        on(event: 'drain', listener: () => void): this;\\\\n        on(event: 'error', listener: (err: Error) => void): this;\\\\n        on(event: 'finish', listener: () => void): this;\\\\n        on(event: 'pipe', listener: (src: stream.Readable) => void): this;\\\\n        on(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        once(event: 'abort', listener: () => void): this;\\\\n        once(event: 'connect', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\\\n        once(event: 'continue', listener: () => void): this;\\\\n        once(event: 'information', listener: (info: InformationEvent) => void): this;\\\\n        once(event: 'response', listener: (response: IncomingMessage) => void): this;\\\\n        once(event: 'socket', listener: (socket: Socket) => void): this;\\\\n        once(event: 'timeout', listener: () => void): this;\\\\n        once(event: 'upgrade', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\\\n        once(event: 'close', listener: () => void): this;\\\\n        once(event: 'drain', listener: () => void): this;\\\\n        once(event: 'error', listener: (err: Error) => void): this;\\\\n        once(event: 'finish', listener: () => void): this;\\\\n        once(event: 'pipe', listener: (src: stream.Readable) => void): this;\\\\n        once(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependListener(event: 'abort', listener: () => void): this;\\\\n        prependListener(event: 'connect', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\\\n        prependListener(event: 'continue', listener: () => void): this;\\\\n        prependListener(event: 'information', listener: (info: InformationEvent) => void): this;\\\\n        prependListener(event: 'response', listener: (response: IncomingMessage) => void): this;\\\\n        prependListener(event: 'socket', listener: (socket: Socket) => void): this;\\\\n        prependListener(event: 'timeout', listener: () => void): this;\\\\n        prependListener(event: 'upgrade', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\\\n        prependListener(event: 'close', listener: () => void): this;\\\\n        prependListener(event: 'drain', listener: () => void): this;\\\\n        prependListener(event: 'error', listener: (err: Error) => void): this;\\\\n        prependListener(event: 'finish', listener: () => void): this;\\\\n        prependListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\\\n        prependListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependOnceListener(event: 'abort', listener: () => void): this;\\\\n        prependOnceListener(event: 'connect', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\\\n        prependOnceListener(event: 'continue', listener: () => void): this;\\\\n        prependOnceListener(event: 'information', listener: (info: InformationEvent) => void): this;\\\\n        prependOnceListener(event: 'response', listener: (response: IncomingMessage) => void): this;\\\\n        prependOnceListener(event: 'socket', listener: (socket: Socket) => void): this;\\\\n        prependOnceListener(event: 'timeout', listener: () => void): this;\\\\n        prependOnceListener(event: 'upgrade', listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\\\\n        prependOnceListener(event: 'close', listener: () => void): this;\\\\n        prependOnceListener(event: 'drain', listener: () => void): this;\\\\n        prependOnceListener(event: 'error', listener: (err: Error) => void): this;\\\\n        prependOnceListener(event: 'finish', listener: () => void): this;\\\\n        prependOnceListener(event: 'pipe', listener: (src: stream.Readable) => void): this;\\\\n        prependOnceListener(event: 'unpipe', listener: (src: stream.Readable) => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n    }\\\\n\\\\n    class IncomingMessage extends stream.Readable {\\\\n        constructor(socket: Socket);\\\\n\\\\n        httpVersion: string;\\\\n        httpVersionMajor: number;\\\\n        httpVersionMinor: number;\\\\n        complete: boolean;\\\\n        connection: Socket;\\\\n        headers: IncomingHttpHeaders;\\\\n        rawHeaders: string[];\\\\n        trailers: { [key: string]: string | undefined };\\\\n        rawTrailers: string[];\\\\n        setTimeout(msecs: number, callback: () => void): this;\\\\n        /**\\\\n         * Only valid for request obtained from http.Server.\\\\n         */\\\\n        method?: string;\\\\n        /**\\\\n         * Only valid for request obtained from http.Server.\\\\n         */\\\\n        url?: string;\\\\n        /**\\\\n         * Only valid for response obtained from http.ClientRequest.\\\\n         */\\\\n        statusCode?: number;\\\\n        /**\\\\n         * Only valid for response obtained from http.ClientRequest.\\\\n         */\\\\n        statusMessage?: string;\\\\n        socket: Socket;\\\\n        destroy(error?: Error): void;\\\\n    }\\\\n\\\\n    interface AgentOptions {\\\\n        /**\\\\n         * Keep sockets around in a pool to be used by other requests in the future. Default = false\\\\n         */\\\\n        keepAlive?: boolean;\\\\n        /**\\\\n         * When using HTTP KeepAlive, how often to send TCP KeepAlive packets over sockets being kept alive. Default = 1000.\\\\n         * Only relevant if keepAlive is set to true.\\\\n         */\\\\n        keepAliveMsecs?: number;\\\\n        /**\\\\n         * Maximum number of sockets to allow per host. Default for Node 0.10 is 5, default for Node 0.12 is Infinity\\\\n         */\\\\n        maxSockets?: number;\\\\n        /**\\\\n         * Maximum number of sockets to leave open in a free state. Only relevant if keepAlive is set to true. Default = 256.\\\\n         */\\\\n        maxFreeSockets?: number;\\\\n        /**\\\\n         * Socket timeout in milliseconds. This will set the timeout after the socket is connected.\\\\n         */\\\\n        timeout?: number;\\\\n    }\\\\n\\\\n    class Agent {\\\\n        maxFreeSockets: number;\\\\n        maxSockets: number;\\\\n        readonly sockets: {\\\\n            readonly [key: string]: Socket[];\\\\n        };\\\\n        readonly requests: {\\\\n            readonly [key: string]: IncomingMessage[];\\\\n        };\\\\n\\\\n        constructor(opts?: AgentOptions);\\\\n\\\\n        /**\\\\n         * Destroy any sockets that are currently in use by the agent.\\\\n         * It is usually not necessary to do this. However, if you are using an agent with KeepAlive enabled,\\\\n         * then it is best to explicitly shut down the agent when you know that it will no longer be used. Otherwise,\\\\n         * sockets may hang open for quite a long time before the server terminates them.\\\\n         */\\\\n        destroy(): void;\\\\n    }\\\\n\\\\n    const METHODS: string[];\\\\n\\\\n    const STATUS_CODES: {\\\\n        [errorCode: number]: string | undefined;\\\\n        [errorCode: string]: string | undefined;\\\\n    };\\\\n\\\\n    function createServer(requestListener?: RequestListener): Server;\\\\n    function createServer(options: ServerOptions, requestListener?: RequestListener): Server;\\\\n\\\\n    // although RequestOptions are passed as ClientRequestArgs to ClientRequest directly,\\\\n    // create interface RequestOptions would make the naming more clear to developers\\\\n    interface RequestOptions extends ClientRequestArgs { }\\\\n    function request(options: RequestOptions | string | URL, callback?: (res: IncomingMessage) => void): ClientRequest;\\\\n    function request(url: string | URL, options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest;\\\\n    function get(options: RequestOptions | string | URL, callback?: (res: IncomingMessage) => void): ClientRequest;\\\\n    function get(url: string | URL, options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest;\\\\n    let globalAgent: Agent;\\\\n\\\\n    /**\\\\n     * Read-only property specifying the maximum allowed size of HTTP headers in bytes.\\\\n     * Defaults to 8KB. Configurable using the [`--max-http-header-size`][] CLI option.\\\\n     */\\\\n    const maxHeaderSize: number;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/tls.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"tls\\\\\\\" {\\\\n    import * as crypto from \\\\\\\"crypto\\\\\\\";\\\\n    import * as dns from \\\\\\\"dns\\\\\\\";\\\\n    import * as net from \\\\\\\"net\\\\\\\";\\\\n    import * as stream from \\\\\\\"stream\\\\\\\";\\\\n\\\\n    const CLIENT_RENEG_LIMIT: number;\\\\n    const CLIENT_RENEG_WINDOW: number;\\\\n\\\\n    interface Certificate {\\\\n        /**\\\\n         * Country code.\\\\n         */\\\\n        C: string;\\\\n        /**\\\\n         * Street.\\\\n         */\\\\n        ST: string;\\\\n        /**\\\\n         * Locality.\\\\n         */\\\\n        L: string;\\\\n        /**\\\\n         * Organization.\\\\n         */\\\\n        O: string;\\\\n        /**\\\\n         * Organizational unit.\\\\n         */\\\\n        OU: string;\\\\n        /**\\\\n         * Common name.\\\\n         */\\\\n        CN: string;\\\\n    }\\\\n\\\\n    interface PeerCertificate {\\\\n        subject: Certificate;\\\\n        issuer: Certificate;\\\\n        subjectaltname: string;\\\\n        infoAccess: { [index: string]: string[] | undefined };\\\\n        modulus: string;\\\\n        exponent: string;\\\\n        valid_from: string;\\\\n        valid_to: string;\\\\n        fingerprint: string;\\\\n        ext_key_usage: string[];\\\\n        serialNumber: string;\\\\n        raw: Buffer;\\\\n    }\\\\n\\\\n    interface DetailedPeerCertificate extends PeerCertificate {\\\\n        issuerCertificate: DetailedPeerCertificate;\\\\n    }\\\\n\\\\n    interface CipherNameAndProtocol {\\\\n        /**\\\\n         * The cipher name.\\\\n         */\\\\n        name: string;\\\\n        /**\\\\n         * SSL/TLS protocol version.\\\\n         */\\\\n        version: string;\\\\n    }\\\\n\\\\n    export interface TLSSocketOptions extends SecureContextOptions, CommonConnectionOptions {\\\\n        /**\\\\n         * If true the TLS socket will be instantiated in server-mode.\\\\n         * Defaults to false.\\\\n         */\\\\n        isServer?: boolean;\\\\n        /**\\\\n         * An optional net.Server instance.\\\\n         */\\\\n        server?: net.Server;\\\\n\\\\n        /**\\\\n         * An optional Buffer instance containing a TLS session.\\\\n         */\\\\n        session?: Buffer;\\\\n        /**\\\\n         * If true, specifies that the OCSP status request extension will be\\\\n         * added to the client hello and an 'OCSPResponse' event will be\\\\n         * emitted on the socket before establishing a secure communication\\\\n         */\\\\n        requestOCSP?: boolean;\\\\n    }\\\\n\\\\n    class TLSSocket extends net.Socket {\\\\n        /**\\\\n         * Construct a new tls.TLSSocket object from an existing TCP socket.\\\\n         */\\\\n        constructor(socket: net.Socket, options?: TLSSocketOptions);\\\\n\\\\n        /**\\\\n         * A boolean that is true if the peer certificate was signed by one of the specified CAs, otherwise false.\\\\n         */\\\\n        authorized: boolean;\\\\n        /**\\\\n         * The reason why the peer's certificate has not been verified.\\\\n         * This property becomes available only when tlsSocket.authorized === false.\\\\n         */\\\\n        authorizationError: Error;\\\\n        /**\\\\n         * Static boolean value, always true.\\\\n         * May be used to distinguish TLS sockets from regular ones.\\\\n         */\\\\n        encrypted: boolean;\\\\n\\\\n        /**\\\\n         * String containing the selected ALPN protocol.\\\\n         * When ALPN has no selected protocol, tlsSocket.alpnProtocol equals false.\\\\n         */\\\\n        alpnProtocol?: string;\\\\n\\\\n        /**\\\\n         * Returns an object representing the cipher name and the SSL/TLS protocol version of the current connection.\\\\n         * @returns Returns an object representing the cipher name\\\\n         * and the SSL/TLS protocol version of the current connection.\\\\n         */\\\\n        getCipher(): CipherNameAndProtocol;\\\\n        /**\\\\n         * Returns an object representing the peer's certificate.\\\\n         * The returned object has some properties corresponding to the field of the certificate.\\\\n         * If detailed argument is true the full chain with issuer property will be returned,\\\\n         * if false only the top certificate without issuer property.\\\\n         * If the peer does not provide a certificate, it returns null or an empty object.\\\\n         * @param detailed - If true; the full chain with issuer property will be returned.\\\\n         * @returns An object representing the peer's certificate.\\\\n         */\\\\n        getPeerCertificate(detailed: true): DetailedPeerCertificate;\\\\n        getPeerCertificate(detailed?: false): PeerCertificate;\\\\n        getPeerCertificate(detailed?: boolean): PeerCertificate | DetailedPeerCertificate;\\\\n        /**\\\\n         * Returns a string containing the negotiated SSL/TLS protocol version of the current connection.\\\\n         * The value `'unknown'` will be returned for connected sockets that have not completed the handshaking process.\\\\n         * The value `null` will be returned for server sockets or disconnected client sockets.\\\\n         * See https://www.openssl.org/docs/man1.0.2/ssl/SSL_get_version.html for more information.\\\\n         * @returns negotiated SSL/TLS protocol version of the current connection\\\\n         */\\\\n        getProtocol(): string | null;\\\\n        /**\\\\n         * Could be used to speed up handshake establishment when reconnecting to the server.\\\\n         * @returns ASN.1 encoded TLS session or undefined if none was negotiated.\\\\n         */\\\\n        getSession(): Buffer | undefined;\\\\n        /**\\\\n         * NOTE: Works only with client TLS sockets.\\\\n         * Useful only for debugging, for session reuse provide session option to tls.connect().\\\\n         * @returns TLS session ticket or undefined if none was negotiated.\\\\n         */\\\\n        getTLSTicket(): Buffer | undefined;\\\\n        /**\\\\n         * Initiate TLS renegotiation process.\\\\n         *\\\\n         * NOTE: Can be used to request peer's certificate after the secure connection has been established.\\\\n         * ANOTHER NOTE: When running as the server, socket will be destroyed with an error after handshakeTimeout timeout.\\\\n         * @param options - The options may contain the following fields: rejectUnauthorized,\\\\n         * requestCert (See tls.createServer() for details).\\\\n         * @param callback - callback(err) will be executed with null as err, once the renegotiation\\\\n         * is successfully completed.\\\\n         * @return `undefined` when socket is destroy, `false` if negotiaion can't be initiated.\\\\n         */\\\\n        renegotiate(options: { rejectUnauthorized?: boolean, requestCert?: boolean }, callback: (err: Error | null) => void): undefined | boolean;\\\\n        /**\\\\n         * Set maximum TLS fragment size (default and maximum value is: 16384, minimum is: 512).\\\\n         * Smaller fragment size decreases buffering latency on the client: large fragments are buffered by\\\\n         * the TLS layer until the entire fragment is received and its integrity is verified;\\\\n         * large fragments can span multiple roundtrips, and their processing can be delayed due to packet\\\\n         * loss or reordering. However, smaller fragments add extra TLS framing bytes and CPU overhead,\\\\n         * which may decrease overall server throughput.\\\\n         * @param size - TLS fragment size (default and maximum value is: 16384, minimum is: 512).\\\\n         * @returns Returns true on success, false otherwise.\\\\n         */\\\\n        setMaxSendFragment(size: number): boolean;\\\\n\\\\n        /**\\\\n         * When enabled, TLS packet trace information is written to `stderr`. This can be\\\\n         * used to debug TLS connection problems.\\\\n         *\\\\n         * Note: The format of the output is identical to the output of `openssl s_client\\\\n         * -trace` or `openssl s_server -trace`. While it is produced by OpenSSL's\\\\n         * `SSL_trace()` function, the format is undocumented, can change without notice,\\\\n         * and should not be relied on.\\\\n         */\\\\n        enableTrace(): void;\\\\n\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"OCSPResponse\\\\\\\", listener: (response: Buffer) => void): this;\\\\n        addListener(event: \\\\\\\"secureConnect\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"session\\\\\\\", listener: (session: Buffer) => void): this;\\\\n        addListener(event: \\\\\\\"keylog\\\\\\\", listener: (line: Buffer) => void): this;\\\\n\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        emit(event: \\\\\\\"OCSPResponse\\\\\\\", response: Buffer): boolean;\\\\n        emit(event: \\\\\\\"secureConnect\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"session\\\\\\\", session: Buffer): boolean;\\\\n        emit(event: \\\\\\\"keylog\\\\\\\", line: Buffer): boolean;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"OCSPResponse\\\\\\\", listener: (response: Buffer) => void): this;\\\\n        on(event: \\\\\\\"secureConnect\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"session\\\\\\\", listener: (session: Buffer) => void): this;\\\\n        on(event: \\\\\\\"keylog\\\\\\\", listener: (line: Buffer) => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"OCSPResponse\\\\\\\", listener: (response: Buffer) => void): this;\\\\n        once(event: \\\\\\\"secureConnect\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"session\\\\\\\", listener: (session: Buffer) => void): this;\\\\n        once(event: \\\\\\\"keylog\\\\\\\", listener: (line: Buffer) => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"OCSPResponse\\\\\\\", listener: (response: Buffer) => void): this;\\\\n        prependListener(event: \\\\\\\"secureConnect\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"session\\\\\\\", listener: (session: Buffer) => void): this;\\\\n        prependListener(event: \\\\\\\"keylog\\\\\\\", listener: (line: Buffer) => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"OCSPResponse\\\\\\\", listener: (response: Buffer) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"secureConnect\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"session\\\\\\\", listener: (session: Buffer) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"keylog\\\\\\\", listener: (line: Buffer) => void): this;\\\\n    }\\\\n\\\\n    interface CommonConnectionOptions {\\\\n        /**\\\\n         * An optional TLS context object from tls.createSecureContext()\\\\n         */\\\\n        secureContext?: SecureContext;\\\\n\\\\n        /**\\\\n         * When enabled, TLS packet trace information is written to `stderr`. This can be\\\\n         * used to debug TLS connection problems.\\\\n         * @default false\\\\n         */\\\\n        enableTrace?: boolean;\\\\n        /**\\\\n         * If true the server will request a certificate from clients that\\\\n         * connect and attempt to verify that certificate. Defaults to\\\\n         * false.\\\\n         */\\\\n        requestCert?: boolean;\\\\n        /**\\\\n         * An array of strings or a Buffer naming possible ALPN protocols.\\\\n         * (Protocols should be ordered by their priority.)\\\\n         */\\\\n        ALPNProtocols?: string[] | Uint8Array[] | Uint8Array;\\\\n        /**\\\\n         * SNICallback(servername, cb) <Function> A function that will be\\\\n         * called if the client supports SNI TLS extension. Two arguments\\\\n         * will be passed when called: servername and cb. SNICallback should\\\\n         * invoke cb(null, ctx), where ctx is a SecureContext instance.\\\\n         * (tls.createSecureContext(...) can be used to get a proper\\\\n         * SecureContext.) If SNICallback wasn't provided the default callback\\\\n         * with high-level API will be used (see below).\\\\n         */\\\\n        SNICallback?: (servername: string, cb: (err: Error | null, ctx: SecureContext) => void) => void;\\\\n        /**\\\\n         * If true the server will reject any connection which is not\\\\n         * authorized with the list of supplied CAs. This option only has an\\\\n         * effect if requestCert is true.\\\\n         * @default true\\\\n         */\\\\n        rejectUnauthorized?: boolean;\\\\n    }\\\\n\\\\n    interface TlsOptions extends SecureContextOptions, CommonConnectionOptions {\\\\n        handshakeTimeout?: number;\\\\n        sessionTimeout?: number;\\\\n        ticketKeys?: Buffer;\\\\n    }\\\\n\\\\n    interface ConnectionOptions extends SecureContextOptions, CommonConnectionOptions {\\\\n        host?: string;\\\\n        port?: number;\\\\n        path?: string; // Creates unix socket connection to path. If this option is specified, `host` and `port` are ignored.\\\\n        socket?: net.Socket; // Establish secure connection on a given socket rather than creating a new socket\\\\n        checkServerIdentity?: typeof checkServerIdentity;\\\\n        servername?: string; // SNI TLS Extension\\\\n        session?: Buffer;\\\\n        minDHSize?: number;\\\\n        lookup?: net.LookupFunction;\\\\n        timeout?: number;\\\\n    }\\\\n\\\\n    class Server extends net.Server {\\\\n        addContext(hostName: string, credentials: SecureContextOptions): void;\\\\n\\\\n        /**\\\\n         * events.EventEmitter\\\\n         * 1. tlsClientError\\\\n         * 2. newSession\\\\n         * 3. OCSPRequest\\\\n         * 4. resumeSession\\\\n         * 5. secureConnection\\\\n         */\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"tlsClientError\\\\\\\", listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\\\n        addListener(event: \\\\\\\"newSession\\\\\\\", listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void): this;\\\\n        addListener(event: \\\\\\\"OCSPRequest\\\\\\\", listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\\\n        addListener(event: \\\\\\\"resumeSession\\\\\\\", listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void): this;\\\\n        addListener(event: \\\\\\\"secureConnection\\\\\\\", listener: (tlsSocket: TLSSocket) => void): this;\\\\n        addListener(event: \\\\\\\"keylog\\\\\\\", listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\\\n\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        emit(event: \\\\\\\"tlsClientError\\\\\\\", err: Error, tlsSocket: TLSSocket): boolean;\\\\n        emit(event: \\\\\\\"newSession\\\\\\\", sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void): boolean;\\\\n        emit(event: \\\\\\\"OCSPRequest\\\\\\\", certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void): boolean;\\\\n        emit(event: \\\\\\\"resumeSession\\\\\\\", sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void): boolean;\\\\n        emit(event: \\\\\\\"secureConnection\\\\\\\", tlsSocket: TLSSocket): boolean;\\\\n        emit(event: \\\\\\\"keylog\\\\\\\", line: Buffer, tlsSocket: TLSSocket): boolean;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"tlsClientError\\\\\\\", listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\\\n        on(event: \\\\\\\"newSession\\\\\\\", listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void): this;\\\\n        on(event: \\\\\\\"OCSPRequest\\\\\\\", listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\\\n        on(event: \\\\\\\"resumeSession\\\\\\\", listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void): this;\\\\n        on(event: \\\\\\\"secureConnection\\\\\\\", listener: (tlsSocket: TLSSocket) => void): this;\\\\n        on(event: \\\\\\\"keylog\\\\\\\", listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"tlsClientError\\\\\\\", listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\\\n        once(event: \\\\\\\"newSession\\\\\\\", listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void): this;\\\\n        once(event: \\\\\\\"OCSPRequest\\\\\\\", listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\\\n        once(event: \\\\\\\"resumeSession\\\\\\\", listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void): this;\\\\n        once(event: \\\\\\\"secureConnection\\\\\\\", listener: (tlsSocket: TLSSocket) => void): this;\\\\n        once(event: \\\\\\\"keylog\\\\\\\", listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"tlsClientError\\\\\\\", listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\\\n        prependListener(event: \\\\\\\"newSession\\\\\\\", listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void): this;\\\\n        prependListener(event: \\\\\\\"OCSPRequest\\\\\\\", listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\\\n        prependListener(event: \\\\\\\"resumeSession\\\\\\\", listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void): this;\\\\n        prependListener(event: \\\\\\\"secureConnection\\\\\\\", listener: (tlsSocket: TLSSocket) => void): this;\\\\n        prependListener(event: \\\\\\\"keylog\\\\\\\", listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"tlsClientError\\\\\\\", listener: (err: Error, tlsSocket: TLSSocket) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"newSession\\\\\\\", listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"OCSPRequest\\\\\\\", listener: (certificate: Buffer, issuer: Buffer, callback: (err: Error | null, resp: Buffer) => void) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"resumeSession\\\\\\\", listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"secureConnection\\\\\\\", listener: (tlsSocket: TLSSocket) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"keylog\\\\\\\", listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\\\\n    }\\\\n\\\\n    interface SecurePair {\\\\n        encrypted: TLSSocket;\\\\n        cleartext: TLSSocket;\\\\n    }\\\\n\\\\n    type SecureVersion = 'TLSv1.3' | 'TLSv1.2' | 'TLSv1.1' | 'TLSv1';\\\\n\\\\n    interface SecureContextOptions {\\\\n        pfx?: string | Buffer | Array<string | Buffer | Object>;\\\\n        key?: string | Buffer | Array<Buffer | Object>;\\\\n        passphrase?: string;\\\\n        cert?: string | Buffer | Array<string | Buffer>;\\\\n        ca?: string | Buffer | Array<string | Buffer>;\\\\n        ciphers?: string;\\\\n        honorCipherOrder?: boolean;\\\\n        ecdhCurve?: string;\\\\n        clientCertEngine?: string;\\\\n        crl?: string | Buffer | Array<string | Buffer>;\\\\n        dhparam?: string | Buffer;\\\\n        secureOptions?: number; // Value is a numeric bitmask of the `SSL_OP_*` options\\\\n        secureProtocol?: string; // SSL Method, e.g. SSLv23_method\\\\n        sessionIdContext?: string;\\\\n        /**\\\\n         * Optionally set the maximum TLS version to allow. One\\\\n         * of `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\\\\n         * `secureProtocol` option, use one or the other.\\\\n         * **Default:** `'TLSv1.3'`, unless changed using CLI options. Using\\\\n         * `--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using `--tls-max-v1.3` sets the default to\\\\n         * `'TLSv1.3'`. If multiple of the options are provided, the highest maximum is used.\\\\n         */\\\\n        maxVersion?: SecureVersion;\\\\n        /**\\\\n         * Optionally set the minimum TLS version to allow. One\\\\n         * of `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\\\\n         * `secureProtocol` option, use one or the other.  It is not recommended to use\\\\n         * less than TLSv1.2, but it may be required for interoperability.\\\\n         * **Default:** `'TLSv1.2'`, unless changed using CLI options. Using\\\\n         * `--tls-v1.0` sets the default to `'TLSv1'`. Using `--tls-v1.1` sets the default to\\\\n         * `'TLSv1.1'`. Using `--tls-min-v1.3` sets the default to\\\\n         * 'TLSv1.3'. If multiple of the options are provided, the lowest minimum is used.\\\\n         */\\\\n        minVersion?: SecureVersion;\\\\n    }\\\\n\\\\n    interface SecureContext {\\\\n        context: any;\\\\n    }\\\\n\\\\n    /*\\\\n     * Verifies the certificate `cert` is issued to host `host`.\\\\n     * @host The hostname to verify the certificate against\\\\n     * @cert PeerCertificate representing the peer's certificate\\\\n     *\\\\n     * Returns Error object, populating it with the reason, host and cert on failure.  On success, returns undefined.\\\\n     */\\\\n    function checkServerIdentity(host: string, cert: PeerCertificate): Error | undefined;\\\\n    function createServer(secureConnectionListener?: (socket: TLSSocket) => void): Server;\\\\n    function createServer(options: TlsOptions, secureConnectionListener?: (socket: TLSSocket) => void): Server;\\\\n    function connect(options: ConnectionOptions, secureConnectListener?: () => void): TLSSocket;\\\\n    function connect(port: number, host?: string, options?: ConnectionOptions, secureConnectListener?: () => void): TLSSocket;\\\\n    function connect(port: number, options?: ConnectionOptions, secureConnectListener?: () => void): TLSSocket;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    function createSecurePair(credentials?: SecureContext, isServer?: boolean, requestCert?: boolean, rejectUnauthorized?: boolean): SecurePair;\\\\n    function createSecureContext(details: SecureContextOptions): SecureContext;\\\\n    function getCiphers(): string[];\\\\n\\\\n    const DEFAULT_ECDH_CURVE: string;\\\\n\\\\n    const rootCertificates: ReadonlyArray<string>;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/http2.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"http2\\\\\\\" {\\\\n    import * as events from \\\\\\\"events\\\\\\\";\\\\n    import * as fs from \\\\\\\"fs\\\\\\\";\\\\n    import * as net from \\\\\\\"net\\\\\\\";\\\\n    import * as stream from \\\\\\\"stream\\\\\\\";\\\\n    import * as tls from \\\\\\\"tls\\\\\\\";\\\\n    import * as url from \\\\\\\"url\\\\\\\";\\\\n\\\\n    import { IncomingHttpHeaders as Http1IncomingHttpHeaders, OutgoingHttpHeaders, IncomingMessage, ServerResponse } from \\\\\\\"http\\\\\\\";\\\\n    export { OutgoingHttpHeaders } from \\\\\\\"http\\\\\\\";\\\\n\\\\n    export interface IncomingHttpStatusHeader {\\\\n        \\\\\\\":status\\\\\\\"?: number;\\\\n    }\\\\n\\\\n    export interface IncomingHttpHeaders extends Http1IncomingHttpHeaders {\\\\n        \\\\\\\":path\\\\\\\"?: string;\\\\n        \\\\\\\":method\\\\\\\"?: string;\\\\n        \\\\\\\":authority\\\\\\\"?: string;\\\\n        \\\\\\\":scheme\\\\\\\"?: string;\\\\n    }\\\\n\\\\n    // Http2Stream\\\\n\\\\n    export interface StreamPriorityOptions {\\\\n        exclusive?: boolean;\\\\n        parent?: number;\\\\n        weight?: number;\\\\n        silent?: boolean;\\\\n    }\\\\n\\\\n    export interface StreamState {\\\\n        localWindowSize?: number;\\\\n        state?: number;\\\\n        localClose?: number;\\\\n        remoteClose?: number;\\\\n        sumDependencyWeight?: number;\\\\n        weight?: number;\\\\n    }\\\\n\\\\n    export interface ServerStreamResponseOptions {\\\\n        endStream?: boolean;\\\\n        waitForTrailers?: boolean;\\\\n    }\\\\n\\\\n    export interface StatOptions {\\\\n        offset: number;\\\\n        length: number;\\\\n    }\\\\n\\\\n    export interface ServerStreamFileResponseOptions {\\\\n        statCheck?: (stats: fs.Stats, headers: OutgoingHttpHeaders, statOptions: StatOptions) => void | boolean;\\\\n        waitForTrailers?: boolean;\\\\n        offset?: number;\\\\n        length?: number;\\\\n    }\\\\n\\\\n    export interface ServerStreamFileResponseOptionsWithError extends ServerStreamFileResponseOptions {\\\\n        onError?: (err: NodeJS.ErrnoException) => void;\\\\n    }\\\\n\\\\n    export class Http2Stream extends stream.Duplex {\\\\n        protected constructor();\\\\n\\\\n        readonly aborted: boolean;\\\\n        readonly bufferSize: number;\\\\n        readonly closed: boolean;\\\\n        readonly destroyed: boolean;\\\\n        /**\\\\n         * Set the true if the END_STREAM flag was set in the request or response HEADERS frame received,\\\\n         * indicating that no additional data should be received and the readable side of the Http2Stream will be closed.\\\\n         */\\\\n        readonly endAfterHeaders: boolean;\\\\n        readonly id?: number;\\\\n        readonly pending: boolean;\\\\n        readonly rstCode: number;\\\\n        readonly sentHeaders: OutgoingHttpHeaders;\\\\n        readonly sentInfoHeaders?: OutgoingHttpHeaders[];\\\\n        readonly sentTrailers?: OutgoingHttpHeaders;\\\\n        readonly session: Http2Session;\\\\n        readonly state: StreamState;\\\\n\\\\n        close(code?: number, callback?: () => void): void;\\\\n        priority(options: StreamPriorityOptions): void;\\\\n        setTimeout(msecs: number, callback?: () => void): void;\\\\n        sendTrailers(headers: OutgoingHttpHeaders): void;\\\\n\\\\n        addListener(event: \\\\\\\"aborted\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"data\\\\\\\", listener: (chunk: Buffer | string) => void): this;\\\\n        addListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        addListener(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"frameError\\\\\\\", listener: (frameType: number, errorCode: number) => void): this;\\\\n        addListener(event: \\\\\\\"pipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        addListener(event: \\\\\\\"unpipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        addListener(event: \\\\\\\"streamClosed\\\\\\\", listener: (code: number) => void): this;\\\\n        addListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"trailers\\\\\\\", listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        addListener(event: \\\\\\\"wantTrailers\\\\\\\", listener: () => void): this;\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        emit(event: \\\\\\\"aborted\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"close\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"data\\\\\\\", chunk: Buffer | string): boolean;\\\\n        emit(event: \\\\\\\"drain\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"end\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"error\\\\\\\", err: Error): boolean;\\\\n        emit(event: \\\\\\\"finish\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"frameError\\\\\\\", frameType: number, errorCode: number): boolean;\\\\n        emit(event: \\\\\\\"pipe\\\\\\\", src: stream.Readable): boolean;\\\\n        emit(event: \\\\\\\"unpipe\\\\\\\", src: stream.Readable): boolean;\\\\n        emit(event: \\\\\\\"streamClosed\\\\\\\", code: number): boolean;\\\\n        emit(event: \\\\\\\"timeout\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"trailers\\\\\\\", trailers: IncomingHttpHeaders, flags: number): boolean;\\\\n        emit(event: \\\\\\\"wantTrailers\\\\\\\"): boolean;\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n        on(event: \\\\\\\"aborted\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"data\\\\\\\", listener: (chunk: Buffer | string) => void): this;\\\\n        on(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        on(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"frameError\\\\\\\", listener: (frameType: number, errorCode: number) => void): this;\\\\n        on(event: \\\\\\\"pipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        on(event: \\\\\\\"unpipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        on(event: \\\\\\\"streamClosed\\\\\\\", listener: (code: number) => void): this;\\\\n        on(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"trailers\\\\\\\", listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        on(event: \\\\\\\"wantTrailers\\\\\\\", listener: () => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        once(event: \\\\\\\"aborted\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"data\\\\\\\", listener: (chunk: Buffer | string) => void): this;\\\\n        once(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        once(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"frameError\\\\\\\", listener: (frameType: number, errorCode: number) => void): this;\\\\n        once(event: \\\\\\\"pipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        once(event: \\\\\\\"unpipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        once(event: \\\\\\\"streamClosed\\\\\\\", listener: (code: number) => void): this;\\\\n        once(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"trailers\\\\\\\", listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        once(event: \\\\\\\"wantTrailers\\\\\\\", listener: () => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependListener(event: \\\\\\\"aborted\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"data\\\\\\\", listener: (chunk: Buffer | string) => void): this;\\\\n        prependListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependListener(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"frameError\\\\\\\", listener: (frameType: number, errorCode: number) => void): this;\\\\n        prependListener(event: \\\\\\\"pipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        prependListener(event: \\\\\\\"unpipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        prependListener(event: \\\\\\\"streamClosed\\\\\\\", listener: (code: number) => void): this;\\\\n        prependListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"trailers\\\\\\\", listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        prependListener(event: \\\\\\\"wantTrailers\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"aborted\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"data\\\\\\\", listener: (chunk: Buffer | string) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"frameError\\\\\\\", listener: (frameType: number, errorCode: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"pipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"unpipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"streamClosed\\\\\\\", listener: (code: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"trailers\\\\\\\", listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"wantTrailers\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n    }\\\\n\\\\n    export class ClientHttp2Stream extends Http2Stream {\\\\n        private constructor();\\\\n\\\\n        addListener(event: \\\\\\\"continue\\\\\\\", listener: () => {}): this;\\\\n        addListener(event: \\\\\\\"headers\\\\\\\", listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        addListener(event: \\\\\\\"push\\\\\\\", listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        addListener(event: \\\\\\\"response\\\\\\\", listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        emit(event: \\\\\\\"continue\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"headers\\\\\\\", headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number): boolean;\\\\n        emit(event: \\\\\\\"push\\\\\\\", headers: IncomingHttpHeaders, flags: number): boolean;\\\\n        emit(event: \\\\\\\"response\\\\\\\", headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number): boolean;\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n        on(event: \\\\\\\"continue\\\\\\\", listener: () => {}): this;\\\\n        on(event: \\\\\\\"headers\\\\\\\", listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        on(event: \\\\\\\"push\\\\\\\", listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        on(event: \\\\\\\"response\\\\\\\", listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        once(event: \\\\\\\"continue\\\\\\\", listener: () => {}): this;\\\\n        once(event: \\\\\\\"headers\\\\\\\", listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        once(event: \\\\\\\"push\\\\\\\", listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        once(event: \\\\\\\"response\\\\\\\", listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependListener(event: \\\\\\\"continue\\\\\\\", listener: () => {}): this;\\\\n        prependListener(event: \\\\\\\"headers\\\\\\\", listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        prependListener(event: \\\\\\\"push\\\\\\\", listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        prependListener(event: \\\\\\\"response\\\\\\\", listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"continue\\\\\\\", listener: () => {}): this;\\\\n        prependOnceListener(event: \\\\\\\"headers\\\\\\\", listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"push\\\\\\\", listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"response\\\\\\\", listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n    }\\\\n\\\\n    export class ServerHttp2Stream extends Http2Stream {\\\\n        private constructor();\\\\n\\\\n        additionalHeaders(headers: OutgoingHttpHeaders): void;\\\\n        readonly headersSent: boolean;\\\\n        readonly pushAllowed: boolean;\\\\n        pushStream(headers: OutgoingHttpHeaders, callback?: (err: Error | null, pushStream: ServerHttp2Stream, headers: OutgoingHttpHeaders) => void): void;\\\\n        pushStream(headers: OutgoingHttpHeaders, options?: StreamPriorityOptions, callback?: (err: Error | null, pushStream: ServerHttp2Stream, headers: OutgoingHttpHeaders) => void): void;\\\\n        respond(headers?: OutgoingHttpHeaders, options?: ServerStreamResponseOptions): void;\\\\n        respondWithFD(fd: number, headers?: OutgoingHttpHeaders, options?: ServerStreamFileResponseOptions): void;\\\\n        respondWithFile(path: string, headers?: OutgoingHttpHeaders, options?: ServerStreamFileResponseOptionsWithError): void;\\\\n    }\\\\n\\\\n    // Http2Session\\\\n\\\\n    export interface Settings {\\\\n        headerTableSize?: number;\\\\n        enablePush?: boolean;\\\\n        initialWindowSize?: number;\\\\n        maxFrameSize?: number;\\\\n        maxConcurrentStreams?: number;\\\\n        maxHeaderListSize?: number;\\\\n        enableConnectProtocol?: boolean;\\\\n    }\\\\n\\\\n    export interface ClientSessionRequestOptions {\\\\n        endStream?: boolean;\\\\n        exclusive?: boolean;\\\\n        parent?: number;\\\\n        weight?: number;\\\\n        waitForTrailers?: boolean;\\\\n    }\\\\n\\\\n    export interface SessionState {\\\\n        effectiveLocalWindowSize?: number;\\\\n        effectiveRecvDataLength?: number;\\\\n        nextStreamID?: number;\\\\n        localWindowSize?: number;\\\\n        lastProcStreamID?: number;\\\\n        remoteWindowSize?: number;\\\\n        outboundQueueSize?: number;\\\\n        deflateDynamicTableSize?: number;\\\\n        inflateDynamicTableSize?: number;\\\\n    }\\\\n\\\\n    export class Http2Session extends events.EventEmitter {\\\\n        protected constructor();\\\\n\\\\n        readonly alpnProtocol?: string;\\\\n        close(callback?: () => void): void;\\\\n        readonly closed: boolean;\\\\n        readonly connecting: boolean;\\\\n        destroy(error?: Error, code?: number): void;\\\\n        readonly destroyed: boolean;\\\\n        readonly encrypted?: boolean;\\\\n        goaway(code?: number, lastStreamID?: number, opaqueData?: Buffer | DataView | NodeJS.TypedArray): void;\\\\n        readonly localSettings: Settings;\\\\n        readonly originSet?: string[];\\\\n        readonly pendingSettingsAck: boolean;\\\\n        ping(callback: (err: Error | null, duration: number, payload: Buffer) => void): boolean;\\\\n        ping(payload: Buffer | DataView | NodeJS.TypedArray , callback: (err: Error | null, duration: number, payload: Buffer) => void): boolean;\\\\n        ref(): void;\\\\n        readonly remoteSettings: Settings;\\\\n        setTimeout(msecs: number, callback?: () => void): void;\\\\n        readonly socket: net.Socket | tls.TLSSocket;\\\\n        readonly state: SessionState;\\\\n        settings(settings: Settings): void;\\\\n        readonly type: number;\\\\n        unref(): void;\\\\n\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        addListener(event: \\\\\\\"frameError\\\\\\\", listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\\\n        addListener(event: \\\\\\\"goaway\\\\\\\", listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\\\n        addListener(event: \\\\\\\"localSettings\\\\\\\", listener: (settings: Settings) => void): this;\\\\n        addListener(event: \\\\\\\"ping\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"remoteSettings\\\\\\\", listener: (settings: Settings) => void): this;\\\\n        addListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        emit(event: \\\\\\\"close\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"error\\\\\\\", err: Error): boolean;\\\\n        emit(event: \\\\\\\"frameError\\\\\\\", frameType: number, errorCode: number, streamID: number): boolean;\\\\n        emit(event: \\\\\\\"goaway\\\\\\\", errorCode: number, lastStreamID: number, opaqueData: Buffer): boolean;\\\\n        emit(event: \\\\\\\"localSettings\\\\\\\", settings: Settings): boolean;\\\\n        emit(event: \\\\\\\"ping\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"remoteSettings\\\\\\\", settings: Settings): boolean;\\\\n        emit(event: \\\\\\\"timeout\\\\\\\"): boolean;\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        on(event: \\\\\\\"frameError\\\\\\\", listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\\\n        on(event: \\\\\\\"goaway\\\\\\\", listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\\\n        on(event: \\\\\\\"localSettings\\\\\\\", listener: (settings: Settings) => void): this;\\\\n        on(event: \\\\\\\"ping\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"remoteSettings\\\\\\\", listener: (settings: Settings) => void): this;\\\\n        on(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        once(event: \\\\\\\"frameError\\\\\\\", listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\\\n        once(event: \\\\\\\"goaway\\\\\\\", listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\\\n        once(event: \\\\\\\"localSettings\\\\\\\", listener: (settings: Settings) => void): this;\\\\n        once(event: \\\\\\\"ping\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"remoteSettings\\\\\\\", listener: (settings: Settings) => void): this;\\\\n        once(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependListener(event: \\\\\\\"frameError\\\\\\\", listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\\\n        prependListener(event: \\\\\\\"goaway\\\\\\\", listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\\\n        prependListener(event: \\\\\\\"localSettings\\\\\\\", listener: (settings: Settings) => void): this;\\\\n        prependListener(event: \\\\\\\"ping\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"remoteSettings\\\\\\\", listener: (settings: Settings) => void): this;\\\\n        prependListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"frameError\\\\\\\", listener: (frameType: number, errorCode: number, streamID: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"goaway\\\\\\\", listener: (errorCode: number, lastStreamID: number, opaqueData: Buffer) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"localSettings\\\\\\\", listener: (settings: Settings) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"ping\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"remoteSettings\\\\\\\", listener: (settings: Settings) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n    }\\\\n\\\\n    export class ClientHttp2Session extends Http2Session {\\\\n        private constructor();\\\\n\\\\n        request(headers?: OutgoingHttpHeaders, options?: ClientSessionRequestOptions): ClientHttp2Stream;\\\\n\\\\n        addListener(event: \\\\\\\"altsvc\\\\\\\", listener: (alt: string, origin: string, stream: number) => void): this;\\\\n        addListener(event: \\\\\\\"origin\\\\\\\", listener: (origins: string[]) => void): this;\\\\n        addListener(event: \\\\\\\"connect\\\\\\\", listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\\\n        addListener(event: \\\\\\\"stream\\\\\\\", listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        emit(event: \\\\\\\"altsvc\\\\\\\", alt: string, origin: string, stream: number): boolean;\\\\n        emit(event: \\\\\\\"origin\\\\\\\", origins: string[]): boolean;\\\\n        emit(event: \\\\\\\"connect\\\\\\\", session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket): boolean;\\\\n        emit(event: \\\\\\\"stream\\\\\\\", stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number): boolean;\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n        on(event: \\\\\\\"altsvc\\\\\\\", listener: (alt: string, origin: string, stream: number) => void): this;\\\\n        on(event: \\\\\\\"origin\\\\\\\", listener: (origins: string[]) => void): this;\\\\n        on(event: \\\\\\\"connect\\\\\\\", listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\\\n        on(event: \\\\\\\"stream\\\\\\\", listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        once(event: \\\\\\\"altsvc\\\\\\\", listener: (alt: string, origin: string, stream: number) => void): this;\\\\n        once(event: \\\\\\\"origin\\\\\\\", listener: (origins: string[]) => void): this;\\\\n        once(event: \\\\\\\"connect\\\\\\\", listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\\\n        once(event: \\\\\\\"stream\\\\\\\", listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependListener(event: \\\\\\\"altsvc\\\\\\\", listener: (alt: string, origin: string, stream: number) => void): this;\\\\n        prependListener(event: \\\\\\\"origin\\\\\\\", listener: (origins: string[]) => void): this;\\\\n        prependListener(event: \\\\\\\"connect\\\\\\\", listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\\\n        prependListener(event: \\\\\\\"stream\\\\\\\", listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"altsvc\\\\\\\", listener: (alt: string, origin: string, stream: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"origin\\\\\\\", listener: (origins: string[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"connect\\\\\\\", listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"stream\\\\\\\", listener: (stream: ClientHttp2Stream, headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n    }\\\\n\\\\n    export interface AlternativeServiceOptions {\\\\n        origin: number | string | url.URL;\\\\n    }\\\\n\\\\n    export class ServerHttp2Session extends Http2Session {\\\\n        private constructor();\\\\n\\\\n        altsvc(alt: string, originOrStream: number | string | url.URL | AlternativeServiceOptions): void;\\\\n        origin(...args: Array<string | url.URL | { origin: string }>): void;\\\\n        readonly server: Http2Server | Http2SecureServer;\\\\n\\\\n        addListener(event: \\\\\\\"connect\\\\\\\", listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\\\n        addListener(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        emit(event: \\\\\\\"connect\\\\\\\", session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket): boolean;\\\\n        emit(event: \\\\\\\"stream\\\\\\\", stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number): boolean;\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n        on(event: \\\\\\\"connect\\\\\\\", listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\\\n        on(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        once(event: \\\\\\\"connect\\\\\\\", listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\\\n        once(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependListener(event: \\\\\\\"connect\\\\\\\", listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\\\n        prependListener(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"connect\\\\\\\", listener: (session: ServerHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n    }\\\\n\\\\n    // Http2Server\\\\n\\\\n    export interface SessionOptions {\\\\n        maxDeflateDynamicTableSize?: number;\\\\n        maxSessionMemory?: number;\\\\n        maxHeaderListPairs?: number;\\\\n        maxOutstandingPings?: number;\\\\n        maxSendHeaderBlockLength?: number;\\\\n        paddingStrategy?: number;\\\\n        peerMaxConcurrentStreams?: number;\\\\n        selectPadding?: (frameLen: number, maxFrameLen: number) => number;\\\\n        settings?: Settings;\\\\n        createConnection?: (authority: url.URL, option: SessionOptions) => stream.Duplex;\\\\n    }\\\\n\\\\n    export interface ClientSessionOptions extends SessionOptions {\\\\n        maxReservedRemoteStreams?: number;\\\\n        createConnection?: (authority: url.URL, option: SessionOptions) => stream.Duplex;\\\\n    }\\\\n\\\\n    export interface ServerSessionOptions extends SessionOptions {\\\\n        Http1IncomingMessage?: typeof IncomingMessage;\\\\n        Http1ServerResponse?: typeof ServerResponse;\\\\n        Http2ServerRequest?: typeof Http2ServerRequest;\\\\n        Http2ServerResponse?: typeof Http2ServerResponse;\\\\n    }\\\\n\\\\n    export interface SecureClientSessionOptions extends ClientSessionOptions, tls.ConnectionOptions { }\\\\n    export interface SecureServerSessionOptions extends ServerSessionOptions, tls.TlsOptions { }\\\\n\\\\n    export interface ServerOptions extends ServerSessionOptions { }\\\\n\\\\n    export interface SecureServerOptions extends SecureServerSessionOptions {\\\\n        allowHTTP1?: boolean;\\\\n        origins?: string[];\\\\n    }\\\\n\\\\n    export class Http2Server extends net.Server {\\\\n        private constructor();\\\\n\\\\n        addListener(event: \\\\\\\"checkContinue\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        addListener(event: \\\\\\\"request\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        addListener(event: \\\\\\\"session\\\\\\\", listener: (session: ServerHttp2Session) => void): this;\\\\n        addListener(event: \\\\\\\"sessionError\\\\\\\", listener: (err: Error) => void): this;\\\\n        addListener(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        addListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        emit(event: \\\\\\\"checkContinue\\\\\\\", request: Http2ServerRequest, response: Http2ServerResponse): boolean;\\\\n        emit(event: \\\\\\\"request\\\\\\\", request: Http2ServerRequest, response: Http2ServerResponse): boolean;\\\\n        emit(event: \\\\\\\"session\\\\\\\", session: ServerHttp2Session): boolean;\\\\n        emit(event: \\\\\\\"sessionError\\\\\\\", err: Error): boolean;\\\\n        emit(event: \\\\\\\"stream\\\\\\\", stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number): boolean;\\\\n        emit(event: \\\\\\\"timeout\\\\\\\"): boolean;\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n        on(event: \\\\\\\"checkContinue\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        on(event: \\\\\\\"request\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        on(event: \\\\\\\"session\\\\\\\", listener: (session: ServerHttp2Session) => void): this;\\\\n        on(event: \\\\\\\"sessionError\\\\\\\", listener: (err: Error) => void): this;\\\\n        on(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        on(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        once(event: \\\\\\\"checkContinue\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        once(event: \\\\\\\"request\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        once(event: \\\\\\\"session\\\\\\\", listener: (session: ServerHttp2Session) => void): this;\\\\n        once(event: \\\\\\\"sessionError\\\\\\\", listener: (err: Error) => void): this;\\\\n        once(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        once(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependListener(event: \\\\\\\"checkContinue\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        prependListener(event: \\\\\\\"request\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        prependListener(event: \\\\\\\"session\\\\\\\", listener: (session: ServerHttp2Session) => void): this;\\\\n        prependListener(event: \\\\\\\"sessionError\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependListener(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        prependListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"checkContinue\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"request\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"session\\\\\\\", listener: (session: ServerHttp2Session) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"sessionError\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        setTimeout(msec?: number, callback?: () => void): this;\\\\n    }\\\\n\\\\n    export class Http2SecureServer extends tls.Server {\\\\n        private constructor();\\\\n\\\\n        addListener(event: \\\\\\\"checkContinue\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        addListener(event: \\\\\\\"request\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        addListener(event: \\\\\\\"session\\\\\\\", listener: (session: ServerHttp2Session) => void): this;\\\\n        addListener(event: \\\\\\\"sessionError\\\\\\\", listener: (err: Error) => void): this;\\\\n        addListener(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        addListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"unknownProtocol\\\\\\\", listener: (socket: tls.TLSSocket) => void): this;\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        emit(event: \\\\\\\"checkContinue\\\\\\\", request: Http2ServerRequest, response: Http2ServerResponse): boolean;\\\\n        emit(event: \\\\\\\"request\\\\\\\", request: Http2ServerRequest, response: Http2ServerResponse): boolean;\\\\n        emit(event: \\\\\\\"session\\\\\\\", session: ServerHttp2Session): boolean;\\\\n        emit(event: \\\\\\\"sessionError\\\\\\\", err: Error): boolean;\\\\n        emit(event: \\\\\\\"stream\\\\\\\", stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number): boolean;\\\\n        emit(event: \\\\\\\"timeout\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"unknownProtocol\\\\\\\", socket: tls.TLSSocket): boolean;\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n        on(event: \\\\\\\"checkContinue\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        on(event: \\\\\\\"request\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        on(event: \\\\\\\"session\\\\\\\", listener: (session: ServerHttp2Session) => void): this;\\\\n        on(event: \\\\\\\"sessionError\\\\\\\", listener: (err: Error) => void): this;\\\\n        on(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        on(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"unknownProtocol\\\\\\\", listener: (socket: tls.TLSSocket) => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        once(event: \\\\\\\"checkContinue\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        once(event: \\\\\\\"request\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        once(event: \\\\\\\"session\\\\\\\", listener: (session: ServerHttp2Session) => void): this;\\\\n        once(event: \\\\\\\"sessionError\\\\\\\", listener: (err: Error) => void): this;\\\\n        once(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        once(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"unknownProtocol\\\\\\\", listener: (socket: tls.TLSSocket) => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependListener(event: \\\\\\\"checkContinue\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        prependListener(event: \\\\\\\"request\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        prependListener(event: \\\\\\\"session\\\\\\\", listener: (session: ServerHttp2Session) => void): this;\\\\n        prependListener(event: \\\\\\\"sessionError\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependListener(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        prependListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"unknownProtocol\\\\\\\", listener: (socket: tls.TLSSocket) => void): this;\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"checkContinue\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"request\\\\\\\", listener: (request: Http2ServerRequest, response: Http2ServerResponse) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"session\\\\\\\", listener: (session: ServerHttp2Session) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"sessionError\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"stream\\\\\\\", listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"timeout\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"unknownProtocol\\\\\\\", listener: (socket: tls.TLSSocket) => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        setTimeout(msec?: number, callback?: () => void): this;\\\\n    }\\\\n\\\\n    export class Http2ServerRequest extends stream.Readable {\\\\n        constructor(stream: ServerHttp2Stream, headers: IncomingHttpHeaders, options: stream.ReadableOptions, rawHeaders: string[]);\\\\n\\\\n        readonly aborted: boolean;\\\\n        readonly authority: string;\\\\n        readonly headers: IncomingHttpHeaders;\\\\n        readonly httpVersion: string;\\\\n        readonly method: string;\\\\n        readonly rawHeaders: string[];\\\\n        readonly rawTrailers: string[];\\\\n        readonly scheme: string;\\\\n        setTimeout(msecs: number, callback?: () => void): void;\\\\n        readonly socket: net.Socket | tls.TLSSocket;\\\\n        readonly stream: ServerHttp2Stream;\\\\n        readonly trailers: IncomingHttpHeaders;\\\\n        readonly url: string;\\\\n\\\\n        read(size?: number): Buffer | string | null;\\\\n\\\\n        addListener(event: \\\\\\\"aborted\\\\\\\", listener: (hadError: boolean, code: number) => void): this;\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"data\\\\\\\", listener: (chunk: Buffer | string) => void): this;\\\\n        addListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"readable\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        emit(event: \\\\\\\"aborted\\\\\\\", hadError: boolean, code: number): boolean;\\\\n        emit(event: \\\\\\\"close\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"data\\\\\\\", chunk: Buffer | string): boolean;\\\\n        emit(event: \\\\\\\"end\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"readable\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"error\\\\\\\", err: Error): boolean;\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n        on(event: \\\\\\\"aborted\\\\\\\", listener: (hadError: boolean, code: number) => void): this;\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"data\\\\\\\", listener: (chunk: Buffer | string) => void): this;\\\\n        on(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"readable\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        once(event: \\\\\\\"aborted\\\\\\\", listener: (hadError: boolean, code: number) => void): this;\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"data\\\\\\\", listener: (chunk: Buffer | string) => void): this;\\\\n        once(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"readable\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependListener(event: \\\\\\\"aborted\\\\\\\", listener: (hadError: boolean, code: number) => void): this;\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"data\\\\\\\", listener: (chunk: Buffer | string) => void): this;\\\\n        prependListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"readable\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"aborted\\\\\\\", listener: (hadError: boolean, code: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"data\\\\\\\", listener: (chunk: Buffer | string) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"end\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"readable\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n    }\\\\n\\\\n    export class Http2ServerResponse extends stream.Stream {\\\\n        constructor(stream: ServerHttp2Stream);\\\\n\\\\n        addTrailers(trailers: OutgoingHttpHeaders): void;\\\\n        readonly connection: net.Socket | tls.TLSSocket;\\\\n        end(callback?: () => void): void;\\\\n        end(data: string | Uint8Array, callback?: () => void): void;\\\\n        end(data: string | Uint8Array, encoding: string, callback?: () => void): void;\\\\n        readonly finished: boolean;\\\\n        getHeader(name: string): string;\\\\n        getHeaderNames(): string[];\\\\n        getHeaders(): OutgoingHttpHeaders;\\\\n        hasHeader(name: string): boolean;\\\\n        readonly headersSent: boolean;\\\\n        removeHeader(name: string): void;\\\\n        sendDate: boolean;\\\\n        setHeader(name: string, value: number | string | string[]): void;\\\\n        setTimeout(msecs: number, callback?: () => void): void;\\\\n        readonly socket: net.Socket | tls.TLSSocket;\\\\n        statusCode: number;\\\\n        statusMessage: '';\\\\n        readonly stream: ServerHttp2Stream;\\\\n        write(chunk: string | Uint8Array, callback?: (err: Error) => void): boolean;\\\\n        write(chunk: string | Uint8Array, encoding: string, callback?: (err: Error) => void): boolean;\\\\n        writeContinue(): void;\\\\n        writeHead(statusCode: number, headers?: OutgoingHttpHeaders): this;\\\\n        writeHead(statusCode: number, statusMessage: string, headers?: OutgoingHttpHeaders): this;\\\\n        createPushResponse(headers: OutgoingHttpHeaders, callback: (err: Error | null, res: Http2ServerResponse) => void): void;\\\\n\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n        addListener(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"pipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        addListener(event: \\\\\\\"unpipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        emit(event: \\\\\\\"close\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"drain\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"error\\\\\\\", error: Error): boolean;\\\\n        emit(event: \\\\\\\"finish\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"pipe\\\\\\\", src: stream.Readable): boolean;\\\\n        emit(event: \\\\\\\"unpipe\\\\\\\", src: stream.Readable): boolean;\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n        on(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"pipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        on(event: \\\\\\\"unpipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n        once(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"pipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        once(event: \\\\\\\"unpipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n        prependListener(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"pipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        prependListener(event: \\\\\\\"unpipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"drain\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (error: Error) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"finish\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"pipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"unpipe\\\\\\\", listener: (src: stream.Readable) => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n    }\\\\n\\\\n    // Public API\\\\n\\\\n    export namespace constants {\\\\n        const NGHTTP2_SESSION_SERVER: number;\\\\n        const NGHTTP2_SESSION_CLIENT: number;\\\\n        const NGHTTP2_STREAM_STATE_IDLE: number;\\\\n        const NGHTTP2_STREAM_STATE_OPEN: number;\\\\n        const NGHTTP2_STREAM_STATE_RESERVED_LOCAL: number;\\\\n        const NGHTTP2_STREAM_STATE_RESERVED_REMOTE: number;\\\\n        const NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL: number;\\\\n        const NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE: number;\\\\n        const NGHTTP2_STREAM_STATE_CLOSED: number;\\\\n        const NGHTTP2_NO_ERROR: number;\\\\n        const NGHTTP2_PROTOCOL_ERROR: number;\\\\n        const NGHTTP2_INTERNAL_ERROR: number;\\\\n        const NGHTTP2_FLOW_CONTROL_ERROR: number;\\\\n        const NGHTTP2_SETTINGS_TIMEOUT: number;\\\\n        const NGHTTP2_STREAM_CLOSED: number;\\\\n        const NGHTTP2_FRAME_SIZE_ERROR: number;\\\\n        const NGHTTP2_REFUSED_STREAM: number;\\\\n        const NGHTTP2_CANCEL: number;\\\\n        const NGHTTP2_COMPRESSION_ERROR: number;\\\\n        const NGHTTP2_CONNECT_ERROR: number;\\\\n        const NGHTTP2_ENHANCE_YOUR_CALM: number;\\\\n        const NGHTTP2_INADEQUATE_SECURITY: number;\\\\n        const NGHTTP2_HTTP_1_1_REQUIRED: number;\\\\n        const NGHTTP2_ERR_FRAME_SIZE_ERROR: number;\\\\n        const NGHTTP2_FLAG_NONE: number;\\\\n        const NGHTTP2_FLAG_END_STREAM: number;\\\\n        const NGHTTP2_FLAG_END_HEADERS: number;\\\\n        const NGHTTP2_FLAG_ACK: number;\\\\n        const NGHTTP2_FLAG_PADDED: number;\\\\n        const NGHTTP2_FLAG_PRIORITY: number;\\\\n        const DEFAULT_SETTINGS_HEADER_TABLE_SIZE: number;\\\\n        const DEFAULT_SETTINGS_ENABLE_PUSH: number;\\\\n        const DEFAULT_SETTINGS_INITIAL_WINDOW_SIZE: number;\\\\n        const DEFAULT_SETTINGS_MAX_FRAME_SIZE: number;\\\\n        const MAX_MAX_FRAME_SIZE: number;\\\\n        const MIN_MAX_FRAME_SIZE: number;\\\\n        const MAX_INITIAL_WINDOW_SIZE: number;\\\\n        const NGHTTP2_DEFAULT_WEIGHT: number;\\\\n        const NGHTTP2_SETTINGS_HEADER_TABLE_SIZE: number;\\\\n        const NGHTTP2_SETTINGS_ENABLE_PUSH: number;\\\\n        const NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS: number;\\\\n        const NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE: number;\\\\n        const NGHTTP2_SETTINGS_MAX_FRAME_SIZE: number;\\\\n        const NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE: number;\\\\n        const PADDING_STRATEGY_NONE: number;\\\\n        const PADDING_STRATEGY_MAX: number;\\\\n        const PADDING_STRATEGY_CALLBACK: number;\\\\n        const HTTP2_HEADER_STATUS: string;\\\\n        const HTTP2_HEADER_METHOD: string;\\\\n        const HTTP2_HEADER_AUTHORITY: string;\\\\n        const HTTP2_HEADER_SCHEME: string;\\\\n        const HTTP2_HEADER_PATH: string;\\\\n        const HTTP2_HEADER_ACCEPT_CHARSET: string;\\\\n        const HTTP2_HEADER_ACCEPT_ENCODING: string;\\\\n        const HTTP2_HEADER_ACCEPT_LANGUAGE: string;\\\\n        const HTTP2_HEADER_ACCEPT_RANGES: string;\\\\n        const HTTP2_HEADER_ACCEPT: string;\\\\n        const HTTP2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN: string;\\\\n        const HTTP2_HEADER_AGE: string;\\\\n        const HTTP2_HEADER_ALLOW: string;\\\\n        const HTTP2_HEADER_AUTHORIZATION: string;\\\\n        const HTTP2_HEADER_CACHE_CONTROL: string;\\\\n        const HTTP2_HEADER_CONNECTION: string;\\\\n        const HTTP2_HEADER_CONTENT_DISPOSITION: string;\\\\n        const HTTP2_HEADER_CONTENT_ENCODING: string;\\\\n        const HTTP2_HEADER_CONTENT_LANGUAGE: string;\\\\n        const HTTP2_HEADER_CONTENT_LENGTH: string;\\\\n        const HTTP2_HEADER_CONTENT_LOCATION: string;\\\\n        const HTTP2_HEADER_CONTENT_MD5: string;\\\\n        const HTTP2_HEADER_CONTENT_RANGE: string;\\\\n        const HTTP2_HEADER_CONTENT_TYPE: string;\\\\n        const HTTP2_HEADER_COOKIE: string;\\\\n        const HTTP2_HEADER_DATE: string;\\\\n        const HTTP2_HEADER_ETAG: string;\\\\n        const HTTP2_HEADER_EXPECT: string;\\\\n        const HTTP2_HEADER_EXPIRES: string;\\\\n        const HTTP2_HEADER_FROM: string;\\\\n        const HTTP2_HEADER_HOST: string;\\\\n        const HTTP2_HEADER_IF_MATCH: string;\\\\n        const HTTP2_HEADER_IF_MODIFIED_SINCE: string;\\\\n        const HTTP2_HEADER_IF_NONE_MATCH: string;\\\\n        const HTTP2_HEADER_IF_RANGE: string;\\\\n        const HTTP2_HEADER_IF_UNMODIFIED_SINCE: string;\\\\n        const HTTP2_HEADER_LAST_MODIFIED: string;\\\\n        const HTTP2_HEADER_LINK: string;\\\\n        const HTTP2_HEADER_LOCATION: string;\\\\n        const HTTP2_HEADER_MAX_FORWARDS: string;\\\\n        const HTTP2_HEADER_PREFER: string;\\\\n        const HTTP2_HEADER_PROXY_AUTHENTICATE: string;\\\\n        const HTTP2_HEADER_PROXY_AUTHORIZATION: string;\\\\n        const HTTP2_HEADER_RANGE: string;\\\\n        const HTTP2_HEADER_REFERER: string;\\\\n        const HTTP2_HEADER_REFRESH: string;\\\\n        const HTTP2_HEADER_RETRY_AFTER: string;\\\\n        const HTTP2_HEADER_SERVER: string;\\\\n        const HTTP2_HEADER_SET_COOKIE: string;\\\\n        const HTTP2_HEADER_STRICT_TRANSPORT_SECURITY: string;\\\\n        const HTTP2_HEADER_TRANSFER_ENCODING: string;\\\\n        const HTTP2_HEADER_TE: string;\\\\n        const HTTP2_HEADER_UPGRADE: string;\\\\n        const HTTP2_HEADER_USER_AGENT: string;\\\\n        const HTTP2_HEADER_VARY: string;\\\\n        const HTTP2_HEADER_VIA: string;\\\\n        const HTTP2_HEADER_WWW_AUTHENTICATE: string;\\\\n        const HTTP2_HEADER_HTTP2_SETTINGS: string;\\\\n        const HTTP2_HEADER_KEEP_ALIVE: string;\\\\n        const HTTP2_HEADER_PROXY_CONNECTION: string;\\\\n        const HTTP2_METHOD_ACL: string;\\\\n        const HTTP2_METHOD_BASELINE_CONTROL: string;\\\\n        const HTTP2_METHOD_BIND: string;\\\\n        const HTTP2_METHOD_CHECKIN: string;\\\\n        const HTTP2_METHOD_CHECKOUT: string;\\\\n        const HTTP2_METHOD_CONNECT: string;\\\\n        const HTTP2_METHOD_COPY: string;\\\\n        const HTTP2_METHOD_DELETE: string;\\\\n        const HTTP2_METHOD_GET: string;\\\\n        const HTTP2_METHOD_HEAD: string;\\\\n        const HTTP2_METHOD_LABEL: string;\\\\n        const HTTP2_METHOD_LINK: string;\\\\n        const HTTP2_METHOD_LOCK: string;\\\\n        const HTTP2_METHOD_MERGE: string;\\\\n        const HTTP2_METHOD_MKACTIVITY: string;\\\\n        const HTTP2_METHOD_MKCALENDAR: string;\\\\n        const HTTP2_METHOD_MKCOL: string;\\\\n        const HTTP2_METHOD_MKREDIRECTREF: string;\\\\n        const HTTP2_METHOD_MKWORKSPACE: string;\\\\n        const HTTP2_METHOD_MOVE: string;\\\\n        const HTTP2_METHOD_OPTIONS: string;\\\\n        const HTTP2_METHOD_ORDERPATCH: string;\\\\n        const HTTP2_METHOD_PATCH: string;\\\\n        const HTTP2_METHOD_POST: string;\\\\n        const HTTP2_METHOD_PRI: string;\\\\n        const HTTP2_METHOD_PROPFIND: string;\\\\n        const HTTP2_METHOD_PROPPATCH: string;\\\\n        const HTTP2_METHOD_PUT: string;\\\\n        const HTTP2_METHOD_REBIND: string;\\\\n        const HTTP2_METHOD_REPORT: string;\\\\n        const HTTP2_METHOD_SEARCH: string;\\\\n        const HTTP2_METHOD_TRACE: string;\\\\n        const HTTP2_METHOD_UNBIND: string;\\\\n        const HTTP2_METHOD_UNCHECKOUT: string;\\\\n        const HTTP2_METHOD_UNLINK: string;\\\\n        const HTTP2_METHOD_UNLOCK: string;\\\\n        const HTTP2_METHOD_UPDATE: string;\\\\n        const HTTP2_METHOD_UPDATEREDIRECTREF: string;\\\\n        const HTTP2_METHOD_VERSION_CONTROL: string;\\\\n        const HTTP_STATUS_CONTINUE: number;\\\\n        const HTTP_STATUS_SWITCHING_PROTOCOLS: number;\\\\n        const HTTP_STATUS_PROCESSING: number;\\\\n        const HTTP_STATUS_OK: number;\\\\n        const HTTP_STATUS_CREATED: number;\\\\n        const HTTP_STATUS_ACCEPTED: number;\\\\n        const HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION: number;\\\\n        const HTTP_STATUS_NO_CONTENT: number;\\\\n        const HTTP_STATUS_RESET_CONTENT: number;\\\\n        const HTTP_STATUS_PARTIAL_CONTENT: number;\\\\n        const HTTP_STATUS_MULTI_STATUS: number;\\\\n        const HTTP_STATUS_ALREADY_REPORTED: number;\\\\n        const HTTP_STATUS_IM_USED: number;\\\\n        const HTTP_STATUS_MULTIPLE_CHOICES: number;\\\\n        const HTTP_STATUS_MOVED_PERMANENTLY: number;\\\\n        const HTTP_STATUS_FOUND: number;\\\\n        const HTTP_STATUS_SEE_OTHER: number;\\\\n        const HTTP_STATUS_NOT_MODIFIED: number;\\\\n        const HTTP_STATUS_USE_PROXY: number;\\\\n        const HTTP_STATUS_TEMPORARY_REDIRECT: number;\\\\n        const HTTP_STATUS_PERMANENT_REDIRECT: number;\\\\n        const HTTP_STATUS_BAD_REQUEST: number;\\\\n        const HTTP_STATUS_UNAUTHORIZED: number;\\\\n        const HTTP_STATUS_PAYMENT_REQUIRED: number;\\\\n        const HTTP_STATUS_FORBIDDEN: number;\\\\n        const HTTP_STATUS_NOT_FOUND: number;\\\\n        const HTTP_STATUS_METHOD_NOT_ALLOWED: number;\\\\n        const HTTP_STATUS_NOT_ACCEPTABLE: number;\\\\n        const HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED: number;\\\\n        const HTTP_STATUS_REQUEST_TIMEOUT: number;\\\\n        const HTTP_STATUS_CONFLICT: number;\\\\n        const HTTP_STATUS_GONE: number;\\\\n        const HTTP_STATUS_LENGTH_REQUIRED: number;\\\\n        const HTTP_STATUS_PRECONDITION_FAILED: number;\\\\n        const HTTP_STATUS_PAYLOAD_TOO_LARGE: number;\\\\n        const HTTP_STATUS_URI_TOO_LONG: number;\\\\n        const HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE: number;\\\\n        const HTTP_STATUS_RANGE_NOT_SATISFIABLE: number;\\\\n        const HTTP_STATUS_EXPECTATION_FAILED: number;\\\\n        const HTTP_STATUS_TEAPOT: number;\\\\n        const HTTP_STATUS_MISDIRECTED_REQUEST: number;\\\\n        const HTTP_STATUS_UNPROCESSABLE_ENTITY: number;\\\\n        const HTTP_STATUS_LOCKED: number;\\\\n        const HTTP_STATUS_FAILED_DEPENDENCY: number;\\\\n        const HTTP_STATUS_UNORDERED_COLLECTION: number;\\\\n        const HTTP_STATUS_UPGRADE_REQUIRED: number;\\\\n        const HTTP_STATUS_PRECONDITION_REQUIRED: number;\\\\n        const HTTP_STATUS_TOO_MANY_REQUESTS: number;\\\\n        const HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE: number;\\\\n        const HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS: number;\\\\n        const HTTP_STATUS_INTERNAL_SERVER_ERROR: number;\\\\n        const HTTP_STATUS_NOT_IMPLEMENTED: number;\\\\n        const HTTP_STATUS_BAD_GATEWAY: number;\\\\n        const HTTP_STATUS_SERVICE_UNAVAILABLE: number;\\\\n        const HTTP_STATUS_GATEWAY_TIMEOUT: number;\\\\n        const HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED: number;\\\\n        const HTTP_STATUS_VARIANT_ALSO_NEGOTIATES: number;\\\\n        const HTTP_STATUS_INSUFFICIENT_STORAGE: number;\\\\n        const HTTP_STATUS_LOOP_DETECTED: number;\\\\n        const HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED: number;\\\\n        const HTTP_STATUS_NOT_EXTENDED: number;\\\\n        const HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED: number;\\\\n    }\\\\n\\\\n    export function getDefaultSettings(): Settings;\\\\n    export function getPackedSettings(settings: Settings): Buffer;\\\\n    export function getUnpackedSettings(buf: Uint8Array): Settings;\\\\n\\\\n    export function createServer(onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void): Http2Server;\\\\n    export function createServer(options: ServerOptions, onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void): Http2Server;\\\\n\\\\n    export function createSecureServer(onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void): Http2SecureServer;\\\\n    export function createSecureServer(options: SecureServerOptions, onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void): Http2SecureServer;\\\\n\\\\n    export function connect(authority: string | url.URL, listener?: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): ClientHttp2Session;\\\\n    export function connect(\\\\n        authority: string | url.URL,\\\\n        options?: ClientSessionOptions | SecureClientSessionOptions,\\\\n        listener?: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void,\\\\n    ): ClientHttp2Session;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/https.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"https\\\\\\\" {\\\\n    import * as tls from \\\\\\\"tls\\\\\\\";\\\\n    import * as events from \\\\\\\"events\\\\\\\";\\\\n    import * as http from \\\\\\\"http\\\\\\\";\\\\n    import { URL } from \\\\\\\"url\\\\\\\";\\\\n\\\\n    type ServerOptions = tls.SecureContextOptions & tls.TlsOptions & http.ServerOptions;\\\\n\\\\n    type RequestOptions = http.RequestOptions & tls.SecureContextOptions & {\\\\n        rejectUnauthorized?: boolean; // Defaults to true\\\\n        servername?: string; // SNI TLS Extension\\\\n    };\\\\n\\\\n    interface AgentOptions extends http.AgentOptions, tls.ConnectionOptions {\\\\n        rejectUnauthorized?: boolean;\\\\n        maxCachedSessions?: number;\\\\n    }\\\\n\\\\n    class Agent extends http.Agent {\\\\n        constructor(options?: AgentOptions);\\\\n        options: AgentOptions;\\\\n    }\\\\n\\\\n    class Server extends tls.Server {\\\\n        constructor(requestListener?: http.RequestListener);\\\\n        constructor(options: ServerOptions, requestListener?: http.RequestListener);\\\\n\\\\n        setTimeout(callback: () => void): this;\\\\n        setTimeout(msecs?: number, callback?: () => void): this;\\\\n        /**\\\\n         * Limits maximum incoming headers count. If set to 0, no limit will be applied.\\\\n         * @default 2000\\\\n         * {@link https://nodejs.org/api/http.html#http_server_maxheaderscount}\\\\n         */\\\\n        maxHeadersCount: number | null;\\\\n        timeout: number;\\\\n        /**\\\\n         * Limit the amount of time the parser will wait to receive the complete HTTP headers.\\\\n         * @default 40000\\\\n         * {@link https://nodejs.org/api/http.html#http_server_headerstimeout}\\\\n         */\\\\n        headersTimeout: number;\\\\n        keepAliveTimeout: number;\\\\n    }\\\\n\\\\n    function createServer(requestListener?: http.RequestListener): Server;\\\\n    function createServer(options: ServerOptions, requestListener?: http.RequestListener): Server;\\\\n    function request(options: RequestOptions | string | URL, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;\\\\n    function request(url: string | URL, options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;\\\\n    function get(options: RequestOptions | string | URL, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;\\\\n    function get(url: string | URL, options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;\\\\n    let globalAgent: Agent;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/inspector.d.ts\\\",\\\"content\\\":\\\"// tslint:disable-next-line:dt-header\\\\n// Type definitions for inspector\\\\n\\\\n// These definitions are auto-generated.\\\\n// Please see https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19330\\\\n// for more information.\\\\n\\\\n// tslint:disable:max-line-length\\\\n\\\\n/**\\\\n * The inspector module provides an API for interacting with the V8 inspector.\\\\n */\\\\ndeclare module \\\\\\\"inspector\\\\\\\" {\\\\n    import { EventEmitter } from 'events';\\\\n\\\\n    interface InspectorNotification<T> {\\\\n        method: string;\\\\n        params: T;\\\\n    }\\\\n\\\\n    namespace Schema {\\\\n        /**\\\\n         * Description of the protocol domain.\\\\n         */\\\\n        interface Domain {\\\\n            /**\\\\n             * Domain name.\\\\n             */\\\\n            name: string;\\\\n            /**\\\\n             * Domain version.\\\\n             */\\\\n            version: string;\\\\n        }\\\\n\\\\n        interface GetDomainsReturnType {\\\\n            /**\\\\n             * List of supported domains.\\\\n             */\\\\n            domains: Domain[];\\\\n        }\\\\n    }\\\\n\\\\n    namespace Runtime {\\\\n        /**\\\\n         * Unique script identifier.\\\\n         */\\\\n        type ScriptId = string;\\\\n\\\\n        /**\\\\n         * Unique object identifier.\\\\n         */\\\\n        type RemoteObjectId = string;\\\\n\\\\n        /**\\\\n         * Primitive value which cannot be JSON-stringified.\\\\n         */\\\\n        type UnserializableValue = string;\\\\n\\\\n        /**\\\\n         * Mirror object referencing original JavaScript object.\\\\n         */\\\\n        interface RemoteObject {\\\\n            /**\\\\n             * Object type.\\\\n             */\\\\n            type: string;\\\\n            /**\\\\n             * Object subtype hint. Specified for <code>object</code> type values only.\\\\n             */\\\\n            subtype?: string;\\\\n            /**\\\\n             * Object class (constructor) name. Specified for <code>object</code> type values only.\\\\n             */\\\\n            className?: string;\\\\n            /**\\\\n             * Remote object value in case of primitive values or JSON values (if it was requested).\\\\n             */\\\\n            value?: any;\\\\n            /**\\\\n             * Primitive value which can not be JSON-stringified does not have <code>value</code>, but gets this property.\\\\n             */\\\\n            unserializableValue?: UnserializableValue;\\\\n            /**\\\\n             * String representation of the object.\\\\n             */\\\\n            description?: string;\\\\n            /**\\\\n             * Unique object identifier (for non-primitive values).\\\\n             */\\\\n            objectId?: RemoteObjectId;\\\\n            /**\\\\n             * Preview containing abbreviated property values. Specified for <code>object</code> type values only.\\\\n             * @experimental\\\\n             */\\\\n            preview?: ObjectPreview;\\\\n            /**\\\\n             * @experimental\\\\n             */\\\\n            customPreview?: CustomPreview;\\\\n        }\\\\n\\\\n        /**\\\\n         * @experimental\\\\n         */\\\\n        interface CustomPreview {\\\\n            header: string;\\\\n            hasBody: boolean;\\\\n            formatterObjectId: RemoteObjectId;\\\\n            bindRemoteObjectFunctionId: RemoteObjectId;\\\\n            configObjectId?: RemoteObjectId;\\\\n        }\\\\n\\\\n        /**\\\\n         * Object containing abbreviated remote object value.\\\\n         * @experimental\\\\n         */\\\\n        interface ObjectPreview {\\\\n            /**\\\\n             * Object type.\\\\n             */\\\\n            type: string;\\\\n            /**\\\\n             * Object subtype hint. Specified for <code>object</code> type values only.\\\\n             */\\\\n            subtype?: string;\\\\n            /**\\\\n             * String representation of the object.\\\\n             */\\\\n            description?: string;\\\\n            /**\\\\n             * True iff some of the properties or entries of the original object did not fit.\\\\n             */\\\\n            overflow: boolean;\\\\n            /**\\\\n             * List of the properties.\\\\n             */\\\\n            properties: PropertyPreview[];\\\\n            /**\\\\n             * List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only.\\\\n             */\\\\n            entries?: EntryPreview[];\\\\n        }\\\\n\\\\n        /**\\\\n         * @experimental\\\\n         */\\\\n        interface PropertyPreview {\\\\n            /**\\\\n             * Property name.\\\\n             */\\\\n            name: string;\\\\n            /**\\\\n             * Object type. Accessor means that the property itself is an accessor property.\\\\n             */\\\\n            type: string;\\\\n            /**\\\\n             * User-friendly property value string.\\\\n             */\\\\n            value?: string;\\\\n            /**\\\\n             * Nested value preview.\\\\n             */\\\\n            valuePreview?: ObjectPreview;\\\\n            /**\\\\n             * Object subtype hint. Specified for <code>object</code> type values only.\\\\n             */\\\\n            subtype?: string;\\\\n        }\\\\n\\\\n        /**\\\\n         * @experimental\\\\n         */\\\\n        interface EntryPreview {\\\\n            /**\\\\n             * Preview of the key. Specified for map-like collection entries.\\\\n             */\\\\n            key?: ObjectPreview;\\\\n            /**\\\\n             * Preview of the value.\\\\n             */\\\\n            value: ObjectPreview;\\\\n        }\\\\n\\\\n        /**\\\\n         * Object property descriptor.\\\\n         */\\\\n        interface PropertyDescriptor {\\\\n            /**\\\\n             * Property name or symbol description.\\\\n             */\\\\n            name: string;\\\\n            /**\\\\n             * The value associated with the property.\\\\n             */\\\\n            value?: RemoteObject;\\\\n            /**\\\\n             * True if the value associated with the property may be changed (data descriptors only).\\\\n             */\\\\n            writable?: boolean;\\\\n            /**\\\\n             * A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only).\\\\n             */\\\\n            get?: RemoteObject;\\\\n            /**\\\\n             * A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only).\\\\n             */\\\\n            set?: RemoteObject;\\\\n            /**\\\\n             * True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\\\\n             */\\\\n            configurable: boolean;\\\\n            /**\\\\n             * True if this property shows up during enumeration of the properties on the corresponding object.\\\\n             */\\\\n            enumerable: boolean;\\\\n            /**\\\\n             * True if the result was thrown during the evaluation.\\\\n             */\\\\n            wasThrown?: boolean;\\\\n            /**\\\\n             * True if the property is owned for the object.\\\\n             */\\\\n            isOwn?: boolean;\\\\n            /**\\\\n             * Property symbol object, if the property is of the <code>symbol</code> type.\\\\n             */\\\\n            symbol?: RemoteObject;\\\\n        }\\\\n\\\\n        /**\\\\n         * Object internal property descriptor. This property isn't normally visible in JavaScript code.\\\\n         */\\\\n        interface InternalPropertyDescriptor {\\\\n            /**\\\\n             * Conventional property name.\\\\n             */\\\\n            name: string;\\\\n            /**\\\\n             * The value associated with the property.\\\\n             */\\\\n            value?: RemoteObject;\\\\n        }\\\\n\\\\n        /**\\\\n         * Represents function call argument. Either remote object id <code>objectId</code>, primitive <code>value</code>, unserializable primitive value or neither of (for undefined) them should be specified.\\\\n         */\\\\n        interface CallArgument {\\\\n            /**\\\\n             * Primitive value or serializable javascript object.\\\\n             */\\\\n            value?: any;\\\\n            /**\\\\n             * Primitive value which can not be JSON-stringified.\\\\n             */\\\\n            unserializableValue?: UnserializableValue;\\\\n            /**\\\\n             * Remote object handle.\\\\n             */\\\\n            objectId?: RemoteObjectId;\\\\n        }\\\\n\\\\n        /**\\\\n         * Id of an execution context.\\\\n         */\\\\n        type ExecutionContextId = number;\\\\n\\\\n        /**\\\\n         * Description of an isolated world.\\\\n         */\\\\n        interface ExecutionContextDescription {\\\\n            /**\\\\n             * Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed.\\\\n             */\\\\n            id: ExecutionContextId;\\\\n            /**\\\\n             * Execution context origin.\\\\n             */\\\\n            origin: string;\\\\n            /**\\\\n             * Human readable name describing given context.\\\\n             */\\\\n            name: string;\\\\n            /**\\\\n             * Embedder-specific auxiliary data.\\\\n             */\\\\n            auxData?: {};\\\\n        }\\\\n\\\\n        /**\\\\n         * Detailed information about exception (or error) that was thrown during script compilation or execution.\\\\n         */\\\\n        interface ExceptionDetails {\\\\n            /**\\\\n             * Exception id.\\\\n             */\\\\n            exceptionId: number;\\\\n            /**\\\\n             * Exception text, which should be used together with exception object when available.\\\\n             */\\\\n            text: string;\\\\n            /**\\\\n             * Line number of the exception location (0-based).\\\\n             */\\\\n            lineNumber: number;\\\\n            /**\\\\n             * Column number of the exception location (0-based).\\\\n             */\\\\n            columnNumber: number;\\\\n            /**\\\\n             * Script ID of the exception location.\\\\n             */\\\\n            scriptId?: ScriptId;\\\\n            /**\\\\n             * URL of the exception location, to be used when the script was not reported.\\\\n             */\\\\n            url?: string;\\\\n            /**\\\\n             * JavaScript stack trace if available.\\\\n             */\\\\n            stackTrace?: StackTrace;\\\\n            /**\\\\n             * Exception object if available.\\\\n             */\\\\n            exception?: RemoteObject;\\\\n            /**\\\\n             * Identifier of the context where exception happened.\\\\n             */\\\\n            executionContextId?: ExecutionContextId;\\\\n        }\\\\n\\\\n        /**\\\\n         * Number of milliseconds since epoch.\\\\n         */\\\\n        type Timestamp = number;\\\\n\\\\n        /**\\\\n         * Stack entry for runtime errors and assertions.\\\\n         */\\\\n        interface CallFrame {\\\\n            /**\\\\n             * JavaScript function name.\\\\n             */\\\\n            functionName: string;\\\\n            /**\\\\n             * JavaScript script id.\\\\n             */\\\\n            scriptId: ScriptId;\\\\n            /**\\\\n             * JavaScript script name or url.\\\\n             */\\\\n            url: string;\\\\n            /**\\\\n             * JavaScript script line number (0-based).\\\\n             */\\\\n            lineNumber: number;\\\\n            /**\\\\n             * JavaScript script column number (0-based).\\\\n             */\\\\n            columnNumber: number;\\\\n        }\\\\n\\\\n        /**\\\\n         * Call frames for assertions or error messages.\\\\n         */\\\\n        interface StackTrace {\\\\n            /**\\\\n             * String label of this stack trace. For async traces this may be a name of the function that initiated the async call.\\\\n             */\\\\n            description?: string;\\\\n            /**\\\\n             * JavaScript function name.\\\\n             */\\\\n            callFrames: CallFrame[];\\\\n            /**\\\\n             * Asynchronous JavaScript stack trace that preceded this stack, if available.\\\\n             */\\\\n            parent?: StackTrace;\\\\n            /**\\\\n             * Asynchronous JavaScript stack trace that preceded this stack, if available.\\\\n             * @experimental\\\\n             */\\\\n            parentId?: StackTraceId;\\\\n        }\\\\n\\\\n        /**\\\\n         * Unique identifier of current debugger.\\\\n         * @experimental\\\\n         */\\\\n        type UniqueDebuggerId = string;\\\\n\\\\n        /**\\\\n         * If <code>debuggerId</code> is set stack trace comes from another debugger and can be resolved there. This allows to track cross-debugger calls. See <code>Runtime.StackTrace</code> and <code>Debugger.paused</code> for usages.\\\\n         * @experimental\\\\n         */\\\\n        interface StackTraceId {\\\\n            id: string;\\\\n            debuggerId?: UniqueDebuggerId;\\\\n        }\\\\n\\\\n        interface EvaluateParameterType {\\\\n            /**\\\\n             * Expression to evaluate.\\\\n             */\\\\n            expression: string;\\\\n            /**\\\\n             * Symbolic group name that can be used to release multiple objects.\\\\n             */\\\\n            objectGroup?: string;\\\\n            /**\\\\n             * Determines whether Command Line API should be available during the evaluation.\\\\n             */\\\\n            includeCommandLineAPI?: boolean;\\\\n            /**\\\\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\\\\n             */\\\\n            silent?: boolean;\\\\n            /**\\\\n             * Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\\\\n             */\\\\n            contextId?: ExecutionContextId;\\\\n            /**\\\\n             * Whether the result is expected to be a JSON object that should be sent by value.\\\\n             */\\\\n            returnByValue?: boolean;\\\\n            /**\\\\n             * Whether preview should be generated for the result.\\\\n             * @experimental\\\\n             */\\\\n            generatePreview?: boolean;\\\\n            /**\\\\n             * Whether execution should be treated as initiated by user in the UI.\\\\n             */\\\\n            userGesture?: boolean;\\\\n            /**\\\\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\\\\n             */\\\\n            awaitPromise?: boolean;\\\\n        }\\\\n\\\\n        interface AwaitPromiseParameterType {\\\\n            /**\\\\n             * Identifier of the promise.\\\\n             */\\\\n            promiseObjectId: RemoteObjectId;\\\\n            /**\\\\n             * Whether the result is expected to be a JSON object that should be sent by value.\\\\n             */\\\\n            returnByValue?: boolean;\\\\n            /**\\\\n             * Whether preview should be generated for the result.\\\\n             */\\\\n            generatePreview?: boolean;\\\\n        }\\\\n\\\\n        interface CallFunctionOnParameterType {\\\\n            /**\\\\n             * Declaration of the function to call.\\\\n             */\\\\n            functionDeclaration: string;\\\\n            /**\\\\n             * Identifier of the object to call function on. Either objectId or executionContextId should be specified.\\\\n             */\\\\n            objectId?: RemoteObjectId;\\\\n            /**\\\\n             * Call arguments. All call arguments must belong to the same JavaScript world as the target object.\\\\n             */\\\\n            arguments?: CallArgument[];\\\\n            /**\\\\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\\\\n             */\\\\n            silent?: boolean;\\\\n            /**\\\\n             * Whether the result is expected to be a JSON object which should be sent by value.\\\\n             */\\\\n            returnByValue?: boolean;\\\\n            /**\\\\n             * Whether preview should be generated for the result.\\\\n             * @experimental\\\\n             */\\\\n            generatePreview?: boolean;\\\\n            /**\\\\n             * Whether execution should be treated as initiated by user in the UI.\\\\n             */\\\\n            userGesture?: boolean;\\\\n            /**\\\\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\\\\n             */\\\\n            awaitPromise?: boolean;\\\\n            /**\\\\n             * Specifies execution context which global object will be used to call function on. Either executionContextId or objectId should be specified.\\\\n             */\\\\n            executionContextId?: ExecutionContextId;\\\\n            /**\\\\n             * Symbolic group name that can be used to release multiple objects. If objectGroup is not specified and objectId is, objectGroup will be inherited from object.\\\\n             */\\\\n            objectGroup?: string;\\\\n        }\\\\n\\\\n        interface GetPropertiesParameterType {\\\\n            /**\\\\n             * Identifier of the object to return properties for.\\\\n             */\\\\n            objectId: RemoteObjectId;\\\\n            /**\\\\n             * If true, returns properties belonging only to the element itself, not to its prototype chain.\\\\n             */\\\\n            ownProperties?: boolean;\\\\n            /**\\\\n             * If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.\\\\n             * @experimental\\\\n             */\\\\n            accessorPropertiesOnly?: boolean;\\\\n            /**\\\\n             * Whether preview should be generated for the results.\\\\n             * @experimental\\\\n             */\\\\n            generatePreview?: boolean;\\\\n        }\\\\n\\\\n        interface ReleaseObjectParameterType {\\\\n            /**\\\\n             * Identifier of the object to release.\\\\n             */\\\\n            objectId: RemoteObjectId;\\\\n        }\\\\n\\\\n        interface ReleaseObjectGroupParameterType {\\\\n            /**\\\\n             * Symbolic object group name.\\\\n             */\\\\n            objectGroup: string;\\\\n        }\\\\n\\\\n        interface SetCustomObjectFormatterEnabledParameterType {\\\\n            enabled: boolean;\\\\n        }\\\\n\\\\n        interface CompileScriptParameterType {\\\\n            /**\\\\n             * Expression to compile.\\\\n             */\\\\n            expression: string;\\\\n            /**\\\\n             * Source url to be set for the script.\\\\n             */\\\\n            sourceURL: string;\\\\n            /**\\\\n             * Specifies whether the compiled script should be persisted.\\\\n             */\\\\n            persistScript: boolean;\\\\n            /**\\\\n             * Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\\\\n             */\\\\n            executionContextId?: ExecutionContextId;\\\\n        }\\\\n\\\\n        interface RunScriptParameterType {\\\\n            /**\\\\n             * Id of the script to run.\\\\n             */\\\\n            scriptId: ScriptId;\\\\n            /**\\\\n             * Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\\\\n             */\\\\n            executionContextId?: ExecutionContextId;\\\\n            /**\\\\n             * Symbolic group name that can be used to release multiple objects.\\\\n             */\\\\n            objectGroup?: string;\\\\n            /**\\\\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\\\\n             */\\\\n            silent?: boolean;\\\\n            /**\\\\n             * Determines whether Command Line API should be available during the evaluation.\\\\n             */\\\\n            includeCommandLineAPI?: boolean;\\\\n            /**\\\\n             * Whether the result is expected to be a JSON object which should be sent by value.\\\\n             */\\\\n            returnByValue?: boolean;\\\\n            /**\\\\n             * Whether preview should be generated for the result.\\\\n             */\\\\n            generatePreview?: boolean;\\\\n            /**\\\\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\\\\n             */\\\\n            awaitPromise?: boolean;\\\\n        }\\\\n\\\\n        interface QueryObjectsParameterType {\\\\n            /**\\\\n             * Identifier of the prototype to return objects for.\\\\n             */\\\\n            prototypeObjectId: RemoteObjectId;\\\\n        }\\\\n\\\\n        interface GlobalLexicalScopeNamesParameterType {\\\\n            /**\\\\n             * Specifies in which execution context to lookup global scope variables.\\\\n             */\\\\n            executionContextId?: ExecutionContextId;\\\\n        }\\\\n\\\\n        interface EvaluateReturnType {\\\\n            /**\\\\n             * Evaluation result.\\\\n             */\\\\n            result: RemoteObject;\\\\n            /**\\\\n             * Exception details.\\\\n             */\\\\n            exceptionDetails?: ExceptionDetails;\\\\n        }\\\\n\\\\n        interface AwaitPromiseReturnType {\\\\n            /**\\\\n             * Promise result. Will contain rejected value if promise was rejected.\\\\n             */\\\\n            result: RemoteObject;\\\\n            /**\\\\n             * Exception details if stack strace is available.\\\\n             */\\\\n            exceptionDetails?: ExceptionDetails;\\\\n        }\\\\n\\\\n        interface CallFunctionOnReturnType {\\\\n            /**\\\\n             * Call result.\\\\n             */\\\\n            result: RemoteObject;\\\\n            /**\\\\n             * Exception details.\\\\n             */\\\\n            exceptionDetails?: ExceptionDetails;\\\\n        }\\\\n\\\\n        interface GetPropertiesReturnType {\\\\n            /**\\\\n             * Object properties.\\\\n             */\\\\n            result: PropertyDescriptor[];\\\\n            /**\\\\n             * Internal object properties (only of the element itself).\\\\n             */\\\\n            internalProperties?: InternalPropertyDescriptor[];\\\\n            /**\\\\n             * Exception details.\\\\n             */\\\\n            exceptionDetails?: ExceptionDetails;\\\\n        }\\\\n\\\\n        interface CompileScriptReturnType {\\\\n            /**\\\\n             * Id of the script.\\\\n             */\\\\n            scriptId?: ScriptId;\\\\n            /**\\\\n             * Exception details.\\\\n             */\\\\n            exceptionDetails?: ExceptionDetails;\\\\n        }\\\\n\\\\n        interface RunScriptReturnType {\\\\n            /**\\\\n             * Run result.\\\\n             */\\\\n            result: RemoteObject;\\\\n            /**\\\\n             * Exception details.\\\\n             */\\\\n            exceptionDetails?: ExceptionDetails;\\\\n        }\\\\n\\\\n        interface QueryObjectsReturnType {\\\\n            /**\\\\n             * Array with objects.\\\\n             */\\\\n            objects: RemoteObject;\\\\n        }\\\\n\\\\n        interface GlobalLexicalScopeNamesReturnType {\\\\n            names: string[];\\\\n        }\\\\n\\\\n        interface ExecutionContextCreatedEventDataType {\\\\n            /**\\\\n             * A newly created execution context.\\\\n             */\\\\n            context: ExecutionContextDescription;\\\\n        }\\\\n\\\\n        interface ExecutionContextDestroyedEventDataType {\\\\n            /**\\\\n             * Id of the destroyed context\\\\n             */\\\\n            executionContextId: ExecutionContextId;\\\\n        }\\\\n\\\\n        interface ExceptionThrownEventDataType {\\\\n            /**\\\\n             * Timestamp of the exception.\\\\n             */\\\\n            timestamp: Timestamp;\\\\n            exceptionDetails: ExceptionDetails;\\\\n        }\\\\n\\\\n        interface ExceptionRevokedEventDataType {\\\\n            /**\\\\n             * Reason describing why exception was revoked.\\\\n             */\\\\n            reason: string;\\\\n            /**\\\\n             * The id of revoked exception, as reported in <code>exceptionThrown</code>.\\\\n             */\\\\n            exceptionId: number;\\\\n        }\\\\n\\\\n        interface ConsoleAPICalledEventDataType {\\\\n            /**\\\\n             * Type of the call.\\\\n             */\\\\n            type: string;\\\\n            /**\\\\n             * Call arguments.\\\\n             */\\\\n            args: RemoteObject[];\\\\n            /**\\\\n             * Identifier of the context where the call was made.\\\\n             */\\\\n            executionContextId: ExecutionContextId;\\\\n            /**\\\\n             * Call timestamp.\\\\n             */\\\\n            timestamp: Timestamp;\\\\n            /**\\\\n             * Stack trace captured when the call was made.\\\\n             */\\\\n            stackTrace?: StackTrace;\\\\n            /**\\\\n             * Console context descriptor for calls on non-default console context (not console.*): 'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call on named context.\\\\n             * @experimental\\\\n             */\\\\n            context?: string;\\\\n        }\\\\n\\\\n        interface InspectRequestedEventDataType {\\\\n            object: RemoteObject;\\\\n            hints: {};\\\\n        }\\\\n    }\\\\n\\\\n    namespace Debugger {\\\\n        /**\\\\n         * Breakpoint identifier.\\\\n         */\\\\n        type BreakpointId = string;\\\\n\\\\n        /**\\\\n         * Call frame identifier.\\\\n         */\\\\n        type CallFrameId = string;\\\\n\\\\n        /**\\\\n         * Location in the source code.\\\\n         */\\\\n        interface Location {\\\\n            /**\\\\n             * Script identifier as reported in the <code>Debugger.scriptParsed</code>.\\\\n             */\\\\n            scriptId: Runtime.ScriptId;\\\\n            /**\\\\n             * Line number in the script (0-based).\\\\n             */\\\\n            lineNumber: number;\\\\n            /**\\\\n             * Column number in the script (0-based).\\\\n             */\\\\n            columnNumber?: number;\\\\n        }\\\\n\\\\n        /**\\\\n         * Location in the source code.\\\\n         * @experimental\\\\n         */\\\\n        interface ScriptPosition {\\\\n            lineNumber: number;\\\\n            columnNumber: number;\\\\n        }\\\\n\\\\n        /**\\\\n         * JavaScript call frame. Array of call frames form the call stack.\\\\n         */\\\\n        interface CallFrame {\\\\n            /**\\\\n             * Call frame identifier. This identifier is only valid while the virtual machine is paused.\\\\n             */\\\\n            callFrameId: CallFrameId;\\\\n            /**\\\\n             * Name of the JavaScript function called on this call frame.\\\\n             */\\\\n            functionName: string;\\\\n            /**\\\\n             * Location in the source code.\\\\n             */\\\\n            functionLocation?: Location;\\\\n            /**\\\\n             * Location in the source code.\\\\n             */\\\\n            location: Location;\\\\n            /**\\\\n             * JavaScript script name or url.\\\\n             */\\\\n            url: string;\\\\n            /**\\\\n             * Scope chain for this call frame.\\\\n             */\\\\n            scopeChain: Scope[];\\\\n            /**\\\\n             * <code>this</code> object for this call frame.\\\\n             */\\\\n            this: Runtime.RemoteObject;\\\\n            /**\\\\n             * The value being returned, if the function is at return point.\\\\n             */\\\\n            returnValue?: Runtime.RemoteObject;\\\\n        }\\\\n\\\\n        /**\\\\n         * Scope description.\\\\n         */\\\\n        interface Scope {\\\\n            /**\\\\n             * Scope type.\\\\n             */\\\\n            type: string;\\\\n            /**\\\\n             * Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties.\\\\n             */\\\\n            object: Runtime.RemoteObject;\\\\n            name?: string;\\\\n            /**\\\\n             * Location in the source code where scope starts\\\\n             */\\\\n            startLocation?: Location;\\\\n            /**\\\\n             * Location in the source code where scope ends\\\\n             */\\\\n            endLocation?: Location;\\\\n        }\\\\n\\\\n        /**\\\\n         * Search match for resource.\\\\n         */\\\\n        interface SearchMatch {\\\\n            /**\\\\n             * Line number in resource content.\\\\n             */\\\\n            lineNumber: number;\\\\n            /**\\\\n             * Line with match content.\\\\n             */\\\\n            lineContent: string;\\\\n        }\\\\n\\\\n        interface BreakLocation {\\\\n            /**\\\\n             * Script identifier as reported in the <code>Debugger.scriptParsed</code>.\\\\n             */\\\\n            scriptId: Runtime.ScriptId;\\\\n            /**\\\\n             * Line number in the script (0-based).\\\\n             */\\\\n            lineNumber: number;\\\\n            /**\\\\n             * Column number in the script (0-based).\\\\n             */\\\\n            columnNumber?: number;\\\\n            type?: string;\\\\n        }\\\\n\\\\n        interface SetBreakpointsActiveParameterType {\\\\n            /**\\\\n             * New value for breakpoints active state.\\\\n             */\\\\n            active: boolean;\\\\n        }\\\\n\\\\n        interface SetSkipAllPausesParameterType {\\\\n            /**\\\\n             * New value for skip pauses state.\\\\n             */\\\\n            skip: boolean;\\\\n        }\\\\n\\\\n        interface SetBreakpointByUrlParameterType {\\\\n            /**\\\\n             * Line number to set breakpoint at.\\\\n             */\\\\n            lineNumber: number;\\\\n            /**\\\\n             * URL of the resources to set breakpoint on.\\\\n             */\\\\n            url?: string;\\\\n            /**\\\\n             * Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified.\\\\n             */\\\\n            urlRegex?: string;\\\\n            /**\\\\n             * Script hash of the resources to set breakpoint on.\\\\n             */\\\\n            scriptHash?: string;\\\\n            /**\\\\n             * Offset in the line to set breakpoint at.\\\\n             */\\\\n            columnNumber?: number;\\\\n            /**\\\\n             * Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.\\\\n             */\\\\n            condition?: string;\\\\n        }\\\\n\\\\n        interface SetBreakpointParameterType {\\\\n            /**\\\\n             * Location to set breakpoint in.\\\\n             */\\\\n            location: Location;\\\\n            /**\\\\n             * Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.\\\\n             */\\\\n            condition?: string;\\\\n        }\\\\n\\\\n        interface RemoveBreakpointParameterType {\\\\n            breakpointId: BreakpointId;\\\\n        }\\\\n\\\\n        interface GetPossibleBreakpointsParameterType {\\\\n            /**\\\\n             * Start of range to search possible breakpoint locations in.\\\\n             */\\\\n            start: Location;\\\\n            /**\\\\n             * End of range to search possible breakpoint locations in (excluding). When not specified, end of scripts is used as end of range.\\\\n             */\\\\n            end?: Location;\\\\n            /**\\\\n             * Only consider locations which are in the same (non-nested) function as start.\\\\n             */\\\\n            restrictToFunction?: boolean;\\\\n        }\\\\n\\\\n        interface ContinueToLocationParameterType {\\\\n            /**\\\\n             * Location to continue to.\\\\n             */\\\\n            location: Location;\\\\n            targetCallFrames?: string;\\\\n        }\\\\n\\\\n        interface PauseOnAsyncCallParameterType {\\\\n            /**\\\\n             * Debugger will pause when async call with given stack trace is started.\\\\n             */\\\\n            parentStackTraceId: Runtime.StackTraceId;\\\\n        }\\\\n\\\\n        interface StepIntoParameterType {\\\\n            /**\\\\n             * Debugger will issue additional Debugger.paused notification if any async task is scheduled before next pause.\\\\n             * @experimental\\\\n             */\\\\n            breakOnAsyncCall?: boolean;\\\\n        }\\\\n\\\\n        interface GetStackTraceParameterType {\\\\n            stackTraceId: Runtime.StackTraceId;\\\\n        }\\\\n\\\\n        interface SearchInContentParameterType {\\\\n            /**\\\\n             * Id of the script to search in.\\\\n             */\\\\n            scriptId: Runtime.ScriptId;\\\\n            /**\\\\n             * String to search for.\\\\n             */\\\\n            query: string;\\\\n            /**\\\\n             * If true, search is case sensitive.\\\\n             */\\\\n            caseSensitive?: boolean;\\\\n            /**\\\\n             * If true, treats string parameter as regex.\\\\n             */\\\\n            isRegex?: boolean;\\\\n        }\\\\n\\\\n        interface SetScriptSourceParameterType {\\\\n            /**\\\\n             * Id of the script to edit.\\\\n             */\\\\n            scriptId: Runtime.ScriptId;\\\\n            /**\\\\n             * New content of the script.\\\\n             */\\\\n            scriptSource: string;\\\\n            /**\\\\n             *  If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.\\\\n             */\\\\n            dryRun?: boolean;\\\\n        }\\\\n\\\\n        interface RestartFrameParameterType {\\\\n            /**\\\\n             * Call frame identifier to evaluate on.\\\\n             */\\\\n            callFrameId: CallFrameId;\\\\n        }\\\\n\\\\n        interface GetScriptSourceParameterType {\\\\n            /**\\\\n             * Id of the script to get source for.\\\\n             */\\\\n            scriptId: Runtime.ScriptId;\\\\n        }\\\\n\\\\n        interface SetPauseOnExceptionsParameterType {\\\\n            /**\\\\n             * Pause on exceptions mode.\\\\n             */\\\\n            state: string;\\\\n        }\\\\n\\\\n        interface EvaluateOnCallFrameParameterType {\\\\n            /**\\\\n             * Call frame identifier to evaluate on.\\\\n             */\\\\n            callFrameId: CallFrameId;\\\\n            /**\\\\n             * Expression to evaluate.\\\\n             */\\\\n            expression: string;\\\\n            /**\\\\n             * String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>).\\\\n             */\\\\n            objectGroup?: string;\\\\n            /**\\\\n             * Specifies whether command line API should be available to the evaluated expression, defaults to false.\\\\n             */\\\\n            includeCommandLineAPI?: boolean;\\\\n            /**\\\\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\\\\n             */\\\\n            silent?: boolean;\\\\n            /**\\\\n             * Whether the result is expected to be a JSON object that should be sent by value.\\\\n             */\\\\n            returnByValue?: boolean;\\\\n            /**\\\\n             * Whether preview should be generated for the result.\\\\n             * @experimental\\\\n             */\\\\n            generatePreview?: boolean;\\\\n            /**\\\\n             * Whether to throw an exception if side effect cannot be ruled out during evaluation.\\\\n             */\\\\n            throwOnSideEffect?: boolean;\\\\n        }\\\\n\\\\n        interface SetVariableValueParameterType {\\\\n            /**\\\\n             * 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.\\\\n             */\\\\n            scopeNumber: number;\\\\n            /**\\\\n             * Variable name.\\\\n             */\\\\n            variableName: string;\\\\n            /**\\\\n             * New variable value.\\\\n             */\\\\n            newValue: Runtime.CallArgument;\\\\n            /**\\\\n             * Id of callframe that holds variable.\\\\n             */\\\\n            callFrameId: CallFrameId;\\\\n        }\\\\n\\\\n        interface SetReturnValueParameterType {\\\\n            /**\\\\n             * New return value.\\\\n             */\\\\n            newValue: Runtime.CallArgument;\\\\n        }\\\\n\\\\n        interface SetAsyncCallStackDepthParameterType {\\\\n            /**\\\\n             * Maximum depth of async call stacks. Setting to <code>0</code> will effectively disable collecting async call stacks (default).\\\\n             */\\\\n            maxDepth: number;\\\\n        }\\\\n\\\\n        interface SetBlackboxPatternsParameterType {\\\\n            /**\\\\n             * Array of regexps that will be used to check script url for blackbox state.\\\\n             */\\\\n            patterns: string[];\\\\n        }\\\\n\\\\n        interface SetBlackboxedRangesParameterType {\\\\n            /**\\\\n             * Id of the script.\\\\n             */\\\\n            scriptId: Runtime.ScriptId;\\\\n            positions: ScriptPosition[];\\\\n        }\\\\n\\\\n        interface EnableReturnType {\\\\n            /**\\\\n             * Unique identifier of the debugger.\\\\n             * @experimental\\\\n             */\\\\n            debuggerId: Runtime.UniqueDebuggerId;\\\\n        }\\\\n\\\\n        interface SetBreakpointByUrlReturnType {\\\\n            /**\\\\n             * Id of the created breakpoint for further reference.\\\\n             */\\\\n            breakpointId: BreakpointId;\\\\n            /**\\\\n             * List of the locations this breakpoint resolved into upon addition.\\\\n             */\\\\n            locations: Location[];\\\\n        }\\\\n\\\\n        interface SetBreakpointReturnType {\\\\n            /**\\\\n             * Id of the created breakpoint for further reference.\\\\n             */\\\\n            breakpointId: BreakpointId;\\\\n            /**\\\\n             * Location this breakpoint resolved into.\\\\n             */\\\\n            actualLocation: Location;\\\\n        }\\\\n\\\\n        interface GetPossibleBreakpointsReturnType {\\\\n            /**\\\\n             * List of the possible breakpoint locations.\\\\n             */\\\\n            locations: BreakLocation[];\\\\n        }\\\\n\\\\n        interface GetStackTraceReturnType {\\\\n            stackTrace: Runtime.StackTrace;\\\\n        }\\\\n\\\\n        interface SearchInContentReturnType {\\\\n            /**\\\\n             * List of search matches.\\\\n             */\\\\n            result: SearchMatch[];\\\\n        }\\\\n\\\\n        interface SetScriptSourceReturnType {\\\\n            /**\\\\n             * New stack trace in case editing has happened while VM was stopped.\\\\n             */\\\\n            callFrames?: CallFrame[];\\\\n            /**\\\\n             * Whether current call stack  was modified after applying the changes.\\\\n             */\\\\n            stackChanged?: boolean;\\\\n            /**\\\\n             * Async stack trace, if any.\\\\n             */\\\\n            asyncStackTrace?: Runtime.StackTrace;\\\\n            /**\\\\n             * Async stack trace, if any.\\\\n             * @experimental\\\\n             */\\\\n            asyncStackTraceId?: Runtime.StackTraceId;\\\\n            /**\\\\n             * Exception details if any.\\\\n             */\\\\n            exceptionDetails?: Runtime.ExceptionDetails;\\\\n        }\\\\n\\\\n        interface RestartFrameReturnType {\\\\n            /**\\\\n             * New stack trace.\\\\n             */\\\\n            callFrames: CallFrame[];\\\\n            /**\\\\n             * Async stack trace, if any.\\\\n             */\\\\n            asyncStackTrace?: Runtime.StackTrace;\\\\n            /**\\\\n             * Async stack trace, if any.\\\\n             * @experimental\\\\n             */\\\\n            asyncStackTraceId?: Runtime.StackTraceId;\\\\n        }\\\\n\\\\n        interface GetScriptSourceReturnType {\\\\n            /**\\\\n             * Script source.\\\\n             */\\\\n            scriptSource: string;\\\\n        }\\\\n\\\\n        interface EvaluateOnCallFrameReturnType {\\\\n            /**\\\\n             * Object wrapper for the evaluation result.\\\\n             */\\\\n            result: Runtime.RemoteObject;\\\\n            /**\\\\n             * Exception details.\\\\n             */\\\\n            exceptionDetails?: Runtime.ExceptionDetails;\\\\n        }\\\\n\\\\n        interface ScriptParsedEventDataType {\\\\n            /**\\\\n             * Identifier of the script parsed.\\\\n             */\\\\n            scriptId: Runtime.ScriptId;\\\\n            /**\\\\n             * URL or name of the script parsed (if any).\\\\n             */\\\\n            url: string;\\\\n            /**\\\\n             * Line offset of the script within the resource with given URL (for script tags).\\\\n             */\\\\n            startLine: number;\\\\n            /**\\\\n             * Column offset of the script within the resource with given URL.\\\\n             */\\\\n            startColumn: number;\\\\n            /**\\\\n             * Last line of the script.\\\\n             */\\\\n            endLine: number;\\\\n            /**\\\\n             * Length of the last line of the script.\\\\n             */\\\\n            endColumn: number;\\\\n            /**\\\\n             * Specifies script creation context.\\\\n             */\\\\n            executionContextId: Runtime.ExecutionContextId;\\\\n            /**\\\\n             * Content hash of the script.\\\\n             */\\\\n            hash: string;\\\\n            /**\\\\n             * Embedder-specific auxiliary data.\\\\n             */\\\\n            executionContextAuxData?: {};\\\\n            /**\\\\n             * True, if this script is generated as a result of the live edit operation.\\\\n             * @experimental\\\\n             */\\\\n            isLiveEdit?: boolean;\\\\n            /**\\\\n             * URL of source map associated with script (if any).\\\\n             */\\\\n            sourceMapURL?: string;\\\\n            /**\\\\n             * True, if this script has sourceURL.\\\\n             */\\\\n            hasSourceURL?: boolean;\\\\n            /**\\\\n             * True, if this script is ES6 module.\\\\n             */\\\\n            isModule?: boolean;\\\\n            /**\\\\n             * This script length.\\\\n             */\\\\n            length?: number;\\\\n            /**\\\\n             * JavaScript top stack frame of where the script parsed event was triggered if available.\\\\n             * @experimental\\\\n             */\\\\n            stackTrace?: Runtime.StackTrace;\\\\n        }\\\\n\\\\n        interface ScriptFailedToParseEventDataType {\\\\n            /**\\\\n             * Identifier of the script parsed.\\\\n             */\\\\n            scriptId: Runtime.ScriptId;\\\\n            /**\\\\n             * URL or name of the script parsed (if any).\\\\n             */\\\\n            url: string;\\\\n            /**\\\\n             * Line offset of the script within the resource with given URL (for script tags).\\\\n             */\\\\n            startLine: number;\\\\n            /**\\\\n             * Column offset of the script within the resource with given URL.\\\\n             */\\\\n            startColumn: number;\\\\n            /**\\\\n             * Last line of the script.\\\\n             */\\\\n            endLine: number;\\\\n            /**\\\\n             * Length of the last line of the script.\\\\n             */\\\\n            endColumn: number;\\\\n            /**\\\\n             * Specifies script creation context.\\\\n             */\\\\n            executionContextId: Runtime.ExecutionContextId;\\\\n            /**\\\\n             * Content hash of the script.\\\\n             */\\\\n            hash: string;\\\\n            /**\\\\n             * Embedder-specific auxiliary data.\\\\n             */\\\\n            executionContextAuxData?: {};\\\\n            /**\\\\n             * URL of source map associated with script (if any).\\\\n             */\\\\n            sourceMapURL?: string;\\\\n            /**\\\\n             * True, if this script has sourceURL.\\\\n             */\\\\n            hasSourceURL?: boolean;\\\\n            /**\\\\n             * True, if this script is ES6 module.\\\\n             */\\\\n            isModule?: boolean;\\\\n            /**\\\\n             * This script length.\\\\n             */\\\\n            length?: number;\\\\n            /**\\\\n             * JavaScript top stack frame of where the script parsed event was triggered if available.\\\\n             * @experimental\\\\n             */\\\\n            stackTrace?: Runtime.StackTrace;\\\\n        }\\\\n\\\\n        interface BreakpointResolvedEventDataType {\\\\n            /**\\\\n             * Breakpoint unique identifier.\\\\n             */\\\\n            breakpointId: BreakpointId;\\\\n            /**\\\\n             * Actual breakpoint location.\\\\n             */\\\\n            location: Location;\\\\n        }\\\\n\\\\n        interface PausedEventDataType {\\\\n            /**\\\\n             * Call stack the virtual machine stopped on.\\\\n             */\\\\n            callFrames: CallFrame[];\\\\n            /**\\\\n             * Pause reason.\\\\n             */\\\\n            reason: string;\\\\n            /**\\\\n             * Object containing break-specific auxiliary properties.\\\\n             */\\\\n            data?: {};\\\\n            /**\\\\n             * Hit breakpoints IDs\\\\n             */\\\\n            hitBreakpoints?: string[];\\\\n            /**\\\\n             * Async stack trace, if any.\\\\n             */\\\\n            asyncStackTrace?: Runtime.StackTrace;\\\\n            /**\\\\n             * Async stack trace, if any.\\\\n             * @experimental\\\\n             */\\\\n            asyncStackTraceId?: Runtime.StackTraceId;\\\\n            /**\\\\n             * Just scheduled async call will have this stack trace as parent stack during async execution. This field is available only after <code>Debugger.stepInto</code> call with <code>breakOnAsynCall</code> flag.\\\\n             * @experimental\\\\n             */\\\\n            asyncCallStackTraceId?: Runtime.StackTraceId;\\\\n        }\\\\n    }\\\\n\\\\n    namespace Console {\\\\n        /**\\\\n         * Console message.\\\\n         */\\\\n        interface ConsoleMessage {\\\\n            /**\\\\n             * Message source.\\\\n             */\\\\n            source: string;\\\\n            /**\\\\n             * Message severity.\\\\n             */\\\\n            level: string;\\\\n            /**\\\\n             * Message text.\\\\n             */\\\\n            text: string;\\\\n            /**\\\\n             * URL of the message origin.\\\\n             */\\\\n            url?: string;\\\\n            /**\\\\n             * Line number in the resource that generated this message (1-based).\\\\n             */\\\\n            line?: number;\\\\n            /**\\\\n             * Column number in the resource that generated this message (1-based).\\\\n             */\\\\n            column?: number;\\\\n        }\\\\n\\\\n        interface MessageAddedEventDataType {\\\\n            /**\\\\n             * Console message that has been added.\\\\n             */\\\\n            message: ConsoleMessage;\\\\n        }\\\\n    }\\\\n\\\\n    namespace Profiler {\\\\n        /**\\\\n         * Profile node. Holds callsite information, execution statistics and child nodes.\\\\n         */\\\\n        interface ProfileNode {\\\\n            /**\\\\n             * Unique id of the node.\\\\n             */\\\\n            id: number;\\\\n            /**\\\\n             * Function location.\\\\n             */\\\\n            callFrame: Runtime.CallFrame;\\\\n            /**\\\\n             * Number of samples where this node was on top of the call stack.\\\\n             */\\\\n            hitCount?: number;\\\\n            /**\\\\n             * Child node ids.\\\\n             */\\\\n            children?: number[];\\\\n            /**\\\\n             * The reason of being not optimized. The function may be deoptimized or marked as don't optimize.\\\\n             */\\\\n            deoptReason?: string;\\\\n            /**\\\\n             * An array of source position ticks.\\\\n             */\\\\n            positionTicks?: PositionTickInfo[];\\\\n        }\\\\n\\\\n        /**\\\\n         * Profile.\\\\n         */\\\\n        interface Profile {\\\\n            /**\\\\n             * The list of profile nodes. First item is the root node.\\\\n             */\\\\n            nodes: ProfileNode[];\\\\n            /**\\\\n             * Profiling start timestamp in microseconds.\\\\n             */\\\\n            startTime: number;\\\\n            /**\\\\n             * Profiling end timestamp in microseconds.\\\\n             */\\\\n            endTime: number;\\\\n            /**\\\\n             * Ids of samples top nodes.\\\\n             */\\\\n            samples?: number[];\\\\n            /**\\\\n             * Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime.\\\\n             */\\\\n            timeDeltas?: number[];\\\\n        }\\\\n\\\\n        /**\\\\n         * Specifies a number of samples attributed to a certain source position.\\\\n         */\\\\n        interface PositionTickInfo {\\\\n            /**\\\\n             * Source line number (1-based).\\\\n             */\\\\n            line: number;\\\\n            /**\\\\n             * Number of samples attributed to the source line.\\\\n             */\\\\n            ticks: number;\\\\n        }\\\\n\\\\n        /**\\\\n         * Coverage data for a source range.\\\\n         */\\\\n        interface CoverageRange {\\\\n            /**\\\\n             * JavaScript script source offset for the range start.\\\\n             */\\\\n            startOffset: number;\\\\n            /**\\\\n             * JavaScript script source offset for the range end.\\\\n             */\\\\n            endOffset: number;\\\\n            /**\\\\n             * Collected execution count of the source range.\\\\n             */\\\\n            count: number;\\\\n        }\\\\n\\\\n        /**\\\\n         * Coverage data for a JavaScript function.\\\\n         */\\\\n        interface FunctionCoverage {\\\\n            /**\\\\n             * JavaScript function name.\\\\n             */\\\\n            functionName: string;\\\\n            /**\\\\n             * Source ranges inside the function with coverage data.\\\\n             */\\\\n            ranges: CoverageRange[];\\\\n            /**\\\\n             * Whether coverage data for this function has block granularity.\\\\n             */\\\\n            isBlockCoverage: boolean;\\\\n        }\\\\n\\\\n        /**\\\\n         * Coverage data for a JavaScript script.\\\\n         */\\\\n        interface ScriptCoverage {\\\\n            /**\\\\n             * JavaScript script id.\\\\n             */\\\\n            scriptId: Runtime.ScriptId;\\\\n            /**\\\\n             * JavaScript script name or url.\\\\n             */\\\\n            url: string;\\\\n            /**\\\\n             * Functions contained in the script that has coverage data.\\\\n             */\\\\n            functions: FunctionCoverage[];\\\\n        }\\\\n\\\\n        /**\\\\n         * Describes a type collected during runtime.\\\\n         * @experimental\\\\n         */\\\\n        interface TypeObject {\\\\n            /**\\\\n             * Name of a type collected with type profiling.\\\\n             */\\\\n            name: string;\\\\n        }\\\\n\\\\n        /**\\\\n         * Source offset and types for a parameter or return value.\\\\n         * @experimental\\\\n         */\\\\n        interface TypeProfileEntry {\\\\n            /**\\\\n             * Source offset of the parameter or end of function for return values.\\\\n             */\\\\n            offset: number;\\\\n            /**\\\\n             * The types for this parameter or return value.\\\\n             */\\\\n            types: TypeObject[];\\\\n        }\\\\n\\\\n        /**\\\\n         * Type profile data collected during runtime for a JavaScript script.\\\\n         * @experimental\\\\n         */\\\\n        interface ScriptTypeProfile {\\\\n            /**\\\\n             * JavaScript script id.\\\\n             */\\\\n            scriptId: Runtime.ScriptId;\\\\n            /**\\\\n             * JavaScript script name or url.\\\\n             */\\\\n            url: string;\\\\n            /**\\\\n             * Type profile entries for parameters and return values of the functions in the script.\\\\n             */\\\\n            entries: TypeProfileEntry[];\\\\n        }\\\\n\\\\n        interface SetSamplingIntervalParameterType {\\\\n            /**\\\\n             * New sampling interval in microseconds.\\\\n             */\\\\n            interval: number;\\\\n        }\\\\n\\\\n        interface StartPreciseCoverageParameterType {\\\\n            /**\\\\n             * Collect accurate call counts beyond simple 'covered' or 'not covered'.\\\\n             */\\\\n            callCount?: boolean;\\\\n            /**\\\\n             * Collect block-based coverage.\\\\n             */\\\\n            detailed?: boolean;\\\\n        }\\\\n\\\\n        interface StopReturnType {\\\\n            /**\\\\n             * Recorded profile.\\\\n             */\\\\n            profile: Profile;\\\\n        }\\\\n\\\\n        interface TakePreciseCoverageReturnType {\\\\n            /**\\\\n             * Coverage data for the current isolate.\\\\n             */\\\\n            result: ScriptCoverage[];\\\\n        }\\\\n\\\\n        interface GetBestEffortCoverageReturnType {\\\\n            /**\\\\n             * Coverage data for the current isolate.\\\\n             */\\\\n            result: ScriptCoverage[];\\\\n        }\\\\n\\\\n        interface TakeTypeProfileReturnType {\\\\n            /**\\\\n             * Type profile for all scripts since startTypeProfile() was turned on.\\\\n             */\\\\n            result: ScriptTypeProfile[];\\\\n        }\\\\n\\\\n        interface ConsoleProfileStartedEventDataType {\\\\n            id: string;\\\\n            /**\\\\n             * Location of console.profile().\\\\n             */\\\\n            location: Debugger.Location;\\\\n            /**\\\\n             * Profile title passed as an argument to console.profile().\\\\n             */\\\\n            title?: string;\\\\n        }\\\\n\\\\n        interface ConsoleProfileFinishedEventDataType {\\\\n            id: string;\\\\n            /**\\\\n             * Location of console.profileEnd().\\\\n             */\\\\n            location: Debugger.Location;\\\\n            profile: Profile;\\\\n            /**\\\\n             * Profile title passed as an argument to console.profile().\\\\n             */\\\\n            title?: string;\\\\n        }\\\\n    }\\\\n\\\\n    namespace HeapProfiler {\\\\n        /**\\\\n         * Heap snapshot object id.\\\\n         */\\\\n        type HeapSnapshotObjectId = string;\\\\n\\\\n        /**\\\\n         * Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.\\\\n         */\\\\n        interface SamplingHeapProfileNode {\\\\n            /**\\\\n             * Function location.\\\\n             */\\\\n            callFrame: Runtime.CallFrame;\\\\n            /**\\\\n             * Allocations size in bytes for the node excluding children.\\\\n             */\\\\n            selfSize: number;\\\\n            /**\\\\n             * Child nodes.\\\\n             */\\\\n            children: SamplingHeapProfileNode[];\\\\n        }\\\\n\\\\n        /**\\\\n         * Profile.\\\\n         */\\\\n        interface SamplingHeapProfile {\\\\n            head: SamplingHeapProfileNode;\\\\n        }\\\\n\\\\n        interface StartTrackingHeapObjectsParameterType {\\\\n            trackAllocations?: boolean;\\\\n        }\\\\n\\\\n        interface StopTrackingHeapObjectsParameterType {\\\\n            /**\\\\n             * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.\\\\n             */\\\\n            reportProgress?: boolean;\\\\n        }\\\\n\\\\n        interface TakeHeapSnapshotParameterType {\\\\n            /**\\\\n             * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.\\\\n             */\\\\n            reportProgress?: boolean;\\\\n        }\\\\n\\\\n        interface GetObjectByHeapObjectIdParameterType {\\\\n            objectId: HeapSnapshotObjectId;\\\\n            /**\\\\n             * Symbolic group name that can be used to release multiple objects.\\\\n             */\\\\n            objectGroup?: string;\\\\n        }\\\\n\\\\n        interface AddInspectedHeapObjectParameterType {\\\\n            /**\\\\n             * Heap snapshot object id to be accessible by means of $x command line API.\\\\n             */\\\\n            heapObjectId: HeapSnapshotObjectId;\\\\n        }\\\\n\\\\n        interface GetHeapObjectIdParameterType {\\\\n            /**\\\\n             * Identifier of the object to get heap object id for.\\\\n             */\\\\n            objectId: Runtime.RemoteObjectId;\\\\n        }\\\\n\\\\n        interface StartSamplingParameterType {\\\\n            /**\\\\n             * Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.\\\\n             */\\\\n            samplingInterval?: number;\\\\n        }\\\\n\\\\n        interface GetObjectByHeapObjectIdReturnType {\\\\n            /**\\\\n             * Evaluation result.\\\\n             */\\\\n            result: Runtime.RemoteObject;\\\\n        }\\\\n\\\\n        interface GetHeapObjectIdReturnType {\\\\n            /**\\\\n             * Id of the heap snapshot object corresponding to the passed remote object id.\\\\n             */\\\\n            heapSnapshotObjectId: HeapSnapshotObjectId;\\\\n        }\\\\n\\\\n        interface StopSamplingReturnType {\\\\n            /**\\\\n             * Recorded sampling heap profile.\\\\n             */\\\\n            profile: SamplingHeapProfile;\\\\n        }\\\\n\\\\n        interface GetSamplingProfileReturnType {\\\\n            /**\\\\n             * Return the sampling profile being collected.\\\\n             */\\\\n            profile: SamplingHeapProfile;\\\\n        }\\\\n\\\\n        interface AddHeapSnapshotChunkEventDataType {\\\\n            chunk: string;\\\\n        }\\\\n\\\\n        interface ReportHeapSnapshotProgressEventDataType {\\\\n            done: number;\\\\n            total: number;\\\\n            finished?: boolean;\\\\n        }\\\\n\\\\n        interface LastSeenObjectIdEventDataType {\\\\n            lastSeenObjectId: number;\\\\n            timestamp: number;\\\\n        }\\\\n\\\\n        interface HeapStatsUpdateEventDataType {\\\\n            /**\\\\n             * An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment.\\\\n             */\\\\n            statsUpdate: number[];\\\\n        }\\\\n    }\\\\n\\\\n    namespace NodeTracing {\\\\n        interface TraceConfig {\\\\n            /**\\\\n             * Controls how the trace buffer stores data.\\\\n             */\\\\n            recordMode?: string;\\\\n            /**\\\\n             * Included category filters.\\\\n             */\\\\n            includedCategories: string[];\\\\n        }\\\\n\\\\n        interface StartParameterType {\\\\n            traceConfig: TraceConfig;\\\\n        }\\\\n\\\\n        interface GetCategoriesReturnType {\\\\n            /**\\\\n             * A list of supported tracing categories.\\\\n             */\\\\n            categories: string[];\\\\n        }\\\\n\\\\n        interface DataCollectedEventDataType {\\\\n            value: Array<{}>;\\\\n        }\\\\n    }\\\\n\\\\n    namespace NodeWorker {\\\\n        type WorkerID = string;\\\\n\\\\n        /**\\\\n         * Unique identifier of attached debugging session.\\\\n         */\\\\n        type SessionID = string;\\\\n\\\\n        interface WorkerInfo {\\\\n            workerId: WorkerID;\\\\n            type: string;\\\\n            title: string;\\\\n            url: string;\\\\n        }\\\\n\\\\n        interface SendMessageToWorkerParameterType {\\\\n            message: string;\\\\n            /**\\\\n             * Identifier of the session.\\\\n             */\\\\n            sessionId: SessionID;\\\\n        }\\\\n\\\\n        interface EnableParameterType {\\\\n            /**\\\\n             * Whether to new workers should be paused until the frontend sends `Runtime.runIfWaitingForDebugger`\\\\n             * message to run them.\\\\n             */\\\\n            waitForDebuggerOnStart: boolean;\\\\n        }\\\\n\\\\n        interface DetachParameterType {\\\\n            sessionId: SessionID;\\\\n        }\\\\n\\\\n        interface AttachedToWorkerEventDataType {\\\\n            /**\\\\n             * Identifier assigned to the session used to send/receive messages.\\\\n             */\\\\n            sessionId: SessionID;\\\\n            workerInfo: WorkerInfo;\\\\n            waitingForDebugger: boolean;\\\\n        }\\\\n\\\\n        interface DetachedFromWorkerEventDataType {\\\\n            /**\\\\n             * Detached session identifier.\\\\n             */\\\\n            sessionId: SessionID;\\\\n        }\\\\n\\\\n        interface ReceivedMessageFromWorkerEventDataType {\\\\n            /**\\\\n             * Identifier of a session which sends a message.\\\\n             */\\\\n            sessionId: SessionID;\\\\n            message: string;\\\\n        }\\\\n    }\\\\n\\\\n    namespace NodeRuntime {\\\\n        interface NotifyWhenWaitingForDisconnectParameterType {\\\\n            enabled: boolean;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * The inspector.Session is used for dispatching messages to the V8 inspector back-end and receiving message responses and notifications.\\\\n     */\\\\n    class Session extends EventEmitter {\\\\n        /**\\\\n         * Create a new instance of the inspector.Session class.\\\\n         * The inspector session needs to be connected through session.connect() before the messages can be dispatched to the inspector backend.\\\\n         */\\\\n        constructor();\\\\n\\\\n        /**\\\\n         * Connects a session to the inspector back-end.\\\\n         * An exception will be thrown if there is already a connected session established either\\\\n         * through the API or by a front-end connected to the Inspector WebSocket port.\\\\n         */\\\\n        connect(): void;\\\\n\\\\n        /**\\\\n         * Immediately close the session. All pending message callbacks will be called with an error.\\\\n         * session.connect() will need to be called to be able to send messages again.\\\\n         * Reconnected session will lose all inspector state, such as enabled agents or configured breakpoints.\\\\n         */\\\\n        disconnect(): void;\\\\n\\\\n        /**\\\\n         * Posts a message to the inspector back-end. callback will be notified when a response is received.\\\\n         * callback is a function that accepts two optional arguments - error and message-specific result.\\\\n         */\\\\n        post(method: string, params?: {}, callback?: (err: Error | null, params?: {}) => void): void;\\\\n        post(method: string, callback?: (err: Error | null, params?: {}) => void): void;\\\\n\\\\n        /**\\\\n         * Returns supported domains.\\\\n         */\\\\n        post(method: \\\\\\\"Schema.getDomains\\\\\\\", callback?: (err: Error | null, params: Schema.GetDomainsReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Evaluates expression on global object.\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.evaluate\\\\\\\", params?: Runtime.EvaluateParameterType, callback?: (err: Error | null, params: Runtime.EvaluateReturnType) => void): void;\\\\n        post(method: \\\\\\\"Runtime.evaluate\\\\\\\", callback?: (err: Error | null, params: Runtime.EvaluateReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Add handler to promise with given promise object id.\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.awaitPromise\\\\\\\", params?: Runtime.AwaitPromiseParameterType, callback?: (err: Error | null, params: Runtime.AwaitPromiseReturnType) => void): void;\\\\n        post(method: \\\\\\\"Runtime.awaitPromise\\\\\\\", callback?: (err: Error | null, params: Runtime.AwaitPromiseReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Calls function with given declaration on the given object. Object group of the result is inherited from the target object.\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.callFunctionOn\\\\\\\", params?: Runtime.CallFunctionOnParameterType, callback?: (err: Error | null, params: Runtime.CallFunctionOnReturnType) => void): void;\\\\n        post(method: \\\\\\\"Runtime.callFunctionOn\\\\\\\", callback?: (err: Error | null, params: Runtime.CallFunctionOnReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Returns properties of a given object. Object group of the result is inherited from the target object.\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.getProperties\\\\\\\", params?: Runtime.GetPropertiesParameterType, callback?: (err: Error | null, params: Runtime.GetPropertiesReturnType) => void): void;\\\\n        post(method: \\\\\\\"Runtime.getProperties\\\\\\\", callback?: (err: Error | null, params: Runtime.GetPropertiesReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Releases remote object with given id.\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.releaseObject\\\\\\\", params?: Runtime.ReleaseObjectParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Runtime.releaseObject\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Releases all remote objects that belong to a given group.\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.releaseObjectGroup\\\\\\\", params?: Runtime.ReleaseObjectGroupParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Runtime.releaseObjectGroup\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Tells inspected instance to run if it was waiting for debugger to attach.\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.runIfWaitingForDebugger\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.enable\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Disables reporting of execution contexts creation.\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.disable\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Discards collected exceptions and console API calls.\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.discardConsoleEntries\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * @experimental\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.setCustomObjectFormatterEnabled\\\\\\\", params?: Runtime.SetCustomObjectFormatterEnabledParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Runtime.setCustomObjectFormatterEnabled\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Compiles expression.\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.compileScript\\\\\\\", params?: Runtime.CompileScriptParameterType, callback?: (err: Error | null, params: Runtime.CompileScriptReturnType) => void): void;\\\\n        post(method: \\\\\\\"Runtime.compileScript\\\\\\\", callback?: (err: Error | null, params: Runtime.CompileScriptReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Runs script with given id in a given context.\\\\n         */\\\\n        post(method: \\\\\\\"Runtime.runScript\\\\\\\", params?: Runtime.RunScriptParameterType, callback?: (err: Error | null, params: Runtime.RunScriptReturnType) => void): void;\\\\n        post(method: \\\\\\\"Runtime.runScript\\\\\\\", callback?: (err: Error | null, params: Runtime.RunScriptReturnType) => void): void;\\\\n\\\\n        post(method: \\\\\\\"Runtime.queryObjects\\\\\\\", params?: Runtime.QueryObjectsParameterType, callback?: (err: Error | null, params: Runtime.QueryObjectsReturnType) => void): void;\\\\n        post(method: \\\\\\\"Runtime.queryObjects\\\\\\\", callback?: (err: Error | null, params: Runtime.QueryObjectsReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Returns all let, const and class variables from global scope.\\\\n         */\\\\n        post(\\\\n            method: \\\\\\\"Runtime.globalLexicalScopeNames\\\\\\\",\\\\n            params?: Runtime.GlobalLexicalScopeNamesParameterType,\\\\n            callback?: (err: Error | null, params: Runtime.GlobalLexicalScopeNamesReturnType) => void\\\\n        ): void;\\\\n        post(method: \\\\\\\"Runtime.globalLexicalScopeNames\\\\\\\", callback?: (err: Error | null, params: Runtime.GlobalLexicalScopeNamesReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.enable\\\\\\\", callback?: (err: Error | null, params: Debugger.EnableReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Disables debugger for given page.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.disable\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Activates / deactivates all breakpoints on the page.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.setBreakpointsActive\\\\\\\", params?: Debugger.SetBreakpointsActiveParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Debugger.setBreakpointsActive\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.setSkipAllPauses\\\\\\\", params?: Debugger.SetSkipAllPausesParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Debugger.setSkipAllPauses\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.setBreakpointByUrl\\\\\\\", params?: Debugger.SetBreakpointByUrlParameterType, callback?: (err: Error | null, params: Debugger.SetBreakpointByUrlReturnType) => void): void;\\\\n        post(method: \\\\\\\"Debugger.setBreakpointByUrl\\\\\\\", callback?: (err: Error | null, params: Debugger.SetBreakpointByUrlReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Sets JavaScript breakpoint at a given location.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.setBreakpoint\\\\\\\", params?: Debugger.SetBreakpointParameterType, callback?: (err: Error | null, params: Debugger.SetBreakpointReturnType) => void): void;\\\\n        post(method: \\\\\\\"Debugger.setBreakpoint\\\\\\\", callback?: (err: Error | null, params: Debugger.SetBreakpointReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Removes JavaScript breakpoint.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.removeBreakpoint\\\\\\\", params?: Debugger.RemoveBreakpointParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Debugger.removeBreakpoint\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.\\\\n         */\\\\n        post(\\\\n            method: \\\\\\\"Debugger.getPossibleBreakpoints\\\\\\\",\\\\n            params?: Debugger.GetPossibleBreakpointsParameterType,\\\\n            callback?: (err: Error | null, params: Debugger.GetPossibleBreakpointsReturnType) => void\\\\n        ): void;\\\\n        post(method: \\\\\\\"Debugger.getPossibleBreakpoints\\\\\\\", callback?: (err: Error | null, params: Debugger.GetPossibleBreakpointsReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Continues execution until specific location is reached.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.continueToLocation\\\\\\\", params?: Debugger.ContinueToLocationParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Debugger.continueToLocation\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * @experimental\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.pauseOnAsyncCall\\\\\\\", params?: Debugger.PauseOnAsyncCallParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Debugger.pauseOnAsyncCall\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Steps over the statement.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.stepOver\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Steps into the function call.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.stepInto\\\\\\\", params?: Debugger.StepIntoParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Debugger.stepInto\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Steps out of the function call.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.stepOut\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Stops on the next JavaScript statement.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.pause\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called.\\\\n         * @experimental\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.scheduleStepIntoAsync\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Resumes JavaScript execution.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.resume\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Returns stack trace with given <code>stackTraceId</code>.\\\\n         * @experimental\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.getStackTrace\\\\\\\", params?: Debugger.GetStackTraceParameterType, callback?: (err: Error | null, params: Debugger.GetStackTraceReturnType) => void): void;\\\\n        post(method: \\\\\\\"Debugger.getStackTrace\\\\\\\", callback?: (err: Error | null, params: Debugger.GetStackTraceReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Searches for given string in script content.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.searchInContent\\\\\\\", params?: Debugger.SearchInContentParameterType, callback?: (err: Error | null, params: Debugger.SearchInContentReturnType) => void): void;\\\\n        post(method: \\\\\\\"Debugger.searchInContent\\\\\\\", callback?: (err: Error | null, params: Debugger.SearchInContentReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Edits JavaScript source live.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.setScriptSource\\\\\\\", params?: Debugger.SetScriptSourceParameterType, callback?: (err: Error | null, params: Debugger.SetScriptSourceReturnType) => void): void;\\\\n        post(method: \\\\\\\"Debugger.setScriptSource\\\\\\\", callback?: (err: Error | null, params: Debugger.SetScriptSourceReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Restarts particular call frame from the beginning.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.restartFrame\\\\\\\", params?: Debugger.RestartFrameParameterType, callback?: (err: Error | null, params: Debugger.RestartFrameReturnType) => void): void;\\\\n        post(method: \\\\\\\"Debugger.restartFrame\\\\\\\", callback?: (err: Error | null, params: Debugger.RestartFrameReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Returns source for the script with given id.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.getScriptSource\\\\\\\", params?: Debugger.GetScriptSourceParameterType, callback?: (err: Error | null, params: Debugger.GetScriptSourceReturnType) => void): void;\\\\n        post(method: \\\\\\\"Debugger.getScriptSource\\\\\\\", callback?: (err: Error | null, params: Debugger.GetScriptSourceReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.setPauseOnExceptions\\\\\\\", params?: Debugger.SetPauseOnExceptionsParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Debugger.setPauseOnExceptions\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Evaluates expression on a given call frame.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.evaluateOnCallFrame\\\\\\\", params?: Debugger.EvaluateOnCallFrameParameterType, callback?: (err: Error | null, params: Debugger.EvaluateOnCallFrameReturnType) => void): void;\\\\n        post(method: \\\\\\\"Debugger.evaluateOnCallFrame\\\\\\\", callback?: (err: Error | null, params: Debugger.EvaluateOnCallFrameReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.setVariableValue\\\\\\\", params?: Debugger.SetVariableValueParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Debugger.setVariableValue\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Changes return value in top frame. Available only at return break position.\\\\n         * @experimental\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.setReturnValue\\\\\\\", params?: Debugger.SetReturnValueParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Debugger.setReturnValue\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Enables or disables async call stacks tracking.\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.setAsyncCallStackDepth\\\\\\\", params?: Debugger.SetAsyncCallStackDepthParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Debugger.setAsyncCallStackDepth\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.\\\\n         * @experimental\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.setBlackboxPatterns\\\\\\\", params?: Debugger.SetBlackboxPatternsParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Debugger.setBlackboxPatterns\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.\\\\n         * @experimental\\\\n         */\\\\n        post(method: \\\\\\\"Debugger.setBlackboxedRanges\\\\\\\", params?: Debugger.SetBlackboxedRangesParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Debugger.setBlackboxedRanges\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification.\\\\n         */\\\\n        post(method: \\\\\\\"Console.enable\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Disables console domain, prevents further console messages from being reported to the client.\\\\n         */\\\\n        post(method: \\\\\\\"Console.disable\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Does nothing.\\\\n         */\\\\n        post(method: \\\\\\\"Console.clearMessages\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        post(method: \\\\\\\"Profiler.enable\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        post(method: \\\\\\\"Profiler.disable\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.\\\\n         */\\\\n        post(method: \\\\\\\"Profiler.setSamplingInterval\\\\\\\", params?: Profiler.SetSamplingIntervalParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Profiler.setSamplingInterval\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        post(method: \\\\\\\"Profiler.start\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        post(method: \\\\\\\"Profiler.stop\\\\\\\", callback?: (err: Error | null, params: Profiler.StopReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.\\\\n         */\\\\n        post(method: \\\\\\\"Profiler.startPreciseCoverage\\\\\\\", params?: Profiler.StartPreciseCoverageParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"Profiler.startPreciseCoverage\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.\\\\n         */\\\\n        post(method: \\\\\\\"Profiler.stopPreciseCoverage\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.\\\\n         */\\\\n        post(method: \\\\\\\"Profiler.takePreciseCoverage\\\\\\\", callback?: (err: Error | null, params: Profiler.TakePreciseCoverageReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.\\\\n         */\\\\n        post(method: \\\\\\\"Profiler.getBestEffortCoverage\\\\\\\", callback?: (err: Error | null, params: Profiler.GetBestEffortCoverageReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Enable type profile.\\\\n         * @experimental\\\\n         */\\\\n        post(method: \\\\\\\"Profiler.startTypeProfile\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Disable type profile. Disabling releases type profile data collected so far.\\\\n         * @experimental\\\\n         */\\\\n        post(method: \\\\\\\"Profiler.stopTypeProfile\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Collect type profile.\\\\n         * @experimental\\\\n         */\\\\n        post(method: \\\\\\\"Profiler.takeTypeProfile\\\\\\\", callback?: (err: Error | null, params: Profiler.TakeTypeProfileReturnType) => void): void;\\\\n\\\\n        post(method: \\\\\\\"HeapProfiler.enable\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        post(method: \\\\\\\"HeapProfiler.disable\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        post(method: \\\\\\\"HeapProfiler.startTrackingHeapObjects\\\\\\\", params?: HeapProfiler.StartTrackingHeapObjectsParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"HeapProfiler.startTrackingHeapObjects\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        post(method: \\\\\\\"HeapProfiler.stopTrackingHeapObjects\\\\\\\", params?: HeapProfiler.StopTrackingHeapObjectsParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"HeapProfiler.stopTrackingHeapObjects\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        post(method: \\\\\\\"HeapProfiler.takeHeapSnapshot\\\\\\\", params?: HeapProfiler.TakeHeapSnapshotParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"HeapProfiler.takeHeapSnapshot\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        post(method: \\\\\\\"HeapProfiler.collectGarbage\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        post(\\\\n            method: \\\\\\\"HeapProfiler.getObjectByHeapObjectId\\\\\\\",\\\\n            params?: HeapProfiler.GetObjectByHeapObjectIdParameterType,\\\\n            callback?: (err: Error | null, params: HeapProfiler.GetObjectByHeapObjectIdReturnType) => void\\\\n        ): void;\\\\n        post(method: \\\\\\\"HeapProfiler.getObjectByHeapObjectId\\\\\\\", callback?: (err: Error | null, params: HeapProfiler.GetObjectByHeapObjectIdReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).\\\\n         */\\\\n        post(method: \\\\\\\"HeapProfiler.addInspectedHeapObject\\\\\\\", params?: HeapProfiler.AddInspectedHeapObjectParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"HeapProfiler.addInspectedHeapObject\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        post(method: \\\\\\\"HeapProfiler.getHeapObjectId\\\\\\\", params?: HeapProfiler.GetHeapObjectIdParameterType, callback?: (err: Error | null, params: HeapProfiler.GetHeapObjectIdReturnType) => void): void;\\\\n        post(method: \\\\\\\"HeapProfiler.getHeapObjectId\\\\\\\", callback?: (err: Error | null, params: HeapProfiler.GetHeapObjectIdReturnType) => void): void;\\\\n\\\\n        post(method: \\\\\\\"HeapProfiler.startSampling\\\\\\\", params?: HeapProfiler.StartSamplingParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"HeapProfiler.startSampling\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        post(method: \\\\\\\"HeapProfiler.stopSampling\\\\\\\", callback?: (err: Error | null, params: HeapProfiler.StopSamplingReturnType) => void): void;\\\\n\\\\n        post(method: \\\\\\\"HeapProfiler.getSamplingProfile\\\\\\\", callback?: (err: Error | null, params: HeapProfiler.GetSamplingProfileReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Gets supported tracing categories.\\\\n         */\\\\n        post(method: \\\\\\\"NodeTracing.getCategories\\\\\\\", callback?: (err: Error | null, params: NodeTracing.GetCategoriesReturnType) => void): void;\\\\n\\\\n        /**\\\\n         * Start trace events collection.\\\\n         */\\\\n        post(method: \\\\\\\"NodeTracing.start\\\\\\\", params?: NodeTracing.StartParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"NodeTracing.start\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Stop trace events collection. Remaining collected events will be sent as a sequence of\\\\n         * dataCollected events followed by tracingComplete event.\\\\n         */\\\\n        post(method: \\\\\\\"NodeTracing.stop\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Sends protocol message over session with given id.\\\\n         */\\\\n        post(method: \\\\\\\"NodeWorker.sendMessageToWorker\\\\\\\", params?: NodeWorker.SendMessageToWorkerParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"NodeWorker.sendMessageToWorker\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Instructs the inspector to attach to running workers. Will also attach to new workers\\\\n         * as they start\\\\n         */\\\\n        post(method: \\\\\\\"NodeWorker.enable\\\\\\\", params?: NodeWorker.EnableParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"NodeWorker.enable\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Detaches from all running workers and disables attaching to new workers as they are started.\\\\n         */\\\\n        post(method: \\\\\\\"NodeWorker.disable\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Detached from the worker with given sessionId.\\\\n         */\\\\n        post(method: \\\\\\\"NodeWorker.detach\\\\\\\", params?: NodeWorker.DetachParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"NodeWorker.detach\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        /**\\\\n         * Enable the `NodeRuntime.waitingForDisconnect`.\\\\n         */\\\\n        post(method: \\\\\\\"NodeRuntime.notifyWhenWaitingForDisconnect\\\\\\\", params?: NodeRuntime.NotifyWhenWaitingForDisconnectParameterType, callback?: (err: Error | null) => void): void;\\\\n        post(method: \\\\\\\"NodeRuntime.notifyWhenWaitingForDisconnect\\\\\\\", callback?: (err: Error | null) => void): void;\\\\n\\\\n        // Events\\\\n\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n\\\\n        /**\\\\n         * Emitted when any notification from the V8 Inspector is received.\\\\n         */\\\\n        addListener(event: \\\\\\\"inspectorNotification\\\\\\\", listener: (message: InspectorNotification<{}>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when new execution context is created.\\\\n         */\\\\n        addListener(event: \\\\\\\"Runtime.executionContextCreated\\\\\\\", listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when execution context is destroyed.\\\\n         */\\\\n        addListener(event: \\\\\\\"Runtime.executionContextDestroyed\\\\\\\", listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when all executionContexts were cleared in browser\\\\n         */\\\\n        addListener(event: \\\\\\\"Runtime.executionContextsCleared\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when exception was thrown and unhandled.\\\\n         */\\\\n        addListener(event: \\\\\\\"Runtime.exceptionThrown\\\\\\\", listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when unhandled exception was revoked.\\\\n         */\\\\n        addListener(event: \\\\\\\"Runtime.exceptionRevoked\\\\\\\", listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when console API was called.\\\\n         */\\\\n        addListener(event: \\\\\\\"Runtime.consoleAPICalled\\\\\\\", listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\\\n         */\\\\n        addListener(event: \\\\\\\"Runtime.inspectRequested\\\\\\\", listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\\\n         */\\\\n        addListener(event: \\\\\\\"Debugger.scriptParsed\\\\\\\", listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when virtual machine fails to parse the script.\\\\n         */\\\\n        addListener(event: \\\\\\\"Debugger.scriptFailedToParse\\\\\\\", listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when breakpoint is resolved to an actual script and location.\\\\n         */\\\\n        addListener(event: \\\\\\\"Debugger.breakpointResolved\\\\\\\", listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\\\n         */\\\\n        addListener(event: \\\\\\\"Debugger.paused\\\\\\\", listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when the virtual machine resumed execution.\\\\n         */\\\\n        addListener(event: \\\\\\\"Debugger.resumed\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when new console message is added.\\\\n         */\\\\n        addListener(event: \\\\\\\"Console.messageAdded\\\\\\\", listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Sent when new profile recording is started using console.profile() call.\\\\n         */\\\\n        addListener(event: \\\\\\\"Profiler.consoleProfileStarted\\\\\\\", listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\\\n\\\\n        addListener(event: \\\\\\\"Profiler.consoleProfileFinished\\\\\\\", listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\\\n        addListener(event: \\\\\\\"HeapProfiler.addHeapSnapshotChunk\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\\\n        addListener(event: \\\\\\\"HeapProfiler.resetProfiles\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"HeapProfiler.reportHeapSnapshotProgress\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\\\n         */\\\\n        addListener(event: \\\\\\\"HeapProfiler.lastSeenObjectId\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\\\n         */\\\\n        addListener(event: \\\\\\\"HeapProfiler.heapStatsUpdate\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Contains an bucket of collected trace events.\\\\n         */\\\\n        addListener(event: \\\\\\\"NodeTracing.dataCollected\\\\\\\", listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\\\n         * delivered via dataCollected events.\\\\n         */\\\\n        addListener(event: \\\\\\\"NodeTracing.tracingComplete\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when attached to a worker.\\\\n         */\\\\n        addListener(event: \\\\\\\"NodeWorker.attachedToWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when detached from the worker.\\\\n         */\\\\n        addListener(event: \\\\\\\"NodeWorker.detachedFromWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Notifies about a new protocol message received from the session\\\\n         * (session ID is provided in attachedToWorker notification).\\\\n         */\\\\n        addListener(event: \\\\\\\"NodeWorker.receivedMessageFromWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\\\n         * enabled.\\\\n         * It is fired when the Node process finished all code execution and is\\\\n         * waiting for all frontends to disconnect.\\\\n         */\\\\n        addListener(event: \\\\\\\"NodeRuntime.waitingForDisconnect\\\\\\\", listener: () => void): this;\\\\n\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        emit(event: \\\\\\\"inspectorNotification\\\\\\\", message: InspectorNotification<{}>): boolean;\\\\n        emit(event: \\\\\\\"Runtime.executionContextCreated\\\\\\\", message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"Runtime.executionContextDestroyed\\\\\\\", message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"Runtime.executionContextsCleared\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"Runtime.exceptionThrown\\\\\\\", message: InspectorNotification<Runtime.ExceptionThrownEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"Runtime.exceptionRevoked\\\\\\\", message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"Runtime.consoleAPICalled\\\\\\\", message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"Runtime.inspectRequested\\\\\\\", message: InspectorNotification<Runtime.InspectRequestedEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"Debugger.scriptParsed\\\\\\\", message: InspectorNotification<Debugger.ScriptParsedEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"Debugger.scriptFailedToParse\\\\\\\", message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"Debugger.breakpointResolved\\\\\\\", message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"Debugger.paused\\\\\\\", message: InspectorNotification<Debugger.PausedEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"Debugger.resumed\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"Console.messageAdded\\\\\\\", message: InspectorNotification<Console.MessageAddedEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"Profiler.consoleProfileStarted\\\\\\\", message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"Profiler.consoleProfileFinished\\\\\\\", message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"HeapProfiler.addHeapSnapshotChunk\\\\\\\", message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"HeapProfiler.resetProfiles\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"HeapProfiler.reportHeapSnapshotProgress\\\\\\\", message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"HeapProfiler.lastSeenObjectId\\\\\\\", message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"HeapProfiler.heapStatsUpdate\\\\\\\", message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"NodeTracing.dataCollected\\\\\\\", message: InspectorNotification<NodeTracing.DataCollectedEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"NodeTracing.tracingComplete\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"NodeWorker.attachedToWorker\\\\\\\", message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"NodeWorker.detachedFromWorker\\\\\\\", message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"NodeWorker.receivedMessageFromWorker\\\\\\\", message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>): boolean;\\\\n        emit(event: \\\\\\\"NodeRuntime.waitingForDisconnect\\\\\\\"): boolean;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n\\\\n        /**\\\\n         * Emitted when any notification from the V8 Inspector is received.\\\\n         */\\\\n        on(event: \\\\\\\"inspectorNotification\\\\\\\", listener: (message: InspectorNotification<{}>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when new execution context is created.\\\\n         */\\\\n        on(event: \\\\\\\"Runtime.executionContextCreated\\\\\\\", listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when execution context is destroyed.\\\\n         */\\\\n        on(event: \\\\\\\"Runtime.executionContextDestroyed\\\\\\\", listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when all executionContexts were cleared in browser\\\\n         */\\\\n        on(event: \\\\\\\"Runtime.executionContextsCleared\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when exception was thrown and unhandled.\\\\n         */\\\\n        on(event: \\\\\\\"Runtime.exceptionThrown\\\\\\\", listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when unhandled exception was revoked.\\\\n         */\\\\n        on(event: \\\\\\\"Runtime.exceptionRevoked\\\\\\\", listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when console API was called.\\\\n         */\\\\n        on(event: \\\\\\\"Runtime.consoleAPICalled\\\\\\\", listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\\\n         */\\\\n        on(event: \\\\\\\"Runtime.inspectRequested\\\\\\\", listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\\\n         */\\\\n        on(event: \\\\\\\"Debugger.scriptParsed\\\\\\\", listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when virtual machine fails to parse the script.\\\\n         */\\\\n        on(event: \\\\\\\"Debugger.scriptFailedToParse\\\\\\\", listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when breakpoint is resolved to an actual script and location.\\\\n         */\\\\n        on(event: \\\\\\\"Debugger.breakpointResolved\\\\\\\", listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\\\n         */\\\\n        on(event: \\\\\\\"Debugger.paused\\\\\\\", listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when the virtual machine resumed execution.\\\\n         */\\\\n        on(event: \\\\\\\"Debugger.resumed\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when new console message is added.\\\\n         */\\\\n        on(event: \\\\\\\"Console.messageAdded\\\\\\\", listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Sent when new profile recording is started using console.profile() call.\\\\n         */\\\\n        on(event: \\\\\\\"Profiler.consoleProfileStarted\\\\\\\", listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\\\n\\\\n        on(event: \\\\\\\"Profiler.consoleProfileFinished\\\\\\\", listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\\\n        on(event: \\\\\\\"HeapProfiler.addHeapSnapshotChunk\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\\\n        on(event: \\\\\\\"HeapProfiler.resetProfiles\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"HeapProfiler.reportHeapSnapshotProgress\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\\\n         */\\\\n        on(event: \\\\\\\"HeapProfiler.lastSeenObjectId\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\\\n         */\\\\n        on(event: \\\\\\\"HeapProfiler.heapStatsUpdate\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Contains an bucket of collected trace events.\\\\n         */\\\\n        on(event: \\\\\\\"NodeTracing.dataCollected\\\\\\\", listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\\\n         * delivered via dataCollected events.\\\\n         */\\\\n        on(event: \\\\\\\"NodeTracing.tracingComplete\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when attached to a worker.\\\\n         */\\\\n        on(event: \\\\\\\"NodeWorker.attachedToWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when detached from the worker.\\\\n         */\\\\n        on(event: \\\\\\\"NodeWorker.detachedFromWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Notifies about a new protocol message received from the session\\\\n         * (session ID is provided in attachedToWorker notification).\\\\n         */\\\\n        on(event: \\\\\\\"NodeWorker.receivedMessageFromWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\\\n         * enabled.\\\\n         * It is fired when the Node process finished all code execution and is\\\\n         * waiting for all frontends to disconnect.\\\\n         */\\\\n        on(event: \\\\\\\"NodeRuntime.waitingForDisconnect\\\\\\\", listener: () => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n\\\\n        /**\\\\n         * Emitted when any notification from the V8 Inspector is received.\\\\n         */\\\\n        once(event: \\\\\\\"inspectorNotification\\\\\\\", listener: (message: InspectorNotification<{}>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when new execution context is created.\\\\n         */\\\\n        once(event: \\\\\\\"Runtime.executionContextCreated\\\\\\\", listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when execution context is destroyed.\\\\n         */\\\\n        once(event: \\\\\\\"Runtime.executionContextDestroyed\\\\\\\", listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when all executionContexts were cleared in browser\\\\n         */\\\\n        once(event: \\\\\\\"Runtime.executionContextsCleared\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when exception was thrown and unhandled.\\\\n         */\\\\n        once(event: \\\\\\\"Runtime.exceptionThrown\\\\\\\", listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when unhandled exception was revoked.\\\\n         */\\\\n        once(event: \\\\\\\"Runtime.exceptionRevoked\\\\\\\", listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when console API was called.\\\\n         */\\\\n        once(event: \\\\\\\"Runtime.consoleAPICalled\\\\\\\", listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\\\n         */\\\\n        once(event: \\\\\\\"Runtime.inspectRequested\\\\\\\", listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\\\n         */\\\\n        once(event: \\\\\\\"Debugger.scriptParsed\\\\\\\", listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when virtual machine fails to parse the script.\\\\n         */\\\\n        once(event: \\\\\\\"Debugger.scriptFailedToParse\\\\\\\", listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when breakpoint is resolved to an actual script and location.\\\\n         */\\\\n        once(event: \\\\\\\"Debugger.breakpointResolved\\\\\\\", listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\\\n         */\\\\n        once(event: \\\\\\\"Debugger.paused\\\\\\\", listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when the virtual machine resumed execution.\\\\n         */\\\\n        once(event: \\\\\\\"Debugger.resumed\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when new console message is added.\\\\n         */\\\\n        once(event: \\\\\\\"Console.messageAdded\\\\\\\", listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Sent when new profile recording is started using console.profile() call.\\\\n         */\\\\n        once(event: \\\\\\\"Profiler.consoleProfileStarted\\\\\\\", listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\\\n\\\\n        once(event: \\\\\\\"Profiler.consoleProfileFinished\\\\\\\", listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\\\n        once(event: \\\\\\\"HeapProfiler.addHeapSnapshotChunk\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\\\n        once(event: \\\\\\\"HeapProfiler.resetProfiles\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"HeapProfiler.reportHeapSnapshotProgress\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\\\n         */\\\\n        once(event: \\\\\\\"HeapProfiler.lastSeenObjectId\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\\\n         */\\\\n        once(event: \\\\\\\"HeapProfiler.heapStatsUpdate\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Contains an bucket of collected trace events.\\\\n         */\\\\n        once(event: \\\\\\\"NodeTracing.dataCollected\\\\\\\", listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\\\n         * delivered via dataCollected events.\\\\n         */\\\\n        once(event: \\\\\\\"NodeTracing.tracingComplete\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when attached to a worker.\\\\n         */\\\\n        once(event: \\\\\\\"NodeWorker.attachedToWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when detached from the worker.\\\\n         */\\\\n        once(event: \\\\\\\"NodeWorker.detachedFromWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Notifies about a new protocol message received from the session\\\\n         * (session ID is provided in attachedToWorker notification).\\\\n         */\\\\n        once(event: \\\\\\\"NodeWorker.receivedMessageFromWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\\\n         * enabled.\\\\n         * It is fired when the Node process finished all code execution and is\\\\n         * waiting for all frontends to disconnect.\\\\n         */\\\\n        once(event: \\\\\\\"NodeRuntime.waitingForDisconnect\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n\\\\n        /**\\\\n         * Emitted when any notification from the V8 Inspector is received.\\\\n         */\\\\n        prependListener(event: \\\\\\\"inspectorNotification\\\\\\\", listener: (message: InspectorNotification<{}>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when new execution context is created.\\\\n         */\\\\n        prependListener(event: \\\\\\\"Runtime.executionContextCreated\\\\\\\", listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when execution context is destroyed.\\\\n         */\\\\n        prependListener(event: \\\\\\\"Runtime.executionContextDestroyed\\\\\\\", listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when all executionContexts were cleared in browser\\\\n         */\\\\n        prependListener(event: \\\\\\\"Runtime.executionContextsCleared\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when exception was thrown and unhandled.\\\\n         */\\\\n        prependListener(event: \\\\\\\"Runtime.exceptionThrown\\\\\\\", listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when unhandled exception was revoked.\\\\n         */\\\\n        prependListener(event: \\\\\\\"Runtime.exceptionRevoked\\\\\\\", listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when console API was called.\\\\n         */\\\\n        prependListener(event: \\\\\\\"Runtime.consoleAPICalled\\\\\\\", listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\\\n         */\\\\n        prependListener(event: \\\\\\\"Runtime.inspectRequested\\\\\\\", listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\\\n         */\\\\n        prependListener(event: \\\\\\\"Debugger.scriptParsed\\\\\\\", listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when virtual machine fails to parse the script.\\\\n         */\\\\n        prependListener(event: \\\\\\\"Debugger.scriptFailedToParse\\\\\\\", listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when breakpoint is resolved to an actual script and location.\\\\n         */\\\\n        prependListener(event: \\\\\\\"Debugger.breakpointResolved\\\\\\\", listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\\\n         */\\\\n        prependListener(event: \\\\\\\"Debugger.paused\\\\\\\", listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when the virtual machine resumed execution.\\\\n         */\\\\n        prependListener(event: \\\\\\\"Debugger.resumed\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when new console message is added.\\\\n         */\\\\n        prependListener(event: \\\\\\\"Console.messageAdded\\\\\\\", listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Sent when new profile recording is started using console.profile() call.\\\\n         */\\\\n        prependListener(event: \\\\\\\"Profiler.consoleProfileStarted\\\\\\\", listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\\\n\\\\n        prependListener(event: \\\\\\\"Profiler.consoleProfileFinished\\\\\\\", listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\\\n        prependListener(event: \\\\\\\"HeapProfiler.addHeapSnapshotChunk\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\\\n        prependListener(event: \\\\\\\"HeapProfiler.resetProfiles\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"HeapProfiler.reportHeapSnapshotProgress\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\\\n         */\\\\n        prependListener(event: \\\\\\\"HeapProfiler.lastSeenObjectId\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\\\n         */\\\\n        prependListener(event: \\\\\\\"HeapProfiler.heapStatsUpdate\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Contains an bucket of collected trace events.\\\\n         */\\\\n        prependListener(event: \\\\\\\"NodeTracing.dataCollected\\\\\\\", listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\\\n         * delivered via dataCollected events.\\\\n         */\\\\n        prependListener(event: \\\\\\\"NodeTracing.tracingComplete\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when attached to a worker.\\\\n         */\\\\n        prependListener(event: \\\\\\\"NodeWorker.attachedToWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when detached from the worker.\\\\n         */\\\\n        prependListener(event: \\\\\\\"NodeWorker.detachedFromWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Notifies about a new protocol message received from the session\\\\n         * (session ID is provided in attachedToWorker notification).\\\\n         */\\\\n        prependListener(event: \\\\\\\"NodeWorker.receivedMessageFromWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\\\n         * enabled.\\\\n         * It is fired when the Node process finished all code execution and is\\\\n         * waiting for all frontends to disconnect.\\\\n         */\\\\n        prependListener(event: \\\\\\\"NodeRuntime.waitingForDisconnect\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n\\\\n        /**\\\\n         * Emitted when any notification from the V8 Inspector is received.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"inspectorNotification\\\\\\\", listener: (message: InspectorNotification<{}>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when new execution context is created.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Runtime.executionContextCreated\\\\\\\", listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when execution context is destroyed.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Runtime.executionContextDestroyed\\\\\\\", listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when all executionContexts were cleared in browser\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Runtime.executionContextsCleared\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when exception was thrown and unhandled.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Runtime.exceptionThrown\\\\\\\", listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when unhandled exception was revoked.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Runtime.exceptionRevoked\\\\\\\", listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when console API was called.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Runtime.consoleAPICalled\\\\\\\", listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Runtime.inspectRequested\\\\\\\", listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Debugger.scriptParsed\\\\\\\", listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when virtual machine fails to parse the script.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Debugger.scriptFailedToParse\\\\\\\", listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when breakpoint is resolved to an actual script and location.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Debugger.breakpointResolved\\\\\\\", listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Debugger.paused\\\\\\\", listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Fired when the virtual machine resumed execution.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Debugger.resumed\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when new console message is added.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Console.messageAdded\\\\\\\", listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Sent when new profile recording is started using console.profile() call.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"Profiler.consoleProfileStarted\\\\\\\", listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"Profiler.consoleProfileFinished\\\\\\\", listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"HeapProfiler.addHeapSnapshotChunk\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"HeapProfiler.resetProfiles\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"HeapProfiler.reportHeapSnapshotProgress\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"HeapProfiler.lastSeenObjectId\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * If heap objects tracking has been started then backend may send update for one or more fragments\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"HeapProfiler.heapStatsUpdate\\\\\\\", listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Contains an bucket of collected trace events.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"NodeTracing.dataCollected\\\\\\\", listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\\\\n         * delivered via dataCollected events.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"NodeTracing.tracingComplete\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Issued when attached to a worker.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"NodeWorker.attachedToWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Issued when detached from the worker.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"NodeWorker.detachedFromWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * Notifies about a new protocol message received from the session\\\\n         * (session ID is provided in attachedToWorker notification).\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"NodeWorker.receivedMessageFromWorker\\\\\\\", listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\\\\n\\\\n        /**\\\\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\\\\n         * enabled.\\\\n         * It is fired when the Node process finished all code execution and is\\\\n         * waiting for all frontends to disconnect.\\\\n         */\\\\n        prependOnceListener(event: \\\\\\\"NodeRuntime.waitingForDisconnect\\\\\\\", listener: () => void): this;\\\\n    }\\\\n\\\\n    // Top Level API\\\\n\\\\n    /**\\\\n     * Activate inspector on host and port. Equivalent to node --inspect=[[host:]port], but can be done programatically after node has started.\\\\n     * If wait is true, will block until a client has connected to the inspect port and flow control has been passed to the debugger client.\\\\n     * @param port Port to listen on for inspector connections. Optional, defaults to what was specified on the CLI.\\\\n     * @param host Host to listen on for inspector connections. Optional, defaults to what was specified on the CLI.\\\\n     * @param wait Block until a client has connected. Optional, defaults to false.\\\\n     */\\\\n    function open(port?: number, host?: string, wait?: boolean): void;\\\\n\\\\n    /**\\\\n     * Deactivate the inspector. Blocks until there are no active connections.\\\\n     */\\\\n    function close(): void;\\\\n\\\\n    /**\\\\n     * Return the URL of the active inspector, or `undefined` if there is none.\\\\n     */\\\\n    function url(): string | undefined;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/module.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"module\\\\\\\" {\\\\n    export = NodeJS.Module;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/os.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"os\\\\\\\" {\\\\n    interface CpuInfo {\\\\n        model: string;\\\\n        speed: number;\\\\n        times: {\\\\n            user: number;\\\\n            nice: number;\\\\n            sys: number;\\\\n            idle: number;\\\\n            irq: number;\\\\n        };\\\\n    }\\\\n\\\\n    interface NetworkInterfaceBase {\\\\n        address: string;\\\\n        netmask: string;\\\\n        mac: string;\\\\n        internal: boolean;\\\\n        cidr: string | null;\\\\n    }\\\\n\\\\n    interface NetworkInterfaceInfoIPv4 extends NetworkInterfaceBase {\\\\n        family: \\\\\\\"IPv4\\\\\\\";\\\\n    }\\\\n\\\\n    interface NetworkInterfaceInfoIPv6 extends NetworkInterfaceBase {\\\\n        family: \\\\\\\"IPv6\\\\\\\";\\\\n        scopeid: number;\\\\n    }\\\\n\\\\n    interface UserInfo<T> {\\\\n        username: T;\\\\n        uid: number;\\\\n        gid: number;\\\\n        shell: T;\\\\n        homedir: T;\\\\n    }\\\\n\\\\n    type NetworkInterfaceInfo = NetworkInterfaceInfoIPv4 | NetworkInterfaceInfoIPv6;\\\\n\\\\n    function hostname(): string;\\\\n    function loadavg(): number[];\\\\n    function uptime(): number;\\\\n    function freemem(): number;\\\\n    function totalmem(): number;\\\\n    function cpus(): CpuInfo[];\\\\n    function type(): string;\\\\n    function release(): string;\\\\n    function networkInterfaces(): { [index: string]: NetworkInterfaceInfo[] };\\\\n    function homedir(): string;\\\\n    function userInfo(options: { encoding: 'buffer' }): UserInfo<Buffer>;\\\\n    function userInfo(options?: { encoding: string }): UserInfo<string>;\\\\n    const constants: {\\\\n        UV_UDP_REUSEADDR: number;\\\\n        signals: {\\\\n            SIGHUP: number;\\\\n            SIGINT: number;\\\\n            SIGQUIT: number;\\\\n            SIGILL: number;\\\\n            SIGTRAP: number;\\\\n            SIGABRT: number;\\\\n            SIGIOT: number;\\\\n            SIGBUS: number;\\\\n            SIGFPE: number;\\\\n            SIGKILL: number;\\\\n            SIGUSR1: number;\\\\n            SIGSEGV: number;\\\\n            SIGUSR2: number;\\\\n            SIGPIPE: number;\\\\n            SIGALRM: number;\\\\n            SIGTERM: number;\\\\n            SIGCHLD: number;\\\\n            SIGSTKFLT: number;\\\\n            SIGCONT: number;\\\\n            SIGSTOP: number;\\\\n            SIGTSTP: number;\\\\n            SIGTTIN: number;\\\\n            SIGTTOU: number;\\\\n            SIGURG: number;\\\\n            SIGXCPU: number;\\\\n            SIGXFSZ: number;\\\\n            SIGVTALRM: number;\\\\n            SIGPROF: number;\\\\n            SIGWINCH: number;\\\\n            SIGIO: number;\\\\n            SIGPOLL: number;\\\\n            SIGPWR: number;\\\\n            SIGSYS: number;\\\\n            SIGUNUSED: number;\\\\n        };\\\\n        errno: {\\\\n            E2BIG: number;\\\\n            EACCES: number;\\\\n            EADDRINUSE: number;\\\\n            EADDRNOTAVAIL: number;\\\\n            EAFNOSUPPORT: number;\\\\n            EAGAIN: number;\\\\n            EALREADY: number;\\\\n            EBADF: number;\\\\n            EBADMSG: number;\\\\n            EBUSY: number;\\\\n            ECANCELED: number;\\\\n            ECHILD: number;\\\\n            ECONNABORTED: number;\\\\n            ECONNREFUSED: number;\\\\n            ECONNRESET: number;\\\\n            EDEADLK: number;\\\\n            EDESTADDRREQ: number;\\\\n            EDOM: number;\\\\n            EDQUOT: number;\\\\n            EEXIST: number;\\\\n            EFAULT: number;\\\\n            EFBIG: number;\\\\n            EHOSTUNREACH: number;\\\\n            EIDRM: number;\\\\n            EILSEQ: number;\\\\n            EINPROGRESS: number;\\\\n            EINTR: number;\\\\n            EINVAL: number;\\\\n            EIO: number;\\\\n            EISCONN: number;\\\\n            EISDIR: number;\\\\n            ELOOP: number;\\\\n            EMFILE: number;\\\\n            EMLINK: number;\\\\n            EMSGSIZE: number;\\\\n            EMULTIHOP: number;\\\\n            ENAMETOOLONG: number;\\\\n            ENETDOWN: number;\\\\n            ENETRESET: number;\\\\n            ENETUNREACH: number;\\\\n            ENFILE: number;\\\\n            ENOBUFS: number;\\\\n            ENODATA: number;\\\\n            ENODEV: number;\\\\n            ENOENT: number;\\\\n            ENOEXEC: number;\\\\n            ENOLCK: number;\\\\n            ENOLINK: number;\\\\n            ENOMEM: number;\\\\n            ENOMSG: number;\\\\n            ENOPROTOOPT: number;\\\\n            ENOSPC: number;\\\\n            ENOSR: number;\\\\n            ENOSTR: number;\\\\n            ENOSYS: number;\\\\n            ENOTCONN: number;\\\\n            ENOTDIR: number;\\\\n            ENOTEMPTY: number;\\\\n            ENOTSOCK: number;\\\\n            ENOTSUP: number;\\\\n            ENOTTY: number;\\\\n            ENXIO: number;\\\\n            EOPNOTSUPP: number;\\\\n            EOVERFLOW: number;\\\\n            EPERM: number;\\\\n            EPIPE: number;\\\\n            EPROTO: number;\\\\n            EPROTONOSUPPORT: number;\\\\n            EPROTOTYPE: number;\\\\n            ERANGE: number;\\\\n            EROFS: number;\\\\n            ESPIPE: number;\\\\n            ESRCH: number;\\\\n            ESTALE: number;\\\\n            ETIME: number;\\\\n            ETIMEDOUT: number;\\\\n            ETXTBSY: number;\\\\n            EWOULDBLOCK: number;\\\\n            EXDEV: number;\\\\n        };\\\\n        priority: {\\\\n            PRIORITY_LOW: number;\\\\n            PRIORITY_BELOW_NORMAL: number;\\\\n            PRIORITY_NORMAL: number;\\\\n            PRIORITY_ABOVE_NORMAL: number;\\\\n            PRIORITY_HIGH: number;\\\\n            PRIORITY_HIGHEST: number;\\\\n        }\\\\n    };\\\\n    function arch(): string;\\\\n    function platform(): NodeJS.Platform;\\\\n    function tmpdir(): string;\\\\n    const EOL: string;\\\\n    function endianness(): \\\\\\\"BE\\\\\\\" | \\\\\\\"LE\\\\\\\";\\\\n    /**\\\\n     * Gets the priority of a process.\\\\n     * Defaults to current process.\\\\n     */\\\\n    function getPriority(pid?: number): number;\\\\n    /**\\\\n     * Sets the priority of the current process.\\\\n     * @param priority Must be in range of -20 to 19\\\\n     */\\\\n    function setPriority(priority: number): void;\\\\n    /**\\\\n     * Sets the priority of the process specified process.\\\\n     * @param priority Must be in range of -20 to 19\\\\n     */\\\\n    function setPriority(pid: number, priority: number): void;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/path.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"path\\\\\\\" {\\\\n    /**\\\\n     * A parsed path object generated by path.parse() or consumed by path.format().\\\\n     */\\\\n    interface ParsedPath {\\\\n        /**\\\\n         * The root of the path such as '/' or 'c:\\\\\\\\'\\\\n         */\\\\n        root: string;\\\\n        /**\\\\n         * The full directory path such as '/home/user/dir' or 'c:\\\\\\\\path\\\\\\\\dir'\\\\n         */\\\\n        dir: string;\\\\n        /**\\\\n         * The file name including extension (if any) such as 'index.html'\\\\n         */\\\\n        base: string;\\\\n        /**\\\\n         * The file extension (if any) such as '.html'\\\\n         */\\\\n        ext: string;\\\\n        /**\\\\n         * The file name without extension (if any) such as 'index'\\\\n         */\\\\n        name: string;\\\\n    }\\\\n    interface FormatInputPathObject {\\\\n        /**\\\\n         * The root of the path such as '/' or 'c:\\\\\\\\'\\\\n         */\\\\n        root?: string;\\\\n        /**\\\\n         * The full directory path such as '/home/user/dir' or 'c:\\\\\\\\path\\\\\\\\dir'\\\\n         */\\\\n        dir?: string;\\\\n        /**\\\\n         * The file name including extension (if any) such as 'index.html'\\\\n         */\\\\n        base?: string;\\\\n        /**\\\\n         * The file extension (if any) such as '.html'\\\\n         */\\\\n        ext?: string;\\\\n        /**\\\\n         * The file name without extension (if any) such as 'index'\\\\n         */\\\\n        name?: string;\\\\n    }\\\\n\\\\n    /**\\\\n     * Normalize a string path, reducing '..' and '.' parts.\\\\n     * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.\\\\n     *\\\\n     * @param p string path to normalize.\\\\n     */\\\\n    function normalize(p: string): string;\\\\n    /**\\\\n     * Join all arguments together and normalize the resulting path.\\\\n     * Arguments must be strings. In v0.8, non-string arguments were silently ignored. In v0.10 and up, an exception is thrown.\\\\n     *\\\\n     * @param paths paths to join.\\\\n     */\\\\n    function join(...paths: string[]): string;\\\\n    /**\\\\n     * The right-most parameter is considered {to}.  Other parameters are considered an array of {from}.\\\\n     *\\\\n     * Starting from leftmost {from} parameter, resolves {to} to an absolute path.\\\\n     *\\\\n     * If {to} isn't already absolute, {from} arguments are prepended in right to left order,\\\\n     * until an absolute path is found. If after using all {from} paths still no absolute path is found,\\\\n     * the current working directory is used as well. The resulting path is normalized,\\\\n     * and trailing slashes are removed unless the path gets resolved to the root directory.\\\\n     *\\\\n     * @param pathSegments string paths to join.  Non-string arguments are ignored.\\\\n     */\\\\n    function resolve(...pathSegments: string[]): string;\\\\n    /**\\\\n     * Determines whether {path} is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory.\\\\n     *\\\\n     * @param path path to test.\\\\n     */\\\\n    function isAbsolute(path: string): boolean;\\\\n    /**\\\\n     * Solve the relative path from {from} to {to}.\\\\n     * At times we have two absolute paths, and we need to derive the relative path from one to the other. This is actually the reverse transform of path.resolve.\\\\n     */\\\\n    function relative(from: string, to: string): string;\\\\n    /**\\\\n     * Return the directory name of a path. Similar to the Unix dirname command.\\\\n     *\\\\n     * @param p the path to evaluate.\\\\n     */\\\\n    function dirname(p: string): string;\\\\n    /**\\\\n     * Return the last portion of a path. Similar to the Unix basename command.\\\\n     * Often used to extract the file name from a fully qualified path.\\\\n     *\\\\n     * @param p the path to evaluate.\\\\n     * @param ext optionally, an extension to remove from the result.\\\\n     */\\\\n    function basename(p: string, ext?: string): string;\\\\n    /**\\\\n     * Return the extension of the path, from the last '.' to end of string in the last portion of the path.\\\\n     * If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string\\\\n     *\\\\n     * @param p the path to evaluate.\\\\n     */\\\\n    function extname(p: string): string;\\\\n    /**\\\\n     * The platform-specific file separator. '\\\\\\\\\\\\\\\\' or '/'.\\\\n     */\\\\n    const sep: '\\\\\\\\\\\\\\\\' | '/';\\\\n    /**\\\\n     * The platform-specific file delimiter. ';' or ':'.\\\\n     */\\\\n    const delimiter: ';' | ':';\\\\n    /**\\\\n     * Returns an object from a path string - the opposite of format().\\\\n     *\\\\n     * @param pathString path to evaluate.\\\\n     */\\\\n    function parse(pathString: string): ParsedPath;\\\\n    /**\\\\n     * Returns a path string from an object - the opposite of parse().\\\\n     *\\\\n     * @param pathString path to evaluate.\\\\n     */\\\\n    function format(pathObject: FormatInputPathObject): string;\\\\n\\\\n    namespace posix {\\\\n        function normalize(p: string): string;\\\\n        function join(...paths: string[]): string;\\\\n        function resolve(...pathSegments: string[]): string;\\\\n        function isAbsolute(p: string): boolean;\\\\n        function relative(from: string, to: string): string;\\\\n        function dirname(p: string): string;\\\\n        function basename(p: string, ext?: string): string;\\\\n        function extname(p: string): string;\\\\n        const sep: string;\\\\n        const delimiter: string;\\\\n        function parse(p: string): ParsedPath;\\\\n        function format(pP: FormatInputPathObject): string;\\\\n    }\\\\n\\\\n    namespace win32 {\\\\n        function normalize(p: string): string;\\\\n        function join(...paths: string[]): string;\\\\n        function resolve(...pathSegments: string[]): string;\\\\n        function isAbsolute(p: string): boolean;\\\\n        function relative(from: string, to: string): string;\\\\n        function dirname(p: string): string;\\\\n        function basename(p: string, ext?: string): string;\\\\n        function extname(p: string): string;\\\\n        const sep: string;\\\\n        const delimiter: string;\\\\n        function parse(p: string): ParsedPath;\\\\n        function format(pP: FormatInputPathObject): string;\\\\n    }\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/perf_hooks.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"perf_hooks\\\\\\\" {\\\\n    import { AsyncResource } from \\\\\\\"async_hooks\\\\\\\";\\\\n\\\\n    interface PerformanceEntry {\\\\n        /**\\\\n         * The total number of milliseconds elapsed for this entry.\\\\n         * This value will not be meaningful for all Performance Entry types.\\\\n         */\\\\n        readonly duration: number;\\\\n\\\\n        /**\\\\n         * The name of the performance entry.\\\\n         */\\\\n        readonly name: string;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp marking the starting time of the Performance Entry.\\\\n         */\\\\n        readonly startTime: number;\\\\n\\\\n        /**\\\\n         * The type of the performance entry.\\\\n         * Currently it may be one of: 'node', 'mark', 'measure', 'gc', or 'function'.\\\\n         */\\\\n        readonly entryType: string;\\\\n\\\\n        /**\\\\n         * When performanceEntry.entryType is equal to 'gc', the performance.kind property identifies\\\\n         * the type of garbage collection operation that occurred.\\\\n         * The value may be one of perf_hooks.constants.\\\\n         */\\\\n        readonly kind?: number;\\\\n    }\\\\n\\\\n    interface PerformanceNodeTiming extends PerformanceEntry {\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which the Node.js process completed bootstrap.\\\\n         */\\\\n        readonly bootstrapComplete: number;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which cluster processing ended.\\\\n         */\\\\n        readonly clusterSetupEnd: number;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which cluster processing started.\\\\n         */\\\\n        readonly clusterSetupStart: number;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which the Node.js event loop exited.\\\\n         */\\\\n        readonly loopExit: number;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which the Node.js event loop started.\\\\n         */\\\\n        readonly loopStart: number;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which main module load ended.\\\\n         */\\\\n        readonly moduleLoadEnd: number;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which main module load started.\\\\n         */\\\\n        readonly moduleLoadStart: number;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which the Node.js process was initialized.\\\\n         */\\\\n        readonly nodeStart: number;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which preload module load ended.\\\\n         */\\\\n        readonly preloadModuleLoadEnd: number;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which preload module load started.\\\\n         */\\\\n        readonly preloadModuleLoadStart: number;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which third_party_main processing ended.\\\\n         */\\\\n        readonly thirdPartyMainEnd: number;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which third_party_main processing started.\\\\n         */\\\\n        readonly thirdPartyMainStart: number;\\\\n\\\\n        /**\\\\n         * The high resolution millisecond timestamp at which the V8 platform was initialized.\\\\n         */\\\\n        readonly v8Start: number;\\\\n    }\\\\n\\\\n    interface Performance {\\\\n        /**\\\\n         * If name is not provided, removes all PerformanceFunction objects from the Performance Timeline.\\\\n         * If name is provided, removes entries with name.\\\\n         * @param name\\\\n         */\\\\n        clearFunctions(name?: string): void;\\\\n\\\\n        /**\\\\n         * If name is not provided, removes all PerformanceMark objects from the Performance Timeline.\\\\n         * If name is provided, removes only the named mark.\\\\n         * @param name\\\\n         */\\\\n        clearMarks(name?: string): void;\\\\n\\\\n        /**\\\\n         * If name is not provided, removes all PerformanceMeasure objects from the Performance Timeline.\\\\n         * If name is provided, removes only objects whose performanceEntry.name matches name.\\\\n         */\\\\n        clearMeasures(name?: string): void;\\\\n\\\\n        /**\\\\n         * Returns a list of all PerformanceEntry objects in chronological order with respect to performanceEntry.startTime.\\\\n         * @return list of all PerformanceEntry objects\\\\n         */\\\\n        getEntries(): PerformanceEntry[];\\\\n\\\\n        /**\\\\n         * Returns a list of all PerformanceEntry objects in chronological order with respect to performanceEntry.startTime\\\\n         * whose performanceEntry.name is equal to name, and optionally, whose performanceEntry.entryType is equal to type.\\\\n         * @param name\\\\n         * @param type\\\\n         * @return list of all PerformanceEntry objects\\\\n         */\\\\n        getEntriesByName(name: string, type?: string): PerformanceEntry[];\\\\n\\\\n        /**\\\\n         * Returns a list of all PerformanceEntry objects in chronological order with respect to performanceEntry.startTime\\\\n         * whose performanceEntry.entryType is equal to type.\\\\n         * @param type\\\\n         * @return list of all PerformanceEntry objects\\\\n         */\\\\n        getEntriesByType(type: string): PerformanceEntry[];\\\\n\\\\n        /**\\\\n         * Creates a new PerformanceMark entry in the Performance Timeline.\\\\n         * A PerformanceMark is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'mark',\\\\n         * and whose performanceEntry.duration is always 0.\\\\n         * Performance marks are used to mark specific significant moments in the Performance Timeline.\\\\n         * @param name\\\\n         */\\\\n        mark(name?: string): void;\\\\n\\\\n        /**\\\\n         * Creates a new PerformanceMeasure entry in the Performance Timeline.\\\\n         * A PerformanceMeasure is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'measure',\\\\n         * and whose performanceEntry.duration measures the number of milliseconds elapsed since startMark and endMark.\\\\n         *\\\\n         * The startMark argument may identify any existing PerformanceMark in the the Performance Timeline, or may identify\\\\n         * any of the timestamp properties provided by the PerformanceNodeTiming class. If the named startMark does not exist,\\\\n         * then startMark is set to timeOrigin by default.\\\\n         *\\\\n         * The endMark argument must identify any existing PerformanceMark in the the Performance Timeline or any of the timestamp\\\\n         * properties provided by the PerformanceNodeTiming class. If the named endMark does not exist, an error will be thrown.\\\\n         * @param name\\\\n         * @param startMark\\\\n         * @param endMark\\\\n         */\\\\n        measure(name: string, startMark: string, endMark: string): void;\\\\n\\\\n        /**\\\\n         * An instance of the PerformanceNodeTiming class that provides performance metrics for specific Node.js operational milestones.\\\\n         */\\\\n        readonly nodeTiming: PerformanceNodeTiming;\\\\n\\\\n        /**\\\\n         * @return the current high resolution millisecond timestamp\\\\n         */\\\\n        now(): number;\\\\n\\\\n        /**\\\\n         * The timeOrigin specifies the high resolution millisecond timestamp from which all performance metric durations are measured.\\\\n         */\\\\n        readonly timeOrigin: number;\\\\n\\\\n        /**\\\\n         * Wraps a function within a new function that measures the running time of the wrapped function.\\\\n         * A PerformanceObserver must be subscribed to the 'function' event type in order for the timing details to be accessed.\\\\n         * @param fn\\\\n         */\\\\n        timerify<T extends (...optionalParams: any[]) => any>(fn: T): T;\\\\n    }\\\\n\\\\n    interface PerformanceObserverEntryList {\\\\n        /**\\\\n         * @return a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime.\\\\n         */\\\\n        getEntries(): PerformanceEntry[];\\\\n\\\\n        /**\\\\n         * @return a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime\\\\n         * whose performanceEntry.name is equal to name, and optionally, whose performanceEntry.entryType is equal to type.\\\\n         */\\\\n        getEntriesByName(name: string, type?: string): PerformanceEntry[];\\\\n\\\\n        /**\\\\n         * @return Returns a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime\\\\n         * whose performanceEntry.entryType is equal to type.\\\\n         */\\\\n        getEntriesByType(type: string): PerformanceEntry[];\\\\n    }\\\\n\\\\n    type PerformanceObserverCallback = (list: PerformanceObserverEntryList, observer: PerformanceObserver) => void;\\\\n\\\\n    class PerformanceObserver extends AsyncResource {\\\\n        constructor(callback: PerformanceObserverCallback);\\\\n\\\\n        /**\\\\n         * Disconnects the PerformanceObserver instance from all notifications.\\\\n         */\\\\n        disconnect(): void;\\\\n\\\\n        /**\\\\n         * Subscribes the PerformanceObserver instance to notifications of new PerformanceEntry instances identified by options.entryTypes.\\\\n         * When options.buffered is false, the callback will be invoked once for every PerformanceEntry instance.\\\\n         * Property buffered defaults to false.\\\\n         * @param options\\\\n         */\\\\n        observe(options: { entryTypes: string[], buffered?: boolean }): void;\\\\n    }\\\\n\\\\n    namespace constants {\\\\n        const NODE_PERFORMANCE_GC_MAJOR: number;\\\\n        const NODE_PERFORMANCE_GC_MINOR: number;\\\\n        const NODE_PERFORMANCE_GC_INCREMENTAL: number;\\\\n        const NODE_PERFORMANCE_GC_WEAKCB: number;\\\\n    }\\\\n\\\\n    const performance: Performance;\\\\n\\\\n    interface EventLoopMonitorOptions {\\\\n        /**\\\\n         * The sampling rate in milliseconds.\\\\n         * Must be greater than zero.\\\\n         * @default 10\\\\n         */\\\\n        resolution?: number;\\\\n    }\\\\n\\\\n    interface EventLoopDelayMonitor {\\\\n        /**\\\\n         * Enables the event loop delay sample timer. Returns `true` if the timer was started, `false` if it was already started.\\\\n         */\\\\n        enable(): boolean;\\\\n        /**\\\\n         * Disables the event loop delay sample timer. Returns `true` if the timer was stopped, `false` if it was already stopped.\\\\n         */\\\\n        disable(): boolean;\\\\n\\\\n        /**\\\\n         * Resets the collected histogram data.\\\\n         */\\\\n        reset(): void;\\\\n\\\\n        /**\\\\n         * Returns the value at the given percentile.\\\\n         * @param percentile A percentile value between 1 and 100.\\\\n         */\\\\n        percentile(percentile: number): number;\\\\n\\\\n        /**\\\\n         * A `Map` object detailing the accumulated percentile distribution.\\\\n         */\\\\n        readonly percentiles: Map<number, number>;\\\\n\\\\n        /**\\\\n         * The number of times the event loop delay exceeded the maximum 1 hour eventloop delay threshold.\\\\n         */\\\\n        readonly exceeds: number;\\\\n\\\\n        /**\\\\n         * The minimum recorded event loop delay.\\\\n         */\\\\n        readonly min: number;\\\\n\\\\n        /**\\\\n         * The maximum recorded event loop delay.\\\\n         */\\\\n        readonly max: number;\\\\n\\\\n        /**\\\\n         * The mean of the recorded event loop delays.\\\\n         */\\\\n        readonly mean: number;\\\\n\\\\n        /**\\\\n         * The standard deviation of the recorded event loop delays.\\\\n         */\\\\n        readonly stddev: number;\\\\n    }\\\\n\\\\n    function monitorEventLoopDelay(options?: EventLoopMonitorOptions): EventLoopDelayMonitor;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/process.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"process\\\\\\\" {\\\\n    export = process;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/punycode.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"punycode\\\\\\\" {\\\\n    function decode(string: string): string;\\\\n    function encode(string: string): string;\\\\n    function toUnicode(domain: string): string;\\\\n    function toASCII(domain: string): string;\\\\n    const ucs2: ucs2;\\\\n    interface ucs2 {\\\\n        decode(string: string): number[];\\\\n        encode(codePoints: number[]): string;\\\\n    }\\\\n    const version: string;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/readline.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"readline\\\\\\\" {\\\\n    import * as events from \\\\\\\"events\\\\\\\";\\\\n    import * as stream from \\\\\\\"stream\\\\\\\";\\\\n\\\\n    interface Key {\\\\n        sequence?: string;\\\\n        name?: string;\\\\n        ctrl?: boolean;\\\\n        meta?: boolean;\\\\n        shift?: boolean;\\\\n    }\\\\n\\\\n    class Interface extends events.EventEmitter {\\\\n        readonly terminal: boolean;\\\\n\\\\n        /**\\\\n         * NOTE: According to the documentation:\\\\n         *\\\\n         * > Instances of the `readline.Interface` class are constructed using the\\\\n         * > `readline.createInterface()` method.\\\\n         *\\\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/readline.html#readline_class_interface\\\\n         */\\\\n        protected constructor(input: NodeJS.ReadableStream, output?: NodeJS.WritableStream, completer?: Completer | AsyncCompleter, terminal?: boolean);\\\\n        /**\\\\n         * NOTE: According to the documentation:\\\\n         *\\\\n         * > Instances of the `readline.Interface` class are constructed using the\\\\n         * > `readline.createInterface()` method.\\\\n         *\\\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/readline.html#readline_class_interface\\\\n         */\\\\n        protected constructor(options: ReadLineOptions);\\\\n\\\\n        setPrompt(prompt: string): void;\\\\n        prompt(preserveCursor?: boolean): void;\\\\n        question(query: string, callback: (answer: string) => void): void;\\\\n        pause(): this;\\\\n        resume(): this;\\\\n        close(): void;\\\\n        write(data: string | Buffer, key?: Key): void;\\\\n\\\\n        /**\\\\n         * events.EventEmitter\\\\n         * 1. close\\\\n         * 2. line\\\\n         * 3. pause\\\\n         * 4. resume\\\\n         * 5. SIGCONT\\\\n         * 6. SIGINT\\\\n         * 7. SIGTSTP\\\\n         */\\\\n\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"line\\\\\\\", listener: (input: string) => void): this;\\\\n        addListener(event: \\\\\\\"pause\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"resume\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"SIGCONT\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"SIGINT\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"SIGTSTP\\\\\\\", listener: () => void): this;\\\\n\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        emit(event: \\\\\\\"close\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"line\\\\\\\", input: string): boolean;\\\\n        emit(event: \\\\\\\"pause\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"resume\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"SIGCONT\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"SIGINT\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"SIGTSTP\\\\\\\"): boolean;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"line\\\\\\\", listener: (input: string) => void): this;\\\\n        on(event: \\\\\\\"pause\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"resume\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"SIGCONT\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"SIGINT\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"SIGTSTP\\\\\\\", listener: () => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"line\\\\\\\", listener: (input: string) => void): this;\\\\n        once(event: \\\\\\\"pause\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"resume\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"SIGCONT\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"SIGINT\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"SIGTSTP\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"line\\\\\\\", listener: (input: string) => void): this;\\\\n        prependListener(event: \\\\\\\"pause\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"resume\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"SIGCONT\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"SIGINT\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"SIGTSTP\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"line\\\\\\\", listener: (input: string) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"pause\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"resume\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"SIGCONT\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"SIGINT\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"SIGTSTP\\\\\\\", listener: () => void): this;\\\\n        [Symbol.asyncIterator](): AsyncIterableIterator<string>;\\\\n    }\\\\n\\\\n    type ReadLine = Interface; // type forwarded for backwards compatiblity\\\\n\\\\n    type Completer = (line: string) => CompleterResult;\\\\n    type AsyncCompleter = (line: string, callback: (err?: null | Error, result?: CompleterResult) => void) => any;\\\\n\\\\n    type CompleterResult = [string[], string];\\\\n\\\\n    interface ReadLineOptions {\\\\n        input: NodeJS.ReadableStream;\\\\n        output?: NodeJS.WritableStream;\\\\n        completer?: Completer | AsyncCompleter;\\\\n        terminal?: boolean;\\\\n        historySize?: number;\\\\n        prompt?: string;\\\\n        crlfDelay?: number;\\\\n        removeHistoryDuplicates?: boolean;\\\\n    }\\\\n\\\\n    function createInterface(input: NodeJS.ReadableStream, output?: NodeJS.WritableStream, completer?: Completer | AsyncCompleter, terminal?: boolean): Interface;\\\\n    function createInterface(options: ReadLineOptions): Interface;\\\\n    function emitKeypressEvents(stream: NodeJS.ReadableStream, interface?: Interface): void;\\\\n\\\\n    type Direction = -1 | 0 | 1;\\\\n\\\\n    /**\\\\n     * Clears the current line of this WriteStream in a direction identified by `dir`.\\\\n     */\\\\n    function clearLine(stream: NodeJS.WritableStream, dir: Direction, callback?: () => void): boolean;\\\\n    /**\\\\n     * Clears this `WriteStream` from the current cursor down.\\\\n     */\\\\n    function clearScreenDown(stream: NodeJS.WritableStream, callback?: () => void): boolean;\\\\n    /**\\\\n     * Moves this WriteStream's cursor to the specified position.\\\\n     */\\\\n    function cursorTo(stream: NodeJS.WritableStream, x: number, y?: number, callback?: () => void): boolean;\\\\n    /**\\\\n     * Moves this WriteStream's cursor relative to its current position.\\\\n     */\\\\n    function moveCursor(stream: NodeJS.WritableStream, dx: number, dy: number, callback?: () => void): boolean;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/vm.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"vm\\\\\\\" {\\\\n    interface Context {\\\\n        [key: string]: any;\\\\n    }\\\\n    interface BaseOptions {\\\\n        /**\\\\n         * Specifies the filename used in stack traces produced by this script.\\\\n         * Default: `''`.\\\\n         */\\\\n        filename?: string;\\\\n        /**\\\\n         * Specifies the line number offset that is displayed in stack traces produced by this script.\\\\n         * Default: `0`.\\\\n         */\\\\n        lineOffset?: number;\\\\n        /**\\\\n         * Specifies the column number offset that is displayed in stack traces produced by this script.\\\\n         * Default: `0`\\\\n         */\\\\n        columnOffset?: number;\\\\n    }\\\\n    interface ScriptOptions extends BaseOptions {\\\\n        displayErrors?: boolean;\\\\n        timeout?: number;\\\\n        cachedData?: Buffer;\\\\n        produceCachedData?: boolean;\\\\n    }\\\\n    interface RunningScriptOptions extends BaseOptions {\\\\n        displayErrors?: boolean;\\\\n        timeout?: number;\\\\n    }\\\\n    interface CompileFunctionOptions extends BaseOptions {\\\\n        /**\\\\n         * Provides an optional data with V8's code cache data for the supplied source.\\\\n         */\\\\n        cachedData?: Buffer;\\\\n        /**\\\\n         * Specifies whether to produce new cache data.\\\\n         * Default: `false`,\\\\n         */\\\\n        produceCachedData?: boolean;\\\\n        /**\\\\n         * The sandbox/context in which the said function should be compiled in.\\\\n         */\\\\n        parsingContext?: Context;\\\\n\\\\n        /**\\\\n         * An array containing a collection of context extensions (objects wrapping the current scope) to be applied while compiling\\\\n         */\\\\n        contextExtensions?: Object[];\\\\n    }\\\\n\\\\n    interface CreateContextOptions {\\\\n        /**\\\\n         * Human-readable name of the newly created context.\\\\n         * @default 'VM Context i' Where i is an ascending numerical index of the created context.\\\\n         */\\\\n        name?: string;\\\\n        /**\\\\n         * Corresponds to the newly created context for display purposes.\\\\n         * The origin should be formatted like a `URL`, but with only the scheme, host, and port (if necessary),\\\\n         * like the value of the `url.origin` property of a URL object.\\\\n         * Most notably, this string should omit the trailing slash, as that denotes a path.\\\\n         * @default ''\\\\n         */\\\\n        origin?: string;\\\\n        codeGeneration?: {\\\\n            /**\\\\n             * If set to false any calls to eval or function constructors (Function, GeneratorFunction, etc)\\\\n             * will throw an EvalError.\\\\n             * @default true\\\\n             */\\\\n            strings?: boolean;\\\\n            /**\\\\n             * If set to false any attempt to compile a WebAssembly module will throw a WebAssembly.CompileError.\\\\n             * @default true\\\\n             */\\\\n            wasm?: boolean;\\\\n        };\\\\n    }\\\\n\\\\n    class Script {\\\\n        constructor(code: string, options?: ScriptOptions);\\\\n        runInContext(contextifiedSandbox: Context, options?: RunningScriptOptions): any;\\\\n        runInNewContext(sandbox?: Context, options?: RunningScriptOptions): any;\\\\n        runInThisContext(options?: RunningScriptOptions): any;\\\\n        createCachedData(): Buffer;\\\\n    }\\\\n    function createContext(sandbox?: Context, options?: CreateContextOptions): Context;\\\\n    function isContext(sandbox: Context): boolean;\\\\n    function runInContext(code: string, contextifiedSandbox: Context, options?: RunningScriptOptions | string): any;\\\\n    function runInNewContext(code: string, sandbox?: Context, options?: RunningScriptOptions | string): any;\\\\n    function runInThisContext(code: string, options?: RunningScriptOptions | string): any;\\\\n    function compileFunction(code: string, params: string[], options: CompileFunctionOptions): Function;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/util.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"util\\\\\\\" {\\\\n    interface InspectOptions extends NodeJS.InspectOptions { }\\\\n    function format(format: any, ...param: any[]): string;\\\\n    function formatWithOptions(inspectOptions: InspectOptions, format: string, ...param: any[]): string;\\\\n    /** @deprecated since v0.11.3 - use a third party module instead. */\\\\n    function log(string: string): void;\\\\n    function inspect(object: any, showHidden?: boolean, depth?: number | null, color?: boolean): string;\\\\n    function inspect(object: any, options: InspectOptions): string;\\\\n    namespace inspect {\\\\n        let colors: {\\\\n            [color: string]: [number, number] | undefined\\\\n        };\\\\n        let styles: {\\\\n            [style: string]: string | undefined\\\\n        };\\\\n        let defaultOptions: InspectOptions;\\\\n        /**\\\\n         * Allows changing inspect settings from the repl.\\\\n         */\\\\n        let replDefaults: InspectOptions;\\\\n    }\\\\n    /** @deprecated since v4.0.0 - use `Array.isArray()` instead. */\\\\n    function isArray(object: any): object is any[];\\\\n    /** @deprecated since v4.0.0 - use `util.types.isRegExp()` instead. */\\\\n    function isRegExp(object: any): object is RegExp;\\\\n    /** @deprecated since v4.0.0 - use `util.types.isDate()` instead. */\\\\n    function isDate(object: any): object is Date;\\\\n    /** @deprecated since v4.0.0 - use `util.types.isNativeError()` instead. */\\\\n    function isError(object: any): object is Error;\\\\n    function inherits(constructor: any, superConstructor: any): void;\\\\n    function debuglog(key: string): (msg: string, ...param: any[]) => void;\\\\n    /** @deprecated since v4.0.0 - use `typeof value === 'boolean'` instead. */\\\\n    function isBoolean(object: any): object is boolean;\\\\n    /** @deprecated since v4.0.0 - use `Buffer.isBuffer()` instead. */\\\\n    function isBuffer(object: any): object is Buffer;\\\\n    /** @deprecated since v4.0.0 - use `typeof value === 'function'` instead. */\\\\n    function isFunction(object: any): boolean;\\\\n    /** @deprecated since v4.0.0 - use `value === null` instead. */\\\\n    function isNull(object: any): object is null;\\\\n    /** @deprecated since v4.0.0 - use `value === null || value === undefined` instead. */\\\\n    function isNullOrUndefined(object: any): object is null | undefined;\\\\n    /** @deprecated since v4.0.0 - use `typeof value === 'number'` instead. */\\\\n    function isNumber(object: any): object is number;\\\\n    /** @deprecated since v4.0.0 - use `value !== null && typeof value === 'object'` instead. */\\\\n    function isObject(object: any): boolean;\\\\n    /** @deprecated since v4.0.0 - use `(typeof value !== 'object' && typeof value !== 'function') || value === null` instead. */\\\\n    function isPrimitive(object: any): boolean;\\\\n    /** @deprecated since v4.0.0 - use `typeof value === 'string'` instead. */\\\\n    function isString(object: any): object is string;\\\\n    /** @deprecated since v4.0.0 - use `typeof value === 'symbol'` instead. */\\\\n    function isSymbol(object: any): object is symbol;\\\\n    /** @deprecated since v4.0.0 - use `value === undefined` instead. */\\\\n    function isUndefined(object: any): object is undefined;\\\\n    function deprecate<T extends Function>(fn: T, message: string): T;\\\\n    function isDeepStrictEqual(val1: any, val2: any): boolean;\\\\n\\\\n    interface CustomPromisify<TCustom extends Function> extends Function {\\\\n        __promisify__: TCustom;\\\\n    }\\\\n\\\\n    function callbackify(fn: () => Promise<void>): (callback: (err: NodeJS.ErrnoException) => void) => void;\\\\n    function callbackify<TResult>(fn: () => Promise<TResult>): (callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\\\\n    function callbackify<T1>(fn: (arg1: T1) => Promise<void>): (arg1: T1, callback: (err: NodeJS.ErrnoException) => void) => void;\\\\n    function callbackify<T1, TResult>(fn: (arg1: T1) => Promise<TResult>): (arg1: T1, callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\\\\n    function callbackify<T1, T2>(fn: (arg1: T1, arg2: T2) => Promise<void>): (arg1: T1, arg2: T2, callback: (err: NodeJS.ErrnoException) => void) => void;\\\\n    function callbackify<T1, T2, TResult>(fn: (arg1: T1, arg2: T2) => Promise<TResult>): (arg1: T1, arg2: T2, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\\\n    function callbackify<T1, T2, T3>(fn: (arg1: T1, arg2: T2, arg3: T3) => Promise<void>): (arg1: T1, arg2: T2, arg3: T3, callback: (err: NodeJS.ErrnoException) => void) => void;\\\\n    function callbackify<T1, T2, T3, TResult>(\\\\n        fn: (arg1: T1, arg2: T2, arg3: T3) => Promise<TResult>): (arg1: T1, arg2: T2, arg3: T3, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\\\n    function callbackify<T1, T2, T3, T4>(\\\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<void>): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: NodeJS.ErrnoException) => void) => void;\\\\n    function callbackify<T1, T2, T3, T4, TResult>(\\\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<TResult>): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\\\n    function callbackify<T1, T2, T3, T4, T5>(\\\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<void>): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: NodeJS.ErrnoException) => void) => void;\\\\n    function callbackify<T1, T2, T3, T4, T5, TResult>(\\\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<TResult>,\\\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\\\n    function callbackify<T1, T2, T3, T4, T5, T6>(\\\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => Promise<void>,\\\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, callback: (err: NodeJS.ErrnoException) => void) => void;\\\\n    function callbackify<T1, T2, T3, T4, T5, T6, TResult>(\\\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => Promise<TResult>\\\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\\\\n\\\\n    function promisify<TCustom extends Function>(fn: CustomPromisify<TCustom>): TCustom;\\\\n    function promisify<TResult>(fn: (callback: (err: Error | null, result: TResult) => void) => void): () => Promise<TResult>;\\\\n    function promisify(fn: (callback: (err?: Error | null) => void) => void): () => Promise<void>;\\\\n    function promisify<T1, TResult>(fn: (arg1: T1, callback: (err: Error | null, result: TResult) => void) => void): (arg1: T1) => Promise<TResult>;\\\\n    function promisify<T1>(fn: (arg1: T1, callback: (err?: Error | null) => void) => void): (arg1: T1) => Promise<void>;\\\\n    function promisify<T1, T2, TResult>(fn: (arg1: T1, arg2: T2, callback: (err: Error | null, result: TResult) => void) => void): (arg1: T1, arg2: T2) => Promise<TResult>;\\\\n    function promisify<T1, T2>(fn: (arg1: T1, arg2: T2, callback: (err?: Error | null) => void) => void): (arg1: T1, arg2: T2) => Promise<void>;\\\\n    function promisify<T1, T2, T3, TResult>(fn: (arg1: T1, arg2: T2, arg3: T3, callback: (err: Error | null, result: TResult) => void) => void): (arg1: T1, arg2: T2, arg3: T3) => Promise<TResult>;\\\\n    function promisify<T1, T2, T3>(fn: (arg1: T1, arg2: T2, arg3: T3, callback: (err?: Error | null) => void) => void): (arg1: T1, arg2: T2, arg3: T3) => Promise<void>;\\\\n    function promisify<T1, T2, T3, T4, TResult>(\\\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: Error | null, result: TResult) => void) => void,\\\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<TResult>;\\\\n    function promisify<T1, T2, T3, T4>(fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err?: Error | null) => void) => void): (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<void>;\\\\n    function promisify<T1, T2, T3, T4, T5, TResult>(\\\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: Error | null, result: TResult) => void) => void,\\\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<TResult>;\\\\n    function promisify<T1, T2, T3, T4, T5>(\\\\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err?: Error | null) => void) => void,\\\\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<void>;\\\\n    function promisify(fn: Function): Function;\\\\n\\\\n    namespace types {\\\\n        function isAnyArrayBuffer(object: any): boolean;\\\\n        function isArgumentsObject(object: any): object is IArguments;\\\\n        function isArrayBuffer(object: any): object is ArrayBuffer;\\\\n        function isAsyncFunction(object: any): boolean;\\\\n        function isBooleanObject(object: any): object is Boolean;\\\\n        function isBoxedPrimitive(object: any): object is (Number | Boolean | String | Symbol /* | Object(BigInt) | Object(Symbol) */);\\\\n        function isDataView(object: any): object is DataView;\\\\n        function isDate(object: any): object is Date;\\\\n        function isExternal(object: any): boolean;\\\\n        function isFloat32Array(object: any): object is Float32Array;\\\\n        function isFloat64Array(object: any): object is Float64Array;\\\\n        function isGeneratorFunction(object: any): boolean;\\\\n        function isGeneratorObject(object: any): boolean;\\\\n        function isInt8Array(object: any): object is Int8Array;\\\\n        function isInt16Array(object: any): object is Int16Array;\\\\n        function isInt32Array(object: any): object is Int32Array;\\\\n        function isMap(object: any): boolean;\\\\n        function isMapIterator(object: any): boolean;\\\\n        function isModuleNamespaceObject(value: any): boolean;\\\\n        function isNativeError(object: any): object is Error;\\\\n        function isNumberObject(object: any): object is Number;\\\\n        function isPromise(object: any): boolean;\\\\n        function isProxy(object: any): boolean;\\\\n        function isRegExp(object: any): object is RegExp;\\\\n        function isSet(object: any): boolean;\\\\n        function isSetIterator(object: any): boolean;\\\\n        function isSharedArrayBuffer(object: any): boolean;\\\\n        function isStringObject(object: any): boolean;\\\\n        function isSymbolObject(object: any): boolean;\\\\n        function isTypedArray(object: any): object is NodeJS.TypedArray;\\\\n        function isUint8Array(object: any): object is Uint8Array;\\\\n        function isUint8ClampedArray(object: any): object is Uint8ClampedArray;\\\\n        function isUint16Array(object: any): object is Uint16Array;\\\\n        function isUint32Array(object: any): object is Uint32Array;\\\\n        function isWeakMap(object: any): boolean;\\\\n        function isWeakSet(object: any): boolean;\\\\n        function isWebAssemblyCompiledModule(object: any): boolean;\\\\n    }\\\\n\\\\n    class TextDecoder {\\\\n        readonly encoding: string;\\\\n        readonly fatal: boolean;\\\\n        readonly ignoreBOM: boolean;\\\\n        constructor(\\\\n          encoding?: string,\\\\n          options?: { fatal?: boolean; ignoreBOM?: boolean }\\\\n        );\\\\n        decode(\\\\n          input?: NodeJS.TypedArray | DataView | ArrayBuffer | null,\\\\n          options?: { stream?: boolean }\\\\n        ): string;\\\\n    }\\\\n\\\\n    class TextEncoder {\\\\n        readonly encoding: string;\\\\n        encode(input?: string): Uint8Array;\\\\n    }\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/repl.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"repl\\\\\\\" {\\\\n    import { Interface, Completer, AsyncCompleter } from \\\\\\\"readline\\\\\\\";\\\\n    import { Context } from \\\\\\\"vm\\\\\\\";\\\\n    import { InspectOptions } from \\\\\\\"util\\\\\\\";\\\\n\\\\n    interface ReplOptions {\\\\n        /**\\\\n         * The input prompt to display.\\\\n         * Default: `\\\\\\\"> \\\\\\\"`\\\\n         */\\\\n        prompt?: string;\\\\n        /**\\\\n         * The `Readable` stream from which REPL input will be read.\\\\n         * Default: `process.stdin`\\\\n         */\\\\n        input?: NodeJS.ReadableStream;\\\\n        /**\\\\n         * The `Writable` stream to which REPL output will be written.\\\\n         * Default: `process.stdout`\\\\n         */\\\\n        output?: NodeJS.WritableStream;\\\\n        /**\\\\n         * If `true`, specifies that the output should be treated as a TTY terminal, and have\\\\n         * ANSI/VT100 escape codes written to it.\\\\n         * Default: checking the value of the `isTTY` property on the output stream upon\\\\n         * instantiation.\\\\n         */\\\\n        terminal?: boolean;\\\\n        /**\\\\n         * The function to be used when evaluating each given line of input.\\\\n         * Default: an async wrapper for the JavaScript `eval()` function. An `eval` function can\\\\n         * error with `repl.Recoverable` to indicate the input was incomplete and prompt for\\\\n         * additional lines.\\\\n         *\\\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_default_evaluation\\\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_custom_evaluation_functions\\\\n         */\\\\n        eval?: REPLEval;\\\\n        /**\\\\n         * If `true`, specifies that the default `writer` function should include ANSI color\\\\n         * styling to REPL output. If a custom `writer` function is provided then this has no\\\\n         * effect.\\\\n         * Default: the REPL instance's `terminal` value.\\\\n         */\\\\n        useColors?: boolean;\\\\n        /**\\\\n         * If `true`, specifies that the default evaluation function will use the JavaScript\\\\n         * `global` as the context as opposed to creating a new separate context for the REPL\\\\n         * instance. The node CLI REPL sets this value to `true`.\\\\n         * Default: `false`.\\\\n         */\\\\n        useGlobal?: boolean;\\\\n        /**\\\\n         * If `true`, specifies that the default writer will not output the return value of a\\\\n         * command if it evaluates to `undefined`.\\\\n         * Default: `false`.\\\\n         */\\\\n        ignoreUndefined?: boolean;\\\\n        /**\\\\n         * The function to invoke to format the output of each command before writing to `output`.\\\\n         * Default: a wrapper for `util.inspect`.\\\\n         *\\\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_customizing_repl_output\\\\n         */\\\\n        writer?: REPLWriter;\\\\n        /**\\\\n         * An optional function used for custom Tab auto completion.\\\\n         *\\\\n         * @see https://nodejs.org/dist/latest-v11.x/docs/api/readline.html#readline_use_of_the_completer_function\\\\n         */\\\\n        completer?: Completer | AsyncCompleter;\\\\n        /**\\\\n         * A flag that specifies whether the default evaluator executes all JavaScript commands in\\\\n         * strict mode or default (sloppy) mode.\\\\n         * Accepted values are:\\\\n         * - `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode.\\\\n         * - `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to\\\\n         *   prefacing every repl statement with `'use strict'`.\\\\n         */\\\\n        replMode?: typeof REPL_MODE_SLOPPY | typeof REPL_MODE_STRICT;\\\\n        /**\\\\n         * Stop evaluating the current piece of code when `SIGINT` is received, i.e. `Ctrl+C` is\\\\n         * pressed. This cannot be used together with a custom `eval` function.\\\\n         * Default: `false`.\\\\n         */\\\\n        breakEvalOnSigint?: boolean;\\\\n    }\\\\n\\\\n    type REPLEval = (this: REPLServer, evalCmd: string, context: Context, file: string, cb: (err: Error | null, result: any) => void) => void;\\\\n    type REPLWriter = (this: REPLServer, obj: any) => string;\\\\n\\\\n    /**\\\\n     * This is the default \\\\\\\"writer\\\\\\\" value, if none is passed in the REPL options,\\\\n     * and it can be overridden by custom print functions.\\\\n     */\\\\n    const writer: REPLWriter & { options: InspectOptions };\\\\n\\\\n    type REPLCommandAction = (this: REPLServer, text: string) => void;\\\\n\\\\n    interface REPLCommand {\\\\n        /**\\\\n         * Help text to be displayed when `.help` is entered.\\\\n         */\\\\n        help?: string;\\\\n        /**\\\\n         * The function to execute, optionally accepting a single string argument.\\\\n         */\\\\n        action: REPLCommandAction;\\\\n    }\\\\n\\\\n    /**\\\\n     * Provides a customizable Read-Eval-Print-Loop (REPL).\\\\n     *\\\\n     * Instances of `repl.REPLServer` will accept individual lines of user input, evaluate those\\\\n     * according to a user-defined evaluation function, then output the result. Input and output\\\\n     * may be from `stdin` and `stdout`, respectively, or may be connected to any Node.js `stream`.\\\\n     *\\\\n     * Instances of `repl.REPLServer` support automatic completion of inputs, simplistic Emacs-style\\\\n     * line editing, multi-line inputs, ANSI-styled output, saving and restoring current REPL session\\\\n     * state, error recovery, and customizable evaluation functions.\\\\n     *\\\\n     * Instances of `repl.REPLServer` are created using the `repl.start()` method and _should not_\\\\n     * be created directly using the JavaScript `new` keyword.\\\\n     *\\\\n     * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_repl\\\\n     */\\\\n    class REPLServer extends Interface {\\\\n        /**\\\\n         * The `vm.Context` provided to the `eval` function to be used for JavaScript\\\\n         * evaluation.\\\\n         */\\\\n        readonly context: Context;\\\\n        /**\\\\n         * The `Readable` stream from which REPL input will be read.\\\\n         */\\\\n        readonly inputStream: NodeJS.ReadableStream;\\\\n        /**\\\\n         * The `Writable` stream to which REPL output will be written.\\\\n         */\\\\n        readonly outputStream: NodeJS.WritableStream;\\\\n        /**\\\\n         * The commands registered via `replServer.defineCommand()`.\\\\n         */\\\\n        readonly commands: { readonly [name: string]: REPLCommand | undefined };\\\\n        /**\\\\n         * A value indicating whether the REPL is currently in \\\\\\\"editor mode\\\\\\\".\\\\n         *\\\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_commands_and_special_keys\\\\n         */\\\\n        readonly editorMode: boolean;\\\\n        /**\\\\n         * A value indicating whether the `_` variable has been assigned.\\\\n         *\\\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\\\\n         */\\\\n        readonly underscoreAssigned: boolean;\\\\n        /**\\\\n         * The last evaluation result from the REPL (assigned to the `_` variable inside of the REPL).\\\\n         *\\\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\\\\n         */\\\\n        readonly last: any;\\\\n        /**\\\\n         * A value indicating whether the `_error` variable has been assigned.\\\\n         *\\\\n         * @since v9.8.0\\\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\\\\n         */\\\\n        readonly underscoreErrAssigned: boolean;\\\\n        /**\\\\n         * The last error raised inside the REPL (assigned to the `_error` variable inside of the REPL).\\\\n         *\\\\n         * @since v9.8.0\\\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\\\\n         */\\\\n        readonly lastError: any;\\\\n        /**\\\\n         * Specified in the REPL options, this is the function to be used when evaluating each\\\\n         * given line of input. If not specified in the REPL options, this is an async wrapper\\\\n         * for the JavaScript `eval()` function.\\\\n         */\\\\n        readonly eval: REPLEval;\\\\n        /**\\\\n         * Specified in the REPL options, this is a value indicating whether the default\\\\n         * `writer` function should include ANSI color styling to REPL output.\\\\n         */\\\\n        readonly useColors: boolean;\\\\n        /**\\\\n         * Specified in the REPL options, this is a value indicating whether the default `eval`\\\\n         * function will use the JavaScript `global` as the context as opposed to creating a new\\\\n         * separate context for the REPL instance.\\\\n         */\\\\n        readonly useGlobal: boolean;\\\\n        /**\\\\n         * Specified in the REPL options, this is a value indicating whether the default `writer`\\\\n         * function should output the result of a command if it evaluates to `undefined`.\\\\n         */\\\\n        readonly ignoreUndefined: boolean;\\\\n        /**\\\\n         * Specified in the REPL options, this is the function to invoke to format the output of\\\\n         * each command before writing to `outputStream`. If not specified in the REPL options,\\\\n         * this will be a wrapper for `util.inspect`.\\\\n         */\\\\n        readonly writer: REPLWriter;\\\\n        /**\\\\n         * Specified in the REPL options, this is the function to use for custom Tab auto-completion.\\\\n         */\\\\n        readonly completer: Completer | AsyncCompleter;\\\\n        /**\\\\n         * Specified in the REPL options, this is a flag that specifies whether the default `eval`\\\\n         * function should execute all JavaScript commands in strict mode or default (sloppy) mode.\\\\n         * Possible values are:\\\\n         * - `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode.\\\\n         * - `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to\\\\n         *    prefacing every repl statement with `'use strict'`.\\\\n         */\\\\n        readonly replMode: typeof REPL_MODE_SLOPPY | typeof REPL_MODE_STRICT;\\\\n\\\\n        /**\\\\n         * NOTE: According to the documentation:\\\\n         *\\\\n         * > Instances of `repl.REPLServer` are created using the `repl.start()` method and\\\\n         * > _should not_ be created directly using the JavaScript `new` keyword.\\\\n         *\\\\n         * `REPLServer` cannot be subclassed due to implementation specifics in NodeJS.\\\\n         *\\\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_class_replserver\\\\n         */\\\\n        private constructor();\\\\n\\\\n        /**\\\\n         * Used to add new `.`-prefixed commands to the REPL instance. Such commands are invoked\\\\n         * by typing a `.` followed by the `keyword`.\\\\n         *\\\\n         * @param keyword The command keyword (_without_ a leading `.` character).\\\\n         * @param cmd The function to invoke when the command is processed.\\\\n         *\\\\n         * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_replserver_definecommand_keyword_cmd\\\\n         */\\\\n        defineCommand(keyword: string, cmd: REPLCommandAction | REPLCommand): void;\\\\n        /**\\\\n         * Readies the REPL instance for input from the user, printing the configured `prompt` to a\\\\n         * new line in the `output` and resuming the `input` to accept new input.\\\\n         *\\\\n         * When multi-line input is being entered, an ellipsis is printed rather than the 'prompt'.\\\\n         *\\\\n         * This method is primarily intended to be called from within the action function for\\\\n         * commands registered using the `replServer.defineCommand()` method.\\\\n         *\\\\n         * @param preserveCursor When `true`, the cursor placement will not be reset to `0`.\\\\n         */\\\\n        displayPrompt(preserveCursor?: boolean): void;\\\\n        /**\\\\n         * Clears any command that has been buffered but not yet executed.\\\\n         *\\\\n         * This method is primarily intended to be called from within the action function for\\\\n         * commands registered using the `replServer.defineCommand()` method.\\\\n         *\\\\n         * @since v9.0.0\\\\n         */\\\\n        clearBufferedCommand(): void;\\\\n\\\\n        /**\\\\n         * Initializes a history log file for the REPL instance. When executing the\\\\n         * Node.js binary and using the command line REPL, a history file is initialized\\\\n         * by default. However, this is not the case when creating a REPL\\\\n         * programmatically. Use this method to initialize a history log file when working\\\\n         * with REPL instances programmatically.\\\\n         * @param path The path to the history file\\\\n         */\\\\n        setupHistory(path: string, cb: (err: Error | null, repl: this) => void): void;\\\\n\\\\n        /**\\\\n         * events.EventEmitter\\\\n         * 1. close - inherited from `readline.Interface`\\\\n         * 2. line - inherited from `readline.Interface`\\\\n         * 3. pause - inherited from `readline.Interface`\\\\n         * 4. resume - inherited from `readline.Interface`\\\\n         * 5. SIGCONT - inherited from `readline.Interface`\\\\n         * 6. SIGINT - inherited from `readline.Interface`\\\\n         * 7. SIGTSTP - inherited from `readline.Interface`\\\\n         * 8. exit\\\\n         * 9. reset\\\\n         */\\\\n\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"line\\\\\\\", listener: (input: string) => void): this;\\\\n        addListener(event: \\\\\\\"pause\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"resume\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"SIGCONT\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"SIGINT\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"SIGTSTP\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"exit\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"reset\\\\\\\", listener: (context: Context) => void): this;\\\\n\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        emit(event: \\\\\\\"close\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"line\\\\\\\", input: string): boolean;\\\\n        emit(event: \\\\\\\"pause\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"resume\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"SIGCONT\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"SIGINT\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"SIGTSTP\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"exit\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"reset\\\\\\\", context: Context): boolean;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"line\\\\\\\", listener: (input: string) => void): this;\\\\n        on(event: \\\\\\\"pause\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"resume\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"SIGCONT\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"SIGINT\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"SIGTSTP\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"exit\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"reset\\\\\\\", listener: (context: Context) => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"line\\\\\\\", listener: (input: string) => void): this;\\\\n        once(event: \\\\\\\"pause\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"resume\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"SIGCONT\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"SIGINT\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"SIGTSTP\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"exit\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"reset\\\\\\\", listener: (context: Context) => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"line\\\\\\\", listener: (input: string) => void): this;\\\\n        prependListener(event: \\\\\\\"pause\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"resume\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"SIGCONT\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"SIGINT\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"SIGTSTP\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"exit\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"reset\\\\\\\", listener: (context: Context) => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"line\\\\\\\", listener: (input: string) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"pause\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"resume\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"SIGCONT\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"SIGINT\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"SIGTSTP\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"exit\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"reset\\\\\\\", listener: (context: Context) => void): this;\\\\n    }\\\\n\\\\n    /**\\\\n     * A flag passed in the REPL options. Evaluates expressions in sloppy mode.\\\\n     */\\\\n    export const REPL_MODE_SLOPPY: symbol; // TODO: unique symbol\\\\n\\\\n    /**\\\\n     * A flag passed in the REPL options. Evaluates expressions in strict mode.\\\\n     * This is equivalent to prefacing every repl statement with `'use strict'`.\\\\n     */\\\\n    export const REPL_MODE_STRICT: symbol; // TODO: unique symbol\\\\n\\\\n    /**\\\\n     * Creates and starts a `repl.REPLServer` instance.\\\\n     *\\\\n     * @param options The options for the `REPLServer`. If `options` is a string, then it specifies\\\\n     * the input prompt.\\\\n     */\\\\n    function start(options?: string | ReplOptions): REPLServer;\\\\n\\\\n    /**\\\\n     * Indicates a recoverable error that a `REPLServer` can use to support multi-line input.\\\\n     *\\\\n     * @see https://nodejs.org/dist/latest-v10.x/docs/api/repl.html#repl_recoverable_errors\\\\n     */\\\\n    class Recoverable extends SyntaxError {\\\\n        err: Error;\\\\n\\\\n        constructor(err: Error);\\\\n    }\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/string_decoder.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"string_decoder\\\\\\\" {\\\\n    class StringDecoder {\\\\n        constructor(encoding?: string);\\\\n        write(buffer: Buffer): string;\\\\n        end(buffer?: Buffer): string;\\\\n    }\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/timers.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"timers\\\\\\\" {\\\\n    function setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timeout;\\\\n    namespace setTimeout {\\\\n        function __promisify__(ms: number): Promise<void>;\\\\n        function __promisify__<T>(ms: number, value: T): Promise<T>;\\\\n    }\\\\n    function clearTimeout(timeoutId: NodeJS.Timeout): void;\\\\n    function setInterval(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timeout;\\\\n    function clearInterval(intervalId: NodeJS.Timeout): void;\\\\n    function setImmediate(callback: (...args: any[]) => void, ...args: any[]): NodeJS.Immediate;\\\\n    namespace setImmediate {\\\\n        function __promisify__(): Promise<void>;\\\\n        function __promisify__<T>(value: T): Promise<T>;\\\\n    }\\\\n    function clearImmediate(immediateId: NodeJS.Immediate): void;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/trace_events.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"trace_events\\\\\\\" {\\\\n    /**\\\\n     * The `Tracing` object is used to enable or disable tracing for sets of\\\\n     * categories. Instances are created using the\\\\n     * `trace_events.createTracing()` method.\\\\n     *\\\\n     * When created, the `Tracing` object is disabled. Calling the\\\\n     * `tracing.enable()` method adds the categories to the set of enabled trace\\\\n     * event categories. Calling `tracing.disable()` will remove the categories\\\\n     * from the set of enabled trace event categories.\\\\n     */\\\\n    export interface Tracing {\\\\n        /**\\\\n         * A comma-separated list of the trace event categories covered by this\\\\n         * `Tracing` object.\\\\n         */\\\\n        readonly categories: string;\\\\n\\\\n        /**\\\\n         * Disables this `Tracing` object.\\\\n         *\\\\n         * Only trace event categories _not_ covered by other enabled `Tracing`\\\\n         * objects and _not_ specified by the `--trace-event-categories` flag\\\\n         * will be disabled.\\\\n         */\\\\n        disable(): void;\\\\n\\\\n        /**\\\\n         * Enables this `Tracing` object for the set of categories covered by\\\\n         * the `Tracing` object.\\\\n         */\\\\n        enable(): void;\\\\n\\\\n        /**\\\\n         * `true` only if the `Tracing` object has been enabled.\\\\n         */\\\\n        readonly enabled: boolean;\\\\n    }\\\\n\\\\n    interface CreateTracingOptions {\\\\n        /**\\\\n         * An array of trace category names. Values included in the array are\\\\n         * coerced to a string when possible. An error will be thrown if the\\\\n         * value cannot be coerced.\\\\n         */\\\\n        categories: string[];\\\\n    }\\\\n\\\\n    /**\\\\n     * Creates and returns a Tracing object for the given set of categories.\\\\n     */\\\\n    export function createTracing(options: CreateTracingOptions): Tracing;\\\\n\\\\n    /**\\\\n     * Returns a comma-separated list of all currently-enabled trace event\\\\n     * categories. The current set of enabled trace event categories is\\\\n     * determined by the union of all currently-enabled `Tracing` objects and\\\\n     * any categories enabled using the `--trace-event-categories` flag.\\\\n     */\\\\n    export function getEnabledCategories(): string;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/tty.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"tty\\\\\\\" {\\\\n    import * as net from \\\\\\\"net\\\\\\\";\\\\n\\\\n    function isatty(fd: number): boolean;\\\\n    class ReadStream extends net.Socket {\\\\n        constructor(fd: number, options?: net.SocketConstructorOpts);\\\\n        isRaw: boolean;\\\\n        setRawMode(mode: boolean): void;\\\\n        isTTY: boolean;\\\\n    }\\\\n    /**\\\\n     * -1 - to the left from cursor\\\\n     *  0 - the entire line\\\\n     *  1 - to the right from cursor\\\\n     */\\\\n    type Direction = -1 | 0 | 1;\\\\n    class WriteStream extends net.Socket {\\\\n        constructor(fd: number);\\\\n        addListener(event: string, listener: (...args: any[]) => void): this;\\\\n        addListener(event: \\\\\\\"resize\\\\\\\", listener: () => void): this;\\\\n\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n        emit(event: \\\\\\\"resize\\\\\\\"): boolean;\\\\n\\\\n        on(event: string, listener: (...args: any[]) => void): this;\\\\n        on(event: \\\\\\\"resize\\\\\\\", listener: () => void): this;\\\\n\\\\n        once(event: string, listener: (...args: any[]) => void): this;\\\\n        once(event: \\\\\\\"resize\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependListener(event: \\\\\\\"resize\\\\\\\", listener: () => void): this;\\\\n\\\\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"resize\\\\\\\", listener: () => void): this;\\\\n\\\\n        /**\\\\n         * Clears the current line of this WriteStream in a direction identified by `dir`.\\\\n         */\\\\n        clearLine(dir: Direction, callback?: () => void): boolean;\\\\n        /**\\\\n         * Clears this `WriteStream` from the current cursor down.\\\\n         */\\\\n        clearScreenDown(callback?: () => void): boolean;\\\\n        /**\\\\n         * Moves this WriteStream's cursor to the specified position.\\\\n         */\\\\n        cursorTo(x: number, y: number, callback?: () => void): boolean;\\\\n        /**\\\\n         * Moves this WriteStream's cursor relative to its current position.\\\\n         */\\\\n        moveCursor(dx: number, dy: number, callback?: () => void): boolean;\\\\n        /**\\\\n         * @default `process.env`\\\\n         */\\\\n        getColorDepth(env?: {}): number;\\\\n        hasColors(depth?: number): boolean;\\\\n        hasColors(env?: {}): boolean;\\\\n        hasColors(depth: number, env?: {}): boolean;\\\\n        getWindowSize(): [number, number];\\\\n        columns: number;\\\\n        rows: number;\\\\n        isTTY: boolean;\\\\n    }\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/v8.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"v8\\\\\\\" {\\\\n    import { Readable } from \\\\\\\"stream\\\\\\\";\\\\n\\\\n    interface HeapSpaceInfo {\\\\n        space_name: string;\\\\n        space_size: number;\\\\n        space_used_size: number;\\\\n        space_available_size: number;\\\\n        physical_space_size: number;\\\\n    }\\\\n\\\\n    // ** Signifies if the --zap_code_space option is enabled or not.  1 == enabled, 0 == disabled. */\\\\n    type DoesZapCodeSpaceFlag = 0 | 1;\\\\n\\\\n    interface HeapInfo {\\\\n        total_heap_size: number;\\\\n        total_heap_size_executable: number;\\\\n        total_physical_size: number;\\\\n        total_available_size: number;\\\\n        used_heap_size: number;\\\\n        heap_size_limit: number;\\\\n        malloced_memory: number;\\\\n        peak_malloced_memory: number;\\\\n        does_zap_garbage: DoesZapCodeSpaceFlag;\\\\n        number_of_native_contexts: number;\\\\n        number_of_detached_contexts: number;\\\\n    }\\\\n\\\\n    function getHeapStatistics(): HeapInfo;\\\\n    function getHeapSpaceStatistics(): HeapSpaceInfo[];\\\\n    function setFlagsFromString(flags: string): void;\\\\n    /**\\\\n     * Generates a snapshot of the current V8 heap and returns a Readable\\\\n     * Stream that may be used to read the JSON serialized representation.\\\\n     * This conversation was marked as resolved by joyeecheung\\\\n     * This JSON stream format is intended to be used with tools such as\\\\n     * Chrome DevTools. The JSON schema is undocumented and specific to the\\\\n     * V8 engine, and may change from one version of V8 to the next.\\\\n     */\\\\n    function getHeapSnapshot(): Readable;\\\\n\\\\n    /**\\\\n     *\\\\n     * @param fileName The file path where the V8 heap snapshot is to be\\\\n     * saved. If not specified, a file name with the pattern\\\\n     * `'Heap-${yyyymmdd}-${hhmmss}-${pid}-${thread_id}.heapsnapshot'` will be\\\\n     * generated, where `{pid}` will be the PID of the Node.js process,\\\\n     * `{thread_id}` will be `0` when `writeHeapSnapshot()` is called from\\\\n     * the main Node.js thread or the id of a worker thread.\\\\n     */\\\\n    function writeHeapSnapshot(fileName?: string): string;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/worker_threads.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"worker_threads\\\\\\\" {\\\\n    import { Context } from \\\\\\\"vm\\\\\\\";\\\\n    import { EventEmitter } from \\\\\\\"events\\\\\\\";\\\\n    import { Readable, Writable } from \\\\\\\"stream\\\\\\\";\\\\n\\\\n    const isMainThread: boolean;\\\\n    const parentPort: null | MessagePort;\\\\n    const threadId: number;\\\\n    const workerData: any;\\\\n\\\\n    class MessageChannel {\\\\n        readonly port1: MessagePort;\\\\n        readonly port2: MessagePort;\\\\n    }\\\\n\\\\n    class MessagePort extends EventEmitter {\\\\n        close(): void;\\\\n        postMessage(value: any, transferList?: Array<ArrayBuffer | MessagePort>): void;\\\\n        ref(): void;\\\\n        unref(): void;\\\\n        start(): void;\\\\n\\\\n        addListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        addListener(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        emit(event: \\\\\\\"close\\\\\\\"): boolean;\\\\n        emit(event: \\\\\\\"message\\\\\\\", value: any): boolean;\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n        on(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        on(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        once(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        once(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        removeListener(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        removeListener(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        off(event: \\\\\\\"close\\\\\\\", listener: () => void): this;\\\\n        off(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        off(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n    }\\\\n\\\\n    interface WorkerOptions {\\\\n        eval?: boolean;\\\\n        workerData?: any;\\\\n        stdin?: boolean;\\\\n        stdout?: boolean;\\\\n        stderr?: boolean;\\\\n        execArgv?: string[];\\\\n    }\\\\n\\\\n    class Worker extends EventEmitter {\\\\n        readonly stdin: Writable | null;\\\\n        readonly stdout: Readable;\\\\n        readonly stderr: Readable;\\\\n        readonly threadId: number;\\\\n\\\\n        constructor(filename: string, options?: WorkerOptions);\\\\n\\\\n        postMessage(value: any, transferList?: Array<ArrayBuffer | MessagePort>): void;\\\\n        ref(): void;\\\\n        unref(): void;\\\\n        /**\\\\n         * Stop all JavaScript execution in the worker thread as soon as possible.\\\\n         * Returns a Promise for the exit code that is fulfilled when the `exit` event is emitted.\\\\n         */\\\\n        terminate(): Promise<number>;\\\\n        /**\\\\n         * Transfer a `MessagePort` to a different `vm` Context. The original `port`\\\\n         * object will be rendered unusable, and the returned `MessagePort` instance will\\\\n         * take its place.\\\\n         *\\\\n         * The returned `MessagePort` will be an object in the target context, and will\\\\n         * inherit from its global `Object` class. Objects passed to the\\\\n         * `port.onmessage()` listener will also be created in the target context\\\\n         * and inherit from its global `Object` class.\\\\n         *\\\\n         * However, the created `MessagePort` will no longer inherit from\\\\n         * `EventEmitter`, and only `port.onmessage()` can be used to receive\\\\n         * events using it.\\\\n         */\\\\n        moveMessagePortToContext(port: MessagePort, context: Context): MessagePort;\\\\n\\\\n        /**\\\\n         * Receive a single message from a given `MessagePort`. If no message is available,\\\\n         * `undefined` is returned, otherwise an object with a single `message` property\\\\n         * that contains the message payload, corresponding to the oldest message in the\\\\n         * `MessagePort`’s queue.\\\\n         */\\\\n        receiveMessageOnPort(port: MessagePort): {} | undefined;\\\\n\\\\n        addListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        addListener(event: \\\\\\\"exit\\\\\\\", listener: (exitCode: number) => void): this;\\\\n        addListener(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        addListener(event: \\\\\\\"online\\\\\\\", listener: () => void): this;\\\\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        emit(event: \\\\\\\"error\\\\\\\", err: Error): boolean;\\\\n        emit(event: \\\\\\\"exit\\\\\\\", exitCode: number): boolean;\\\\n        emit(event: \\\\\\\"message\\\\\\\", value: any): boolean;\\\\n        emit(event: \\\\\\\"online\\\\\\\"): boolean;\\\\n        emit(event: string | symbol, ...args: any[]): boolean;\\\\n\\\\n        on(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        on(event: \\\\\\\"exit\\\\\\\", listener: (exitCode: number) => void): this;\\\\n        on(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        on(event: \\\\\\\"online\\\\\\\", listener: () => void): this;\\\\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        once(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        once(event: \\\\\\\"exit\\\\\\\", listener: (exitCode: number) => void): this;\\\\n        once(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        once(event: \\\\\\\"online\\\\\\\", listener: () => void): this;\\\\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependListener(event: \\\\\\\"exit\\\\\\\", listener: (exitCode: number) => void): this;\\\\n        prependListener(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        prependListener(event: \\\\\\\"online\\\\\\\", listener: () => void): this;\\\\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        prependOnceListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"exit\\\\\\\", listener: (exitCode: number) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        prependOnceListener(event: \\\\\\\"online\\\\\\\", listener: () => void): this;\\\\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        removeListener(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        removeListener(event: \\\\\\\"exit\\\\\\\", listener: (exitCode: number) => void): this;\\\\n        removeListener(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        removeListener(event: \\\\\\\"online\\\\\\\", listener: () => void): this;\\\\n        removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n\\\\n        off(event: \\\\\\\"error\\\\\\\", listener: (err: Error) => void): this;\\\\n        off(event: \\\\\\\"exit\\\\\\\", listener: (exitCode: number) => void): this;\\\\n        off(event: \\\\\\\"message\\\\\\\", listener: (value: any) => void): this;\\\\n        off(event: \\\\\\\"online\\\\\\\", listener: () => void): this;\\\\n        off(event: string | symbol, listener: (...args: any[]) => void): this;\\\\n    }\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/zlib.d.ts\\\",\\\"content\\\":\\\"declare module \\\\\\\"zlib\\\\\\\" {\\\\n    import * as stream from \\\\\\\"stream\\\\\\\";\\\\n\\\\n    interface ZlibOptions {\\\\n        /**\\\\n         * @default constants.Z_NO_FLUSH\\\\n         */\\\\n        flush?: number;\\\\n        /**\\\\n         * @default constants.Z_FINISH\\\\n         */\\\\n        finishFlush?: number;\\\\n        /**\\\\n         * @default 16*1024\\\\n         */\\\\n        chunkSize?: number;\\\\n        windowBits?: number;\\\\n        level?: number; // compression only\\\\n        memLevel?: number; // compression only\\\\n        strategy?: number; // compression only\\\\n        dictionary?: NodeJS.TypedArray | DataView | ArrayBuffer; // deflate/inflate only, empty dictionary by default\\\\n    }\\\\n\\\\n    interface BrotliOptions {\\\\n        /**\\\\n         * @default constants.BROTLI_OPERATION_PROCESS\\\\n         */\\\\n        flush?: number;\\\\n        /**\\\\n         * @default constants.BROTLI_OPERATION_FINISH\\\\n         */\\\\n        finishFlush?: number;\\\\n        /**\\\\n         * @default 16*1024\\\\n         */\\\\n        chunkSize?: number;\\\\n        params?: {\\\\n            /**\\\\n             * Each key is a `constants.BROTLI_*` constant.\\\\n             */\\\\n            [key: number]: boolean | number;\\\\n        };\\\\n    }\\\\n\\\\n    interface Zlib {\\\\n        /** @deprecated Use bytesWritten instead. */\\\\n        readonly bytesRead: number;\\\\n        readonly bytesWritten: number;\\\\n        shell?: boolean | string;\\\\n        close(callback?: () => void): void;\\\\n        flush(kind?: number | (() => void), callback?: () => void): void;\\\\n    }\\\\n\\\\n    interface ZlibParams {\\\\n        params(level: number, strategy: number, callback: () => void): void;\\\\n    }\\\\n\\\\n    interface ZlibReset {\\\\n        reset(): void;\\\\n    }\\\\n\\\\n    interface BrotliCompress extends stream.Transform, Zlib { }\\\\n    interface BrotliDecompress extends stream.Transform, Zlib { }\\\\n    interface Gzip extends stream.Transform, Zlib { }\\\\n    interface Gunzip extends stream.Transform, Zlib { }\\\\n    interface Deflate extends stream.Transform, Zlib, ZlibReset, ZlibParams { }\\\\n    interface Inflate extends stream.Transform, Zlib, ZlibReset { }\\\\n    interface DeflateRaw extends stream.Transform, Zlib, ZlibReset, ZlibParams { }\\\\n    interface InflateRaw extends stream.Transform, Zlib, ZlibReset { }\\\\n    interface Unzip extends stream.Transform, Zlib { }\\\\n\\\\n    function createBrotliCompress(options?: BrotliOptions): BrotliCompress;\\\\n    function createBrotliDecompress(options?: BrotliOptions): BrotliDecompress;\\\\n    function createGzip(options?: ZlibOptions): Gzip;\\\\n    function createGunzip(options?: ZlibOptions): Gunzip;\\\\n    function createDeflate(options?: ZlibOptions): Deflate;\\\\n    function createInflate(options?: ZlibOptions): Inflate;\\\\n    function createDeflateRaw(options?: ZlibOptions): DeflateRaw;\\\\n    function createInflateRaw(options?: ZlibOptions): InflateRaw;\\\\n    function createUnzip(options?: ZlibOptions): Unzip;\\\\n\\\\n    type InputType = string | DataView | ArrayBuffer | NodeJS.TypedArray;\\\\n\\\\n    type CompressCallback = (error: Error | null, result: Buffer) => void;\\\\n\\\\n    function brotliCompress(buf: InputType, options: BrotliOptions, callback: CompressCallback): void;\\\\n    function brotliCompress(buf: InputType, callback: CompressCallback): void;\\\\n    function brotliCompressSync(buf: InputType, options?: BrotliOptions): Buffer;\\\\n    function brotliDecompress(buf: InputType, options: BrotliOptions, callback: CompressCallback): void;\\\\n    function brotliDecompress(buf: InputType, callback: CompressCallback): void;\\\\n    function brotliDecompressSync(buf: InputType, options?: BrotliOptions): Buffer;\\\\n    function deflate(buf: InputType, callback: CompressCallback): void;\\\\n    function deflate(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\\\n    function deflateSync(buf: InputType, options?: ZlibOptions): Buffer;\\\\n    function deflateRaw(buf: InputType, callback: CompressCallback): void;\\\\n    function deflateRaw(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\\\n    function deflateRawSync(buf: InputType, options?: ZlibOptions): Buffer;\\\\n    function gzip(buf: InputType, callback: CompressCallback): void;\\\\n    function gzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\\\n    function gzipSync(buf: InputType, options?: ZlibOptions): Buffer;\\\\n    function gunzip(buf: InputType, callback: CompressCallback): void;\\\\n    function gunzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\\\n    function gunzipSync(buf: InputType, options?: ZlibOptions): Buffer;\\\\n    function inflate(buf: InputType, callback: CompressCallback): void;\\\\n    function inflate(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\\\n    function inflateSync(buf: InputType, options?: ZlibOptions): Buffer;\\\\n    function inflateRaw(buf: InputType, callback: CompressCallback): void;\\\\n    function inflateRaw(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\\\n    function inflateRawSync(buf: InputType, options?: ZlibOptions): Buffer;\\\\n    function unzip(buf: InputType, callback: CompressCallback): void;\\\\n    function unzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\\\\n    function unzipSync(buf: InputType, options?: ZlibOptions): Buffer;\\\\n\\\\n    namespace constants {\\\\n        const BROTLI_DECODE: number;\\\\n        const BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: number;\\\\n        const BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: number;\\\\n        const BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: number;\\\\n        const BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: number;\\\\n        const BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: number;\\\\n        const BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: number;\\\\n        const BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_DISTANCE: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_PADDING_1: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_PADDING_2: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_RESERVED: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: number;\\\\n        const BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: number;\\\\n        const BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: number;\\\\n        const BROTLI_DECODER_ERROR_UNREACHABLE: number;\\\\n        const BROTLI_DECODER_NEEDS_MORE_INPUT: number;\\\\n        const BROTLI_DECODER_NEEDS_MORE_OUTPUT: number;\\\\n        const BROTLI_DECODER_NO_ERROR: number;\\\\n        const BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: number;\\\\n        const BROTLI_DECODER_PARAM_LARGE_WINDOW: number;\\\\n        const BROTLI_DECODER_RESULT_ERROR: number;\\\\n        const BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: number;\\\\n        const BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: number;\\\\n        const BROTLI_DECODER_RESULT_SUCCESS: number;\\\\n        const BROTLI_DECODER_SUCCESS: number;\\\\n\\\\n        const BROTLI_DEFAULT_MODE: number;\\\\n        const BROTLI_DEFAULT_QUALITY: number;\\\\n        const BROTLI_DEFAULT_WINDOW: number;\\\\n        const BROTLI_ENCODE: number;\\\\n        const BROTLI_LARGE_MAX_WINDOW_BITS: number;\\\\n        const BROTLI_MAX_INPUT_BLOCK_BITS: number;\\\\n        const BROTLI_MAX_QUALITY: number;\\\\n        const BROTLI_MAX_WINDOW_BITS: number;\\\\n        const BROTLI_MIN_INPUT_BLOCK_BITS: number;\\\\n        const BROTLI_MIN_QUALITY: number;\\\\n        const BROTLI_MIN_WINDOW_BITS: number;\\\\n\\\\n        const BROTLI_MODE_FONT: number;\\\\n        const BROTLI_MODE_GENERIC: number;\\\\n        const BROTLI_MODE_TEXT: number;\\\\n\\\\n        const BROTLI_OPERATION_EMIT_METADATA: number;\\\\n        const BROTLI_OPERATION_FINISH: number;\\\\n        const BROTLI_OPERATION_FLUSH: number;\\\\n        const BROTLI_OPERATION_PROCESS: number;\\\\n\\\\n        const BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: number;\\\\n        const BROTLI_PARAM_LARGE_WINDOW: number;\\\\n        const BROTLI_PARAM_LGBLOCK: number;\\\\n        const BROTLI_PARAM_LGWIN: number;\\\\n        const BROTLI_PARAM_MODE: number;\\\\n        const BROTLI_PARAM_NDIRECT: number;\\\\n        const BROTLI_PARAM_NPOSTFIX: number;\\\\n        const BROTLI_PARAM_QUALITY: number;\\\\n        const BROTLI_PARAM_SIZE_HINT: number;\\\\n\\\\n        const DEFLATE: number;\\\\n        const DEFLATERAW: number;\\\\n        const GUNZIP: number;\\\\n        const GZIP: number;\\\\n        const INFLATE: number;\\\\n        const INFLATERAW: number;\\\\n        const UNZIP: number;\\\\n\\\\n        const Z_BEST_COMPRESSION: number;\\\\n        const Z_BEST_SPEED: number;\\\\n        const Z_BLOCK: number;\\\\n        const Z_BUF_ERROR: number;\\\\n        const Z_DATA_ERROR: number;\\\\n\\\\n        const Z_DEFAULT_CHUNK: number;\\\\n        const Z_DEFAULT_COMPRESSION: number;\\\\n        const Z_DEFAULT_LEVEL: number;\\\\n        const Z_DEFAULT_MEMLEVEL: number;\\\\n        const Z_DEFAULT_STRATEGY: number;\\\\n        const Z_DEFAULT_WINDOWBITS: number;\\\\n\\\\n        const Z_ERRNO: number;\\\\n        const Z_FILTERED: number;\\\\n        const Z_FINISH: number;\\\\n        const Z_FIXED: number;\\\\n        const Z_FULL_FLUSH: number;\\\\n        const Z_HUFFMAN_ONLY: number;\\\\n        const Z_MAX_CHUNK: number;\\\\n        const Z_MAX_LEVEL: number;\\\\n        const Z_MAX_MEMLEVEL: number;\\\\n        const Z_MAX_WINDOWBITS: number;\\\\n        const Z_MEM_ERROR: number;\\\\n        const Z_MIN_CHUNK: number;\\\\n        const Z_MIN_LEVEL: number;\\\\n        const Z_MIN_MEMLEVEL: number;\\\\n        const Z_MIN_WINDOWBITS: number;\\\\n        const Z_NEED_DICT: number;\\\\n        const Z_NO_COMPRESSION: number;\\\\n        const Z_NO_FLUSH: number;\\\\n        const Z_OK: number;\\\\n        const Z_PARTIAL_FLUSH: number;\\\\n        const Z_RLE: number;\\\\n        const Z_STREAM_END: number;\\\\n        const Z_STREAM_ERROR: number;\\\\n        const Z_SYNC_FLUSH: number;\\\\n        const Z_VERSION_ERROR: number;\\\\n        const ZLIB_VERNUM: number;\\\\n    }\\\\n\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_NO_FLUSH: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_PARTIAL_FLUSH: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_SYNC_FLUSH: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_FULL_FLUSH: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_FINISH: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_BLOCK: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_TREES: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_OK: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_STREAM_END: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_NEED_DICT: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_ERRNO: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_STREAM_ERROR: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_DATA_ERROR: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_MEM_ERROR: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_BUF_ERROR: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_VERSION_ERROR: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_NO_COMPRESSION: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_BEST_SPEED: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_BEST_COMPRESSION: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_DEFAULT_COMPRESSION: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_FILTERED: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_HUFFMAN_ONLY: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_RLE: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_FIXED: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_DEFAULT_STRATEGY: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_BINARY: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_TEXT: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_ASCII: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_UNKNOWN: number;\\\\n    /**\\\\n     * @deprecated\\\\n     */\\\\n    const Z_DEFLATED: number;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/base.d.ts\\\",\\\"content\\\":\\\"// base definnitions for all NodeJS modules that are not specific to any version of TypeScript\\\\n/// <reference path=\\\\\\\"globals.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"assert.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"async_hooks.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"buffer.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"child_process.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"cluster.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"console.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"constants.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"crypto.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"dgram.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"dns.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"domain.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"events.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"fs.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"http.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"http2.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"https.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"inspector.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"module.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"net.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"os.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"path.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"perf_hooks.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"process.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"punycode.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"querystring.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"readline.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"repl.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"stream.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"string_decoder.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"timers.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"tls.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"trace_events.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"tty.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"url.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"util.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"v8.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"vm.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"worker_threads.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"zlib.d.ts\\\\\\\" />\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/ts3.2/util.d.ts\\\",\\\"content\\\":\\\"// tslint:disable-next-line:no-bad-reference\\\\n/// <reference path=\\\\\\\"../util.d.ts\\\\\\\" />\\\\n\\\\ndeclare module \\\\\\\"util\\\\\\\" {\\\\n    namespace inspect {\\\\n        const custom: unique symbol;\\\\n    }\\\\n    namespace promisify {\\\\n        const custom: unique symbol;\\\\n    }\\\\n    namespace types {\\\\n        function isBigInt64Array(value: any): value is BigInt64Array;\\\\n        function isBigUint64Array(value: any): value is BigUint64Array;\\\\n    }\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/ts3.2/globals.d.ts\\\",\\\"content\\\":\\\"// tslint:disable-next-line:no-bad-reference\\\\n/// <reference path=\\\\\\\"../globals.d.ts\\\\\\\" />\\\\n\\\\ndeclare namespace NodeJS {\\\\n    interface HRTime {\\\\n        bigint(): bigint;\\\\n    }\\\\n}\\\\n\\\\ninterface Buffer extends Uint8Array {\\\\n    readBigUInt64BE(offset?: number): bigint;\\\\n    readBigUInt64LE(offset?: number): bigint;\\\\n    readBigInt64BE(offset?: number): bigint;\\\\n    readBigInt64LE(offset?: number): bigint;\\\\n    writeBigInt64BE(value: bigint, offset?: number): number;\\\\n    writeBigInt64LE(value: bigint, offset?: number): number;\\\\n    writeBigUInt64BE(value: bigint, offset?: number): number;\\\\n    writeBigUInt64LE(value: bigint, offset?: number): number;\\\\n}\\\\n\\\"},{\\\"path\\\":\\\"/node_modules/@types/node/ts3.2/index.d.ts\\\",\\\"content\\\":\\\"// NOTE: These definitions support NodeJS and TypeScript 3.2.\\\\n\\\\n// NOTE: TypeScript version-specific augmentations can be found in the following paths:\\\\n//          - ~/base.d.ts         - Shared definitions common to all TypeScript versions\\\\n//          - ~/index.d.ts        - Definitions specific to TypeScript 2.1\\\\n//          - ~/ts3.2/index.d.ts  - Definitions specific to TypeScript 3.2\\\\n\\\\n// Reference required types from the default lib:\\\\n/// <reference lib=\\\\\\\"es2018\\\\\\\" />\\\\n/// <reference lib=\\\\\\\"esnext.asynciterable\\\\\\\" />\\\\n/// <reference lib=\\\\\\\"esnext.intl\\\\\\\" />\\\\n/// <reference lib=\\\\\\\"esnext.bigint\\\\\\\" />\\\\n\\\\n// Base definitions for all NodeJS modules that are not specific to any version of TypeScript:\\\\n// tslint:disable-next-line:no-bad-reference\\\\n/// <reference path=\\\\\\\"../base.d.ts\\\\\\\" />\\\\n\\\\n// TypeScript 3.2-specific augmentations:\\\\n/// <reference path=\\\\\\\"util.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"globals.d.ts\\\\\\\" />\\\\n\\\"}],\\\"PUBLIC\\\":[{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.webworker.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/////////////////////////////\\\\n/// Worker APIs\\\\n/////////////////////////////\\\\n\\\\ninterface AddEventListenerOptions extends EventListenerOptions {\\\\n    once?: boolean;\\\\n    passive?: boolean;\\\\n}\\\\n\\\\ninterface AesCbcParams extends Algorithm {\\\\n    iv: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n}\\\\n\\\\ninterface AesCtrParams extends Algorithm {\\\\n    counter: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n    length: number;\\\\n}\\\\n\\\\ninterface AesDerivedKeyParams extends Algorithm {\\\\n    length: number;\\\\n}\\\\n\\\\ninterface AesGcmParams extends Algorithm {\\\\n    additionalData?: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n    iv: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n    tagLength?: number;\\\\n}\\\\n\\\\ninterface AesKeyAlgorithm extends KeyAlgorithm {\\\\n    length: number;\\\\n}\\\\n\\\\ninterface AesKeyGenParams extends Algorithm {\\\\n    length: number;\\\\n}\\\\n\\\\ninterface Algorithm {\\\\n    name: string;\\\\n}\\\\n\\\\ninterface BlobPropertyBag {\\\\n    endings?: EndingType;\\\\n    type?: string;\\\\n}\\\\n\\\\ninterface CacheQueryOptions {\\\\n    ignoreMethod?: boolean;\\\\n    ignoreSearch?: boolean;\\\\n    ignoreVary?: boolean;\\\\n}\\\\n\\\\ninterface CanvasRenderingContext2DSettings {\\\\n    alpha?: boolean;\\\\n    desynchronized?: boolean;\\\\n}\\\\n\\\\ninterface ClientQueryOptions {\\\\n    includeUncontrolled?: boolean;\\\\n    type?: ClientTypes;\\\\n}\\\\n\\\\ninterface CloseEventInit extends EventInit {\\\\n    code?: number;\\\\n    reason?: string;\\\\n    wasClean?: boolean;\\\\n}\\\\n\\\\ninterface CryptoKeyPair {\\\\n    privateKey?: CryptoKey;\\\\n    publicKey?: CryptoKey;\\\\n}\\\\n\\\\ninterface CustomEventInit<T = any> extends EventInit {\\\\n    detail?: T;\\\\n}\\\\n\\\\ninterface DOMMatrix2DInit {\\\\n    a?: number;\\\\n    b?: number;\\\\n    c?: number;\\\\n    d?: number;\\\\n    e?: number;\\\\n    f?: number;\\\\n    m11?: number;\\\\n    m12?: number;\\\\n    m21?: number;\\\\n    m22?: number;\\\\n    m41?: number;\\\\n    m42?: number;\\\\n}\\\\n\\\\ninterface DOMMatrixInit extends DOMMatrix2DInit {\\\\n    is2D?: boolean;\\\\n    m13?: number;\\\\n    m14?: number;\\\\n    m23?: number;\\\\n    m24?: number;\\\\n    m31?: number;\\\\n    m32?: number;\\\\n    m33?: number;\\\\n    m34?: number;\\\\n    m43?: number;\\\\n    m44?: number;\\\\n}\\\\n\\\\ninterface DOMPointInit {\\\\n    w?: number;\\\\n    x?: number;\\\\n    y?: number;\\\\n    z?: number;\\\\n}\\\\n\\\\ninterface DOMQuadInit {\\\\n    p1?: DOMPointInit;\\\\n    p2?: DOMPointInit;\\\\n    p3?: DOMPointInit;\\\\n    p4?: DOMPointInit;\\\\n}\\\\n\\\\ninterface DOMRectInit {\\\\n    height?: number;\\\\n    width?: number;\\\\n    x?: number;\\\\n    y?: number;\\\\n}\\\\n\\\\ninterface DevicePermissionDescriptor extends PermissionDescriptor {\\\\n    deviceId?: string;\\\\n    name: \\\\\\\"camera\\\\\\\" | \\\\\\\"microphone\\\\\\\" | \\\\\\\"speaker\\\\\\\";\\\\n}\\\\n\\\\ninterface EcKeyGenParams extends Algorithm {\\\\n    namedCurve: NamedCurve;\\\\n}\\\\n\\\\ninterface EcKeyImportParams extends Algorithm {\\\\n    namedCurve: NamedCurve;\\\\n}\\\\n\\\\ninterface EcdhKeyDeriveParams extends Algorithm {\\\\n    public: CryptoKey;\\\\n}\\\\n\\\\ninterface EcdsaParams extends Algorithm {\\\\n    hash: HashAlgorithmIdentifier;\\\\n}\\\\n\\\\ninterface ErrorEventInit extends EventInit {\\\\n    colno?: number;\\\\n    error?: any;\\\\n    filename?: string;\\\\n    lineno?: number;\\\\n    message?: string;\\\\n}\\\\n\\\\ninterface EventInit {\\\\n    bubbles?: boolean;\\\\n    cancelable?: boolean;\\\\n    composed?: boolean;\\\\n}\\\\n\\\\ninterface EventListenerOptions {\\\\n    capture?: boolean;\\\\n}\\\\n\\\\ninterface EventSourceInit {\\\\n    withCredentials?: boolean;\\\\n}\\\\n\\\\ninterface ExtendableEventInit extends EventInit {\\\\n}\\\\n\\\\ninterface ExtendableMessageEventInit extends ExtendableEventInit {\\\\n    data?: any;\\\\n    lastEventId?: string;\\\\n    origin?: string;\\\\n    ports?: MessagePort[];\\\\n    source?: Client | ServiceWorker | MessagePort | null;\\\\n}\\\\n\\\\ninterface FetchEventInit extends ExtendableEventInit {\\\\n    clientId?: string;\\\\n    preloadResponse?: Promise<any>;\\\\n    replacesClientId?: string;\\\\n    request: Request;\\\\n    resultingClientId?: string;\\\\n}\\\\n\\\\ninterface FilePropertyBag extends BlobPropertyBag {\\\\n    lastModified?: number;\\\\n}\\\\n\\\\ninterface GetNotificationOptions {\\\\n    tag?: string;\\\\n}\\\\n\\\\ninterface HmacImportParams extends Algorithm {\\\\n    hash: HashAlgorithmIdentifier;\\\\n    length?: number;\\\\n}\\\\n\\\\ninterface HmacKeyGenParams extends Algorithm {\\\\n    hash: HashAlgorithmIdentifier;\\\\n    length?: number;\\\\n}\\\\n\\\\ninterface IDBIndexParameters {\\\\n    multiEntry?: boolean;\\\\n    unique?: boolean;\\\\n}\\\\n\\\\ninterface IDBObjectStoreParameters {\\\\n    autoIncrement?: boolean;\\\\n    keyPath?: string | string[] | null;\\\\n}\\\\n\\\\ninterface IDBVersionChangeEventInit extends EventInit {\\\\n    newVersion?: number | null;\\\\n    oldVersion?: number;\\\\n}\\\\n\\\\ninterface ImageBitmapRenderingContextSettings {\\\\n    alpha?: boolean;\\\\n}\\\\n\\\\ninterface ImageEncodeOptions {\\\\n    quality?: number;\\\\n    type?: string;\\\\n}\\\\n\\\\ninterface JsonWebKey {\\\\n    alg?: string;\\\\n    crv?: string;\\\\n    d?: string;\\\\n    dp?: string;\\\\n    dq?: string;\\\\n    e?: string;\\\\n    ext?: boolean;\\\\n    k?: string;\\\\n    key_ops?: string[];\\\\n    kty?: string;\\\\n    n?: string;\\\\n    oth?: RsaOtherPrimesInfo[];\\\\n    p?: string;\\\\n    q?: string;\\\\n    qi?: string;\\\\n    use?: string;\\\\n    x?: string;\\\\n    y?: string;\\\\n}\\\\n\\\\ninterface KeyAlgorithm {\\\\n    name: string;\\\\n}\\\\n\\\\ninterface MessageEventInit extends EventInit {\\\\n    data?: any;\\\\n    lastEventId?: string;\\\\n    origin?: string;\\\\n    ports?: MessagePort[];\\\\n    source?: MessageEventSource | null;\\\\n}\\\\n\\\\ninterface MidiPermissionDescriptor extends PermissionDescriptor {\\\\n    name: \\\\\\\"midi\\\\\\\";\\\\n    sysex?: boolean;\\\\n}\\\\n\\\\ninterface MultiCacheQueryOptions extends CacheQueryOptions {\\\\n    cacheName?: string;\\\\n}\\\\n\\\\ninterface NavigationPreloadState {\\\\n    enabled?: boolean;\\\\n    headerValue?: string;\\\\n}\\\\n\\\\ninterface NotificationAction {\\\\n    action: string;\\\\n    icon?: string;\\\\n    title: string;\\\\n}\\\\n\\\\ninterface NotificationEventInit extends ExtendableEventInit {\\\\n    action?: string;\\\\n    notification: Notification;\\\\n}\\\\n\\\\ninterface NotificationOptions {\\\\n    actions?: NotificationAction[];\\\\n    badge?: string;\\\\n    body?: string;\\\\n    data?: any;\\\\n    dir?: NotificationDirection;\\\\n    icon?: string;\\\\n    image?: string;\\\\n    lang?: string;\\\\n    renotify?: boolean;\\\\n    requireInteraction?: boolean;\\\\n    silent?: boolean;\\\\n    tag?: string;\\\\n    timestamp?: number;\\\\n    vibrate?: VibratePattern;\\\\n}\\\\n\\\\ninterface Pbkdf2Params extends Algorithm {\\\\n    hash: HashAlgorithmIdentifier;\\\\n    iterations: number;\\\\n    salt: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n}\\\\n\\\\ninterface PerformanceObserverInit {\\\\n    buffered?: boolean;\\\\n    entryTypes?: string[];\\\\n    type?: string;\\\\n}\\\\n\\\\ninterface PermissionDescriptor {\\\\n    name: PermissionName;\\\\n}\\\\n\\\\ninterface PipeOptions {\\\\n    preventAbort?: boolean;\\\\n    preventCancel?: boolean;\\\\n    preventClose?: boolean;\\\\n    signal?: AbortSignal;\\\\n}\\\\n\\\\ninterface PostMessageOptions {\\\\n    transfer?: any[];\\\\n}\\\\n\\\\ninterface ProgressEventInit extends EventInit {\\\\n    lengthComputable?: boolean;\\\\n    loaded?: number;\\\\n    total?: number;\\\\n}\\\\n\\\\ninterface PromiseRejectionEventInit extends EventInit {\\\\n    promise: Promise<any>;\\\\n    reason?: any;\\\\n}\\\\n\\\\ninterface PushEventInit extends ExtendableEventInit {\\\\n    data?: PushMessageDataInit;\\\\n}\\\\n\\\\ninterface PushPermissionDescriptor extends PermissionDescriptor {\\\\n    name: \\\\\\\"push\\\\\\\";\\\\n    userVisibleOnly?: boolean;\\\\n}\\\\n\\\\ninterface PushSubscriptionChangeInit extends ExtendableEventInit {\\\\n    newSubscription?: PushSubscription;\\\\n    oldSubscription?: PushSubscription;\\\\n}\\\\n\\\\ninterface PushSubscriptionJSON {\\\\n    endpoint?: string;\\\\n    expirationTime?: number | null;\\\\n    keys?: Record<string, string>;\\\\n}\\\\n\\\\ninterface PushSubscriptionOptionsInit {\\\\n    applicationServerKey?: BufferSource | string | null;\\\\n    userVisibleOnly?: boolean;\\\\n}\\\\n\\\\ninterface QueuingStrategy<T = any> {\\\\n    highWaterMark?: number;\\\\n    size?: QueuingStrategySizeCallback<T>;\\\\n}\\\\n\\\\ninterface RegistrationOptions {\\\\n    scope?: string;\\\\n    type?: WorkerType;\\\\n    updateViaCache?: ServiceWorkerUpdateViaCache;\\\\n}\\\\n\\\\ninterface RequestInit {\\\\n    /**\\\\n     * A BodyInit object or null to set request's body.\\\\n     */\\\\n    body?: BodyInit | null;\\\\n    /**\\\\n     * A string indicating how the request will interact with the browser's cache to set request's cache.\\\\n     */\\\\n    cache?: RequestCache;\\\\n    /**\\\\n     * A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials.\\\\n     */\\\\n    credentials?: RequestCredentials;\\\\n    /**\\\\n     * A Headers object, an object literal, or an array of two-item arrays to set request's headers.\\\\n     */\\\\n    headers?: HeadersInit;\\\\n    /**\\\\n     * A cryptographic hash of the resource to be fetched by request. Sets request's integrity.\\\\n     */\\\\n    integrity?: string;\\\\n    /**\\\\n     * A boolean to set request's keepalive.\\\\n     */\\\\n    keepalive?: boolean;\\\\n    /**\\\\n     * A string to set request's method.\\\\n     */\\\\n    method?: string;\\\\n    /**\\\\n     * A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode.\\\\n     */\\\\n    mode?: RequestMode;\\\\n    /**\\\\n     * A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.\\\\n     */\\\\n    redirect?: RequestRedirect;\\\\n    /**\\\\n     * A string whose value is a same-origin URL, \\\\\\\"about:client\\\\\\\", or the empty string, to set request's referrer.\\\\n     */\\\\n    referrer?: string;\\\\n    /**\\\\n     * A referrer policy to set request's referrerPolicy.\\\\n     */\\\\n    referrerPolicy?: ReferrerPolicy;\\\\n    /**\\\\n     * An AbortSignal to set request's signal.\\\\n     */\\\\n    signal?: AbortSignal | null;\\\\n    /**\\\\n     * Can only be null. Used to disassociate request from any Window.\\\\n     */\\\\n    window?: any;\\\\n}\\\\n\\\\ninterface ResponseInit {\\\\n    headers?: HeadersInit;\\\\n    status?: number;\\\\n    statusText?: string;\\\\n}\\\\n\\\\ninterface RsaHashedImportParams extends Algorithm {\\\\n    hash: HashAlgorithmIdentifier;\\\\n}\\\\n\\\\ninterface RsaHashedKeyGenParams extends RsaKeyGenParams {\\\\n    hash: HashAlgorithmIdentifier;\\\\n}\\\\n\\\\ninterface RsaKeyGenParams extends Algorithm {\\\\n    modulusLength: number;\\\\n    publicExponent: BigInteger;\\\\n}\\\\n\\\\ninterface RsaOaepParams extends Algorithm {\\\\n    label?: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n}\\\\n\\\\ninterface RsaOtherPrimesInfo {\\\\n    d?: string;\\\\n    r?: string;\\\\n    t?: string;\\\\n}\\\\n\\\\ninterface RsaPssParams extends Algorithm {\\\\n    saltLength: number;\\\\n}\\\\n\\\\ninterface StorageEstimate {\\\\n    quota?: number;\\\\n    usage?: number;\\\\n}\\\\n\\\\ninterface SyncEventInit extends ExtendableEventInit {\\\\n    lastChance?: boolean;\\\\n    tag: string;\\\\n}\\\\n\\\\ninterface TextDecodeOptions {\\\\n    stream?: boolean;\\\\n}\\\\n\\\\ninterface TextDecoderOptions {\\\\n    fatal?: boolean;\\\\n    ignoreBOM?: boolean;\\\\n}\\\\n\\\\ninterface TextEncoderEncodeIntoResult {\\\\n    read?: number;\\\\n    written?: number;\\\\n}\\\\n\\\\ninterface Transformer<I = any, O = any> {\\\\n    flush?: TransformStreamDefaultControllerCallback<O>;\\\\n    readableType?: undefined;\\\\n    start?: TransformStreamDefaultControllerCallback<O>;\\\\n    transform?: TransformStreamDefaultControllerTransformCallback<I, O>;\\\\n    writableType?: undefined;\\\\n}\\\\n\\\\ninterface UnderlyingByteSource {\\\\n    autoAllocateChunkSize?: number;\\\\n    cancel?: ReadableStreamErrorCallback;\\\\n    pull?: ReadableByteStreamControllerCallback;\\\\n    start?: ReadableByteStreamControllerCallback;\\\\n    type: \\\\\\\"bytes\\\\\\\";\\\\n}\\\\n\\\\ninterface UnderlyingSink<W = any> {\\\\n    abort?: WritableStreamErrorCallback;\\\\n    close?: WritableStreamDefaultControllerCloseCallback;\\\\n    start?: WritableStreamDefaultControllerStartCallback;\\\\n    type?: undefined;\\\\n    write?: WritableStreamDefaultControllerWriteCallback<W>;\\\\n}\\\\n\\\\ninterface UnderlyingSource<R = any> {\\\\n    cancel?: ReadableStreamErrorCallback;\\\\n    pull?: ReadableStreamDefaultControllerCallback<R>;\\\\n    start?: ReadableStreamDefaultControllerCallback<R>;\\\\n    type?: undefined;\\\\n}\\\\n\\\\ninterface WebGLContextAttributes {\\\\n    alpha?: boolean;\\\\n    antialias?: boolean;\\\\n    depth?: boolean;\\\\n    desynchronized?: boolean;\\\\n    failIfMajorPerformanceCaveat?: boolean;\\\\n    powerPreference?: WebGLPowerPreference;\\\\n    premultipliedAlpha?: boolean;\\\\n    preserveDrawingBuffer?: boolean;\\\\n    stencil?: boolean;\\\\n}\\\\n\\\\ninterface WebGLContextEventInit extends EventInit {\\\\n    statusMessage?: string;\\\\n}\\\\n\\\\ninterface WorkerOptions {\\\\n    credentials?: RequestCredentials;\\\\n    name?: string;\\\\n    type?: WorkerType;\\\\n}\\\\n\\\\ninterface EventListener {\\\\n    (evt: Event): void;\\\\n}\\\\n\\\\n/** The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type. */\\\\ninterface ANGLE_instanced_arrays {\\\\n    drawArraysInstancedANGLE(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei): void;\\\\n    drawElementsInstancedANGLE(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, primcount: GLsizei): void;\\\\n    vertexAttribDivisorANGLE(index: GLuint, divisor: GLuint): void;\\\\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: GLenum;\\\\n}\\\\n\\\\n/** A controller object that allows you to abort one or more DOM requests as and when desired. */\\\\ninterface AbortController {\\\\n    /**\\\\n     * Returns the AbortSignal object associated with this object.\\\\n     */\\\\n    readonly signal: AbortSignal;\\\\n    /**\\\\n     * Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.\\\\n     */\\\\n    abort(): void;\\\\n}\\\\n\\\\ndeclare var AbortController: {\\\\n    prototype: AbortController;\\\\n    new(): AbortController;\\\\n};\\\\n\\\\ninterface AbortSignalEventMap {\\\\n    \\\\\\\"abort\\\\\\\": Event;\\\\n}\\\\n\\\\n/** A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object. */\\\\ninterface AbortSignal extends EventTarget {\\\\n    /**\\\\n     * Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.\\\\n     */\\\\n    readonly aborted: boolean;\\\\n    onabort: ((this: AbortSignal, ev: Event) => any) | null;\\\\n    addEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var AbortSignal: {\\\\n    prototype: AbortSignal;\\\\n    new(): AbortSignal;\\\\n};\\\\n\\\\ninterface AbstractWorkerEventMap {\\\\n    \\\\\\\"error\\\\\\\": ErrorEvent;\\\\n}\\\\n\\\\ninterface AbstractWorker {\\\\n    onerror: ((this: AbstractWorker, ev: ErrorEvent) => any) | null;\\\\n    addEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ninterface AesCfbParams extends Algorithm {\\\\n    iv: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n}\\\\n\\\\ninterface AesCmacParams extends Algorithm {\\\\n    length: number;\\\\n}\\\\n\\\\ninterface AnimationFrameProvider {\\\\n    cancelAnimationFrame(handle: number): void;\\\\n    requestAnimationFrame(callback: FrameRequestCallback): number;\\\\n}\\\\n\\\\n/** A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system. */\\\\ninterface Blob {\\\\n    readonly size: number;\\\\n    readonly type: string;\\\\n    slice(start?: number, end?: number, contentType?: string): Blob;\\\\n}\\\\n\\\\ndeclare var Blob: {\\\\n    prototype: Blob;\\\\n    new(blobParts?: BlobPart[], options?: BlobPropertyBag): Blob;\\\\n};\\\\n\\\\ninterface Body {\\\\n    readonly body: ReadableStream<Uint8Array> | null;\\\\n    readonly bodyUsed: boolean;\\\\n    arrayBuffer(): Promise<ArrayBuffer>;\\\\n    blob(): Promise<Blob>;\\\\n    formData(): Promise<FormData>;\\\\n    json(): Promise<any>;\\\\n    text(): Promise<string>;\\\\n}\\\\n\\\\ninterface BroadcastChannelEventMap {\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n    \\\\\\\"messageerror\\\\\\\": MessageEvent;\\\\n}\\\\n\\\\ninterface BroadcastChannel extends EventTarget {\\\\n    /**\\\\n     * Returns the channel name (as passed to the constructor).\\\\n     */\\\\n    readonly name: string;\\\\n    onmessage: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;\\\\n    onmessageerror: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;\\\\n    /**\\\\n     * Closes the BroadcastChannel object, opening it up to garbage collection.\\\\n     */\\\\n    close(): void;\\\\n    /**\\\\n     * Sends the given message to other BroadcastChannel objects set up for this channel. Messages can be structured objects, e.g. nested objects and arrays.\\\\n     */\\\\n    postMessage(message: any): void;\\\\n    addEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var BroadcastChannel: {\\\\n    prototype: BroadcastChannel;\\\\n    new(name: string): BroadcastChannel;\\\\n};\\\\n\\\\n/** This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams. */\\\\ninterface ByteLengthQueuingStrategy extends QueuingStrategy<ArrayBufferView> {\\\\n    highWaterMark: number;\\\\n    size(chunk: ArrayBufferView): number;\\\\n}\\\\n\\\\ndeclare var ByteLengthQueuingStrategy: {\\\\n    prototype: ByteLengthQueuingStrategy;\\\\n    new(options: { highWaterMark: number }): ByteLengthQueuingStrategy;\\\\n};\\\\n\\\\n/** Provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec. */\\\\ninterface Cache {\\\\n    add(request: RequestInfo): Promise<void>;\\\\n    addAll(requests: RequestInfo[]): Promise<void>;\\\\n    delete(request: RequestInfo, options?: CacheQueryOptions): Promise<boolean>;\\\\n    keys(request?: RequestInfo, options?: CacheQueryOptions): Promise<ReadonlyArray<Request>>;\\\\n    match(request: RequestInfo, options?: CacheQueryOptions): Promise<Response | undefined>;\\\\n    matchAll(request?: RequestInfo, options?: CacheQueryOptions): Promise<ReadonlyArray<Response>>;\\\\n    put(request: RequestInfo, response: Response): Promise<void>;\\\\n}\\\\n\\\\ndeclare var Cache: {\\\\n    prototype: Cache;\\\\n    new(): Cache;\\\\n};\\\\n\\\\n/** The storage for Cache objects. */\\\\ninterface CacheStorage {\\\\n    delete(cacheName: string): Promise<boolean>;\\\\n    has(cacheName: string): Promise<boolean>;\\\\n    keys(): Promise<string[]>;\\\\n    match(request: RequestInfo, options?: CacheQueryOptions): Promise<Response | undefined>;\\\\n    open(cacheName: string): Promise<Cache>;\\\\n}\\\\n\\\\ndeclare var CacheStorage: {\\\\n    prototype: CacheStorage;\\\\n    new(): CacheStorage;\\\\n};\\\\n\\\\ninterface CanvasCompositing {\\\\n    globalAlpha: number;\\\\n    globalCompositeOperation: string;\\\\n}\\\\n\\\\ninterface CanvasDrawImage {\\\\n    drawImage(image: CanvasImageSource, dx: number, dy: number): void;\\\\n    drawImage(image: CanvasImageSource, dx: number, dy: number, dw: number, dh: number): void;\\\\n    drawImage(image: CanvasImageSource, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void;\\\\n}\\\\n\\\\ninterface CanvasDrawPath {\\\\n    beginPath(): void;\\\\n    clip(fillRule?: CanvasFillRule): void;\\\\n    clip(path: Path2D, fillRule?: CanvasFillRule): void;\\\\n    fill(fillRule?: CanvasFillRule): void;\\\\n    fill(path: Path2D, fillRule?: CanvasFillRule): void;\\\\n    isPointInPath(x: number, y: number, fillRule?: CanvasFillRule): boolean;\\\\n    isPointInPath(path: Path2D, x: number, y: number, fillRule?: CanvasFillRule): boolean;\\\\n    isPointInStroke(x: number, y: number): boolean;\\\\n    isPointInStroke(path: Path2D, x: number, y: number): boolean;\\\\n    stroke(): void;\\\\n    stroke(path: Path2D): void;\\\\n}\\\\n\\\\ninterface CanvasFillStrokeStyles {\\\\n    fillStyle: string | CanvasGradient | CanvasPattern;\\\\n    strokeStyle: string | CanvasGradient | CanvasPattern;\\\\n    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;\\\\n    createPattern(image: CanvasImageSource, repetition: string): CanvasPattern | null;\\\\n    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;\\\\n}\\\\n\\\\ninterface CanvasFilters {\\\\n    filter: string;\\\\n}\\\\n\\\\n/** An opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient(). */\\\\ninterface CanvasGradient {\\\\n    /**\\\\n     * Adds a color stop with the given color to the gradient at the given offset. 0.0 is the offset at one end of the gradient, 1.0 is the offset at the other end.\\\\n     * \\\\n     * Throws an \\\\\\\"IndexSizeError\\\\\\\" DOMException if the offset is out of range. Throws a \\\\\\\"SyntaxError\\\\\\\" DOMException if the color cannot be parsed.\\\\n     */\\\\n    addColorStop(offset: number, color: string): void;\\\\n}\\\\n\\\\ndeclare var CanvasGradient: {\\\\n    prototype: CanvasGradient;\\\\n    new(): CanvasGradient;\\\\n};\\\\n\\\\ninterface CanvasImageData {\\\\n    createImageData(sw: number, sh: number): ImageData;\\\\n    createImageData(imagedata: ImageData): ImageData;\\\\n    getImageData(sx: number, sy: number, sw: number, sh: number): ImageData;\\\\n    putImageData(imagedata: ImageData, dx: number, dy: number): void;\\\\n    putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX: number, dirtyY: number, dirtyWidth: number, dirtyHeight: number): void;\\\\n}\\\\n\\\\ninterface CanvasImageSmoothing {\\\\n    imageSmoothingEnabled: boolean;\\\\n    imageSmoothingQuality: ImageSmoothingQuality;\\\\n}\\\\n\\\\ninterface CanvasPath {\\\\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\\\\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\\\\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\\\\n    closePath(): void;\\\\n    ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\\\\n    lineTo(x: number, y: number): void;\\\\n    moveTo(x: number, y: number): void;\\\\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\\\\n    rect(x: number, y: number, w: number, h: number): void;\\\\n}\\\\n\\\\ninterface CanvasPathDrawingStyles {\\\\n    lineCap: CanvasLineCap;\\\\n    lineDashOffset: number;\\\\n    lineJoin: CanvasLineJoin;\\\\n    lineWidth: number;\\\\n    miterLimit: number;\\\\n    getLineDash(): number[];\\\\n    setLineDash(segments: number[]): void;\\\\n}\\\\n\\\\n/** An opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method. */\\\\ninterface CanvasPattern {\\\\n    /**\\\\n     * Sets the transformation matrix that will be used when rendering the pattern during a fill or stroke painting operation.\\\\n     */\\\\n    setTransform(transform?: DOMMatrix2DInit): void;\\\\n}\\\\n\\\\ndeclare var CanvasPattern: {\\\\n    prototype: CanvasPattern;\\\\n    new(): CanvasPattern;\\\\n};\\\\n\\\\ninterface CanvasRect {\\\\n    clearRect(x: number, y: number, w: number, h: number): void;\\\\n    fillRect(x: number, y: number, w: number, h: number): void;\\\\n    strokeRect(x: number, y: number, w: number, h: number): void;\\\\n}\\\\n\\\\ninterface CanvasShadowStyles {\\\\n    shadowBlur: number;\\\\n    shadowColor: string;\\\\n    shadowOffsetX: number;\\\\n    shadowOffsetY: number;\\\\n}\\\\n\\\\ninterface CanvasState {\\\\n    restore(): void;\\\\n    save(): void;\\\\n}\\\\n\\\\ninterface CanvasText {\\\\n    fillText(text: string, x: number, y: number, maxWidth?: number): void;\\\\n    measureText(text: string): TextMetrics;\\\\n    strokeText(text: string, x: number, y: number, maxWidth?: number): void;\\\\n}\\\\n\\\\ninterface CanvasTextDrawingStyles {\\\\n    direction: CanvasDirection;\\\\n    font: string;\\\\n    textAlign: CanvasTextAlign;\\\\n    textBaseline: CanvasTextBaseline;\\\\n}\\\\n\\\\ninterface CanvasTransform {\\\\n    getTransform(): DOMMatrix;\\\\n    resetTransform(): void;\\\\n    rotate(angle: number): void;\\\\n    scale(x: number, y: number): void;\\\\n    setTransform(a: number, b: number, c: number, d: number, e: number, f: number): void;\\\\n    setTransform(transform?: DOMMatrix2DInit): void;\\\\n    transform(a: number, b: number, c: number, d: number, e: number, f: number): void;\\\\n    translate(x: number, y: number): void;\\\\n}\\\\n\\\\n/** The Client interface represents an executable context such as a Worker, or a SharedWorker. Window clients are represented by the more-specific WindowClient. You can get Client/WindowClient objects from methods such as Clients.matchAll() and Clients.get(). */\\\\ninterface Client {\\\\n    readonly frameType: FrameType;\\\\n    readonly id: string;\\\\n    readonly type: ClientTypes;\\\\n    readonly url: string;\\\\n    postMessage(message: any, transfer?: Transferable[]): void;\\\\n}\\\\n\\\\ndeclare var Client: {\\\\n    prototype: Client;\\\\n    new(): Client;\\\\n};\\\\n\\\\n/** Provides access to Client objects. Access it via self.clients within a service worker. */\\\\ninterface Clients {\\\\n    claim(): Promise<void>;\\\\n    get(id: string): Promise<any>;\\\\n    matchAll(options?: ClientQueryOptions): Promise<ReadonlyArray<Client>>;\\\\n    openWindow(url: string): Promise<WindowClient | null>;\\\\n}\\\\n\\\\ndeclare var Clients: {\\\\n    prototype: Clients;\\\\n    new(): Clients;\\\\n};\\\\n\\\\n/** A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute. */\\\\ninterface CloseEvent extends Event {\\\\n    readonly code: number;\\\\n    readonly reason: string;\\\\n    readonly wasClean: boolean;\\\\n    /** @deprecated */\\\\n    initCloseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, wasCleanArg: boolean, codeArg: number, reasonArg: string): void;\\\\n}\\\\n\\\\ndeclare var CloseEvent: {\\\\n    prototype: CloseEvent;\\\\n    new(type: string, eventInitDict?: CloseEventInit): CloseEvent;\\\\n};\\\\n\\\\ninterface ConcatParams extends Algorithm {\\\\n    algorithmId: Uint8Array;\\\\n    hash?: string | Algorithm;\\\\n    partyUInfo: Uint8Array;\\\\n    partyVInfo: Uint8Array;\\\\n    privateInfo?: Uint8Array;\\\\n    publicInfo?: Uint8Array;\\\\n}\\\\n\\\\n/** Provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided. */\\\\ninterface Console {\\\\n    memory: any;\\\\n    assert(condition?: boolean, message?: string, ...data: any[]): void;\\\\n    clear(): void;\\\\n    count(label?: string): void;\\\\n    debug(message?: any, ...optionalParams: any[]): void;\\\\n    dir(value?: any, ...optionalParams: any[]): void;\\\\n    dirxml(value: any): void;\\\\n    error(message?: any, ...optionalParams: any[]): void;\\\\n    exception(message?: string, ...optionalParams: any[]): void;\\\\n    group(groupTitle?: string, ...optionalParams: any[]): void;\\\\n    groupCollapsed(groupTitle?: string, ...optionalParams: any[]): void;\\\\n    groupEnd(): void;\\\\n    info(message?: any, ...optionalParams: any[]): void;\\\\n    log(message?: any, ...optionalParams: any[]): void;\\\\n    markTimeline(label?: string): void;\\\\n    profile(reportName?: string): void;\\\\n    profileEnd(reportName?: string): void;\\\\n    table(...tabularData: any[]): void;\\\\n    time(label?: string): void;\\\\n    timeEnd(label?: string): void;\\\\n    timeStamp(label?: string): void;\\\\n    timeline(label?: string): void;\\\\n    timelineEnd(label?: string): void;\\\\n    trace(message?: any, ...optionalParams: any[]): void;\\\\n    warn(message?: any, ...optionalParams: any[]): void;\\\\n}\\\\n\\\\ndeclare var Console: {\\\\n    prototype: Console;\\\\n    new(): Console;\\\\n};\\\\n\\\\n/** This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams. */\\\\ninterface CountQueuingStrategy extends QueuingStrategy {\\\\n    highWaterMark: number;\\\\n    size(chunk: any): 1;\\\\n}\\\\n\\\\ndeclare var CountQueuingStrategy: {\\\\n    prototype: CountQueuingStrategy;\\\\n    new(options: { highWaterMark: number }): CountQueuingStrategy;\\\\n};\\\\n\\\\n/** Basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives. */\\\\ninterface Crypto {\\\\n    readonly subtle: SubtleCrypto;\\\\n    getRandomValues<T extends Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | null>(array: T): T;\\\\n}\\\\n\\\\ndeclare var Crypto: {\\\\n    prototype: Crypto;\\\\n    new(): Crypto;\\\\n};\\\\n\\\\n/** The CryptoKey dictionary of the Web Crypto API represents a cryptographic key. */\\\\ninterface CryptoKey {\\\\n    readonly algorithm: KeyAlgorithm;\\\\n    readonly extractable: boolean;\\\\n    readonly type: KeyType;\\\\n    readonly usages: KeyUsage[];\\\\n}\\\\n\\\\ndeclare var CryptoKey: {\\\\n    prototype: CryptoKey;\\\\n    new(): CryptoKey;\\\\n};\\\\n\\\\ninterface CustomEvent<T = any> extends Event {\\\\n    /**\\\\n     * Returns any custom data event was created with. Typically used for synthetic events.\\\\n     */\\\\n    readonly detail: T;\\\\n    initCustomEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, detailArg: T): void;\\\\n}\\\\n\\\\ndeclare var CustomEvent: {\\\\n    prototype: CustomEvent;\\\\n    new<T>(typeArg: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>;\\\\n};\\\\n\\\\n/** An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API. */\\\\ninterface DOMException {\\\\n    readonly code: number;\\\\n    readonly message: string;\\\\n    readonly name: string;\\\\n    readonly ABORT_ERR: number;\\\\n    readonly DATA_CLONE_ERR: number;\\\\n    readonly DOMSTRING_SIZE_ERR: number;\\\\n    readonly HIERARCHY_REQUEST_ERR: number;\\\\n    readonly INDEX_SIZE_ERR: number;\\\\n    readonly INUSE_ATTRIBUTE_ERR: number;\\\\n    readonly INVALID_ACCESS_ERR: number;\\\\n    readonly INVALID_CHARACTER_ERR: number;\\\\n    readonly INVALID_MODIFICATION_ERR: number;\\\\n    readonly INVALID_NODE_TYPE_ERR: number;\\\\n    readonly INVALID_STATE_ERR: number;\\\\n    readonly NAMESPACE_ERR: number;\\\\n    readonly NETWORK_ERR: number;\\\\n    readonly NOT_FOUND_ERR: number;\\\\n    readonly NOT_SUPPORTED_ERR: number;\\\\n    readonly NO_DATA_ALLOWED_ERR: number;\\\\n    readonly NO_MODIFICATION_ALLOWED_ERR: number;\\\\n    readonly QUOTA_EXCEEDED_ERR: number;\\\\n    readonly SECURITY_ERR: number;\\\\n    readonly SYNTAX_ERR: number;\\\\n    readonly TIMEOUT_ERR: number;\\\\n    readonly TYPE_MISMATCH_ERR: number;\\\\n    readonly URL_MISMATCH_ERR: number;\\\\n    readonly VALIDATION_ERR: number;\\\\n    readonly WRONG_DOCUMENT_ERR: number;\\\\n}\\\\n\\\\ndeclare var DOMException: {\\\\n    prototype: DOMException;\\\\n    new(message?: string, name?: string): DOMException;\\\\n    readonly ABORT_ERR: number;\\\\n    readonly DATA_CLONE_ERR: number;\\\\n    readonly DOMSTRING_SIZE_ERR: number;\\\\n    readonly HIERARCHY_REQUEST_ERR: number;\\\\n    readonly INDEX_SIZE_ERR: number;\\\\n    readonly INUSE_ATTRIBUTE_ERR: number;\\\\n    readonly INVALID_ACCESS_ERR: number;\\\\n    readonly INVALID_CHARACTER_ERR: number;\\\\n    readonly INVALID_MODIFICATION_ERR: number;\\\\n    readonly INVALID_NODE_TYPE_ERR: number;\\\\n    readonly INVALID_STATE_ERR: number;\\\\n    readonly NAMESPACE_ERR: number;\\\\n    readonly NETWORK_ERR: number;\\\\n    readonly NOT_FOUND_ERR: number;\\\\n    readonly NOT_SUPPORTED_ERR: number;\\\\n    readonly NO_DATA_ALLOWED_ERR: number;\\\\n    readonly NO_MODIFICATION_ALLOWED_ERR: number;\\\\n    readonly QUOTA_EXCEEDED_ERR: number;\\\\n    readonly SECURITY_ERR: number;\\\\n    readonly SYNTAX_ERR: number;\\\\n    readonly TIMEOUT_ERR: number;\\\\n    readonly TYPE_MISMATCH_ERR: number;\\\\n    readonly URL_MISMATCH_ERR: number;\\\\n    readonly VALIDATION_ERR: number;\\\\n    readonly WRONG_DOCUMENT_ERR: number;\\\\n};\\\\n\\\\ninterface DOMMatrix extends DOMMatrixReadOnly {\\\\n    a: number;\\\\n    b: number;\\\\n    c: number;\\\\n    d: number;\\\\n    e: number;\\\\n    f: number;\\\\n    m11: number;\\\\n    m12: number;\\\\n    m13: number;\\\\n    m14: number;\\\\n    m21: number;\\\\n    m22: number;\\\\n    m23: number;\\\\n    m24: number;\\\\n    m31: number;\\\\n    m32: number;\\\\n    m33: number;\\\\n    m34: number;\\\\n    m41: number;\\\\n    m42: number;\\\\n    m43: number;\\\\n    m44: number;\\\\n    invertSelf(): DOMMatrix;\\\\n    multiplySelf(other?: DOMMatrixInit): DOMMatrix;\\\\n    preMultiplySelf(other?: DOMMatrixInit): DOMMatrix;\\\\n    rotateAxisAngleSelf(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;\\\\n    rotateFromVectorSelf(x?: number, y?: number): DOMMatrix;\\\\n    rotateSelf(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;\\\\n    scale3dSelf(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\\\\n    scaleSelf(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\\\\n    skewXSelf(sx?: number): DOMMatrix;\\\\n    skewYSelf(sy?: number): DOMMatrix;\\\\n    translateSelf(tx?: number, ty?: number, tz?: number): DOMMatrix;\\\\n}\\\\n\\\\ndeclare var DOMMatrix: {\\\\n    prototype: DOMMatrix;\\\\n    new(init?: string | number[]): DOMMatrix;\\\\n    fromFloat32Array(array32: Float32Array): DOMMatrix;\\\\n    fromFloat64Array(array64: Float64Array): DOMMatrix;\\\\n    fromMatrix(other?: DOMMatrixInit): DOMMatrix;\\\\n};\\\\n\\\\ninterface DOMMatrixReadOnly {\\\\n    readonly a: number;\\\\n    readonly b: number;\\\\n    readonly c: number;\\\\n    readonly d: number;\\\\n    readonly e: number;\\\\n    readonly f: number;\\\\n    readonly is2D: boolean;\\\\n    readonly isIdentity: boolean;\\\\n    readonly m11: number;\\\\n    readonly m12: number;\\\\n    readonly m13: number;\\\\n    readonly m14: number;\\\\n    readonly m21: number;\\\\n    readonly m22: number;\\\\n    readonly m23: number;\\\\n    readonly m24: number;\\\\n    readonly m31: number;\\\\n    readonly m32: number;\\\\n    readonly m33: number;\\\\n    readonly m34: number;\\\\n    readonly m41: number;\\\\n    readonly m42: number;\\\\n    readonly m43: number;\\\\n    readonly m44: number;\\\\n    flipX(): DOMMatrix;\\\\n    flipY(): DOMMatrix;\\\\n    inverse(): DOMMatrix;\\\\n    multiply(other?: DOMMatrixInit): DOMMatrix;\\\\n    rotate(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;\\\\n    rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;\\\\n    rotateFromVector(x?: number, y?: number): DOMMatrix;\\\\n    scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\\\\n    scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\\\\n    /** @deprecated */\\\\n    scaleNonUniform(scaleX?: number, scaleY?: number): DOMMatrix;\\\\n    skewX(sx?: number): DOMMatrix;\\\\n    skewY(sy?: number): DOMMatrix;\\\\n    toFloat32Array(): Float32Array;\\\\n    toFloat64Array(): Float64Array;\\\\n    toJSON(): any;\\\\n    transformPoint(point?: DOMPointInit): DOMPoint;\\\\n    translate(tx?: number, ty?: number, tz?: number): DOMMatrix;\\\\n}\\\\n\\\\ndeclare var DOMMatrixReadOnly: {\\\\n    prototype: DOMMatrixReadOnly;\\\\n    new(init?: string | number[]): DOMMatrixReadOnly;\\\\n    fromFloat32Array(array32: Float32Array): DOMMatrixReadOnly;\\\\n    fromFloat64Array(array64: Float64Array): DOMMatrixReadOnly;\\\\n    fromMatrix(other?: DOMMatrixInit): DOMMatrixReadOnly;\\\\n};\\\\n\\\\ninterface DOMPoint extends DOMPointReadOnly {\\\\n    w: number;\\\\n    x: number;\\\\n    y: number;\\\\n    z: number;\\\\n}\\\\n\\\\ndeclare var DOMPoint: {\\\\n    prototype: DOMPoint;\\\\n    new(x?: number, y?: number, z?: number, w?: number): DOMPoint;\\\\n    fromPoint(other?: DOMPointInit): DOMPoint;\\\\n};\\\\n\\\\ninterface DOMPointReadOnly {\\\\n    readonly w: number;\\\\n    readonly x: number;\\\\n    readonly y: number;\\\\n    readonly z: number;\\\\n    matrixTransform(matrix?: DOMMatrixInit): DOMPoint;\\\\n    toJSON(): any;\\\\n}\\\\n\\\\ndeclare var DOMPointReadOnly: {\\\\n    prototype: DOMPointReadOnly;\\\\n    new(x?: number, y?: number, z?: number, w?: number): DOMPointReadOnly;\\\\n    fromPoint(other?: DOMPointInit): DOMPointReadOnly;\\\\n};\\\\n\\\\ninterface DOMQuad {\\\\n    readonly p1: DOMPoint;\\\\n    readonly p2: DOMPoint;\\\\n    readonly p3: DOMPoint;\\\\n    readonly p4: DOMPoint;\\\\n    getBounds(): DOMRect;\\\\n    toJSON(): any;\\\\n}\\\\n\\\\ndeclare var DOMQuad: {\\\\n    prototype: DOMQuad;\\\\n    new(p1?: DOMPointInit, p2?: DOMPointInit, p3?: DOMPointInit, p4?: DOMPointInit): DOMQuad;\\\\n    fromQuad(other?: DOMQuadInit): DOMQuad;\\\\n    fromRect(other?: DOMRectInit): DOMQuad;\\\\n};\\\\n\\\\ninterface DOMRect extends DOMRectReadOnly {\\\\n    height: number;\\\\n    width: number;\\\\n    x: number;\\\\n    y: number;\\\\n}\\\\n\\\\ndeclare var DOMRect: {\\\\n    prototype: DOMRect;\\\\n    new(x?: number, y?: number, width?: number, height?: number): DOMRect;\\\\n    fromRect(other?: DOMRectInit): DOMRect;\\\\n};\\\\n\\\\ninterface DOMRectReadOnly {\\\\n    readonly bottom: number;\\\\n    readonly height: number;\\\\n    readonly left: number;\\\\n    readonly right: number;\\\\n    readonly top: number;\\\\n    readonly width: number;\\\\n    readonly x: number;\\\\n    readonly y: number;\\\\n    toJSON(): any;\\\\n}\\\\n\\\\ndeclare var DOMRectReadOnly: {\\\\n    prototype: DOMRectReadOnly;\\\\n    new(x?: number, y?: number, width?: number, height?: number): DOMRectReadOnly;\\\\n    fromRect(other?: DOMRectInit): DOMRectReadOnly;\\\\n};\\\\n\\\\n/** A type returned by some APIs which contains a list of DOMString (strings). */\\\\ninterface DOMStringList {\\\\n    /**\\\\n     * Returns the number of strings in strings.\\\\n     */\\\\n    readonly length: number;\\\\n    /**\\\\n     * Returns true if strings contains string, and false otherwise.\\\\n     */\\\\n    contains(string: string): boolean;\\\\n    /**\\\\n     * Returns the string with index index from strings.\\\\n     */\\\\n    item(index: number): string | null;\\\\n    [index: number]: string;\\\\n}\\\\n\\\\ndeclare var DOMStringList: {\\\\n    prototype: DOMStringList;\\\\n    new(): DOMStringList;\\\\n};\\\\n\\\\ninterface DedicatedWorkerGlobalScopeEventMap extends WorkerGlobalScopeEventMap {\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n}\\\\n\\\\n/** (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers. */\\\\ninterface DedicatedWorkerGlobalScope extends WorkerGlobalScope, AnimationFrameProvider {\\\\n    onmessage: ((this: DedicatedWorkerGlobalScope, ev: MessageEvent) => any) | null;\\\\n    close(): void;\\\\n    postMessage(message: any, transfer: Transferable[]): void;\\\\n    postMessage(message: any, options?: PostMessageOptions): void;\\\\n    addEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type: K, listener: (this: DedicatedWorkerGlobalScope, ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type: K, listener: (this: DedicatedWorkerGlobalScope, ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var DedicatedWorkerGlobalScope: {\\\\n    prototype: DedicatedWorkerGlobalScope;\\\\n    new(): DedicatedWorkerGlobalScope;\\\\n};\\\\n\\\\ninterface DhImportKeyParams extends Algorithm {\\\\n    generator: Uint8Array;\\\\n    prime: Uint8Array;\\\\n}\\\\n\\\\ninterface DhKeyAlgorithm extends KeyAlgorithm {\\\\n    generator: Uint8Array;\\\\n    prime: Uint8Array;\\\\n}\\\\n\\\\ninterface DhKeyDeriveParams extends Algorithm {\\\\n    public: CryptoKey;\\\\n}\\\\n\\\\ninterface DhKeyGenParams extends Algorithm {\\\\n    generator: Uint8Array;\\\\n    prime: Uint8Array;\\\\n}\\\\n\\\\ninterface EXT_blend_minmax {\\\\n    readonly MAX_EXT: GLenum;\\\\n    readonly MIN_EXT: GLenum;\\\\n}\\\\n\\\\n/** The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader. */\\\\ninterface EXT_frag_depth {\\\\n}\\\\n\\\\ninterface EXT_sRGB {\\\\n    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: GLenum;\\\\n    readonly SRGB8_ALPHA8_EXT: GLenum;\\\\n    readonly SRGB_ALPHA_EXT: GLenum;\\\\n    readonly SRGB_EXT: GLenum;\\\\n}\\\\n\\\\ninterface EXT_shader_texture_lod {\\\\n}\\\\n\\\\n/** The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF). */\\\\ninterface EXT_texture_filter_anisotropic {\\\\n    readonly MAX_TEXTURE_MAX_ANISOTROPY_EXT: GLenum;\\\\n    readonly TEXTURE_MAX_ANISOTROPY_EXT: GLenum;\\\\n}\\\\n\\\\n/** Events providing information related to errors in scripts or in files. */\\\\ninterface ErrorEvent extends Event {\\\\n    readonly colno: number;\\\\n    readonly error: any;\\\\n    readonly filename: string;\\\\n    readonly lineno: number;\\\\n    readonly message: string;\\\\n}\\\\n\\\\ndeclare var ErrorEvent: {\\\\n    prototype: ErrorEvent;\\\\n    new(type: string, eventInitDict?: ErrorEventInit): ErrorEvent;\\\\n};\\\\n\\\\n/** An event which takes place in the DOM. */\\\\ninterface Event {\\\\n    /**\\\\n     * Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.\\\\n     */\\\\n    readonly bubbles: boolean;\\\\n    cancelBubble: boolean;\\\\n    /**\\\\n     * Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.\\\\n     */\\\\n    readonly cancelable: boolean;\\\\n    /**\\\\n     * Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.\\\\n     */\\\\n    readonly composed: boolean;\\\\n    /**\\\\n     * Returns the object whose event listener's callback is currently being invoked.\\\\n     */\\\\n    readonly currentTarget: EventTarget | null;\\\\n    /**\\\\n     * Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.\\\\n     */\\\\n    readonly defaultPrevented: boolean;\\\\n    /**\\\\n     * Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.\\\\n     */\\\\n    readonly eventPhase: number;\\\\n    /**\\\\n     * Returns true if event was dispatched by the user agent, and false otherwise.\\\\n     */\\\\n    readonly isTrusted: boolean;\\\\n    returnValue: boolean;\\\\n    /** @deprecated */\\\\n    readonly srcElement: EventTarget | null;\\\\n    /**\\\\n     * Returns the object to which event is dispatched (its target).\\\\n     */\\\\n    readonly target: EventTarget | null;\\\\n    /**\\\\n     * Returns the event's timestamp as the number of milliseconds measured relative to the time origin.\\\\n     */\\\\n    readonly timeStamp: number;\\\\n    /**\\\\n     * Returns the type of event, e.g. \\\\\\\"click\\\\\\\", \\\\\\\"hashchange\\\\\\\", or \\\\\\\"submit\\\\\\\".\\\\n     */\\\\n    readonly type: string;\\\\n    /**\\\\n     * Returns the invocation target objects of event's path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root's mode is \\\\\\\"closed\\\\\\\" that are not reachable from event's currentTarget.\\\\n     */\\\\n    composedPath(): EventTarget[];\\\\n    initEvent(type: string, bubbles?: boolean, cancelable?: boolean): void;\\\\n    /**\\\\n     * If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.\\\\n     */\\\\n    preventDefault(): void;\\\\n    /**\\\\n     * Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.\\\\n     */\\\\n    stopImmediatePropagation(): void;\\\\n    /**\\\\n     * When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.\\\\n     */\\\\n    stopPropagation(): void;\\\\n    readonly AT_TARGET: number;\\\\n    readonly BUBBLING_PHASE: number;\\\\n    readonly CAPTURING_PHASE: number;\\\\n    readonly NONE: number;\\\\n}\\\\n\\\\ndeclare var Event: {\\\\n    prototype: Event;\\\\n    new(type: string, eventInitDict?: EventInit): Event;\\\\n    readonly AT_TARGET: number;\\\\n    readonly BUBBLING_PHASE: number;\\\\n    readonly CAPTURING_PHASE: number;\\\\n    readonly NONE: number;\\\\n};\\\\n\\\\ninterface EventListenerObject {\\\\n    handleEvent(evt: Event): void;\\\\n}\\\\n\\\\ninterface EventSourceEventMap {\\\\n    \\\\\\\"error\\\\\\\": Event;\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n    \\\\\\\"open\\\\\\\": Event;\\\\n}\\\\n\\\\ninterface EventSource extends EventTarget {\\\\n    onerror: ((this: EventSource, ev: Event) => any) | null;\\\\n    onmessage: ((this: EventSource, ev: MessageEvent) => any) | null;\\\\n    onopen: ((this: EventSource, ev: Event) => any) | null;\\\\n    /**\\\\n     * Returns the state of this EventSource object's connection. It can have the values described below.\\\\n     */\\\\n    readonly readyState: number;\\\\n    /**\\\\n     * Returns the URL providing the event stream.\\\\n     */\\\\n    readonly url: string;\\\\n    /**\\\\n     * Returns true if the credentials mode for connection requests to the URL providing the event stream is set to \\\\\\\"include\\\\\\\", and false otherwise.\\\\n     */\\\\n    readonly withCredentials: boolean;\\\\n    /**\\\\n     * Aborts any instances of the fetch algorithm started for this EventSource object, and sets the readyState attribute to CLOSED.\\\\n     */\\\\n    close(): void;\\\\n    readonly CLOSED: number;\\\\n    readonly CONNECTING: number;\\\\n    readonly OPEN: number;\\\\n    addEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var EventSource: {\\\\n    prototype: EventSource;\\\\n    new(url: string, eventSourceInitDict?: EventSourceInit): EventSource;\\\\n    readonly CLOSED: number;\\\\n    readonly CONNECTING: number;\\\\n    readonly OPEN: number;\\\\n};\\\\n\\\\n/** EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them. */\\\\ninterface EventTarget {\\\\n    /**\\\\n     * Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\\\\n     * \\\\n     * The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\\\\n     * \\\\n     * When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\\\\n     * \\\\n     * When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\\\\n     * \\\\n     * When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\\\\n     * \\\\n     * The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\\\\n     */\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void;\\\\n    /**\\\\n     * Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.\\\\n     */\\\\n    dispatchEvent(event: Event): boolean;\\\\n    /**\\\\n     * Removes the event listener in target's event listener list with the same type, callback, and options.\\\\n     */\\\\n    removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;\\\\n}\\\\n\\\\ndeclare var EventTarget: {\\\\n    prototype: EventTarget;\\\\n    new(): EventTarget;\\\\n};\\\\n\\\\n/** Extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries. */\\\\ninterface ExtendableEvent extends Event {\\\\n    waitUntil(f: any): void;\\\\n}\\\\n\\\\ndeclare var ExtendableEvent: {\\\\n    prototype: ExtendableEvent;\\\\n    new(type: string, eventInitDict?: ExtendableEventInit): ExtendableEvent;\\\\n};\\\\n\\\\n/** This ServiceWorker API interface represents the event object of a message event fired on a service worker (when a channel message is received on the ServiceWorkerGlobalScope from another context) — extends the lifetime of such events. */\\\\ninterface ExtendableMessageEvent extends ExtendableEvent {\\\\n    readonly data: any;\\\\n    readonly lastEventId: string;\\\\n    readonly origin: string;\\\\n    readonly ports: ReadonlyArray<MessagePort>;\\\\n    readonly source: Client | ServiceWorker | MessagePort | null;\\\\n}\\\\n\\\\ndeclare var ExtendableMessageEvent: {\\\\n    prototype: ExtendableMessageEvent;\\\\n    new(type: string, eventInitDict?: ExtendableMessageEventInit): ExtendableMessageEvent;\\\\n};\\\\n\\\\n/** This is the event type for fetch events dispatched on the service worker global scope. It contains information about the fetch, including the request and how the receiver will treat the response. It provides the event.respondWith() method, which allows us to provide a response to this fetch. */\\\\ninterface FetchEvent extends ExtendableEvent {\\\\n    readonly clientId: string;\\\\n    readonly preloadResponse: Promise<any>;\\\\n    readonly replacesClientId: string;\\\\n    readonly request: Request;\\\\n    readonly resultingClientId: string;\\\\n    respondWith(r: Response | Promise<Response>): void;\\\\n}\\\\n\\\\ndeclare var FetchEvent: {\\\\n    prototype: FetchEvent;\\\\n    new(type: string, eventInitDict: FetchEventInit): FetchEvent;\\\\n};\\\\n\\\\n/** Provides information about files and allows JavaScript in a web page to access their content. */\\\\ninterface File extends Blob {\\\\n    readonly lastModified: number;\\\\n    readonly name: string;\\\\n}\\\\n\\\\ndeclare var File: {\\\\n    prototype: File;\\\\n    new(fileBits: BlobPart[], fileName: string, options?: FilePropertyBag): File;\\\\n};\\\\n\\\\n/** An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type=\\\\\\\"file\\\\\\\"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage. */\\\\ninterface FileList {\\\\n    readonly length: number;\\\\n    item(index: number): File | null;\\\\n    [index: number]: File;\\\\n}\\\\n\\\\ndeclare var FileList: {\\\\n    prototype: FileList;\\\\n    new(): FileList;\\\\n};\\\\n\\\\ninterface FileReaderEventMap {\\\\n    \\\\\\\"abort\\\\\\\": ProgressEvent<FileReader>;\\\\n    \\\\\\\"error\\\\\\\": ProgressEvent<FileReader>;\\\\n    \\\\\\\"load\\\\\\\": ProgressEvent<FileReader>;\\\\n    \\\\\\\"loadend\\\\\\\": ProgressEvent<FileReader>;\\\\n    \\\\\\\"loadstart\\\\\\\": ProgressEvent<FileReader>;\\\\n    \\\\\\\"progress\\\\\\\": ProgressEvent<FileReader>;\\\\n}\\\\n\\\\n/** Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read. */\\\\ninterface FileReader extends EventTarget {\\\\n    readonly error: DOMException | null;\\\\n    onabort: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\\\\n    onerror: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\\\\n    onload: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\\\\n    onloadend: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\\\\n    onloadstart: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\\\\n    onprogress: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\\\\n    readonly readyState: number;\\\\n    readonly result: string | ArrayBuffer | null;\\\\n    abort(): void;\\\\n    readAsArrayBuffer(blob: Blob): void;\\\\n    readAsBinaryString(blob: Blob): void;\\\\n    readAsDataURL(blob: Blob): void;\\\\n    readAsText(blob: Blob, encoding?: string): void;\\\\n    readonly DONE: number;\\\\n    readonly EMPTY: number;\\\\n    readonly LOADING: number;\\\\n    addEventListener<K extends keyof FileReaderEventMap>(type: K, listener: (this: FileReader, ev: FileReaderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof FileReaderEventMap>(type: K, listener: (this: FileReader, ev: FileReaderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var FileReader: {\\\\n    prototype: FileReader;\\\\n    new(): FileReader;\\\\n    readonly DONE: number;\\\\n    readonly EMPTY: number;\\\\n    readonly LOADING: number;\\\\n};\\\\n\\\\n/** Allows to read File or Blob objects in a synchronous way. */\\\\ninterface FileReaderSync {\\\\n    readAsArrayBuffer(blob: Blob): ArrayBuffer;\\\\n    readAsBinaryString(blob: Blob): string;\\\\n    readAsDataURL(blob: Blob): string;\\\\n    readAsText(blob: Blob, encoding?: string): string;\\\\n}\\\\n\\\\ndeclare var FileReaderSync: {\\\\n    prototype: FileReaderSync;\\\\n    new(): FileReaderSync;\\\\n};\\\\n\\\\n/** Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to \\\\\\\"multipart/form-data\\\\\\\". */\\\\ninterface FormData {\\\\n    append(name: string, value: string | Blob, fileName?: string): void;\\\\n    delete(name: string): void;\\\\n    get(name: string): FormDataEntryValue | null;\\\\n    getAll(name: string): FormDataEntryValue[];\\\\n    has(name: string): boolean;\\\\n    set(name: string, value: string | Blob, fileName?: string): void;\\\\n    forEach(callbackfn: (value: FormDataEntryValue, key: string, parent: FormData) => void, thisArg?: any): void;\\\\n}\\\\n\\\\ndeclare var FormData: {\\\\n    prototype: FormData;\\\\n    new(): FormData;\\\\n};\\\\n\\\\ninterface GenericTransformStream {\\\\n    /**\\\\n     * Returns a readable stream whose chunks are strings resulting from running encoding's decoder on the chunks written to writable.\\\\n     */\\\\n    readonly readable: ReadableStream;\\\\n    /**\\\\n     * Returns a writable stream which accepts BufferSource chunks and runs them through encoding's decoder before making them available to readable.\\\\n     * \\\\n     * Typically this will be used via the pipeThrough() method on a ReadableStream source.\\\\n     * \\\\n     * ```\\\\n     * var decoder = new TextDecoderStream(encoding);\\\\n     * byteReadable\\\\n     *   .pipeThrough(decoder)\\\\n     *   .pipeTo(textWritable);\\\\n     * ```\\\\n     * \\\\n     * If the error mode is \\\\\\\"fatal\\\\\\\" and encoding's decoder returns error, both readable and writable will be errored with a TypeError.\\\\n     */\\\\n    readonly writable: WritableStream;\\\\n}\\\\n\\\\n/** This Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence. */\\\\ninterface Headers {\\\\n    append(name: string, value: string): void;\\\\n    delete(name: string): void;\\\\n    get(name: string): string | null;\\\\n    has(name: string): boolean;\\\\n    set(name: string, value: string): void;\\\\n    forEach(callbackfn: (value: string, key: string, parent: Headers) => void, thisArg?: any): void;\\\\n}\\\\n\\\\ndeclare var Headers: {\\\\n    prototype: Headers;\\\\n    new(init?: HeadersInit): Headers;\\\\n};\\\\n\\\\ninterface HkdfCtrParams extends Algorithm {\\\\n    context: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n    hash: string | Algorithm;\\\\n    label: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n}\\\\n\\\\ninterface IDBArrayKey extends Array<IDBValidKey> {\\\\n}\\\\n\\\\n/** This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. */\\\\ninterface IDBCursor {\\\\n    /**\\\\n     * Returns the direction (\\\\\\\"next\\\\\\\", \\\\\\\"nextunique\\\\\\\", \\\\\\\"prev\\\\\\\" or \\\\\\\"prevunique\\\\\\\") of the cursor.\\\\n     */\\\\n    readonly direction: IDBCursorDirection;\\\\n    /**\\\\n     * Returns the key of the cursor. Throws a \\\\\\\"InvalidStateError\\\\\\\" DOMException if the cursor is advancing or is finished.\\\\n     */\\\\n    readonly key: IDBValidKey;\\\\n    /**\\\\n     * Returns the effective key of the cursor. Throws a \\\\\\\"InvalidStateError\\\\\\\" DOMException if the cursor is advancing or is finished.\\\\n     */\\\\n    readonly primaryKey: IDBValidKey;\\\\n    /**\\\\n     * Returns the IDBObjectStore or IDBIndex the cursor was opened from.\\\\n     */\\\\n    readonly source: IDBObjectStore | IDBIndex;\\\\n    /**\\\\n     * Advances the cursor through the next count records in range.\\\\n     */\\\\n    advance(count: number): void;\\\\n    /**\\\\n     * Advances the cursor to the next record in range.\\\\n     */\\\\n    continue(key?: IDBValidKey): void;\\\\n    /**\\\\n     * Advances the cursor to the next record in range matching or after key and primaryKey. Throws an \\\\\\\"InvalidAccessError\\\\\\\" DOMException if the source is not an index.\\\\n     */\\\\n    continuePrimaryKey(key: IDBValidKey, primaryKey: IDBValidKey): void;\\\\n    /**\\\\n     * Delete the record pointed at by the cursor with a new value.\\\\n     * \\\\n     * If successful, request's result will be undefined.\\\\n     */\\\\n    delete(): IDBRequest<undefined>;\\\\n    /**\\\\n     * Updated the record pointed at by the cursor with a new value.\\\\n     * \\\\n     * Throws a \\\\\\\"DataError\\\\\\\" DOMException if the effective object store uses in-line keys and the key would have changed.\\\\n     * \\\\n     * If successful, request's result will be the record's key.\\\\n     */\\\\n    update(value: any): IDBRequest<IDBValidKey>;\\\\n}\\\\n\\\\ndeclare var IDBCursor: {\\\\n    prototype: IDBCursor;\\\\n    new(): IDBCursor;\\\\n};\\\\n\\\\n/** This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property. */\\\\ninterface IDBCursorWithValue extends IDBCursor {\\\\n    /**\\\\n     * Returns the cursor's current value.\\\\n     */\\\\n    readonly value: any;\\\\n}\\\\n\\\\ndeclare var IDBCursorWithValue: {\\\\n    prototype: IDBCursorWithValue;\\\\n    new(): IDBCursorWithValue;\\\\n};\\\\n\\\\ninterface IDBDatabaseEventMap {\\\\n    \\\\\\\"abort\\\\\\\": Event;\\\\n    \\\\\\\"close\\\\\\\": Event;\\\\n    \\\\\\\"error\\\\\\\": Event;\\\\n    \\\\\\\"versionchange\\\\\\\": IDBVersionChangeEvent;\\\\n}\\\\n\\\\n/** This IndexedDB API interface provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database. */\\\\ninterface IDBDatabase extends EventTarget {\\\\n    /**\\\\n     * Returns the name of the database.\\\\n     */\\\\n    readonly name: string;\\\\n    /**\\\\n     * Returns a list of the names of object stores in the database.\\\\n     */\\\\n    readonly objectStoreNames: DOMStringList;\\\\n    onabort: ((this: IDBDatabase, ev: Event) => any) | null;\\\\n    onclose: ((this: IDBDatabase, ev: Event) => any) | null;\\\\n    onerror: ((this: IDBDatabase, ev: Event) => any) | null;\\\\n    onversionchange: ((this: IDBDatabase, ev: IDBVersionChangeEvent) => any) | null;\\\\n    /**\\\\n     * Returns the version of the database.\\\\n     */\\\\n    readonly version: number;\\\\n    /**\\\\n     * Closes the connection once all running transactions have finished.\\\\n     */\\\\n    close(): void;\\\\n    /**\\\\n     * Creates a new object store with the given name and options and returns a new IDBObjectStore.\\\\n     * \\\\n     * Throws a \\\\\\\"InvalidStateError\\\\\\\" DOMException if not called within an upgrade transaction.\\\\n     */\\\\n    createObjectStore(name: string, optionalParameters?: IDBObjectStoreParameters): IDBObjectStore;\\\\n    /**\\\\n     * Deletes the object store with the given name.\\\\n     * \\\\n     * Throws a \\\\\\\"InvalidStateError\\\\\\\" DOMException if not called within an upgrade transaction.\\\\n     */\\\\n    deleteObjectStore(name: string): void;\\\\n    /**\\\\n     * Returns a new transaction with the given mode (\\\\\\\"readonly\\\\\\\" or \\\\\\\"readwrite\\\\\\\") and scope which can be a single object store name or an array of names.\\\\n     */\\\\n    transaction(storeNames: string | string[], mode?: IDBTransactionMode): IDBTransaction;\\\\n    addEventListener<K extends keyof IDBDatabaseEventMap>(type: K, listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof IDBDatabaseEventMap>(type: K, listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var IDBDatabase: {\\\\n    prototype: IDBDatabase;\\\\n    new(): IDBDatabase;\\\\n};\\\\n\\\\n/** In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.) */\\\\ninterface IDBFactory {\\\\n    /**\\\\n     * Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if the keys are equal.\\\\n     * \\\\n     * Throws a \\\\\\\"DataError\\\\\\\" DOMException if either input is not a valid key.\\\\n     */\\\\n    cmp(first: any, second: any): number;\\\\n    /**\\\\n     * Attempts to delete the named database. If the database already exists and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close. If the request is successful request's result will be null.\\\\n     */\\\\n    deleteDatabase(name: string): IDBOpenDBRequest;\\\\n    /**\\\\n     * Attempts to open a connection to the named database with the current version, or 1 if it does not already exist. If the request is successful request's result will be the connection.\\\\n     */\\\\n    open(name: string, version?: number): IDBOpenDBRequest;\\\\n}\\\\n\\\\ndeclare var IDBFactory: {\\\\n    prototype: IDBFactory;\\\\n    new(): IDBFactory;\\\\n};\\\\n\\\\n/** IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data. */\\\\ninterface IDBIndex {\\\\n    readonly keyPath: string | string[];\\\\n    readonly multiEntry: boolean;\\\\n    /**\\\\n     * Returns the name of the index.\\\\n     */\\\\n    name: string;\\\\n    /**\\\\n     * Returns the IDBObjectStore the index belongs to.\\\\n     */\\\\n    readonly objectStore: IDBObjectStore;\\\\n    readonly unique: boolean;\\\\n    /**\\\\n     * Retrieves the number of records matching the given key or key range in query.\\\\n     * \\\\n     * If successful, request's result will be the count.\\\\n     */\\\\n    count(key?: IDBValidKey | IDBKeyRange): IDBRequest<number>;\\\\n    /**\\\\n     * Retrieves the value of the first record matching the given key or key range in query.\\\\n     * \\\\n     * If successful, request's result will be the value, or undefined if there was no matching record.\\\\n     */\\\\n    get(key: IDBValidKey | IDBKeyRange): IDBRequest<any | undefined>;\\\\n    /**\\\\n     * Retrieves the values of the records matching the given key or key range in query (up to count if given).\\\\n     * \\\\n     * If successful, request's result will be an Array of the values.\\\\n     */\\\\n    getAll(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<any[]>;\\\\n    /**\\\\n     * Retrieves the keys of records matching the given key or key range in query (up to count if given).\\\\n     * \\\\n     * If successful, request's result will be an Array of the keys.\\\\n     */\\\\n    getAllKeys(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<IDBValidKey[]>;\\\\n    /**\\\\n     * Retrieves the key of the first record matching the given key or key range in query.\\\\n     * \\\\n     * If successful, request's result will be the key, or undefined if there was no matching record.\\\\n     */\\\\n    getKey(key: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>;\\\\n    /**\\\\n     * Opens a cursor over the records matching query, ordered by direction. If query is null, all records in index are matched.\\\\n     * \\\\n     * If successful, request's result will be an IDBCursorWithValue, or null if there were no matching records.\\\\n     */\\\\n    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursorWithValue | null>;\\\\n    /**\\\\n     * Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in index are matched.\\\\n     * \\\\n     * If successful, request's result will be an IDBCursor, or null if there were no matching records.\\\\n     */\\\\n    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursor | null>;\\\\n}\\\\n\\\\ndeclare var IDBIndex: {\\\\n    prototype: IDBIndex;\\\\n    new(): IDBIndex;\\\\n};\\\\n\\\\n/** A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs: */\\\\ninterface IDBKeyRange {\\\\n    /**\\\\n     * Returns lower bound, or undefined if none.\\\\n     */\\\\n    readonly lower: any;\\\\n    /**\\\\n     * Returns true if the lower open flag is set, and false otherwise.\\\\n     */\\\\n    readonly lowerOpen: boolean;\\\\n    /**\\\\n     * Returns upper bound, or undefined if none.\\\\n     */\\\\n    readonly upper: any;\\\\n    /**\\\\n     * Returns true if the upper open flag is set, and false otherwise.\\\\n     */\\\\n    readonly upperOpen: boolean;\\\\n    /**\\\\n     * Returns true if key is included in the range, and false otherwise.\\\\n     */\\\\n    includes(key: any): boolean;\\\\n}\\\\n\\\\ndeclare var IDBKeyRange: {\\\\n    prototype: IDBKeyRange;\\\\n    new(): IDBKeyRange;\\\\n    /**\\\\n     * Returns a new IDBKeyRange spanning from lower to upper. If lowerOpen is true, lower is not included in the range. If upperOpen is true, upper is not included in the range.\\\\n     */\\\\n    bound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): IDBKeyRange;\\\\n    /**\\\\n     * Returns a new IDBKeyRange starting at key with no upper bound. If open is true, key is not included in the range.\\\\n     */\\\\n    lowerBound(lower: any, open?: boolean): IDBKeyRange;\\\\n    /**\\\\n     * Returns a new IDBKeyRange spanning only key.\\\\n     */\\\\n    only(value: any): IDBKeyRange;\\\\n    /**\\\\n     * Returns a new IDBKeyRange with no lower bound and ending at key. If open is true, key is not included in the range.\\\\n     */\\\\n    upperBound(upper: any, open?: boolean): IDBKeyRange;\\\\n};\\\\n\\\\n/** This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.) */\\\\ninterface IDBObjectStore {\\\\n    /**\\\\n     * Returns true if the store has a key generator, and false otherwise.\\\\n     */\\\\n    readonly autoIncrement: boolean;\\\\n    /**\\\\n     * Returns a list of the names of indexes in the store.\\\\n     */\\\\n    readonly indexNames: DOMStringList;\\\\n    /**\\\\n     * Returns the key path of the store, or null if none.\\\\n     */\\\\n    readonly keyPath: string | string[];\\\\n    /**\\\\n     * Returns the name of the store.\\\\n     */\\\\n    name: string;\\\\n    /**\\\\n     * Returns the associated transaction.\\\\n     */\\\\n    readonly transaction: IDBTransaction;\\\\n    /**\\\\n     * Adds or updates a record in store with the given value and key.\\\\n     * \\\\n     * If the store uses in-line keys and key is specified a \\\\\\\"DataError\\\\\\\" DOMException will be thrown.\\\\n     * \\\\n     * If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a \\\\\\\"ConstraintError\\\\\\\" DOMException.\\\\n     * \\\\n     * If successful, request's result will be the record's key.\\\\n     */\\\\n    add(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>;\\\\n    /**\\\\n     * Deletes all records in store.\\\\n     * \\\\n     * If successful, request's result will be undefined.\\\\n     */\\\\n    clear(): IDBRequest<undefined>;\\\\n    /**\\\\n     * Retrieves the number of records matching the given key or key range in query.\\\\n     * \\\\n     * If successful, request's result will be the count.\\\\n     */\\\\n    count(key?: IDBValidKey | IDBKeyRange): IDBRequest<number>;\\\\n    /**\\\\n     * Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a \\\\\\\"ConstraintError\\\\\\\" DOMException.\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if not called within an upgrade transaction.\\\\n     */\\\\n    createIndex(name: string, keyPath: string | string[], options?: IDBIndexParameters): IDBIndex;\\\\n    /**\\\\n     * Deletes records in store with the given key or in the given key range in query.\\\\n     * \\\\n     * If successful, request's result will be undefined.\\\\n     */\\\\n    delete(key: IDBValidKey | IDBKeyRange): IDBRequest<undefined>;\\\\n    /**\\\\n     * Deletes the index in store with the given name.\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if not called within an upgrade transaction.\\\\n     */\\\\n    deleteIndex(name: string): void;\\\\n    /**\\\\n     * Retrieves the value of the first record matching the given key or key range in query.\\\\n     * \\\\n     * If successful, request's result will be the value, or undefined if there was no matching record.\\\\n     */\\\\n    get(query: IDBValidKey | IDBKeyRange): IDBRequest<any | undefined>;\\\\n    /**\\\\n     * Retrieves the values of the records matching the given key or key range in query (up to count if given).\\\\n     * \\\\n     * If successful, request's result will be an Array of the values.\\\\n     */\\\\n    getAll(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<any[]>;\\\\n    /**\\\\n     * Retrieves the keys of records matching the given key or key range in query (up to count if given).\\\\n     * \\\\n     * If successful, request's result will be an Array of the keys.\\\\n     */\\\\n    getAllKeys(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<IDBValidKey[]>;\\\\n    /**\\\\n     * Retrieves the key of the first record matching the given key or key range in query.\\\\n     * \\\\n     * If successful, request's result will be the key, or undefined if there was no matching record.\\\\n     */\\\\n    getKey(query: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>;\\\\n    index(name: string): IDBIndex;\\\\n    /**\\\\n     * Opens a cursor over the records matching query, ordered by direction. If query is null, all records in store are matched.\\\\n     * \\\\n     * If successful, request's result will be an IDBCursorWithValue pointing at the first matching record, or null if there were no matching records.\\\\n     */\\\\n    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursorWithValue | null>;\\\\n    /**\\\\n     * Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in store are matched.\\\\n     * \\\\n     * If successful, request's result will be an IDBCursor pointing at the first matching record, or null if there were no matching records.\\\\n     */\\\\n    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursor | null>;\\\\n    /**\\\\n     * Adds or updates a record in store with the given value and key.\\\\n     * \\\\n     * If the store uses in-line keys and key is specified a \\\\\\\"DataError\\\\\\\" DOMException will be thrown.\\\\n     * \\\\n     * If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a \\\\\\\"ConstraintError\\\\\\\" DOMException.\\\\n     * \\\\n     * If successful, request's result will be the record's key.\\\\n     */\\\\n    put(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>;\\\\n}\\\\n\\\\ndeclare var IDBObjectStore: {\\\\n    prototype: IDBObjectStore;\\\\n    new(): IDBObjectStore;\\\\n};\\\\n\\\\ninterface IDBOpenDBRequestEventMap extends IDBRequestEventMap {\\\\n    \\\\\\\"blocked\\\\\\\": Event;\\\\n    \\\\\\\"upgradeneeded\\\\\\\": IDBVersionChangeEvent;\\\\n}\\\\n\\\\n/** Also inherits methods from its parents IDBRequest and EventTarget. */\\\\ninterface IDBOpenDBRequest extends IDBRequest<IDBDatabase> {\\\\n    onblocked: ((this: IDBOpenDBRequest, ev: Event) => any) | null;\\\\n    onupgradeneeded: ((this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => any) | null;\\\\n    addEventListener<K extends keyof IDBOpenDBRequestEventMap>(type: K, listener: (this: IDBOpenDBRequest, ev: IDBOpenDBRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof IDBOpenDBRequestEventMap>(type: K, listener: (this: IDBOpenDBRequest, ev: IDBOpenDBRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var IDBOpenDBRequest: {\\\\n    prototype: IDBOpenDBRequest;\\\\n    new(): IDBOpenDBRequest;\\\\n};\\\\n\\\\ninterface IDBRequestEventMap {\\\\n    \\\\\\\"error\\\\\\\": Event;\\\\n    \\\\\\\"success\\\\\\\": Event;\\\\n}\\\\n\\\\n/** The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance. */\\\\ninterface IDBRequest<T = any> extends EventTarget {\\\\n    /**\\\\n     * When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a \\\\\\\"InvalidStateError\\\\\\\" DOMException if the request is still pending.\\\\n     */\\\\n    readonly error: DOMException | null;\\\\n    onerror: ((this: IDBRequest<T>, ev: Event) => any) | null;\\\\n    onsuccess: ((this: IDBRequest<T>, ev: Event) => any) | null;\\\\n    /**\\\\n     * Returns \\\\\\\"pending\\\\\\\" until a request is complete, then returns \\\\\\\"done\\\\\\\".\\\\n     */\\\\n    readonly readyState: IDBRequestReadyState;\\\\n    /**\\\\n     * When a request is completed, returns the result, or undefined if the request failed. Throws a \\\\\\\"InvalidStateError\\\\\\\" DOMException if the request is still pending.\\\\n     */\\\\n    readonly result: T;\\\\n    /**\\\\n     * Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request.\\\\n     */\\\\n    readonly source: IDBObjectStore | IDBIndex | IDBCursor;\\\\n    /**\\\\n     * Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise.\\\\n     */\\\\n    readonly transaction: IDBTransaction | null;\\\\n    addEventListener<K extends keyof IDBRequestEventMap>(type: K, listener: (this: IDBRequest<T>, ev: IDBRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof IDBRequestEventMap>(type: K, listener: (this: IDBRequest<T>, ev: IDBRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var IDBRequest: {\\\\n    prototype: IDBRequest;\\\\n    new(): IDBRequest;\\\\n};\\\\n\\\\ninterface IDBTransactionEventMap {\\\\n    \\\\\\\"abort\\\\\\\": Event;\\\\n    \\\\\\\"complete\\\\\\\": Event;\\\\n    \\\\\\\"error\\\\\\\": Event;\\\\n}\\\\n\\\\ninterface IDBTransaction extends EventTarget {\\\\n    /**\\\\n     * Returns the transaction's connection.\\\\n     */\\\\n    readonly db: IDBDatabase;\\\\n    /**\\\\n     * If the transaction was aborted, returns the error (a DOMException) providing the reason.\\\\n     */\\\\n    readonly error: DOMException;\\\\n    /**\\\\n     * Returns the mode the transaction was created with (\\\\\\\"readonly\\\\\\\" or \\\\\\\"readwrite\\\\\\\"), or \\\\\\\"versionchange\\\\\\\" for an upgrade transaction.\\\\n     */\\\\n    readonly mode: IDBTransactionMode;\\\\n    /**\\\\n     * Returns a list of the names of object stores in the transaction's scope. For an upgrade transaction this is all object stores in the database.\\\\n     */\\\\n    readonly objectStoreNames: DOMStringList;\\\\n    onabort: ((this: IDBTransaction, ev: Event) => any) | null;\\\\n    oncomplete: ((this: IDBTransaction, ev: Event) => any) | null;\\\\n    onerror: ((this: IDBTransaction, ev: Event) => any) | null;\\\\n    /**\\\\n     * Aborts the transaction. All pending requests will fail with a \\\\\\\"AbortError\\\\\\\" DOMException and all changes made to the database will be reverted.\\\\n     */\\\\n    abort(): void;\\\\n    /**\\\\n     * Returns an IDBObjectStore in the transaction's scope.\\\\n     */\\\\n    objectStore(name: string): IDBObjectStore;\\\\n    addEventListener<K extends keyof IDBTransactionEventMap>(type: K, listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof IDBTransactionEventMap>(type: K, listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var IDBTransaction: {\\\\n    prototype: IDBTransaction;\\\\n    new(): IDBTransaction;\\\\n};\\\\n\\\\n/** This IndexedDB API interface indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function. */\\\\ninterface IDBVersionChangeEvent extends Event {\\\\n    readonly newVersion: number | null;\\\\n    readonly oldVersion: number;\\\\n}\\\\n\\\\ndeclare var IDBVersionChangeEvent: {\\\\n    prototype: IDBVersionChangeEvent;\\\\n    new(type: string, eventInitDict?: IDBVersionChangeEventInit): IDBVersionChangeEvent;\\\\n};\\\\n\\\\ninterface ImageBitmap {\\\\n    /**\\\\n     * Returns the intrinsic height of the image, in CSS pixels.\\\\n     */\\\\n    readonly height: number;\\\\n    /**\\\\n     * Returns the intrinsic width of the image, in CSS pixels.\\\\n     */\\\\n    readonly width: number;\\\\n    /**\\\\n     * Releases imageBitmap's underlying bitmap data.\\\\n     */\\\\n    close(): void;\\\\n}\\\\n\\\\ndeclare var ImageBitmap: {\\\\n    prototype: ImageBitmap;\\\\n    new(): ImageBitmap;\\\\n};\\\\n\\\\ninterface ImageBitmapOptions {\\\\n    colorSpaceConversion?: \\\\\\\"none\\\\\\\" | \\\\\\\"default\\\\\\\";\\\\n    imageOrientation?: \\\\\\\"none\\\\\\\" | \\\\\\\"flipY\\\\\\\";\\\\n    premultiplyAlpha?: \\\\\\\"none\\\\\\\" | \\\\\\\"premultiply\\\\\\\" | \\\\\\\"default\\\\\\\";\\\\n    resizeHeight?: number;\\\\n    resizeQuality?: \\\\\\\"pixelated\\\\\\\" | \\\\\\\"low\\\\\\\" | \\\\\\\"medium\\\\\\\" | \\\\\\\"high\\\\\\\";\\\\n    resizeWidth?: number;\\\\n}\\\\n\\\\ninterface ImageBitmapRenderingContext {\\\\n    /**\\\\n     * Returns the canvas element that the context is bound to.\\\\n     */\\\\n    readonly canvas: OffscreenCanvas;\\\\n    /**\\\\n     * Transfers the underlying bitmap data from imageBitmap to context, and the bitmap becomes the contents of the canvas element to which context is bound.\\\\n     */\\\\n    transferFromImageBitmap(bitmap: ImageBitmap | null): void;\\\\n}\\\\n\\\\ndeclare var ImageBitmapRenderingContext: {\\\\n    prototype: ImageBitmapRenderingContext;\\\\n    new(): ImageBitmapRenderingContext;\\\\n};\\\\n\\\\n/** The underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData(). */\\\\ninterface ImageData {\\\\n    /**\\\\n     * Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255.\\\\n     */\\\\n    readonly data: Uint8ClampedArray;\\\\n    /**\\\\n     * Returns the actual dimensions of the data in the ImageData object, in pixels.\\\\n     */\\\\n    readonly height: number;\\\\n    /**\\\\n     * Returns the actual dimensions of the data in the ImageData object, in pixels.\\\\n     */\\\\n    readonly width: number;\\\\n}\\\\n\\\\ndeclare var ImageData: {\\\\n    prototype: ImageData;\\\\n    new(width: number, height: number): ImageData;\\\\n    new(array: Uint8ClampedArray, width: number, height: number): ImageData;\\\\n};\\\\n\\\\n/** This Channel Messaging API interface allows us to create a new message channel and send data through it via its two MessagePort properties. */\\\\ninterface MessageChannel {\\\\n    /**\\\\n     * Returns the first MessagePort object.\\\\n     */\\\\n    readonly port1: MessagePort;\\\\n    /**\\\\n     * Returns the second MessagePort object.\\\\n     */\\\\n    readonly port2: MessagePort;\\\\n}\\\\n\\\\ndeclare var MessageChannel: {\\\\n    prototype: MessageChannel;\\\\n    new(): MessageChannel;\\\\n};\\\\n\\\\n/** A message received by a target object. */\\\\ninterface MessageEvent extends Event {\\\\n    /**\\\\n     * Returns the data of the message.\\\\n     */\\\\n    readonly data: any;\\\\n    /**\\\\n     * Returns the last event ID string, for server-sent events.\\\\n     */\\\\n    readonly lastEventId: string;\\\\n    /**\\\\n     * Returns the origin of the message, for server-sent events and cross-document messaging.\\\\n     */\\\\n    readonly origin: string;\\\\n    /**\\\\n     * Returns the MessagePort array sent with the message, for cross-document messaging and channel messaging.\\\\n     */\\\\n    readonly ports: ReadonlyArray<MessagePort>;\\\\n    /**\\\\n     * Returns the WindowProxy of the source window, for cross-document messaging, and the MessagePort being attached, in the connect event fired at SharedWorkerGlobalScope objects.\\\\n     */\\\\n    readonly source: MessageEventSource | null;\\\\n}\\\\n\\\\ndeclare var MessageEvent: {\\\\n    prototype: MessageEvent;\\\\n    new(type: string, eventInitDict?: MessageEventInit): MessageEvent;\\\\n};\\\\n\\\\ninterface MessagePortEventMap {\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n    \\\\\\\"messageerror\\\\\\\": MessageEvent;\\\\n}\\\\n\\\\n/** This Channel Messaging API interface represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other. */\\\\ninterface MessagePort extends EventTarget {\\\\n    onmessage: ((this: MessagePort, ev: MessageEvent) => any) | null;\\\\n    onmessageerror: ((this: MessagePort, ev: MessageEvent) => any) | null;\\\\n    /**\\\\n     * Disconnects the port, so that it is no longer active.\\\\n     */\\\\n    close(): void;\\\\n    /**\\\\n     * Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.\\\\n     * \\\\n     * Throws a \\\\\\\"DataCloneError\\\\\\\" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.\\\\n     */\\\\n    postMessage(message: any, transfer: Transferable[]): void;\\\\n    postMessage(message: any, options?: PostMessageOptions): void;\\\\n    /**\\\\n     * Begins dispatching messages received on the port.\\\\n     */\\\\n    start(): void;\\\\n    addEventListener<K extends keyof MessagePortEventMap>(type: K, listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof MessagePortEventMap>(type: K, listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var MessagePort: {\\\\n    prototype: MessagePort;\\\\n    new(): MessagePort;\\\\n};\\\\n\\\\ninterface NavigationPreloadManager {\\\\n    disable(): Promise<void>;\\\\n    enable(): Promise<void>;\\\\n    getState(): Promise<NavigationPreloadState>;\\\\n    setHeaderValue(value: string): Promise<void>;\\\\n}\\\\n\\\\ndeclare var NavigationPreloadManager: {\\\\n    prototype: NavigationPreloadManager;\\\\n    new(): NavigationPreloadManager;\\\\n};\\\\n\\\\ninterface NavigatorBeacon {\\\\n    sendBeacon(url: string, data?: Blob | Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | FormData | string | null): boolean;\\\\n}\\\\n\\\\ninterface NavigatorConcurrentHardware {\\\\n    readonly hardwareConcurrency: number;\\\\n}\\\\n\\\\ninterface NavigatorID {\\\\n    readonly appCodeName: string;\\\\n    readonly appName: string;\\\\n    readonly appVersion: string;\\\\n    readonly platform: string;\\\\n    readonly product: string;\\\\n    readonly userAgent: string;\\\\n}\\\\n\\\\ninterface NavigatorOnLine {\\\\n    readonly onLine: boolean;\\\\n}\\\\n\\\\ninterface NavigatorStorage {\\\\n    readonly storage: StorageManager;\\\\n}\\\\n\\\\ninterface NotificationEventMap {\\\\n    \\\\\\\"click\\\\\\\": Event;\\\\n    \\\\\\\"close\\\\\\\": Event;\\\\n    \\\\\\\"error\\\\\\\": Event;\\\\n    \\\\\\\"show\\\\\\\": Event;\\\\n}\\\\n\\\\n/** This Notifications API interface is used to configure and display desktop notifications to the user. */\\\\ninterface Notification extends EventTarget {\\\\n    readonly actions: ReadonlyArray<NotificationAction>;\\\\n    readonly badge: string;\\\\n    readonly body: string;\\\\n    readonly data: any;\\\\n    readonly dir: NotificationDirection;\\\\n    readonly icon: string;\\\\n    readonly image: string;\\\\n    readonly lang: string;\\\\n    onclick: ((this: Notification, ev: Event) => any) | null;\\\\n    onclose: ((this: Notification, ev: Event) => any) | null;\\\\n    onerror: ((this: Notification, ev: Event) => any) | null;\\\\n    onshow: ((this: Notification, ev: Event) => any) | null;\\\\n    readonly renotify: boolean;\\\\n    readonly requireInteraction: boolean;\\\\n    readonly silent: boolean;\\\\n    readonly tag: string;\\\\n    readonly timestamp: number;\\\\n    readonly title: string;\\\\n    readonly vibrate: ReadonlyArray<number>;\\\\n    close(): void;\\\\n    addEventListener<K extends keyof NotificationEventMap>(type: K, listener: (this: Notification, ev: NotificationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof NotificationEventMap>(type: K, listener: (this: Notification, ev: NotificationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var Notification: {\\\\n    prototype: Notification;\\\\n    new(title: string, options?: NotificationOptions): Notification;\\\\n    readonly maxActions: number;\\\\n    readonly permission: NotificationPermission;\\\\n};\\\\n\\\\n/** The parameter passed into the onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. */\\\\ninterface NotificationEvent extends ExtendableEvent {\\\\n    readonly action: string;\\\\n    readonly notification: Notification;\\\\n}\\\\n\\\\ndeclare var NotificationEvent: {\\\\n    prototype: NotificationEvent;\\\\n    new(type: string, eventInitDict: NotificationEventInit): NotificationEvent;\\\\n};\\\\n\\\\n/** The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements(). */\\\\ninterface OES_element_index_uint {\\\\n}\\\\n\\\\n/** The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth. */\\\\ninterface OES_standard_derivatives {\\\\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES: GLenum;\\\\n}\\\\n\\\\n/** The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures. */\\\\ninterface OES_texture_float {\\\\n}\\\\n\\\\n/** The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures. */\\\\ninterface OES_texture_float_linear {\\\\n}\\\\n\\\\n/** The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components. */\\\\ninterface OES_texture_half_float {\\\\n    readonly HALF_FLOAT_OES: GLenum;\\\\n}\\\\n\\\\n/** The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures. */\\\\ninterface OES_texture_half_float_linear {\\\\n}\\\\n\\\\ninterface OES_vertex_array_object {\\\\n    bindVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): void;\\\\n    createVertexArrayOES(): WebGLVertexArrayObjectOES | null;\\\\n    deleteVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): void;\\\\n    isVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): GLboolean;\\\\n    readonly VERTEX_ARRAY_BINDING_OES: GLenum;\\\\n}\\\\n\\\\ninterface OffscreenCanvas extends EventTarget {\\\\n    /**\\\\n     * These attributes return the dimensions of the OffscreenCanvas object's bitmap.\\\\n     * \\\\n     * They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).\\\\n     */\\\\n    height: number;\\\\n    /**\\\\n     * These attributes return the dimensions of the OffscreenCanvas object's bitmap.\\\\n     * \\\\n     * They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).\\\\n     */\\\\n    width: number;\\\\n    /**\\\\n     * Returns a promise that will fulfill with a new Blob object representing a file containing the image in the OffscreenCanvas object.\\\\n     * \\\\n     * The argument, if provided, is a dictionary that controls the encoding options of the image file to be created. The type field specifies the file format and has a default value of \\\\\\\"image/png\\\\\\\"; that type is also used if the requested type isn't supported. If the image format supports variable quality (such as \\\\\\\"image/jpeg\\\\\\\"), then the quality field is a number in the range 0.0 to 1.0 inclusive indicating the desired quality level for the resulting image.\\\\n     */\\\\n    convertToBlob(options?: ImageEncodeOptions): Promise<Blob>;\\\\n    /**\\\\n     * Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: \\\\\\\"2d\\\\\\\", \\\\\\\"bitmaprenderer\\\\\\\", \\\\\\\"webgl\\\\\\\", or \\\\\\\"webgl2\\\\\\\". options is handled by that API.\\\\n     * \\\\n     * This specification defines the \\\\\\\"2d\\\\\\\" context below, which is similar but distinct from the \\\\\\\"2d\\\\\\\" context that is created from a canvas element. The WebGL specifications define the \\\\\\\"webgl\\\\\\\" and \\\\\\\"webgl2\\\\\\\" contexts. [WEBGL]\\\\n     * \\\\n     * Returns null if the canvas has already been initialized with another context type (e.g., trying to get a \\\\\\\"2d\\\\\\\" context after getting a \\\\\\\"webgl\\\\\\\" context).\\\\n     */\\\\n    getContext(contextId: \\\\\\\"2d\\\\\\\", options?: CanvasRenderingContext2DSettings): OffscreenCanvasRenderingContext2D | null;\\\\n    getContext(contextId: \\\\\\\"bitmaprenderer\\\\\\\", options?: ImageBitmapRenderingContextSettings): ImageBitmapRenderingContext | null;\\\\n    getContext(contextId: \\\\\\\"webgl\\\\\\\", options?: WebGLContextAttributes): WebGLRenderingContext | null;\\\\n    getContext(contextId: \\\\\\\"webgl2\\\\\\\", options?: WebGLContextAttributes): WebGL2RenderingContext | null;\\\\n    getContext(contextId: OffscreenRenderingContextId, options?: any): OffscreenRenderingContext | null;\\\\n    /**\\\\n     * Returns a newly created ImageBitmap object with the image in the OffscreenCanvas object. The image in the OffscreenCanvas object is replaced with a new blank image.\\\\n     */\\\\n    transferToImageBitmap(): ImageBitmap;\\\\n}\\\\n\\\\ndeclare var OffscreenCanvas: {\\\\n    prototype: OffscreenCanvas;\\\\n    new(width: number, height: number): OffscreenCanvas;\\\\n};\\\\n\\\\ninterface OffscreenCanvasRenderingContext2D extends CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasText, CanvasDrawImage, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath {\\\\n    readonly canvas: OffscreenCanvas;\\\\n    commit(): void;\\\\n}\\\\n\\\\ndeclare var OffscreenCanvasRenderingContext2D: {\\\\n    prototype: OffscreenCanvasRenderingContext2D;\\\\n    new(): OffscreenCanvasRenderingContext2D;\\\\n};\\\\n\\\\n/** This Canvas 2D API interface is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired. */\\\\ninterface Path2D extends CanvasPath {\\\\n    /**\\\\n     * Adds to the path the path given by the argument.\\\\n     */\\\\n    addPath(path: Path2D, transform?: DOMMatrix2DInit): void;\\\\n}\\\\n\\\\ndeclare var Path2D: {\\\\n    prototype: Path2D;\\\\n    new(path?: Path2D | string): Path2D;\\\\n};\\\\n\\\\ninterface PerformanceEventMap {\\\\n    \\\\\\\"resourcetimingbufferfull\\\\\\\": Event;\\\\n}\\\\n\\\\n/** Provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API. */\\\\ninterface Performance extends EventTarget {\\\\n    onresourcetimingbufferfull: ((this: Performance, ev: Event) => any) | null;\\\\n    readonly timeOrigin: number;\\\\n    clearMarks(markName?: string): void;\\\\n    clearMeasures(measureName?: string): void;\\\\n    clearResourceTimings(): void;\\\\n    getEntries(): PerformanceEntryList;\\\\n    getEntriesByName(name: string, type?: string): PerformanceEntryList;\\\\n    getEntriesByType(type: string): PerformanceEntryList;\\\\n    mark(markName: string): void;\\\\n    measure(measureName: string, startMark?: string, endMark?: string): void;\\\\n    now(): number;\\\\n    setResourceTimingBufferSize(maxSize: number): void;\\\\n    toJSON(): any;\\\\n    addEventListener<K extends keyof PerformanceEventMap>(type: K, listener: (this: Performance, ev: PerformanceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof PerformanceEventMap>(type: K, listener: (this: Performance, ev: PerformanceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var Performance: {\\\\n    prototype: Performance;\\\\n    new(): Performance;\\\\n};\\\\n\\\\n/** Encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image). */\\\\ninterface PerformanceEntry {\\\\n    readonly duration: number;\\\\n    readonly entryType: string;\\\\n    readonly name: string;\\\\n    readonly startTime: number;\\\\n    toJSON(): any;\\\\n}\\\\n\\\\ndeclare var PerformanceEntry: {\\\\n    prototype: PerformanceEntry;\\\\n    new(): PerformanceEntry;\\\\n};\\\\n\\\\n/** PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of \\\\\\\"mark\\\\\\\". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline. */\\\\ninterface PerformanceMark extends PerformanceEntry {\\\\n}\\\\n\\\\ndeclare var PerformanceMark: {\\\\n    prototype: PerformanceMark;\\\\n    new(): PerformanceMark;\\\\n};\\\\n\\\\n/** PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of \\\\\\\"measure\\\\\\\". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline. */\\\\ninterface PerformanceMeasure extends PerformanceEntry {\\\\n}\\\\n\\\\ndeclare var PerformanceMeasure: {\\\\n    prototype: PerformanceMeasure;\\\\n    new(): PerformanceMeasure;\\\\n};\\\\n\\\\ninterface PerformanceObserver {\\\\n    disconnect(): void;\\\\n    observe(options?: PerformanceObserverInit): void;\\\\n    takeRecords(): PerformanceEntryList;\\\\n}\\\\n\\\\ndeclare var PerformanceObserver: {\\\\n    prototype: PerformanceObserver;\\\\n    new(callback: PerformanceObserverCallback): PerformanceObserver;\\\\n    readonly supportedEntryTypes: ReadonlyArray<string>;\\\\n};\\\\n\\\\ninterface PerformanceObserverEntryList {\\\\n    getEntries(): PerformanceEntryList;\\\\n    getEntriesByName(name: string, type?: string): PerformanceEntryList;\\\\n    getEntriesByType(type: string): PerformanceEntryList;\\\\n}\\\\n\\\\ndeclare var PerformanceObserverEntryList: {\\\\n    prototype: PerformanceObserverEntryList;\\\\n    new(): PerformanceObserverEntryList;\\\\n};\\\\n\\\\n/** Enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script. */\\\\ninterface PerformanceResourceTiming extends PerformanceEntry {\\\\n    readonly connectEnd: number;\\\\n    readonly connectStart: number;\\\\n    readonly decodedBodySize: number;\\\\n    readonly domainLookupEnd: number;\\\\n    readonly domainLookupStart: number;\\\\n    readonly encodedBodySize: number;\\\\n    readonly fetchStart: number;\\\\n    readonly initiatorType: string;\\\\n    readonly nextHopProtocol: string;\\\\n    readonly redirectEnd: number;\\\\n    readonly redirectStart: number;\\\\n    readonly requestStart: number;\\\\n    readonly responseEnd: number;\\\\n    readonly responseStart: number;\\\\n    readonly secureConnectionStart: number;\\\\n    readonly transferSize: number;\\\\n    readonly workerStart: number;\\\\n    toJSON(): any;\\\\n}\\\\n\\\\ndeclare var PerformanceResourceTiming: {\\\\n    prototype: PerformanceResourceTiming;\\\\n    new(): PerformanceResourceTiming;\\\\n};\\\\n\\\\ninterface PermissionStatusEventMap {\\\\n    \\\\\\\"change\\\\\\\": Event;\\\\n}\\\\n\\\\ninterface PermissionStatus extends EventTarget {\\\\n    onchange: ((this: PermissionStatus, ev: Event) => any) | null;\\\\n    readonly state: PermissionState;\\\\n    addEventListener<K extends keyof PermissionStatusEventMap>(type: K, listener: (this: PermissionStatus, ev: PermissionStatusEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof PermissionStatusEventMap>(type: K, listener: (this: PermissionStatus, ev: PermissionStatusEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var PermissionStatus: {\\\\n    prototype: PermissionStatus;\\\\n    new(): PermissionStatus;\\\\n};\\\\n\\\\ninterface Permissions {\\\\n    query(permissionDesc: PermissionDescriptor | DevicePermissionDescriptor | MidiPermissionDescriptor | PushPermissionDescriptor): Promise<PermissionStatus>;\\\\n}\\\\n\\\\ndeclare var Permissions: {\\\\n    prototype: Permissions;\\\\n    new(): Permissions;\\\\n};\\\\n\\\\n/** Events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>). */\\\\ninterface ProgressEvent<T extends EventTarget = EventTarget> extends Event {\\\\n    readonly lengthComputable: boolean;\\\\n    readonly loaded: number;\\\\n    readonly target: T | null;\\\\n    readonly total: number;\\\\n}\\\\n\\\\ndeclare var ProgressEvent: {\\\\n    prototype: ProgressEvent;\\\\n    new(type: string, eventInitDict?: ProgressEventInit): ProgressEvent;\\\\n};\\\\n\\\\ninterface PromiseRejectionEvent extends Event {\\\\n    readonly promise: Promise<any>;\\\\n    readonly reason: any;\\\\n}\\\\n\\\\ndeclare var PromiseRejectionEvent: {\\\\n    prototype: PromiseRejectionEvent;\\\\n    new(type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent;\\\\n};\\\\n\\\\n/** This Push API interface represents a push message that has been received. This event is sent to the global scope of a ServiceWorker. It contains the information sent from an application server to a PushSubscription. */\\\\ninterface PushEvent extends ExtendableEvent {\\\\n    readonly data: PushMessageData | null;\\\\n}\\\\n\\\\ndeclare var PushEvent: {\\\\n    prototype: PushEvent;\\\\n    new(type: string, eventInitDict?: PushEventInit): PushEvent;\\\\n};\\\\n\\\\n/** This Push API interface provides a way to receive notifications from third-party servers as well as request URLs for push notifications. */\\\\ninterface PushManager {\\\\n    getSubscription(): Promise<PushSubscription | null>;\\\\n    permissionState(options?: PushSubscriptionOptionsInit): Promise<PushPermissionState>;\\\\n    subscribe(options?: PushSubscriptionOptionsInit): Promise<PushSubscription>;\\\\n}\\\\n\\\\ndeclare var PushManager: {\\\\n    prototype: PushManager;\\\\n    new(): PushManager;\\\\n    readonly supportedContentEncodings: ReadonlyArray<string>;\\\\n};\\\\n\\\\n/** This Push API interface provides methods which let you retrieve the push data sent by a server in various formats. */\\\\ninterface PushMessageData {\\\\n    arrayBuffer(): ArrayBuffer;\\\\n    blob(): Blob;\\\\n    json(): any;\\\\n    text(): string;\\\\n}\\\\n\\\\ndeclare var PushMessageData: {\\\\n    prototype: PushMessageData;\\\\n    new(): PushMessageData;\\\\n};\\\\n\\\\n/** This Push API interface provides a subcription's URL endpoint and allows unsubscription from a push service. */\\\\ninterface PushSubscription {\\\\n    readonly endpoint: string;\\\\n    readonly expirationTime: number | null;\\\\n    readonly options: PushSubscriptionOptions;\\\\n    getKey(name: PushEncryptionKeyName): ArrayBuffer | null;\\\\n    toJSON(): PushSubscriptionJSON;\\\\n    unsubscribe(): Promise<boolean>;\\\\n}\\\\n\\\\ndeclare var PushSubscription: {\\\\n    prototype: PushSubscription;\\\\n    new(): PushSubscription;\\\\n};\\\\n\\\\ninterface PushSubscriptionChangeEvent extends ExtendableEvent {\\\\n    readonly newSubscription: PushSubscription | null;\\\\n    readonly oldSubscription: PushSubscription | null;\\\\n}\\\\n\\\\ndeclare var PushSubscriptionChangeEvent: {\\\\n    prototype: PushSubscriptionChangeEvent;\\\\n    new(type: string, eventInitDict?: PushSubscriptionChangeInit): PushSubscriptionChangeEvent;\\\\n};\\\\n\\\\ninterface PushSubscriptionOptions {\\\\n    readonly applicationServerKey: ArrayBuffer | null;\\\\n    readonly userVisibleOnly: boolean;\\\\n}\\\\n\\\\ndeclare var PushSubscriptionOptions: {\\\\n    prototype: PushSubscriptionOptions;\\\\n    new(): PushSubscriptionOptions;\\\\n};\\\\n\\\\ninterface ReadableByteStreamController {\\\\n    readonly byobRequest: ReadableStreamBYOBRequest | undefined;\\\\n    readonly desiredSize: number | null;\\\\n    close(): void;\\\\n    enqueue(chunk: ArrayBufferView): void;\\\\n    error(error?: any): void;\\\\n}\\\\n\\\\n/** This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object. */\\\\ninterface ReadableStream<R = any> {\\\\n    readonly locked: boolean;\\\\n    cancel(reason?: any): Promise<void>;\\\\n    getReader(options: { mode: \\\\\\\"byob\\\\\\\" }): ReadableStreamBYOBReader;\\\\n    getReader(): ReadableStreamDefaultReader<R>;\\\\n    pipeThrough<T>({ writable, readable }: { writable: WritableStream<R>, readable: ReadableStream<T> }, options?: PipeOptions): ReadableStream<T>;\\\\n    pipeTo(dest: WritableStream<R>, options?: PipeOptions): Promise<void>;\\\\n    tee(): [ReadableStream<R>, ReadableStream<R>];\\\\n}\\\\n\\\\ndeclare var ReadableStream: {\\\\n    prototype: ReadableStream;\\\\n    new(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number, size?: undefined }): ReadableStream<Uint8Array>;\\\\n    new<R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>;\\\\n};\\\\n\\\\ninterface ReadableStreamBYOBReader {\\\\n    readonly closed: Promise<void>;\\\\n    cancel(reason?: any): Promise<void>;\\\\n    read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamReadResult<T>>;\\\\n    releaseLock(): void;\\\\n}\\\\n\\\\ninterface ReadableStreamBYOBRequest {\\\\n    readonly view: ArrayBufferView;\\\\n    respond(bytesWritten: number): void;\\\\n    respondWithNewView(view: ArrayBufferView): void;\\\\n}\\\\n\\\\ninterface ReadableStreamDefaultController<R = any> {\\\\n    readonly desiredSize: number | null;\\\\n    close(): void;\\\\n    enqueue(chunk: R): void;\\\\n    error(error?: any): void;\\\\n}\\\\n\\\\ninterface ReadableStreamDefaultReader<R = any> {\\\\n    readonly closed: Promise<void>;\\\\n    cancel(reason?: any): Promise<void>;\\\\n    read(): Promise<ReadableStreamReadResult<R>>;\\\\n    releaseLock(): void;\\\\n}\\\\n\\\\ninterface ReadableStreamReadResult<T> {\\\\n    done: boolean;\\\\n    value: T;\\\\n}\\\\n\\\\ninterface ReadableStreamReader<R = any> {\\\\n    cancel(): Promise<void>;\\\\n    read(): Promise<ReadableStreamReadResult<R>>;\\\\n    releaseLock(): void;\\\\n}\\\\n\\\\ndeclare var ReadableStreamReader: {\\\\n    prototype: ReadableStreamReader;\\\\n    new(): ReadableStreamReader;\\\\n};\\\\n\\\\n/** This Fetch API interface represents a resource request. */\\\\ninterface Request extends Body {\\\\n    /**\\\\n     * Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\\\\n     */\\\\n    readonly cache: RequestCache;\\\\n    /**\\\\n     * Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\\\\n     */\\\\n    readonly credentials: RequestCredentials;\\\\n    /**\\\\n     * Returns the kind of resource requested by request, e.g., \\\\\\\"document\\\\\\\" or \\\\\\\"script\\\\\\\".\\\\n     */\\\\n    readonly destination: RequestDestination;\\\\n    /**\\\\n     * Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \\\\\\\"Host\\\\\\\" header.\\\\n     */\\\\n    readonly headers: Headers;\\\\n    /**\\\\n     * Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]\\\\n     */\\\\n    readonly integrity: string;\\\\n    /**\\\\n     * Returns a boolean indicating whether or not request is for a history navigation (a.k.a. back-foward navigation).\\\\n     */\\\\n    readonly isHistoryNavigation: boolean;\\\\n    /**\\\\n     * Returns a boolean indicating whether or not request is for a reload navigation.\\\\n     */\\\\n    readonly isReloadNavigation: boolean;\\\\n    /**\\\\n     * Returns a boolean indicating whether or not request can outlive the global in which it was created.\\\\n     */\\\\n    readonly keepalive: boolean;\\\\n    /**\\\\n     * Returns request's HTTP method, which is \\\\\\\"GET\\\\\\\" by default.\\\\n     */\\\\n    readonly method: string;\\\\n    /**\\\\n     * Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\\\\n     */\\\\n    readonly mode: RequestMode;\\\\n    /**\\\\n     * Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\\\\n     */\\\\n    readonly redirect: RequestRedirect;\\\\n    /**\\\\n     * Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \\\\\\\"about:client\\\\\\\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\\\\n     */\\\\n    readonly referrer: string;\\\\n    /**\\\\n     * Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\\\\n     */\\\\n    readonly referrerPolicy: ReferrerPolicy;\\\\n    /**\\\\n     * Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\\\\n     */\\\\n    readonly signal: AbortSignal;\\\\n    /**\\\\n     * Returns the URL of request as a string.\\\\n     */\\\\n    readonly url: string;\\\\n    clone(): Request;\\\\n}\\\\n\\\\ndeclare var Request: {\\\\n    prototype: Request;\\\\n    new(input: RequestInfo, init?: RequestInit): Request;\\\\n};\\\\n\\\\n/** This Fetch API interface represents the response to a request. */\\\\ninterface Response extends Body {\\\\n    readonly headers: Headers;\\\\n    readonly ok: boolean;\\\\n    readonly redirected: boolean;\\\\n    readonly status: number;\\\\n    readonly statusText: string;\\\\n    readonly trailer: Promise<Headers>;\\\\n    readonly type: ResponseType;\\\\n    readonly url: string;\\\\n    clone(): Response;\\\\n}\\\\n\\\\ndeclare var Response: {\\\\n    prototype: Response;\\\\n    new(body?: BodyInit | null, init?: ResponseInit): Response;\\\\n    error(): Response;\\\\n    redirect(url: string, status?: number): Response;\\\\n};\\\\n\\\\ninterface ServiceWorkerEventMap extends AbstractWorkerEventMap {\\\\n    \\\\\\\"statechange\\\\\\\": Event;\\\\n}\\\\n\\\\n/** This ServiceWorker API interface provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object. */\\\\ninterface ServiceWorker extends EventTarget, AbstractWorker {\\\\n    onstatechange: ((this: ServiceWorker, ev: Event) => any) | null;\\\\n    readonly scriptURL: string;\\\\n    readonly state: ServiceWorkerState;\\\\n    postMessage(message: any, transfer: Transferable[]): void;\\\\n    postMessage(message: any, options?: PostMessageOptions): void;\\\\n    addEventListener<K extends keyof ServiceWorkerEventMap>(type: K, listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof ServiceWorkerEventMap>(type: K, listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var ServiceWorker: {\\\\n    prototype: ServiceWorker;\\\\n    new(): ServiceWorker;\\\\n};\\\\n\\\\ninterface ServiceWorkerContainerEventMap {\\\\n    \\\\\\\"controllerchange\\\\\\\": Event;\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n    \\\\\\\"messageerror\\\\\\\": MessageEvent;\\\\n}\\\\n\\\\n/** The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations. */\\\\ninterface ServiceWorkerContainer extends EventTarget {\\\\n    readonly controller: ServiceWorker | null;\\\\n    oncontrollerchange: ((this: ServiceWorkerContainer, ev: Event) => any) | null;\\\\n    onmessage: ((this: ServiceWorkerContainer, ev: MessageEvent) => any) | null;\\\\n    onmessageerror: ((this: ServiceWorkerContainer, ev: MessageEvent) => any) | null;\\\\n    readonly ready: Promise<ServiceWorkerRegistration>;\\\\n    getRegistration(clientURL?: string): Promise<ServiceWorkerRegistration | undefined>;\\\\n    getRegistrations(): Promise<ReadonlyArray<ServiceWorkerRegistration>>;\\\\n    register(scriptURL: string, options?: RegistrationOptions): Promise<ServiceWorkerRegistration>;\\\\n    startMessages(): void;\\\\n    addEventListener<K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var ServiceWorkerContainer: {\\\\n    prototype: ServiceWorkerContainer;\\\\n    new(): ServiceWorkerContainer;\\\\n};\\\\n\\\\ninterface ServiceWorkerGlobalScopeEventMap extends WorkerGlobalScopeEventMap {\\\\n    \\\\\\\"activate\\\\\\\": ExtendableEvent;\\\\n    \\\\\\\"fetch\\\\\\\": FetchEvent;\\\\n    \\\\\\\"install\\\\\\\": ExtendableEvent;\\\\n    \\\\\\\"message\\\\\\\": ExtendableMessageEvent;\\\\n    \\\\\\\"messageerror\\\\\\\": MessageEvent;\\\\n    \\\\\\\"notificationclick\\\\\\\": NotificationEvent;\\\\n    \\\\\\\"notificationclose\\\\\\\": NotificationEvent;\\\\n    \\\\\\\"push\\\\\\\": PushEvent;\\\\n    \\\\\\\"pushsubscriptionchange\\\\\\\": PushSubscriptionChangeEvent;\\\\n    \\\\\\\"sync\\\\\\\": SyncEvent;\\\\n}\\\\n\\\\n/** This ServiceWorker API interface represents the global execution context of a service worker. */\\\\ninterface ServiceWorkerGlobalScope extends WorkerGlobalScope {\\\\n    readonly clients: Clients;\\\\n    onactivate: ((this: ServiceWorkerGlobalScope, ev: ExtendableEvent) => any) | null;\\\\n    onfetch: ((this: ServiceWorkerGlobalScope, ev: FetchEvent) => any) | null;\\\\n    oninstall: ((this: ServiceWorkerGlobalScope, ev: ExtendableEvent) => any) | null;\\\\n    onmessage: ((this: ServiceWorkerGlobalScope, ev: ExtendableMessageEvent) => any) | null;\\\\n    onmessageerror: ((this: ServiceWorkerGlobalScope, ev: MessageEvent) => any) | null;\\\\n    onnotificationclick: ((this: ServiceWorkerGlobalScope, ev: NotificationEvent) => any) | null;\\\\n    onnotificationclose: ((this: ServiceWorkerGlobalScope, ev: NotificationEvent) => any) | null;\\\\n    onpush: ((this: ServiceWorkerGlobalScope, ev: PushEvent) => any) | null;\\\\n    onpushsubscriptionchange: ((this: ServiceWorkerGlobalScope, ev: PushSubscriptionChangeEvent) => any) | null;\\\\n    onsync: ((this: ServiceWorkerGlobalScope, ev: SyncEvent) => any) | null;\\\\n    readonly registration: ServiceWorkerRegistration;\\\\n    skipWaiting(): Promise<void>;\\\\n    addEventListener<K extends keyof ServiceWorkerGlobalScopeEventMap>(type: K, listener: (this: ServiceWorkerGlobalScope, ev: ServiceWorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof ServiceWorkerGlobalScopeEventMap>(type: K, listener: (this: ServiceWorkerGlobalScope, ev: ServiceWorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var ServiceWorkerGlobalScope: {\\\\n    prototype: ServiceWorkerGlobalScope;\\\\n    new(): ServiceWorkerGlobalScope;\\\\n};\\\\n\\\\ninterface ServiceWorkerRegistrationEventMap {\\\\n    \\\\\\\"updatefound\\\\\\\": Event;\\\\n}\\\\n\\\\n/** This ServiceWorker API interface represents the service worker registration. You register a service worker to control one or more pages that share the same origin. */\\\\ninterface ServiceWorkerRegistration extends EventTarget {\\\\n    readonly active: ServiceWorker | null;\\\\n    readonly installing: ServiceWorker | null;\\\\n    readonly navigationPreload: NavigationPreloadManager;\\\\n    onupdatefound: ((this: ServiceWorkerRegistration, ev: Event) => any) | null;\\\\n    readonly pushManager: PushManager;\\\\n    readonly scope: string;\\\\n    readonly sync: SyncManager;\\\\n    readonly updateViaCache: ServiceWorkerUpdateViaCache;\\\\n    readonly waiting: ServiceWorker | null;\\\\n    getNotifications(filter?: GetNotificationOptions): Promise<Notification[]>;\\\\n    showNotification(title: string, options?: NotificationOptions): Promise<void>;\\\\n    unregister(): Promise<boolean>;\\\\n    update(): Promise<void>;\\\\n    addEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type: K, listener: (this: ServiceWorkerRegistration, ev: ServiceWorkerRegistrationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type: K, listener: (this: ServiceWorkerRegistration, ev: ServiceWorkerRegistrationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var ServiceWorkerRegistration: {\\\\n    prototype: ServiceWorkerRegistration;\\\\n    new(): ServiceWorkerRegistration;\\\\n};\\\\n\\\\ninterface StorageManager {\\\\n    estimate(): Promise<StorageEstimate>;\\\\n    persisted(): Promise<boolean>;\\\\n}\\\\n\\\\ndeclare var StorageManager: {\\\\n    prototype: StorageManager;\\\\n    new(): StorageManager;\\\\n};\\\\n\\\\n/** This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto). */\\\\ninterface SubtleCrypto {\\\\n    decrypt(algorithm: string | RsaOaepParams | AesCtrParams | AesCbcParams | AesCmacParams | AesGcmParams | AesCfbParams, key: CryptoKey, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>;\\\\n    deriveBits(algorithm: string | EcdhKeyDeriveParams | DhKeyDeriveParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, baseKey: CryptoKey, length: number): PromiseLike<ArrayBuffer>;\\\\n    deriveKey(algorithm: string | EcdhKeyDeriveParams | DhKeyDeriveParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: string | AesDerivedKeyParams | HmacImportParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\\\\n    digest(algorithm: string | Algorithm, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>;\\\\n    encrypt(algorithm: string | RsaOaepParams | AesCtrParams | AesCbcParams | AesCmacParams | AesGcmParams | AesCfbParams, key: CryptoKey, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>;\\\\n    exportKey(format: \\\\\\\"jwk\\\\\\\", key: CryptoKey): PromiseLike<JsonWebKey>;\\\\n    exportKey(format: \\\\\\\"raw\\\\\\\" | \\\\\\\"pkcs8\\\\\\\" | \\\\\\\"spki\\\\\\\", key: CryptoKey): PromiseLike<ArrayBuffer>;\\\\n    exportKey(format: string, key: CryptoKey): PromiseLike<JsonWebKey | ArrayBuffer>;\\\\n    generateKey(algorithm: string, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair | CryptoKey>;\\\\n    generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams | DhKeyGenParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair>;\\\\n    generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\\\\n    importKey(format: \\\\\\\"jwk\\\\\\\", keyData: JsonWebKey, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams | AesKeyAlgorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\\\\n    importKey(format: \\\\\\\"raw\\\\\\\" | \\\\\\\"pkcs8\\\\\\\" | \\\\\\\"spki\\\\\\\", keyData: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams | AesKeyAlgorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\\\\n    importKey(format: string, keyData: JsonWebKey | Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams | AesKeyAlgorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\\\\n    sign(algorithm: string | RsaPssParams | EcdsaParams | AesCmacParams, key: CryptoKey, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>;\\\\n    unwrapKey(format: string, wrappedKey: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, unwrappingKey: CryptoKey, unwrapAlgorithm: string | Algorithm, unwrappedKeyAlgorithm: string | Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\\\\n    verify(algorithm: string | RsaPssParams | EcdsaParams | AesCmacParams, key: CryptoKey, signature: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<boolean>;\\\\n    wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: string | Algorithm): PromiseLike<ArrayBuffer>;\\\\n}\\\\n\\\\ndeclare var SubtleCrypto: {\\\\n    prototype: SubtleCrypto;\\\\n    new(): SubtleCrypto;\\\\n};\\\\n\\\\n/** A sync action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.  */\\\\ninterface SyncEvent extends ExtendableEvent {\\\\n    readonly lastChance: boolean;\\\\n    readonly tag: string;\\\\n}\\\\n\\\\ndeclare var SyncEvent: {\\\\n    prototype: SyncEvent;\\\\n    new(type: string, init: SyncEventInit): SyncEvent;\\\\n};\\\\n\\\\n/** This ServiceWorker API interface provides an interface for registering and listing sync registrations. */\\\\ninterface SyncManager {\\\\n    getTags(): Promise<string[]>;\\\\n    register(tag: string): Promise<void>;\\\\n}\\\\n\\\\ndeclare var SyncManager: {\\\\n    prototype: SyncManager;\\\\n    new(): SyncManager;\\\\n};\\\\n\\\\n/** A decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, etc. A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays. */\\\\ninterface TextDecoder extends TextDecoderCommon {\\\\n    /**\\\\n     * Returns the result of running encoding's decoder. The method can be invoked zero or more times with options's stream set to true, and then once without options's stream (or set to false), to process a fragmented stream. If the invocation without options's stream (or set to false) has no input, it's clearest to omit both arguments.\\\\n     * \\\\n     * ```\\\\n     * var string = \\\\\\\"\\\\\\\", decoder = new TextDecoder(encoding), buffer;\\\\n     * while(buffer = next_chunk()) {\\\\n     *   string += decoder.decode(buffer, {stream:true});\\\\n     * }\\\\n     * string += decoder.decode(); // end-of-stream\\\\n     * ```\\\\n     * \\\\n     * If the error mode is \\\\\\\"fatal\\\\\\\" and encoding's decoder returns error, throws a TypeError.\\\\n     */\\\\n    decode(input?: BufferSource, options?: TextDecodeOptions): string;\\\\n}\\\\n\\\\ndeclare var TextDecoder: {\\\\n    prototype: TextDecoder;\\\\n    new(label?: string, options?: TextDecoderOptions): TextDecoder;\\\\n};\\\\n\\\\ninterface TextDecoderCommon {\\\\n    /**\\\\n     * Returns encoding's name, lowercased.\\\\n     */\\\\n    readonly encoding: string;\\\\n    /**\\\\n     * Returns true if error mode is \\\\\\\"fatal\\\\\\\", and false otherwise.\\\\n     */\\\\n    readonly fatal: boolean;\\\\n    /**\\\\n     * Returns true if ignore BOM flag is set, and false otherwise.\\\\n     */\\\\n    readonly ignoreBOM: boolean;\\\\n}\\\\n\\\\ninterface TextDecoderStream extends TextDecoderCommon, GenericTransformStream {\\\\n}\\\\n\\\\ndeclare var TextDecoderStream: {\\\\n    prototype: TextDecoderStream;\\\\n    new(label?: string, options?: TextDecoderOptions): TextDecoderStream;\\\\n};\\\\n\\\\n/** TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays. */\\\\ninterface TextEncoder extends TextEncoderCommon {\\\\n    /**\\\\n     * Returns the result of running UTF-8's encoder.\\\\n     */\\\\n    encode(input?: string): Uint8Array;\\\\n    /**\\\\n     * Runs the UTF-8 encoder on source, stores the result of that operation into destination, and returns the progress made as a dictionary whereby read is the number of converted code units of source and written is the number of bytes modified in destination.\\\\n     */\\\\n    encodeInto(source: string, destination: Uint8Array): TextEncoderEncodeIntoResult;\\\\n}\\\\n\\\\ndeclare var TextEncoder: {\\\\n    prototype: TextEncoder;\\\\n    new(): TextEncoder;\\\\n};\\\\n\\\\ninterface TextEncoderCommon {\\\\n    /**\\\\n     * Returns \\\\\\\"utf-8\\\\\\\".\\\\n     */\\\\n    readonly encoding: string;\\\\n}\\\\n\\\\ninterface TextEncoderStream extends TextEncoderCommon, GenericTransformStream {\\\\n}\\\\n\\\\ndeclare var TextEncoderStream: {\\\\n    prototype: TextEncoderStream;\\\\n    new(): TextEncoderStream;\\\\n};\\\\n\\\\n/** The dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method. */\\\\ninterface TextMetrics {\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly actualBoundingBoxAscent: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly actualBoundingBoxDescent: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly actualBoundingBoxLeft: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly actualBoundingBoxRight: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly alphabeticBaseline: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly emHeightAscent: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly emHeightDescent: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly fontBoundingBoxAscent: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly fontBoundingBoxDescent: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly hangingBaseline: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly ideographicBaseline: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly width: number;\\\\n}\\\\n\\\\ndeclare var TextMetrics: {\\\\n    prototype: TextMetrics;\\\\n    new(): TextMetrics;\\\\n};\\\\n\\\\ninterface TransformStream<I = any, O = any> {\\\\n    readonly readable: ReadableStream<O>;\\\\n    readonly writable: WritableStream<I>;\\\\n}\\\\n\\\\ndeclare var TransformStream: {\\\\n    prototype: TransformStream;\\\\n    new<I = any, O = any>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>;\\\\n};\\\\n\\\\ninterface TransformStreamDefaultController<O = any> {\\\\n    readonly desiredSize: number | null;\\\\n    enqueue(chunk: O): void;\\\\n    error(reason?: any): void;\\\\n    terminate(): void;\\\\n}\\\\n\\\\n/** The URL interface represents an object providing static methods used for creating object URLs. */\\\\ninterface URL {\\\\n    hash: string;\\\\n    host: string;\\\\n    hostname: string;\\\\n    href: string;\\\\n    readonly origin: string;\\\\n    password: string;\\\\n    pathname: string;\\\\n    port: string;\\\\n    protocol: string;\\\\n    search: string;\\\\n    readonly searchParams: URLSearchParams;\\\\n    username: string;\\\\n    toJSON(): string;\\\\n}\\\\n\\\\ndeclare var URL: {\\\\n    prototype: URL;\\\\n    new(url: string, base?: string | URL): URL;\\\\n    createObjectURL(object: any): string;\\\\n    revokeObjectURL(url: string): void;\\\\n};\\\\n\\\\ninterface URLSearchParams {\\\\n    /**\\\\n     * Appends a specified key/value pair as a new search parameter.\\\\n     */\\\\n    append(name: string, value: string): void;\\\\n    /**\\\\n     * Deletes the given search parameter, and its associated value, from the list of all search parameters.\\\\n     */\\\\n    delete(name: string): void;\\\\n    /**\\\\n     * Returns the first value associated to the given search parameter.\\\\n     */\\\\n    get(name: string): string | null;\\\\n    /**\\\\n     * Returns all the values association with a given search parameter.\\\\n     */\\\\n    getAll(name: string): string[];\\\\n    /**\\\\n     * Returns a Boolean indicating if such a search parameter exists.\\\\n     */\\\\n    has(name: string): boolean;\\\\n    /**\\\\n     * Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.\\\\n     */\\\\n    set(name: string, value: string): void;\\\\n    sort(): void;\\\\n    forEach(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any): void;\\\\n}\\\\n\\\\ndeclare var URLSearchParams: {\\\\n    prototype: URLSearchParams;\\\\n    new(init?: string[][] | Record<string, string> | string | URLSearchParams): URLSearchParams;\\\\n};\\\\n\\\\ninterface WEBGL_color_buffer_float {\\\\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: GLenum;\\\\n    readonly RGBA32F_EXT: GLenum;\\\\n    readonly UNSIGNED_NORMALIZED_EXT: GLenum;\\\\n}\\\\n\\\\ninterface WEBGL_compressed_texture_astc {\\\\n    getSupportedProfiles(): string[];\\\\n    readonly COMPRESSED_RGBA_ASTC_10x10_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_10x5_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_10x6_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_10x8_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_12x10_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_12x12_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_4x4_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_5x4_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_5x5_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_6x5_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_6x6_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_8x5_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_8x6_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_8x8_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: GLenum;\\\\n}\\\\n\\\\n/** The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats. */\\\\ninterface WEBGL_compressed_texture_s3tc {\\\\n    readonly COMPRESSED_RGBA_S3TC_DXT1_EXT: GLenum;\\\\n    readonly COMPRESSED_RGBA_S3TC_DXT3_EXT: GLenum;\\\\n    readonly COMPRESSED_RGBA_S3TC_DXT5_EXT: GLenum;\\\\n    readonly COMPRESSED_RGB_S3TC_DXT1_EXT: GLenum;\\\\n}\\\\n\\\\ninterface WEBGL_compressed_texture_s3tc_srgb {\\\\n    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: GLenum;\\\\n    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: GLenum;\\\\n    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: GLenum;\\\\n    readonly COMPRESSED_SRGB_S3TC_DXT1_EXT: GLenum;\\\\n}\\\\n\\\\n/** The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes. */\\\\ninterface WEBGL_debug_renderer_info {\\\\n    readonly UNMASKED_RENDERER_WEBGL: GLenum;\\\\n    readonly UNMASKED_VENDOR_WEBGL: GLenum;\\\\n}\\\\n\\\\ninterface WEBGL_debug_shaders {\\\\n    getTranslatedShaderSource(shader: WebGLShader): string;\\\\n}\\\\n\\\\n/** The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures. */\\\\ninterface WEBGL_depth_texture {\\\\n    readonly UNSIGNED_INT_24_8_WEBGL: GLenum;\\\\n}\\\\n\\\\ninterface WEBGL_draw_buffers {\\\\n    drawBuffersWEBGL(buffers: GLenum[]): void;\\\\n    readonly COLOR_ATTACHMENT0_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT10_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT11_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT12_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT13_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT14_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT15_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT1_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT2_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT3_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT4_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT5_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT6_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT7_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT8_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT9_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER0_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER10_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER11_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER12_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER13_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER14_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER15_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER1_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER2_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER3_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER4_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER5_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER6_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER7_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER8_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER9_WEBGL: GLenum;\\\\n    readonly MAX_COLOR_ATTACHMENTS_WEBGL: GLenum;\\\\n    readonly MAX_DRAW_BUFFERS_WEBGL: GLenum;\\\\n}\\\\n\\\\ninterface WEBGL_lose_context {\\\\n    loseContext(): void;\\\\n    restoreContext(): void;\\\\n}\\\\n\\\\ninterface WebGL2RenderingContext extends WebGLRenderingContextBase, WebGL2RenderingContextBase, WebGL2RenderingContextOverloads {\\\\n}\\\\n\\\\ndeclare var WebGL2RenderingContext: {\\\\n    prototype: WebGL2RenderingContext;\\\\n    new(): WebGL2RenderingContext;\\\\n    readonly ACTIVE_ATTRIBUTES: GLenum;\\\\n    readonly ACTIVE_TEXTURE: GLenum;\\\\n    readonly ACTIVE_UNIFORMS: GLenum;\\\\n    readonly ALIASED_LINE_WIDTH_RANGE: GLenum;\\\\n    readonly ALIASED_POINT_SIZE_RANGE: GLenum;\\\\n    readonly ALPHA: GLenum;\\\\n    readonly ALPHA_BITS: GLenum;\\\\n    readonly ALWAYS: GLenum;\\\\n    readonly ARRAY_BUFFER: GLenum;\\\\n    readonly ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly ATTACHED_SHADERS: GLenum;\\\\n    readonly BACK: GLenum;\\\\n    readonly BLEND: GLenum;\\\\n    readonly BLEND_COLOR: GLenum;\\\\n    readonly BLEND_DST_ALPHA: GLenum;\\\\n    readonly BLEND_DST_RGB: GLenum;\\\\n    readonly BLEND_EQUATION: GLenum;\\\\n    readonly BLEND_EQUATION_ALPHA: GLenum;\\\\n    readonly BLEND_EQUATION_RGB: GLenum;\\\\n    readonly BLEND_SRC_ALPHA: GLenum;\\\\n    readonly BLEND_SRC_RGB: GLenum;\\\\n    readonly BLUE_BITS: GLenum;\\\\n    readonly BOOL: GLenum;\\\\n    readonly BOOL_VEC2: GLenum;\\\\n    readonly BOOL_VEC3: GLenum;\\\\n    readonly BOOL_VEC4: GLenum;\\\\n    readonly BROWSER_DEFAULT_WEBGL: GLenum;\\\\n    readonly BUFFER_SIZE: GLenum;\\\\n    readonly BUFFER_USAGE: GLenum;\\\\n    readonly BYTE: GLenum;\\\\n    readonly CCW: GLenum;\\\\n    readonly CLAMP_TO_EDGE: GLenum;\\\\n    readonly COLOR_ATTACHMENT0: GLenum;\\\\n    readonly COLOR_BUFFER_BIT: GLenum;\\\\n    readonly COLOR_CLEAR_VALUE: GLenum;\\\\n    readonly COLOR_WRITEMASK: GLenum;\\\\n    readonly COMPILE_STATUS: GLenum;\\\\n    readonly COMPRESSED_TEXTURE_FORMATS: GLenum;\\\\n    readonly CONSTANT_ALPHA: GLenum;\\\\n    readonly CONSTANT_COLOR: GLenum;\\\\n    readonly CONTEXT_LOST_WEBGL: GLenum;\\\\n    readonly CULL_FACE: GLenum;\\\\n    readonly CULL_FACE_MODE: GLenum;\\\\n    readonly CURRENT_PROGRAM: GLenum;\\\\n    readonly CURRENT_VERTEX_ATTRIB: GLenum;\\\\n    readonly CW: GLenum;\\\\n    readonly DECR: GLenum;\\\\n    readonly DECR_WRAP: GLenum;\\\\n    readonly DELETE_STATUS: GLenum;\\\\n    readonly DEPTH_ATTACHMENT: GLenum;\\\\n    readonly DEPTH_BITS: GLenum;\\\\n    readonly DEPTH_BUFFER_BIT: GLenum;\\\\n    readonly DEPTH_CLEAR_VALUE: GLenum;\\\\n    readonly DEPTH_COMPONENT: GLenum;\\\\n    readonly DEPTH_COMPONENT16: GLenum;\\\\n    readonly DEPTH_FUNC: GLenum;\\\\n    readonly DEPTH_RANGE: GLenum;\\\\n    readonly DEPTH_STENCIL: GLenum;\\\\n    readonly DEPTH_STENCIL_ATTACHMENT: GLenum;\\\\n    readonly DEPTH_TEST: GLenum;\\\\n    readonly DEPTH_WRITEMASK: GLenum;\\\\n    readonly DITHER: GLenum;\\\\n    readonly DONT_CARE: GLenum;\\\\n    readonly DST_ALPHA: GLenum;\\\\n    readonly DST_COLOR: GLenum;\\\\n    readonly DYNAMIC_DRAW: GLenum;\\\\n    readonly ELEMENT_ARRAY_BUFFER: GLenum;\\\\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly EQUAL: GLenum;\\\\n    readonly FASTEST: GLenum;\\\\n    readonly FLOAT: GLenum;\\\\n    readonly FLOAT_MAT2: GLenum;\\\\n    readonly FLOAT_MAT3: GLenum;\\\\n    readonly FLOAT_MAT4: GLenum;\\\\n    readonly FLOAT_VEC2: GLenum;\\\\n    readonly FLOAT_VEC3: GLenum;\\\\n    readonly FLOAT_VEC4: GLenum;\\\\n    readonly FRAGMENT_SHADER: GLenum;\\\\n    readonly FRAMEBUFFER: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;\\\\n    readonly FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly FRAMEBUFFER_COMPLETE: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;\\\\n    readonly FRAMEBUFFER_UNSUPPORTED: GLenum;\\\\n    readonly FRONT: GLenum;\\\\n    readonly FRONT_AND_BACK: GLenum;\\\\n    readonly FRONT_FACE: GLenum;\\\\n    readonly FUNC_ADD: GLenum;\\\\n    readonly FUNC_REVERSE_SUBTRACT: GLenum;\\\\n    readonly FUNC_SUBTRACT: GLenum;\\\\n    readonly GENERATE_MIPMAP_HINT: GLenum;\\\\n    readonly GEQUAL: GLenum;\\\\n    readonly GREATER: GLenum;\\\\n    readonly GREEN_BITS: GLenum;\\\\n    readonly HIGH_FLOAT: GLenum;\\\\n    readonly HIGH_INT: GLenum;\\\\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;\\\\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: GLenum;\\\\n    readonly INCR: GLenum;\\\\n    readonly INCR_WRAP: GLenum;\\\\n    readonly INT: GLenum;\\\\n    readonly INT_VEC2: GLenum;\\\\n    readonly INT_VEC3: GLenum;\\\\n    readonly INT_VEC4: GLenum;\\\\n    readonly INVALID_ENUM: GLenum;\\\\n    readonly INVALID_FRAMEBUFFER_OPERATION: GLenum;\\\\n    readonly INVALID_OPERATION: GLenum;\\\\n    readonly INVALID_VALUE: GLenum;\\\\n    readonly INVERT: GLenum;\\\\n    readonly KEEP: GLenum;\\\\n    readonly LEQUAL: GLenum;\\\\n    readonly LESS: GLenum;\\\\n    readonly LINEAR: GLenum;\\\\n    readonly LINEAR_MIPMAP_LINEAR: GLenum;\\\\n    readonly LINEAR_MIPMAP_NEAREST: GLenum;\\\\n    readonly LINES: GLenum;\\\\n    readonly LINE_LOOP: GLenum;\\\\n    readonly LINE_STRIP: GLenum;\\\\n    readonly LINE_WIDTH: GLenum;\\\\n    readonly LINK_STATUS: GLenum;\\\\n    readonly LOW_FLOAT: GLenum;\\\\n    readonly LOW_INT: GLenum;\\\\n    readonly LUMINANCE: GLenum;\\\\n    readonly LUMINANCE_ALPHA: GLenum;\\\\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;\\\\n    readonly MAX_RENDERBUFFER_SIZE: GLenum;\\\\n    readonly MAX_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_VARYING_VECTORS: GLenum;\\\\n    readonly MAX_VERTEX_ATTRIBS: GLenum;\\\\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_VECTORS: GLenum;\\\\n    readonly MAX_VIEWPORT_DIMS: GLenum;\\\\n    readonly MEDIUM_FLOAT: GLenum;\\\\n    readonly MEDIUM_INT: GLenum;\\\\n    readonly MIRRORED_REPEAT: GLenum;\\\\n    readonly NEAREST: GLenum;\\\\n    readonly NEAREST_MIPMAP_LINEAR: GLenum;\\\\n    readonly NEAREST_MIPMAP_NEAREST: GLenum;\\\\n    readonly NEVER: GLenum;\\\\n    readonly NICEST: GLenum;\\\\n    readonly NONE: GLenum;\\\\n    readonly NOTEQUAL: GLenum;\\\\n    readonly NO_ERROR: GLenum;\\\\n    readonly ONE: GLenum;\\\\n    readonly ONE_MINUS_CONSTANT_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_CONSTANT_COLOR: GLenum;\\\\n    readonly ONE_MINUS_DST_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_DST_COLOR: GLenum;\\\\n    readonly ONE_MINUS_SRC_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_SRC_COLOR: GLenum;\\\\n    readonly OUT_OF_MEMORY: GLenum;\\\\n    readonly PACK_ALIGNMENT: GLenum;\\\\n    readonly POINTS: GLenum;\\\\n    readonly POLYGON_OFFSET_FACTOR: GLenum;\\\\n    readonly POLYGON_OFFSET_FILL: GLenum;\\\\n    readonly POLYGON_OFFSET_UNITS: GLenum;\\\\n    readonly RED_BITS: GLenum;\\\\n    readonly RENDERBUFFER: GLenum;\\\\n    readonly RENDERBUFFER_ALPHA_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_BINDING: GLenum;\\\\n    readonly RENDERBUFFER_BLUE_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_DEPTH_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_GREEN_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_HEIGHT: GLenum;\\\\n    readonly RENDERBUFFER_INTERNAL_FORMAT: GLenum;\\\\n    readonly RENDERBUFFER_RED_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_STENCIL_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_WIDTH: GLenum;\\\\n    readonly RENDERER: GLenum;\\\\n    readonly REPEAT: GLenum;\\\\n    readonly REPLACE: GLenum;\\\\n    readonly RGB: GLenum;\\\\n    readonly RGB565: GLenum;\\\\n    readonly RGB5_A1: GLenum;\\\\n    readonly RGBA: GLenum;\\\\n    readonly RGBA4: GLenum;\\\\n    readonly SAMPLER_2D: GLenum;\\\\n    readonly SAMPLER_CUBE: GLenum;\\\\n    readonly SAMPLES: GLenum;\\\\n    readonly SAMPLE_ALPHA_TO_COVERAGE: GLenum;\\\\n    readonly SAMPLE_BUFFERS: GLenum;\\\\n    readonly SAMPLE_COVERAGE: GLenum;\\\\n    readonly SAMPLE_COVERAGE_INVERT: GLenum;\\\\n    readonly SAMPLE_COVERAGE_VALUE: GLenum;\\\\n    readonly SCISSOR_BOX: GLenum;\\\\n    readonly SCISSOR_TEST: GLenum;\\\\n    readonly SHADER_TYPE: GLenum;\\\\n    readonly SHADING_LANGUAGE_VERSION: GLenum;\\\\n    readonly SHORT: GLenum;\\\\n    readonly SRC_ALPHA: GLenum;\\\\n    readonly SRC_ALPHA_SATURATE: GLenum;\\\\n    readonly SRC_COLOR: GLenum;\\\\n    readonly STATIC_DRAW: GLenum;\\\\n    readonly STENCIL_ATTACHMENT: GLenum;\\\\n    readonly STENCIL_BACK_FAIL: GLenum;\\\\n    readonly STENCIL_BACK_FUNC: GLenum;\\\\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;\\\\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: GLenum;\\\\n    readonly STENCIL_BACK_REF: GLenum;\\\\n    readonly STENCIL_BACK_VALUE_MASK: GLenum;\\\\n    readonly STENCIL_BACK_WRITEMASK: GLenum;\\\\n    readonly STENCIL_BITS: GLenum;\\\\n    readonly STENCIL_BUFFER_BIT: GLenum;\\\\n    readonly STENCIL_CLEAR_VALUE: GLenum;\\\\n    readonly STENCIL_FAIL: GLenum;\\\\n    readonly STENCIL_FUNC: GLenum;\\\\n    readonly STENCIL_INDEX8: GLenum;\\\\n    readonly STENCIL_PASS_DEPTH_FAIL: GLenum;\\\\n    readonly STENCIL_PASS_DEPTH_PASS: GLenum;\\\\n    readonly STENCIL_REF: GLenum;\\\\n    readonly STENCIL_TEST: GLenum;\\\\n    readonly STENCIL_VALUE_MASK: GLenum;\\\\n    readonly STENCIL_WRITEMASK: GLenum;\\\\n    readonly STREAM_DRAW: GLenum;\\\\n    readonly SUBPIXEL_BITS: GLenum;\\\\n    readonly TEXTURE: GLenum;\\\\n    readonly TEXTURE0: GLenum;\\\\n    readonly TEXTURE1: GLenum;\\\\n    readonly TEXTURE10: GLenum;\\\\n    readonly TEXTURE11: GLenum;\\\\n    readonly TEXTURE12: GLenum;\\\\n    readonly TEXTURE13: GLenum;\\\\n    readonly TEXTURE14: GLenum;\\\\n    readonly TEXTURE15: GLenum;\\\\n    readonly TEXTURE16: GLenum;\\\\n    readonly TEXTURE17: GLenum;\\\\n    readonly TEXTURE18: GLenum;\\\\n    readonly TEXTURE19: GLenum;\\\\n    readonly TEXTURE2: GLenum;\\\\n    readonly TEXTURE20: GLenum;\\\\n    readonly TEXTURE21: GLenum;\\\\n    readonly TEXTURE22: GLenum;\\\\n    readonly TEXTURE23: GLenum;\\\\n    readonly TEXTURE24: GLenum;\\\\n    readonly TEXTURE25: GLenum;\\\\n    readonly TEXTURE26: GLenum;\\\\n    readonly TEXTURE27: GLenum;\\\\n    readonly TEXTURE28: GLenum;\\\\n    readonly TEXTURE29: GLenum;\\\\n    readonly TEXTURE3: GLenum;\\\\n    readonly TEXTURE30: GLenum;\\\\n    readonly TEXTURE31: GLenum;\\\\n    readonly TEXTURE4: GLenum;\\\\n    readonly TEXTURE5: GLenum;\\\\n    readonly TEXTURE6: GLenum;\\\\n    readonly TEXTURE7: GLenum;\\\\n    readonly TEXTURE8: GLenum;\\\\n    readonly TEXTURE9: GLenum;\\\\n    readonly TEXTURE_2D: GLenum;\\\\n    readonly TEXTURE_BINDING_2D: GLenum;\\\\n    readonly TEXTURE_BINDING_CUBE_MAP: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;\\\\n    readonly TEXTURE_MAG_FILTER: GLenum;\\\\n    readonly TEXTURE_MIN_FILTER: GLenum;\\\\n    readonly TEXTURE_WRAP_S: GLenum;\\\\n    readonly TEXTURE_WRAP_T: GLenum;\\\\n    readonly TRIANGLES: GLenum;\\\\n    readonly TRIANGLE_FAN: GLenum;\\\\n    readonly TRIANGLE_STRIP: GLenum;\\\\n    readonly UNPACK_ALIGNMENT: GLenum;\\\\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;\\\\n    readonly UNPACK_FLIP_Y_WEBGL: GLenum;\\\\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;\\\\n    readonly UNSIGNED_BYTE: GLenum;\\\\n    readonly UNSIGNED_INT: GLenum;\\\\n    readonly UNSIGNED_SHORT: GLenum;\\\\n    readonly UNSIGNED_SHORT_4_4_4_4: GLenum;\\\\n    readonly UNSIGNED_SHORT_5_5_5_1: GLenum;\\\\n    readonly UNSIGNED_SHORT_5_6_5: GLenum;\\\\n    readonly VALIDATE_STATUS: GLenum;\\\\n    readonly VENDOR: GLenum;\\\\n    readonly VERSION: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: GLenum;\\\\n    readonly VERTEX_SHADER: GLenum;\\\\n    readonly VIEWPORT: GLenum;\\\\n    readonly ZERO: GLenum;\\\\n    readonly ACTIVE_UNIFORM_BLOCKS: GLenum;\\\\n    readonly ALREADY_SIGNALED: GLenum;\\\\n    readonly ANY_SAMPLES_PASSED: GLenum;\\\\n    readonly ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum;\\\\n    readonly COLOR: GLenum;\\\\n    readonly COLOR_ATTACHMENT1: GLenum;\\\\n    readonly COLOR_ATTACHMENT10: GLenum;\\\\n    readonly COLOR_ATTACHMENT11: GLenum;\\\\n    readonly COLOR_ATTACHMENT12: GLenum;\\\\n    readonly COLOR_ATTACHMENT13: GLenum;\\\\n    readonly COLOR_ATTACHMENT14: GLenum;\\\\n    readonly COLOR_ATTACHMENT15: GLenum;\\\\n    readonly COLOR_ATTACHMENT2: GLenum;\\\\n    readonly COLOR_ATTACHMENT3: GLenum;\\\\n    readonly COLOR_ATTACHMENT4: GLenum;\\\\n    readonly COLOR_ATTACHMENT5: GLenum;\\\\n    readonly COLOR_ATTACHMENT6: GLenum;\\\\n    readonly COLOR_ATTACHMENT7: GLenum;\\\\n    readonly COLOR_ATTACHMENT8: GLenum;\\\\n    readonly COLOR_ATTACHMENT9: GLenum;\\\\n    readonly COMPARE_REF_TO_TEXTURE: GLenum;\\\\n    readonly CONDITION_SATISFIED: GLenum;\\\\n    readonly COPY_READ_BUFFER: GLenum;\\\\n    readonly COPY_READ_BUFFER_BINDING: GLenum;\\\\n    readonly COPY_WRITE_BUFFER: GLenum;\\\\n    readonly COPY_WRITE_BUFFER_BINDING: GLenum;\\\\n    readonly CURRENT_QUERY: GLenum;\\\\n    readonly DEPTH: GLenum;\\\\n    readonly DEPTH24_STENCIL8: GLenum;\\\\n    readonly DEPTH32F_STENCIL8: GLenum;\\\\n    readonly DEPTH_COMPONENT24: GLenum;\\\\n    readonly DEPTH_COMPONENT32F: GLenum;\\\\n    readonly DRAW_BUFFER0: GLenum;\\\\n    readonly DRAW_BUFFER1: GLenum;\\\\n    readonly DRAW_BUFFER10: GLenum;\\\\n    readonly DRAW_BUFFER11: GLenum;\\\\n    readonly DRAW_BUFFER12: GLenum;\\\\n    readonly DRAW_BUFFER13: GLenum;\\\\n    readonly DRAW_BUFFER14: GLenum;\\\\n    readonly DRAW_BUFFER15: GLenum;\\\\n    readonly DRAW_BUFFER2: GLenum;\\\\n    readonly DRAW_BUFFER3: GLenum;\\\\n    readonly DRAW_BUFFER4: GLenum;\\\\n    readonly DRAW_BUFFER5: GLenum;\\\\n    readonly DRAW_BUFFER6: GLenum;\\\\n    readonly DRAW_BUFFER7: GLenum;\\\\n    readonly DRAW_BUFFER8: GLenum;\\\\n    readonly DRAW_BUFFER9: GLenum;\\\\n    readonly DRAW_FRAMEBUFFER: GLenum;\\\\n    readonly DRAW_FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly DYNAMIC_COPY: GLenum;\\\\n    readonly DYNAMIC_READ: GLenum;\\\\n    readonly FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum;\\\\n    readonly FLOAT_MAT2x3: GLenum;\\\\n    readonly FLOAT_MAT2x4: GLenum;\\\\n    readonly FLOAT_MAT3x2: GLenum;\\\\n    readonly FLOAT_MAT3x4: GLenum;\\\\n    readonly FLOAT_MAT4x2: GLenum;\\\\n    readonly FLOAT_MAT4x3: GLenum;\\\\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum;\\\\n    readonly FRAMEBUFFER_DEFAULT: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum;\\\\n    readonly HALF_FLOAT: GLenum;\\\\n    readonly INTERLEAVED_ATTRIBS: GLenum;\\\\n    readonly INT_2_10_10_10_REV: GLenum;\\\\n    readonly INT_SAMPLER_2D: GLenum;\\\\n    readonly INT_SAMPLER_2D_ARRAY: GLenum;\\\\n    readonly INT_SAMPLER_3D: GLenum;\\\\n    readonly INT_SAMPLER_CUBE: GLenum;\\\\n    readonly INVALID_INDEX: GLenum;\\\\n    readonly MAX: GLenum;\\\\n    readonly MAX_3D_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_ARRAY_TEXTURE_LAYERS: GLenum;\\\\n    readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: GLenum;\\\\n    readonly MAX_COLOR_ATTACHMENTS: GLenum;\\\\n    readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MAX_COMBINED_UNIFORM_BLOCKS: GLenum;\\\\n    readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MAX_DRAW_BUFFERS: GLenum;\\\\n    readonly MAX_ELEMENTS_INDICES: GLenum;\\\\n    readonly MAX_ELEMENTS_VERTICES: GLenum;\\\\n    readonly MAX_ELEMENT_INDEX: GLenum;\\\\n    readonly MAX_FRAGMENT_INPUT_COMPONENTS: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MAX_PROGRAM_TEXEL_OFFSET: GLenum;\\\\n    readonly MAX_SAMPLES: GLenum;\\\\n    readonly MAX_SERVER_WAIT_TIMEOUT: GLenum;\\\\n    readonly MAX_TEXTURE_LOD_BIAS: GLenum;\\\\n    readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum;\\\\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum;\\\\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum;\\\\n    readonly MAX_UNIFORM_BLOCK_SIZE: GLenum;\\\\n    readonly MAX_UNIFORM_BUFFER_BINDINGS: GLenum;\\\\n    readonly MAX_VARYING_COMPONENTS: GLenum;\\\\n    readonly MAX_VERTEX_OUTPUT_COMPONENTS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_BLOCKS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MIN: GLenum;\\\\n    readonly MIN_PROGRAM_TEXEL_OFFSET: GLenum;\\\\n    readonly OBJECT_TYPE: GLenum;\\\\n    readonly PACK_ROW_LENGTH: GLenum;\\\\n    readonly PACK_SKIP_PIXELS: GLenum;\\\\n    readonly PACK_SKIP_ROWS: GLenum;\\\\n    readonly PIXEL_PACK_BUFFER: GLenum;\\\\n    readonly PIXEL_PACK_BUFFER_BINDING: GLenum;\\\\n    readonly PIXEL_UNPACK_BUFFER: GLenum;\\\\n    readonly PIXEL_UNPACK_BUFFER_BINDING: GLenum;\\\\n    readonly QUERY_RESULT: GLenum;\\\\n    readonly QUERY_RESULT_AVAILABLE: GLenum;\\\\n    readonly R11F_G11F_B10F: GLenum;\\\\n    readonly R16F: GLenum;\\\\n    readonly R16I: GLenum;\\\\n    readonly R16UI: GLenum;\\\\n    readonly R32F: GLenum;\\\\n    readonly R32I: GLenum;\\\\n    readonly R32UI: GLenum;\\\\n    readonly R8: GLenum;\\\\n    readonly R8I: GLenum;\\\\n    readonly R8UI: GLenum;\\\\n    readonly R8_SNORM: GLenum;\\\\n    readonly RASTERIZER_DISCARD: GLenum;\\\\n    readonly READ_BUFFER: GLenum;\\\\n    readonly READ_FRAMEBUFFER: GLenum;\\\\n    readonly READ_FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly RED: GLenum;\\\\n    readonly RED_INTEGER: GLenum;\\\\n    readonly RENDERBUFFER_SAMPLES: GLenum;\\\\n    readonly RG: GLenum;\\\\n    readonly RG16F: GLenum;\\\\n    readonly RG16I: GLenum;\\\\n    readonly RG16UI: GLenum;\\\\n    readonly RG32F: GLenum;\\\\n    readonly RG32I: GLenum;\\\\n    readonly RG32UI: GLenum;\\\\n    readonly RG8: GLenum;\\\\n    readonly RG8I: GLenum;\\\\n    readonly RG8UI: GLenum;\\\\n    readonly RG8_SNORM: GLenum;\\\\n    readonly RGB10_A2: GLenum;\\\\n    readonly RGB10_A2UI: GLenum;\\\\n    readonly RGB16F: GLenum;\\\\n    readonly RGB16I: GLenum;\\\\n    readonly RGB16UI: GLenum;\\\\n    readonly RGB32F: GLenum;\\\\n    readonly RGB32I: GLenum;\\\\n    readonly RGB32UI: GLenum;\\\\n    readonly RGB8: GLenum;\\\\n    readonly RGB8I: GLenum;\\\\n    readonly RGB8UI: GLenum;\\\\n    readonly RGB8_SNORM: GLenum;\\\\n    readonly RGB9_E5: GLenum;\\\\n    readonly RGBA16F: GLenum;\\\\n    readonly RGBA16I: GLenum;\\\\n    readonly RGBA16UI: GLenum;\\\\n    readonly RGBA32F: GLenum;\\\\n    readonly RGBA32I: GLenum;\\\\n    readonly RGBA32UI: GLenum;\\\\n    readonly RGBA8: GLenum;\\\\n    readonly RGBA8I: GLenum;\\\\n    readonly RGBA8UI: GLenum;\\\\n    readonly RGBA8_SNORM: GLenum;\\\\n    readonly RGBA_INTEGER: GLenum;\\\\n    readonly RGB_INTEGER: GLenum;\\\\n    readonly RG_INTEGER: GLenum;\\\\n    readonly SAMPLER_2D_ARRAY: GLenum;\\\\n    readonly SAMPLER_2D_ARRAY_SHADOW: GLenum;\\\\n    readonly SAMPLER_2D_SHADOW: GLenum;\\\\n    readonly SAMPLER_3D: GLenum;\\\\n    readonly SAMPLER_BINDING: GLenum;\\\\n    readonly SAMPLER_CUBE_SHADOW: GLenum;\\\\n    readonly SEPARATE_ATTRIBS: GLenum;\\\\n    readonly SIGNALED: GLenum;\\\\n    readonly SIGNED_NORMALIZED: GLenum;\\\\n    readonly SRGB: GLenum;\\\\n    readonly SRGB8: GLenum;\\\\n    readonly SRGB8_ALPHA8: GLenum;\\\\n    readonly STATIC_COPY: GLenum;\\\\n    readonly STATIC_READ: GLenum;\\\\n    readonly STENCIL: GLenum;\\\\n    readonly STREAM_COPY: GLenum;\\\\n    readonly STREAM_READ: GLenum;\\\\n    readonly SYNC_CONDITION: GLenum;\\\\n    readonly SYNC_FENCE: GLenum;\\\\n    readonly SYNC_FLAGS: GLenum;\\\\n    readonly SYNC_FLUSH_COMMANDS_BIT: GLenum;\\\\n    readonly SYNC_GPU_COMMANDS_COMPLETE: GLenum;\\\\n    readonly SYNC_STATUS: GLenum;\\\\n    readonly TEXTURE_2D_ARRAY: GLenum;\\\\n    readonly TEXTURE_3D: GLenum;\\\\n    readonly TEXTURE_BASE_LEVEL: GLenum;\\\\n    readonly TEXTURE_BINDING_2D_ARRAY: GLenum;\\\\n    readonly TEXTURE_BINDING_3D: GLenum;\\\\n    readonly TEXTURE_COMPARE_FUNC: GLenum;\\\\n    readonly TEXTURE_COMPARE_MODE: GLenum;\\\\n    readonly TEXTURE_IMMUTABLE_FORMAT: GLenum;\\\\n    readonly TEXTURE_IMMUTABLE_LEVELS: GLenum;\\\\n    readonly TEXTURE_MAX_LEVEL: GLenum;\\\\n    readonly TEXTURE_MAX_LOD: GLenum;\\\\n    readonly TEXTURE_MIN_LOD: GLenum;\\\\n    readonly TEXTURE_WRAP_R: GLenum;\\\\n    readonly TIMEOUT_EXPIRED: GLenum;\\\\n    readonly TIMEOUT_IGNORED: GLint64;\\\\n    readonly TRANSFORM_FEEDBACK: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_ACTIVE: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BINDING: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_START: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_PAUSED: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_VARYINGS: GLenum;\\\\n    readonly UNIFORM_ARRAY_STRIDE: GLenum;\\\\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum;\\\\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum;\\\\n    readonly UNIFORM_BLOCK_BINDING: GLenum;\\\\n    readonly UNIFORM_BLOCK_DATA_SIZE: GLenum;\\\\n    readonly UNIFORM_BLOCK_INDEX: GLenum;\\\\n    readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum;\\\\n    readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum;\\\\n    readonly UNIFORM_BUFFER: GLenum;\\\\n    readonly UNIFORM_BUFFER_BINDING: GLenum;\\\\n    readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum;\\\\n    readonly UNIFORM_BUFFER_SIZE: GLenum;\\\\n    readonly UNIFORM_BUFFER_START: GLenum;\\\\n    readonly UNIFORM_IS_ROW_MAJOR: GLenum;\\\\n    readonly UNIFORM_MATRIX_STRIDE: GLenum;\\\\n    readonly UNIFORM_OFFSET: GLenum;\\\\n    readonly UNIFORM_SIZE: GLenum;\\\\n    readonly UNIFORM_TYPE: GLenum;\\\\n    readonly UNPACK_IMAGE_HEIGHT: GLenum;\\\\n    readonly UNPACK_ROW_LENGTH: GLenum;\\\\n    readonly UNPACK_SKIP_IMAGES: GLenum;\\\\n    readonly UNPACK_SKIP_PIXELS: GLenum;\\\\n    readonly UNPACK_SKIP_ROWS: GLenum;\\\\n    readonly UNSIGNALED: GLenum;\\\\n    readonly UNSIGNED_INT_10F_11F_11F_REV: GLenum;\\\\n    readonly UNSIGNED_INT_24_8: GLenum;\\\\n    readonly UNSIGNED_INT_2_10_10_10_REV: GLenum;\\\\n    readonly UNSIGNED_INT_5_9_9_9_REV: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_2D: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_3D: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_CUBE: GLenum;\\\\n    readonly UNSIGNED_INT_VEC2: GLenum;\\\\n    readonly UNSIGNED_INT_VEC3: GLenum;\\\\n    readonly UNSIGNED_INT_VEC4: GLenum;\\\\n    readonly UNSIGNED_NORMALIZED: GLenum;\\\\n    readonly VERTEX_ARRAY_BINDING: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_INTEGER: GLenum;\\\\n    readonly WAIT_FAILED: GLenum;\\\\n};\\\\n\\\\ninterface WebGL2RenderingContextBase {\\\\n    beginQuery(target: GLenum, query: WebGLQuery): void;\\\\n    beginTransformFeedback(primitiveMode: GLenum): void;\\\\n    bindBufferBase(target: GLenum, index: GLuint, buffer: WebGLBuffer | null): void;\\\\n    bindBufferRange(target: GLenum, index: GLuint, buffer: WebGLBuffer | null, offset: GLintptr, size: GLsizeiptr): void;\\\\n    bindSampler(unit: GLuint, sampler: WebGLSampler | null): void;\\\\n    bindTransformFeedback(target: GLenum, tf: WebGLTransformFeedback | null): void;\\\\n    bindVertexArray(array: WebGLVertexArrayObject | null): void;\\\\n    blitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void;\\\\n    clearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void;\\\\n    clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Float32List, srcOffset?: GLuint): void;\\\\n    clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Int32List, srcOffset?: GLuint): void;\\\\n    clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Uint32List, srcOffset?: GLuint): void;\\\\n    clientWaitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLuint64): GLenum;\\\\n    compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): void;\\\\n    compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\\\\n    compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): void;\\\\n    compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\\\\n    copyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void;\\\\n    copyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\\\\n    createQuery(): WebGLQuery | null;\\\\n    createSampler(): WebGLSampler | null;\\\\n    createTransformFeedback(): WebGLTransformFeedback | null;\\\\n    createVertexArray(): WebGLVertexArrayObject | null;\\\\n    deleteQuery(query: WebGLQuery | null): void;\\\\n    deleteSampler(sampler: WebGLSampler | null): void;\\\\n    deleteSync(sync: WebGLSync | null): void;\\\\n    deleteTransformFeedback(tf: WebGLTransformFeedback | null): void;\\\\n    deleteVertexArray(vertexArray: WebGLVertexArrayObject | null): void;\\\\n    drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei): void;\\\\n    drawBuffers(buffers: GLenum[]): void;\\\\n    drawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei): void;\\\\n    drawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, offset: GLintptr): void;\\\\n    endQuery(target: GLenum): void;\\\\n    endTransformFeedback(): void;\\\\n    fenceSync(condition: GLenum, flags: GLbitfield): WebGLSync | null;\\\\n    framebufferTextureLayer(target: GLenum, attachment: GLenum, texture: WebGLTexture | null, level: GLint, layer: GLint): void;\\\\n    getActiveUniformBlockName(program: WebGLProgram, uniformBlockIndex: GLuint): string | null;\\\\n    getActiveUniformBlockParameter(program: WebGLProgram, uniformBlockIndex: GLuint, pname: GLenum): any;\\\\n    getActiveUniforms(program: WebGLProgram, uniformIndices: GLuint[], pname: GLenum): any;\\\\n    getBufferSubData(target: GLenum, srcByteOffset: GLintptr, dstBuffer: ArrayBufferView, dstOffset?: GLuint, length?: GLuint): void;\\\\n    getFragDataLocation(program: WebGLProgram, name: string): GLint;\\\\n    getIndexedParameter(target: GLenum, index: GLuint): any;\\\\n    getInternalformatParameter(target: GLenum, internalformat: GLenum, pname: GLenum): any;\\\\n    getQuery(target: GLenum, pname: GLenum): WebGLQuery | null;\\\\n    getQueryParameter(query: WebGLQuery, pname: GLenum): any;\\\\n    getSamplerParameter(sampler: WebGLSampler, pname: GLenum): any;\\\\n    getSyncParameter(sync: WebGLSync, pname: GLenum): any;\\\\n    getTransformFeedbackVarying(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;\\\\n    getUniformBlockIndex(program: WebGLProgram, uniformBlockName: string): GLuint;\\\\n    getUniformIndices(program: WebGLProgram, uniformNames: string[]): GLuint[] | null;\\\\n    invalidateFramebuffer(target: GLenum, attachments: GLenum[]): void;\\\\n    invalidateSubFramebuffer(target: GLenum, attachments: GLenum[], x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\\\\n    isQuery(query: WebGLQuery | null): GLboolean;\\\\n    isSampler(sampler: WebGLSampler | null): GLboolean;\\\\n    isSync(sync: WebGLSync | null): GLboolean;\\\\n    isTransformFeedback(tf: WebGLTransformFeedback | null): GLboolean;\\\\n    isVertexArray(vertexArray: WebGLVertexArrayObject | null): GLboolean;\\\\n    pauseTransformFeedback(): void;\\\\n    readBuffer(src: GLenum): void;\\\\n    renderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;\\\\n    resumeTransformFeedback(): void;\\\\n    samplerParameterf(sampler: WebGLSampler, pname: GLenum, param: GLfloat): void;\\\\n    samplerParameteri(sampler: WebGLSampler, pname: GLenum, param: GLint): void;\\\\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\\\\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView | null): void;\\\\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;\\\\n    texStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;\\\\n    texStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void;\\\\n    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\\\\n    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView | null, srcOffset?: GLuint): void;\\\\n    transformFeedbackVaryings(program: WebGLProgram, varyings: string[], bufferMode: GLenum): void;\\\\n    uniform1ui(location: WebGLUniformLocation | null, v0: GLuint): void;\\\\n    uniform1uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform2ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint): void;\\\\n    uniform2uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform3ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint, v2: GLuint): void;\\\\n    uniform3uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform4ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void;\\\\n    uniform4uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformBlockBinding(program: WebGLProgram, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint): void;\\\\n    uniformMatrix2x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix2x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix3x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix3x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix4x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix4x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    vertexAttribDivisor(index: GLuint, divisor: GLuint): void;\\\\n    vertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void;\\\\n    vertexAttribI4iv(index: GLuint, values: Int32List): void;\\\\n    vertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void;\\\\n    vertexAttribI4uiv(index: GLuint, values: Uint32List): void;\\\\n    vertexAttribIPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;\\\\n    waitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLint64): void;\\\\n    readonly ACTIVE_UNIFORM_BLOCKS: GLenum;\\\\n    readonly ALREADY_SIGNALED: GLenum;\\\\n    readonly ANY_SAMPLES_PASSED: GLenum;\\\\n    readonly ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum;\\\\n    readonly COLOR: GLenum;\\\\n    readonly COLOR_ATTACHMENT1: GLenum;\\\\n    readonly COLOR_ATTACHMENT10: GLenum;\\\\n    readonly COLOR_ATTACHMENT11: GLenum;\\\\n    readonly COLOR_ATTACHMENT12: GLenum;\\\\n    readonly COLOR_ATTACHMENT13: GLenum;\\\\n    readonly COLOR_ATTACHMENT14: GLenum;\\\\n    readonly COLOR_ATTACHMENT15: GLenum;\\\\n    readonly COLOR_ATTACHMENT2: GLenum;\\\\n    readonly COLOR_ATTACHMENT3: GLenum;\\\\n    readonly COLOR_ATTACHMENT4: GLenum;\\\\n    readonly COLOR_ATTACHMENT5: GLenum;\\\\n    readonly COLOR_ATTACHMENT6: GLenum;\\\\n    readonly COLOR_ATTACHMENT7: GLenum;\\\\n    readonly COLOR_ATTACHMENT8: GLenum;\\\\n    readonly COLOR_ATTACHMENT9: GLenum;\\\\n    readonly COMPARE_REF_TO_TEXTURE: GLenum;\\\\n    readonly CONDITION_SATISFIED: GLenum;\\\\n    readonly COPY_READ_BUFFER: GLenum;\\\\n    readonly COPY_READ_BUFFER_BINDING: GLenum;\\\\n    readonly COPY_WRITE_BUFFER: GLenum;\\\\n    readonly COPY_WRITE_BUFFER_BINDING: GLenum;\\\\n    readonly CURRENT_QUERY: GLenum;\\\\n    readonly DEPTH: GLenum;\\\\n    readonly DEPTH24_STENCIL8: GLenum;\\\\n    readonly DEPTH32F_STENCIL8: GLenum;\\\\n    readonly DEPTH_COMPONENT24: GLenum;\\\\n    readonly DEPTH_COMPONENT32F: GLenum;\\\\n    readonly DRAW_BUFFER0: GLenum;\\\\n    readonly DRAW_BUFFER1: GLenum;\\\\n    readonly DRAW_BUFFER10: GLenum;\\\\n    readonly DRAW_BUFFER11: GLenum;\\\\n    readonly DRAW_BUFFER12: GLenum;\\\\n    readonly DRAW_BUFFER13: GLenum;\\\\n    readonly DRAW_BUFFER14: GLenum;\\\\n    readonly DRAW_BUFFER15: GLenum;\\\\n    readonly DRAW_BUFFER2: GLenum;\\\\n    readonly DRAW_BUFFER3: GLenum;\\\\n    readonly DRAW_BUFFER4: GLenum;\\\\n    readonly DRAW_BUFFER5: GLenum;\\\\n    readonly DRAW_BUFFER6: GLenum;\\\\n    readonly DRAW_BUFFER7: GLenum;\\\\n    readonly DRAW_BUFFER8: GLenum;\\\\n    readonly DRAW_BUFFER9: GLenum;\\\\n    readonly DRAW_FRAMEBUFFER: GLenum;\\\\n    readonly DRAW_FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly DYNAMIC_COPY: GLenum;\\\\n    readonly DYNAMIC_READ: GLenum;\\\\n    readonly FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum;\\\\n    readonly FLOAT_MAT2x3: GLenum;\\\\n    readonly FLOAT_MAT2x4: GLenum;\\\\n    readonly FLOAT_MAT3x2: GLenum;\\\\n    readonly FLOAT_MAT3x4: GLenum;\\\\n    readonly FLOAT_MAT4x2: GLenum;\\\\n    readonly FLOAT_MAT4x3: GLenum;\\\\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum;\\\\n    readonly FRAMEBUFFER_DEFAULT: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum;\\\\n    readonly HALF_FLOAT: GLenum;\\\\n    readonly INTERLEAVED_ATTRIBS: GLenum;\\\\n    readonly INT_2_10_10_10_REV: GLenum;\\\\n    readonly INT_SAMPLER_2D: GLenum;\\\\n    readonly INT_SAMPLER_2D_ARRAY: GLenum;\\\\n    readonly INT_SAMPLER_3D: GLenum;\\\\n    readonly INT_SAMPLER_CUBE: GLenum;\\\\n    readonly INVALID_INDEX: GLenum;\\\\n    readonly MAX: GLenum;\\\\n    readonly MAX_3D_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_ARRAY_TEXTURE_LAYERS: GLenum;\\\\n    readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: GLenum;\\\\n    readonly MAX_COLOR_ATTACHMENTS: GLenum;\\\\n    readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MAX_COMBINED_UNIFORM_BLOCKS: GLenum;\\\\n    readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MAX_DRAW_BUFFERS: GLenum;\\\\n    readonly MAX_ELEMENTS_INDICES: GLenum;\\\\n    readonly MAX_ELEMENTS_VERTICES: GLenum;\\\\n    readonly MAX_ELEMENT_INDEX: GLenum;\\\\n    readonly MAX_FRAGMENT_INPUT_COMPONENTS: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MAX_PROGRAM_TEXEL_OFFSET: GLenum;\\\\n    readonly MAX_SAMPLES: GLenum;\\\\n    readonly MAX_SERVER_WAIT_TIMEOUT: GLenum;\\\\n    readonly MAX_TEXTURE_LOD_BIAS: GLenum;\\\\n    readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum;\\\\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum;\\\\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum;\\\\n    readonly MAX_UNIFORM_BLOCK_SIZE: GLenum;\\\\n    readonly MAX_UNIFORM_BUFFER_BINDINGS: GLenum;\\\\n    readonly MAX_VARYING_COMPONENTS: GLenum;\\\\n    readonly MAX_VERTEX_OUTPUT_COMPONENTS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_BLOCKS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MIN: GLenum;\\\\n    readonly MIN_PROGRAM_TEXEL_OFFSET: GLenum;\\\\n    readonly OBJECT_TYPE: GLenum;\\\\n    readonly PACK_ROW_LENGTH: GLenum;\\\\n    readonly PACK_SKIP_PIXELS: GLenum;\\\\n    readonly PACK_SKIP_ROWS: GLenum;\\\\n    readonly PIXEL_PACK_BUFFER: GLenum;\\\\n    readonly PIXEL_PACK_BUFFER_BINDING: GLenum;\\\\n    readonly PIXEL_UNPACK_BUFFER: GLenum;\\\\n    readonly PIXEL_UNPACK_BUFFER_BINDING: GLenum;\\\\n    readonly QUERY_RESULT: GLenum;\\\\n    readonly QUERY_RESULT_AVAILABLE: GLenum;\\\\n    readonly R11F_G11F_B10F: GLenum;\\\\n    readonly R16F: GLenum;\\\\n    readonly R16I: GLenum;\\\\n    readonly R16UI: GLenum;\\\\n    readonly R32F: GLenum;\\\\n    readonly R32I: GLenum;\\\\n    readonly R32UI: GLenum;\\\\n    readonly R8: GLenum;\\\\n    readonly R8I: GLenum;\\\\n    readonly R8UI: GLenum;\\\\n    readonly R8_SNORM: GLenum;\\\\n    readonly RASTERIZER_DISCARD: GLenum;\\\\n    readonly READ_BUFFER: GLenum;\\\\n    readonly READ_FRAMEBUFFER: GLenum;\\\\n    readonly READ_FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly RED: GLenum;\\\\n    readonly RED_INTEGER: GLenum;\\\\n    readonly RENDERBUFFER_SAMPLES: GLenum;\\\\n    readonly RG: GLenum;\\\\n    readonly RG16F: GLenum;\\\\n    readonly RG16I: GLenum;\\\\n    readonly RG16UI: GLenum;\\\\n    readonly RG32F: GLenum;\\\\n    readonly RG32I: GLenum;\\\\n    readonly RG32UI: GLenum;\\\\n    readonly RG8: GLenum;\\\\n    readonly RG8I: GLenum;\\\\n    readonly RG8UI: GLenum;\\\\n    readonly RG8_SNORM: GLenum;\\\\n    readonly RGB10_A2: GLenum;\\\\n    readonly RGB10_A2UI: GLenum;\\\\n    readonly RGB16F: GLenum;\\\\n    readonly RGB16I: GLenum;\\\\n    readonly RGB16UI: GLenum;\\\\n    readonly RGB32F: GLenum;\\\\n    readonly RGB32I: GLenum;\\\\n    readonly RGB32UI: GLenum;\\\\n    readonly RGB8: GLenum;\\\\n    readonly RGB8I: GLenum;\\\\n    readonly RGB8UI: GLenum;\\\\n    readonly RGB8_SNORM: GLenum;\\\\n    readonly RGB9_E5: GLenum;\\\\n    readonly RGBA16F: GLenum;\\\\n    readonly RGBA16I: GLenum;\\\\n    readonly RGBA16UI: GLenum;\\\\n    readonly RGBA32F: GLenum;\\\\n    readonly RGBA32I: GLenum;\\\\n    readonly RGBA32UI: GLenum;\\\\n    readonly RGBA8: GLenum;\\\\n    readonly RGBA8I: GLenum;\\\\n    readonly RGBA8UI: GLenum;\\\\n    readonly RGBA8_SNORM: GLenum;\\\\n    readonly RGBA_INTEGER: GLenum;\\\\n    readonly RGB_INTEGER: GLenum;\\\\n    readonly RG_INTEGER: GLenum;\\\\n    readonly SAMPLER_2D_ARRAY: GLenum;\\\\n    readonly SAMPLER_2D_ARRAY_SHADOW: GLenum;\\\\n    readonly SAMPLER_2D_SHADOW: GLenum;\\\\n    readonly SAMPLER_3D: GLenum;\\\\n    readonly SAMPLER_BINDING: GLenum;\\\\n    readonly SAMPLER_CUBE_SHADOW: GLenum;\\\\n    readonly SEPARATE_ATTRIBS: GLenum;\\\\n    readonly SIGNALED: GLenum;\\\\n    readonly SIGNED_NORMALIZED: GLenum;\\\\n    readonly SRGB: GLenum;\\\\n    readonly SRGB8: GLenum;\\\\n    readonly SRGB8_ALPHA8: GLenum;\\\\n    readonly STATIC_COPY: GLenum;\\\\n    readonly STATIC_READ: GLenum;\\\\n    readonly STENCIL: GLenum;\\\\n    readonly STREAM_COPY: GLenum;\\\\n    readonly STREAM_READ: GLenum;\\\\n    readonly SYNC_CONDITION: GLenum;\\\\n    readonly SYNC_FENCE: GLenum;\\\\n    readonly SYNC_FLAGS: GLenum;\\\\n    readonly SYNC_FLUSH_COMMANDS_BIT: GLenum;\\\\n    readonly SYNC_GPU_COMMANDS_COMPLETE: GLenum;\\\\n    readonly SYNC_STATUS: GLenum;\\\\n    readonly TEXTURE_2D_ARRAY: GLenum;\\\\n    readonly TEXTURE_3D: GLenum;\\\\n    readonly TEXTURE_BASE_LEVEL: GLenum;\\\\n    readonly TEXTURE_BINDING_2D_ARRAY: GLenum;\\\\n    readonly TEXTURE_BINDING_3D: GLenum;\\\\n    readonly TEXTURE_COMPARE_FUNC: GLenum;\\\\n    readonly TEXTURE_COMPARE_MODE: GLenum;\\\\n    readonly TEXTURE_IMMUTABLE_FORMAT: GLenum;\\\\n    readonly TEXTURE_IMMUTABLE_LEVELS: GLenum;\\\\n    readonly TEXTURE_MAX_LEVEL: GLenum;\\\\n    readonly TEXTURE_MAX_LOD: GLenum;\\\\n    readonly TEXTURE_MIN_LOD: GLenum;\\\\n    readonly TEXTURE_WRAP_R: GLenum;\\\\n    readonly TIMEOUT_EXPIRED: GLenum;\\\\n    readonly TIMEOUT_IGNORED: GLint64;\\\\n    readonly TRANSFORM_FEEDBACK: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_ACTIVE: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BINDING: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_START: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_PAUSED: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_VARYINGS: GLenum;\\\\n    readonly UNIFORM_ARRAY_STRIDE: GLenum;\\\\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum;\\\\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum;\\\\n    readonly UNIFORM_BLOCK_BINDING: GLenum;\\\\n    readonly UNIFORM_BLOCK_DATA_SIZE: GLenum;\\\\n    readonly UNIFORM_BLOCK_INDEX: GLenum;\\\\n    readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum;\\\\n    readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum;\\\\n    readonly UNIFORM_BUFFER: GLenum;\\\\n    readonly UNIFORM_BUFFER_BINDING: GLenum;\\\\n    readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum;\\\\n    readonly UNIFORM_BUFFER_SIZE: GLenum;\\\\n    readonly UNIFORM_BUFFER_START: GLenum;\\\\n    readonly UNIFORM_IS_ROW_MAJOR: GLenum;\\\\n    readonly UNIFORM_MATRIX_STRIDE: GLenum;\\\\n    readonly UNIFORM_OFFSET: GLenum;\\\\n    readonly UNIFORM_SIZE: GLenum;\\\\n    readonly UNIFORM_TYPE: GLenum;\\\\n    readonly UNPACK_IMAGE_HEIGHT: GLenum;\\\\n    readonly UNPACK_ROW_LENGTH: GLenum;\\\\n    readonly UNPACK_SKIP_IMAGES: GLenum;\\\\n    readonly UNPACK_SKIP_PIXELS: GLenum;\\\\n    readonly UNPACK_SKIP_ROWS: GLenum;\\\\n    readonly UNSIGNALED: GLenum;\\\\n    readonly UNSIGNED_INT_10F_11F_11F_REV: GLenum;\\\\n    readonly UNSIGNED_INT_24_8: GLenum;\\\\n    readonly UNSIGNED_INT_2_10_10_10_REV: GLenum;\\\\n    readonly UNSIGNED_INT_5_9_9_9_REV: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_2D: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_3D: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_CUBE: GLenum;\\\\n    readonly UNSIGNED_INT_VEC2: GLenum;\\\\n    readonly UNSIGNED_INT_VEC3: GLenum;\\\\n    readonly UNSIGNED_INT_VEC4: GLenum;\\\\n    readonly UNSIGNED_NORMALIZED: GLenum;\\\\n    readonly VERTEX_ARRAY_BINDING: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_INTEGER: GLenum;\\\\n    readonly WAIT_FAILED: GLenum;\\\\n}\\\\n\\\\ninterface WebGL2RenderingContextOverloads {\\\\n    bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;\\\\n    bufferData(target: GLenum, srcData: BufferSource | null, usage: GLenum): void;\\\\n    bufferData(target: GLenum, srcData: ArrayBufferView, usage: GLenum, srcOffset: GLuint, length?: GLuint): void;\\\\n    bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: BufferSource): void;\\\\n    bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: ArrayBufferView, srcOffset: GLuint, length?: GLuint): void;\\\\n    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): void;\\\\n    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\\\\n    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): void;\\\\n    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\\\\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView | null): void;\\\\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, offset: GLintptr): void;\\\\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView, dstOffset: GLuint): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;\\\\n    uniform1fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform1iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform2fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform2iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform3fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform3iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform4fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform4iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n}\\\\n\\\\n/** Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods. */\\\\ninterface WebGLActiveInfo {\\\\n    readonly name: string;\\\\n    readonly size: GLint;\\\\n    readonly type: GLenum;\\\\n}\\\\n\\\\ndeclare var WebGLActiveInfo: {\\\\n    prototype: WebGLActiveInfo;\\\\n    new(): WebGLActiveInfo;\\\\n};\\\\n\\\\n/** Part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors. */\\\\ninterface WebGLBuffer extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLBuffer: {\\\\n    prototype: WebGLBuffer;\\\\n    new(): WebGLBuffer;\\\\n};\\\\n\\\\n/** The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context. */\\\\ninterface WebGLContextEvent extends Event {\\\\n    readonly statusMessage: string;\\\\n}\\\\n\\\\ndeclare var WebGLContextEvent: {\\\\n    prototype: WebGLContextEvent;\\\\n    new(type: string, eventInit?: WebGLContextEventInit): WebGLContextEvent;\\\\n};\\\\n\\\\n/** Part of the WebGL API and represents a collection of buffers that serve as a rendering destination. */\\\\ninterface WebGLFramebuffer extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLFramebuffer: {\\\\n    prototype: WebGLFramebuffer;\\\\n    new(): WebGLFramebuffer;\\\\n};\\\\n\\\\ninterface WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLObject: {\\\\n    prototype: WebGLObject;\\\\n    new(): WebGLObject;\\\\n};\\\\n\\\\n/** The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL). */\\\\ninterface WebGLProgram extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLProgram: {\\\\n    prototype: WebGLProgram;\\\\n    new(): WebGLProgram;\\\\n};\\\\n\\\\ninterface WebGLQuery extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLQuery: {\\\\n    prototype: WebGLQuery;\\\\n    new(): WebGLQuery;\\\\n};\\\\n\\\\n/** Part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation. */\\\\ninterface WebGLRenderbuffer extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLRenderbuffer: {\\\\n    prototype: WebGLRenderbuffer;\\\\n    new(): WebGLRenderbuffer;\\\\n};\\\\n\\\\n/** Provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element. */\\\\ninterface WebGLRenderingContext extends WebGLRenderingContextBase, WebGLRenderingContextOverloads {\\\\n}\\\\n\\\\ndeclare var WebGLRenderingContext: {\\\\n    prototype: WebGLRenderingContext;\\\\n    new(): WebGLRenderingContext;\\\\n    readonly ACTIVE_ATTRIBUTES: GLenum;\\\\n    readonly ACTIVE_TEXTURE: GLenum;\\\\n    readonly ACTIVE_UNIFORMS: GLenum;\\\\n    readonly ALIASED_LINE_WIDTH_RANGE: GLenum;\\\\n    readonly ALIASED_POINT_SIZE_RANGE: GLenum;\\\\n    readonly ALPHA: GLenum;\\\\n    readonly ALPHA_BITS: GLenum;\\\\n    readonly ALWAYS: GLenum;\\\\n    readonly ARRAY_BUFFER: GLenum;\\\\n    readonly ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly ATTACHED_SHADERS: GLenum;\\\\n    readonly BACK: GLenum;\\\\n    readonly BLEND: GLenum;\\\\n    readonly BLEND_COLOR: GLenum;\\\\n    readonly BLEND_DST_ALPHA: GLenum;\\\\n    readonly BLEND_DST_RGB: GLenum;\\\\n    readonly BLEND_EQUATION: GLenum;\\\\n    readonly BLEND_EQUATION_ALPHA: GLenum;\\\\n    readonly BLEND_EQUATION_RGB: GLenum;\\\\n    readonly BLEND_SRC_ALPHA: GLenum;\\\\n    readonly BLEND_SRC_RGB: GLenum;\\\\n    readonly BLUE_BITS: GLenum;\\\\n    readonly BOOL: GLenum;\\\\n    readonly BOOL_VEC2: GLenum;\\\\n    readonly BOOL_VEC3: GLenum;\\\\n    readonly BOOL_VEC4: GLenum;\\\\n    readonly BROWSER_DEFAULT_WEBGL: GLenum;\\\\n    readonly BUFFER_SIZE: GLenum;\\\\n    readonly BUFFER_USAGE: GLenum;\\\\n    readonly BYTE: GLenum;\\\\n    readonly CCW: GLenum;\\\\n    readonly CLAMP_TO_EDGE: GLenum;\\\\n    readonly COLOR_ATTACHMENT0: GLenum;\\\\n    readonly COLOR_BUFFER_BIT: GLenum;\\\\n    readonly COLOR_CLEAR_VALUE: GLenum;\\\\n    readonly COLOR_WRITEMASK: GLenum;\\\\n    readonly COMPILE_STATUS: GLenum;\\\\n    readonly COMPRESSED_TEXTURE_FORMATS: GLenum;\\\\n    readonly CONSTANT_ALPHA: GLenum;\\\\n    readonly CONSTANT_COLOR: GLenum;\\\\n    readonly CONTEXT_LOST_WEBGL: GLenum;\\\\n    readonly CULL_FACE: GLenum;\\\\n    readonly CULL_FACE_MODE: GLenum;\\\\n    readonly CURRENT_PROGRAM: GLenum;\\\\n    readonly CURRENT_VERTEX_ATTRIB: GLenum;\\\\n    readonly CW: GLenum;\\\\n    readonly DECR: GLenum;\\\\n    readonly DECR_WRAP: GLenum;\\\\n    readonly DELETE_STATUS: GLenum;\\\\n    readonly DEPTH_ATTACHMENT: GLenum;\\\\n    readonly DEPTH_BITS: GLenum;\\\\n    readonly DEPTH_BUFFER_BIT: GLenum;\\\\n    readonly DEPTH_CLEAR_VALUE: GLenum;\\\\n    readonly DEPTH_COMPONENT: GLenum;\\\\n    readonly DEPTH_COMPONENT16: GLenum;\\\\n    readonly DEPTH_FUNC: GLenum;\\\\n    readonly DEPTH_RANGE: GLenum;\\\\n    readonly DEPTH_STENCIL: GLenum;\\\\n    readonly DEPTH_STENCIL_ATTACHMENT: GLenum;\\\\n    readonly DEPTH_TEST: GLenum;\\\\n    readonly DEPTH_WRITEMASK: GLenum;\\\\n    readonly DITHER: GLenum;\\\\n    readonly DONT_CARE: GLenum;\\\\n    readonly DST_ALPHA: GLenum;\\\\n    readonly DST_COLOR: GLenum;\\\\n    readonly DYNAMIC_DRAW: GLenum;\\\\n    readonly ELEMENT_ARRAY_BUFFER: GLenum;\\\\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly EQUAL: GLenum;\\\\n    readonly FASTEST: GLenum;\\\\n    readonly FLOAT: GLenum;\\\\n    readonly FLOAT_MAT2: GLenum;\\\\n    readonly FLOAT_MAT3: GLenum;\\\\n    readonly FLOAT_MAT4: GLenum;\\\\n    readonly FLOAT_VEC2: GLenum;\\\\n    readonly FLOAT_VEC3: GLenum;\\\\n    readonly FLOAT_VEC4: GLenum;\\\\n    readonly FRAGMENT_SHADER: GLenum;\\\\n    readonly FRAMEBUFFER: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;\\\\n    readonly FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly FRAMEBUFFER_COMPLETE: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;\\\\n    readonly FRAMEBUFFER_UNSUPPORTED: GLenum;\\\\n    readonly FRONT: GLenum;\\\\n    readonly FRONT_AND_BACK: GLenum;\\\\n    readonly FRONT_FACE: GLenum;\\\\n    readonly FUNC_ADD: GLenum;\\\\n    readonly FUNC_REVERSE_SUBTRACT: GLenum;\\\\n    readonly FUNC_SUBTRACT: GLenum;\\\\n    readonly GENERATE_MIPMAP_HINT: GLenum;\\\\n    readonly GEQUAL: GLenum;\\\\n    readonly GREATER: GLenum;\\\\n    readonly GREEN_BITS: GLenum;\\\\n    readonly HIGH_FLOAT: GLenum;\\\\n    readonly HIGH_INT: GLenum;\\\\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;\\\\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: GLenum;\\\\n    readonly INCR: GLenum;\\\\n    readonly INCR_WRAP: GLenum;\\\\n    readonly INT: GLenum;\\\\n    readonly INT_VEC2: GLenum;\\\\n    readonly INT_VEC3: GLenum;\\\\n    readonly INT_VEC4: GLenum;\\\\n    readonly INVALID_ENUM: GLenum;\\\\n    readonly INVALID_FRAMEBUFFER_OPERATION: GLenum;\\\\n    readonly INVALID_OPERATION: GLenum;\\\\n    readonly INVALID_VALUE: GLenum;\\\\n    readonly INVERT: GLenum;\\\\n    readonly KEEP: GLenum;\\\\n    readonly LEQUAL: GLenum;\\\\n    readonly LESS: GLenum;\\\\n    readonly LINEAR: GLenum;\\\\n    readonly LINEAR_MIPMAP_LINEAR: GLenum;\\\\n    readonly LINEAR_MIPMAP_NEAREST: GLenum;\\\\n    readonly LINES: GLenum;\\\\n    readonly LINE_LOOP: GLenum;\\\\n    readonly LINE_STRIP: GLenum;\\\\n    readonly LINE_WIDTH: GLenum;\\\\n    readonly LINK_STATUS: GLenum;\\\\n    readonly LOW_FLOAT: GLenum;\\\\n    readonly LOW_INT: GLenum;\\\\n    readonly LUMINANCE: GLenum;\\\\n    readonly LUMINANCE_ALPHA: GLenum;\\\\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;\\\\n    readonly MAX_RENDERBUFFER_SIZE: GLenum;\\\\n    readonly MAX_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_VARYING_VECTORS: GLenum;\\\\n    readonly MAX_VERTEX_ATTRIBS: GLenum;\\\\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_VECTORS: GLenum;\\\\n    readonly MAX_VIEWPORT_DIMS: GLenum;\\\\n    readonly MEDIUM_FLOAT: GLenum;\\\\n    readonly MEDIUM_INT: GLenum;\\\\n    readonly MIRRORED_REPEAT: GLenum;\\\\n    readonly NEAREST: GLenum;\\\\n    readonly NEAREST_MIPMAP_LINEAR: GLenum;\\\\n    readonly NEAREST_MIPMAP_NEAREST: GLenum;\\\\n    readonly NEVER: GLenum;\\\\n    readonly NICEST: GLenum;\\\\n    readonly NONE: GLenum;\\\\n    readonly NOTEQUAL: GLenum;\\\\n    readonly NO_ERROR: GLenum;\\\\n    readonly ONE: GLenum;\\\\n    readonly ONE_MINUS_CONSTANT_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_CONSTANT_COLOR: GLenum;\\\\n    readonly ONE_MINUS_DST_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_DST_COLOR: GLenum;\\\\n    readonly ONE_MINUS_SRC_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_SRC_COLOR: GLenum;\\\\n    readonly OUT_OF_MEMORY: GLenum;\\\\n    readonly PACK_ALIGNMENT: GLenum;\\\\n    readonly POINTS: GLenum;\\\\n    readonly POLYGON_OFFSET_FACTOR: GLenum;\\\\n    readonly POLYGON_OFFSET_FILL: GLenum;\\\\n    readonly POLYGON_OFFSET_UNITS: GLenum;\\\\n    readonly RED_BITS: GLenum;\\\\n    readonly RENDERBUFFER: GLenum;\\\\n    readonly RENDERBUFFER_ALPHA_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_BINDING: GLenum;\\\\n    readonly RENDERBUFFER_BLUE_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_DEPTH_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_GREEN_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_HEIGHT: GLenum;\\\\n    readonly RENDERBUFFER_INTERNAL_FORMAT: GLenum;\\\\n    readonly RENDERBUFFER_RED_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_STENCIL_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_WIDTH: GLenum;\\\\n    readonly RENDERER: GLenum;\\\\n    readonly REPEAT: GLenum;\\\\n    readonly REPLACE: GLenum;\\\\n    readonly RGB: GLenum;\\\\n    readonly RGB565: GLenum;\\\\n    readonly RGB5_A1: GLenum;\\\\n    readonly RGBA: GLenum;\\\\n    readonly RGBA4: GLenum;\\\\n    readonly SAMPLER_2D: GLenum;\\\\n    readonly SAMPLER_CUBE: GLenum;\\\\n    readonly SAMPLES: GLenum;\\\\n    readonly SAMPLE_ALPHA_TO_COVERAGE: GLenum;\\\\n    readonly SAMPLE_BUFFERS: GLenum;\\\\n    readonly SAMPLE_COVERAGE: GLenum;\\\\n    readonly SAMPLE_COVERAGE_INVERT: GLenum;\\\\n    readonly SAMPLE_COVERAGE_VALUE: GLenum;\\\\n    readonly SCISSOR_BOX: GLenum;\\\\n    readonly SCISSOR_TEST: GLenum;\\\\n    readonly SHADER_TYPE: GLenum;\\\\n    readonly SHADING_LANGUAGE_VERSION: GLenum;\\\\n    readonly SHORT: GLenum;\\\\n    readonly SRC_ALPHA: GLenum;\\\\n    readonly SRC_ALPHA_SATURATE: GLenum;\\\\n    readonly SRC_COLOR: GLenum;\\\\n    readonly STATIC_DRAW: GLenum;\\\\n    readonly STENCIL_ATTACHMENT: GLenum;\\\\n    readonly STENCIL_BACK_FAIL: GLenum;\\\\n    readonly STENCIL_BACK_FUNC: GLenum;\\\\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;\\\\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: GLenum;\\\\n    readonly STENCIL_BACK_REF: GLenum;\\\\n    readonly STENCIL_BACK_VALUE_MASK: GLenum;\\\\n    readonly STENCIL_BACK_WRITEMASK: GLenum;\\\\n    readonly STENCIL_BITS: GLenum;\\\\n    readonly STENCIL_BUFFER_BIT: GLenum;\\\\n    readonly STENCIL_CLEAR_VALUE: GLenum;\\\\n    readonly STENCIL_FAIL: GLenum;\\\\n    readonly STENCIL_FUNC: GLenum;\\\\n    readonly STENCIL_INDEX8: GLenum;\\\\n    readonly STENCIL_PASS_DEPTH_FAIL: GLenum;\\\\n    readonly STENCIL_PASS_DEPTH_PASS: GLenum;\\\\n    readonly STENCIL_REF: GLenum;\\\\n    readonly STENCIL_TEST: GLenum;\\\\n    readonly STENCIL_VALUE_MASK: GLenum;\\\\n    readonly STENCIL_WRITEMASK: GLenum;\\\\n    readonly STREAM_DRAW: GLenum;\\\\n    readonly SUBPIXEL_BITS: GLenum;\\\\n    readonly TEXTURE: GLenum;\\\\n    readonly TEXTURE0: GLenum;\\\\n    readonly TEXTURE1: GLenum;\\\\n    readonly TEXTURE10: GLenum;\\\\n    readonly TEXTURE11: GLenum;\\\\n    readonly TEXTURE12: GLenum;\\\\n    readonly TEXTURE13: GLenum;\\\\n    readonly TEXTURE14: GLenum;\\\\n    readonly TEXTURE15: GLenum;\\\\n    readonly TEXTURE16: GLenum;\\\\n    readonly TEXTURE17: GLenum;\\\\n    readonly TEXTURE18: GLenum;\\\\n    readonly TEXTURE19: GLenum;\\\\n    readonly TEXTURE2: GLenum;\\\\n    readonly TEXTURE20: GLenum;\\\\n    readonly TEXTURE21: GLenum;\\\\n    readonly TEXTURE22: GLenum;\\\\n    readonly TEXTURE23: GLenum;\\\\n    readonly TEXTURE24: GLenum;\\\\n    readonly TEXTURE25: GLenum;\\\\n    readonly TEXTURE26: GLenum;\\\\n    readonly TEXTURE27: GLenum;\\\\n    readonly TEXTURE28: GLenum;\\\\n    readonly TEXTURE29: GLenum;\\\\n    readonly TEXTURE3: GLenum;\\\\n    readonly TEXTURE30: GLenum;\\\\n    readonly TEXTURE31: GLenum;\\\\n    readonly TEXTURE4: GLenum;\\\\n    readonly TEXTURE5: GLenum;\\\\n    readonly TEXTURE6: GLenum;\\\\n    readonly TEXTURE7: GLenum;\\\\n    readonly TEXTURE8: GLenum;\\\\n    readonly TEXTURE9: GLenum;\\\\n    readonly TEXTURE_2D: GLenum;\\\\n    readonly TEXTURE_BINDING_2D: GLenum;\\\\n    readonly TEXTURE_BINDING_CUBE_MAP: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;\\\\n    readonly TEXTURE_MAG_FILTER: GLenum;\\\\n    readonly TEXTURE_MIN_FILTER: GLenum;\\\\n    readonly TEXTURE_WRAP_S: GLenum;\\\\n    readonly TEXTURE_WRAP_T: GLenum;\\\\n    readonly TRIANGLES: GLenum;\\\\n    readonly TRIANGLE_FAN: GLenum;\\\\n    readonly TRIANGLE_STRIP: GLenum;\\\\n    readonly UNPACK_ALIGNMENT: GLenum;\\\\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;\\\\n    readonly UNPACK_FLIP_Y_WEBGL: GLenum;\\\\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;\\\\n    readonly UNSIGNED_BYTE: GLenum;\\\\n    readonly UNSIGNED_INT: GLenum;\\\\n    readonly UNSIGNED_SHORT: GLenum;\\\\n    readonly UNSIGNED_SHORT_4_4_4_4: GLenum;\\\\n    readonly UNSIGNED_SHORT_5_5_5_1: GLenum;\\\\n    readonly UNSIGNED_SHORT_5_6_5: GLenum;\\\\n    readonly VALIDATE_STATUS: GLenum;\\\\n    readonly VENDOR: GLenum;\\\\n    readonly VERSION: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: GLenum;\\\\n    readonly VERTEX_SHADER: GLenum;\\\\n    readonly VIEWPORT: GLenum;\\\\n    readonly ZERO: GLenum;\\\\n};\\\\n\\\\ninterface WebGLRenderingContextBase {\\\\n    readonly canvas: OffscreenCanvas;\\\\n    readonly drawingBufferHeight: GLsizei;\\\\n    readonly drawingBufferWidth: GLsizei;\\\\n    activeTexture(texture: GLenum): void;\\\\n    attachShader(program: WebGLProgram, shader: WebGLShader): void;\\\\n    bindAttribLocation(program: WebGLProgram, index: GLuint, name: string): void;\\\\n    bindBuffer(target: GLenum, buffer: WebGLBuffer | null): void;\\\\n    bindFramebuffer(target: GLenum, framebuffer: WebGLFramebuffer | null): void;\\\\n    bindRenderbuffer(target: GLenum, renderbuffer: WebGLRenderbuffer | null): void;\\\\n    bindTexture(target: GLenum, texture: WebGLTexture | null): void;\\\\n    blendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): void;\\\\n    blendEquation(mode: GLenum): void;\\\\n    blendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum): void;\\\\n    blendFunc(sfactor: GLenum, dfactor: GLenum): void;\\\\n    blendFuncSeparate(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void;\\\\n    checkFramebufferStatus(target: GLenum): GLenum;\\\\n    clear(mask: GLbitfield): void;\\\\n    clearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): void;\\\\n    clearDepth(depth: GLclampf): void;\\\\n    clearStencil(s: GLint): void;\\\\n    colorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean): void;\\\\n    compileShader(shader: WebGLShader): void;\\\\n    copyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void;\\\\n    copyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\\\\n    createBuffer(): WebGLBuffer | null;\\\\n    createFramebuffer(): WebGLFramebuffer | null;\\\\n    createProgram(): WebGLProgram | null;\\\\n    createRenderbuffer(): WebGLRenderbuffer | null;\\\\n    createShader(type: GLenum): WebGLShader | null;\\\\n    createTexture(): WebGLTexture | null;\\\\n    cullFace(mode: GLenum): void;\\\\n    deleteBuffer(buffer: WebGLBuffer | null): void;\\\\n    deleteFramebuffer(framebuffer: WebGLFramebuffer | null): void;\\\\n    deleteProgram(program: WebGLProgram | null): void;\\\\n    deleteRenderbuffer(renderbuffer: WebGLRenderbuffer | null): void;\\\\n    deleteShader(shader: WebGLShader | null): void;\\\\n    deleteTexture(texture: WebGLTexture | null): void;\\\\n    depthFunc(func: GLenum): void;\\\\n    depthMask(flag: GLboolean): void;\\\\n    depthRange(zNear: GLclampf, zFar: GLclampf): void;\\\\n    detachShader(program: WebGLProgram, shader: WebGLShader): void;\\\\n    disable(cap: GLenum): void;\\\\n    disableVertexAttribArray(index: GLuint): void;\\\\n    drawArrays(mode: GLenum, first: GLint, count: GLsizei): void;\\\\n    drawElements(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr): void;\\\\n    enable(cap: GLenum): void;\\\\n    enableVertexAttribArray(index: GLuint): void;\\\\n    finish(): void;\\\\n    flush(): void;\\\\n    framebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: WebGLRenderbuffer | null): void;\\\\n    framebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: WebGLTexture | null, level: GLint): void;\\\\n    frontFace(mode: GLenum): void;\\\\n    generateMipmap(target: GLenum): void;\\\\n    getActiveAttrib(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;\\\\n    getActiveUniform(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;\\\\n    getAttachedShaders(program: WebGLProgram): WebGLShader[] | null;\\\\n    getAttribLocation(program: WebGLProgram, name: string): GLint;\\\\n    getBufferParameter(target: GLenum, pname: GLenum): any;\\\\n    getContextAttributes(): WebGLContextAttributes | null;\\\\n    getError(): GLenum;\\\\n    getExtension(extensionName: \\\\\\\"EXT_blend_minmax\\\\\\\"): EXT_blend_minmax | null;\\\\n    getExtension(extensionName: \\\\\\\"EXT_texture_filter_anisotropic\\\\\\\"): EXT_texture_filter_anisotropic | null;\\\\n    getExtension(extensionName: \\\\\\\"EXT_frag_depth\\\\\\\"): EXT_frag_depth | null;\\\\n    getExtension(extensionName: \\\\\\\"EXT_shader_texture_lod\\\\\\\"): EXT_shader_texture_lod | null;\\\\n    getExtension(extensionName: \\\\\\\"EXT_sRGB\\\\\\\"): EXT_sRGB | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_vertex_array_object\\\\\\\"): OES_vertex_array_object | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_color_buffer_float\\\\\\\"): WEBGL_color_buffer_float | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_compressed_texture_astc\\\\\\\"): WEBGL_compressed_texture_astc | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_compressed_texture_s3tc_srgb\\\\\\\"): WEBGL_compressed_texture_s3tc_srgb | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_debug_shaders\\\\\\\"): WEBGL_debug_shaders | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_draw_buffers\\\\\\\"): WEBGL_draw_buffers | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_lose_context\\\\\\\"): WEBGL_lose_context | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_depth_texture\\\\\\\"): WEBGL_depth_texture | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_debug_renderer_info\\\\\\\"): WEBGL_debug_renderer_info | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_compressed_texture_s3tc\\\\\\\"): WEBGL_compressed_texture_s3tc | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_texture_half_float_linear\\\\\\\"): OES_texture_half_float_linear | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_texture_half_float\\\\\\\"): OES_texture_half_float | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_texture_float_linear\\\\\\\"): OES_texture_float_linear | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_texture_float\\\\\\\"): OES_texture_float | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_standard_derivatives\\\\\\\"): OES_standard_derivatives | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_element_index_uint\\\\\\\"): OES_element_index_uint | null;\\\\n    getExtension(extensionName: \\\\\\\"ANGLE_instanced_arrays\\\\\\\"): ANGLE_instanced_arrays | null;\\\\n    getExtension(extensionName: string): any;\\\\n    getFramebufferAttachmentParameter(target: GLenum, attachment: GLenum, pname: GLenum): any;\\\\n    getParameter(pname: GLenum): any;\\\\n    getProgramInfoLog(program: WebGLProgram): string | null;\\\\n    getProgramParameter(program: WebGLProgram, pname: GLenum): any;\\\\n    getRenderbufferParameter(target: GLenum, pname: GLenum): any;\\\\n    getShaderInfoLog(shader: WebGLShader): string | null;\\\\n    getShaderParameter(shader: WebGLShader, pname: GLenum): any;\\\\n    getShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum): WebGLShaderPrecisionFormat | null;\\\\n    getShaderSource(shader: WebGLShader): string | null;\\\\n    getSupportedExtensions(): string[] | null;\\\\n    getTexParameter(target: GLenum, pname: GLenum): any;\\\\n    getUniform(program: WebGLProgram, location: WebGLUniformLocation): any;\\\\n    getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation | null;\\\\n    getVertexAttrib(index: GLuint, pname: GLenum): any;\\\\n    getVertexAttribOffset(index: GLuint, pname: GLenum): GLintptr;\\\\n    hint(target: GLenum, mode: GLenum): void;\\\\n    isBuffer(buffer: WebGLBuffer | null): GLboolean;\\\\n    isContextLost(): boolean;\\\\n    isEnabled(cap: GLenum): GLboolean;\\\\n    isFramebuffer(framebuffer: WebGLFramebuffer | null): GLboolean;\\\\n    isProgram(program: WebGLProgram | null): GLboolean;\\\\n    isRenderbuffer(renderbuffer: WebGLRenderbuffer | null): GLboolean;\\\\n    isShader(shader: WebGLShader | null): GLboolean;\\\\n    isTexture(texture: WebGLTexture | null): GLboolean;\\\\n    lineWidth(width: GLfloat): void;\\\\n    linkProgram(program: WebGLProgram): void;\\\\n    pixelStorei(pname: GLenum, param: GLint | GLboolean): void;\\\\n    polygonOffset(factor: GLfloat, units: GLfloat): void;\\\\n    renderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void;\\\\n    sampleCoverage(value: GLclampf, invert: GLboolean): void;\\\\n    scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\\\\n    shaderSource(shader: WebGLShader, source: string): void;\\\\n    stencilFunc(func: GLenum, ref: GLint, mask: GLuint): void;\\\\n    stencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint): void;\\\\n    stencilMask(mask: GLuint): void;\\\\n    stencilMaskSeparate(face: GLenum, mask: GLuint): void;\\\\n    stencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum): void;\\\\n    stencilOpSeparate(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum): void;\\\\n    texParameterf(target: GLenum, pname: GLenum, param: GLfloat): void;\\\\n    texParameteri(target: GLenum, pname: GLenum, param: GLint): void;\\\\n    uniform1f(location: WebGLUniformLocation | null, x: GLfloat): void;\\\\n    uniform1i(location: WebGLUniformLocation | null, x: GLint): void;\\\\n    uniform2f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat): void;\\\\n    uniform2i(location: WebGLUniformLocation | null, x: GLint, y: GLint): void;\\\\n    uniform3f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat, z: GLfloat): void;\\\\n    uniform3i(location: WebGLUniformLocation | null, x: GLint, y: GLint, z: GLint): void;\\\\n    uniform4f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;\\\\n    uniform4i(location: WebGLUniformLocation | null, x: GLint, y: GLint, z: GLint, w: GLint): void;\\\\n    useProgram(program: WebGLProgram | null): void;\\\\n    validateProgram(program: WebGLProgram): void;\\\\n    vertexAttrib1f(index: GLuint, x: GLfloat): void;\\\\n    vertexAttrib1fv(index: GLuint, values: Float32List): void;\\\\n    vertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat): void;\\\\n    vertexAttrib2fv(index: GLuint, values: Float32List): void;\\\\n    vertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void;\\\\n    vertexAttrib3fv(index: GLuint, values: Float32List): void;\\\\n    vertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;\\\\n    vertexAttrib4fv(index: GLuint, values: Float32List): void;\\\\n    vertexAttribPointer(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr): void;\\\\n    viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\\\\n    readonly ACTIVE_ATTRIBUTES: GLenum;\\\\n    readonly ACTIVE_TEXTURE: GLenum;\\\\n    readonly ACTIVE_UNIFORMS: GLenum;\\\\n    readonly ALIASED_LINE_WIDTH_RANGE: GLenum;\\\\n    readonly ALIASED_POINT_SIZE_RANGE: GLenum;\\\\n    readonly ALPHA: GLenum;\\\\n    readonly ALPHA_BITS: GLenum;\\\\n    readonly ALWAYS: GLenum;\\\\n    readonly ARRAY_BUFFER: GLenum;\\\\n    readonly ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly ATTACHED_SHADERS: GLenum;\\\\n    readonly BACK: GLenum;\\\\n    readonly BLEND: GLenum;\\\\n    readonly BLEND_COLOR: GLenum;\\\\n    readonly BLEND_DST_ALPHA: GLenum;\\\\n    readonly BLEND_DST_RGB: GLenum;\\\\n    readonly BLEND_EQUATION: GLenum;\\\\n    readonly BLEND_EQUATION_ALPHA: GLenum;\\\\n    readonly BLEND_EQUATION_RGB: GLenum;\\\\n    readonly BLEND_SRC_ALPHA: GLenum;\\\\n    readonly BLEND_SRC_RGB: GLenum;\\\\n    readonly BLUE_BITS: GLenum;\\\\n    readonly BOOL: GLenum;\\\\n    readonly BOOL_VEC2: GLenum;\\\\n    readonly BOOL_VEC3: GLenum;\\\\n    readonly BOOL_VEC4: GLenum;\\\\n    readonly BROWSER_DEFAULT_WEBGL: GLenum;\\\\n    readonly BUFFER_SIZE: GLenum;\\\\n    readonly BUFFER_USAGE: GLenum;\\\\n    readonly BYTE: GLenum;\\\\n    readonly CCW: GLenum;\\\\n    readonly CLAMP_TO_EDGE: GLenum;\\\\n    readonly COLOR_ATTACHMENT0: GLenum;\\\\n    readonly COLOR_BUFFER_BIT: GLenum;\\\\n    readonly COLOR_CLEAR_VALUE: GLenum;\\\\n    readonly COLOR_WRITEMASK: GLenum;\\\\n    readonly COMPILE_STATUS: GLenum;\\\\n    readonly COMPRESSED_TEXTURE_FORMATS: GLenum;\\\\n    readonly CONSTANT_ALPHA: GLenum;\\\\n    readonly CONSTANT_COLOR: GLenum;\\\\n    readonly CONTEXT_LOST_WEBGL: GLenum;\\\\n    readonly CULL_FACE: GLenum;\\\\n    readonly CULL_FACE_MODE: GLenum;\\\\n    readonly CURRENT_PROGRAM: GLenum;\\\\n    readonly CURRENT_VERTEX_ATTRIB: GLenum;\\\\n    readonly CW: GLenum;\\\\n    readonly DECR: GLenum;\\\\n    readonly DECR_WRAP: GLenum;\\\\n    readonly DELETE_STATUS: GLenum;\\\\n    readonly DEPTH_ATTACHMENT: GLenum;\\\\n    readonly DEPTH_BITS: GLenum;\\\\n    readonly DEPTH_BUFFER_BIT: GLenum;\\\\n    readonly DEPTH_CLEAR_VALUE: GLenum;\\\\n    readonly DEPTH_COMPONENT: GLenum;\\\\n    readonly DEPTH_COMPONENT16: GLenum;\\\\n    readonly DEPTH_FUNC: GLenum;\\\\n    readonly DEPTH_RANGE: GLenum;\\\\n    readonly DEPTH_STENCIL: GLenum;\\\\n    readonly DEPTH_STENCIL_ATTACHMENT: GLenum;\\\\n    readonly DEPTH_TEST: GLenum;\\\\n    readonly DEPTH_WRITEMASK: GLenum;\\\\n    readonly DITHER: GLenum;\\\\n    readonly DONT_CARE: GLenum;\\\\n    readonly DST_ALPHA: GLenum;\\\\n    readonly DST_COLOR: GLenum;\\\\n    readonly DYNAMIC_DRAW: GLenum;\\\\n    readonly ELEMENT_ARRAY_BUFFER: GLenum;\\\\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly EQUAL: GLenum;\\\\n    readonly FASTEST: GLenum;\\\\n    readonly FLOAT: GLenum;\\\\n    readonly FLOAT_MAT2: GLenum;\\\\n    readonly FLOAT_MAT3: GLenum;\\\\n    readonly FLOAT_MAT4: GLenum;\\\\n    readonly FLOAT_VEC2: GLenum;\\\\n    readonly FLOAT_VEC3: GLenum;\\\\n    readonly FLOAT_VEC4: GLenum;\\\\n    readonly FRAGMENT_SHADER: GLenum;\\\\n    readonly FRAMEBUFFER: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;\\\\n    readonly FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly FRAMEBUFFER_COMPLETE: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;\\\\n    readonly FRAMEBUFFER_UNSUPPORTED: GLenum;\\\\n    readonly FRONT: GLenum;\\\\n    readonly FRONT_AND_BACK: GLenum;\\\\n    readonly FRONT_FACE: GLenum;\\\\n    readonly FUNC_ADD: GLenum;\\\\n    readonly FUNC_REVERSE_SUBTRACT: GLenum;\\\\n    readonly FUNC_SUBTRACT: GLenum;\\\\n    readonly GENERATE_MIPMAP_HINT: GLenum;\\\\n    readonly GEQUAL: GLenum;\\\\n    readonly GREATER: GLenum;\\\\n    readonly GREEN_BITS: GLenum;\\\\n    readonly HIGH_FLOAT: GLenum;\\\\n    readonly HIGH_INT: GLenum;\\\\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;\\\\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: GLenum;\\\\n    readonly INCR: GLenum;\\\\n    readonly INCR_WRAP: GLenum;\\\\n    readonly INT: GLenum;\\\\n    readonly INT_VEC2: GLenum;\\\\n    readonly INT_VEC3: GLenum;\\\\n    readonly INT_VEC4: GLenum;\\\\n    readonly INVALID_ENUM: GLenum;\\\\n    readonly INVALID_FRAMEBUFFER_OPERATION: GLenum;\\\\n    readonly INVALID_OPERATION: GLenum;\\\\n    readonly INVALID_VALUE: GLenum;\\\\n    readonly INVERT: GLenum;\\\\n    readonly KEEP: GLenum;\\\\n    readonly LEQUAL: GLenum;\\\\n    readonly LESS: GLenum;\\\\n    readonly LINEAR: GLenum;\\\\n    readonly LINEAR_MIPMAP_LINEAR: GLenum;\\\\n    readonly LINEAR_MIPMAP_NEAREST: GLenum;\\\\n    readonly LINES: GLenum;\\\\n    readonly LINE_LOOP: GLenum;\\\\n    readonly LINE_STRIP: GLenum;\\\\n    readonly LINE_WIDTH: GLenum;\\\\n    readonly LINK_STATUS: GLenum;\\\\n    readonly LOW_FLOAT: GLenum;\\\\n    readonly LOW_INT: GLenum;\\\\n    readonly LUMINANCE: GLenum;\\\\n    readonly LUMINANCE_ALPHA: GLenum;\\\\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;\\\\n    readonly MAX_RENDERBUFFER_SIZE: GLenum;\\\\n    readonly MAX_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_VARYING_VECTORS: GLenum;\\\\n    readonly MAX_VERTEX_ATTRIBS: GLenum;\\\\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_VECTORS: GLenum;\\\\n    readonly MAX_VIEWPORT_DIMS: GLenum;\\\\n    readonly MEDIUM_FLOAT: GLenum;\\\\n    readonly MEDIUM_INT: GLenum;\\\\n    readonly MIRRORED_REPEAT: GLenum;\\\\n    readonly NEAREST: GLenum;\\\\n    readonly NEAREST_MIPMAP_LINEAR: GLenum;\\\\n    readonly NEAREST_MIPMAP_NEAREST: GLenum;\\\\n    readonly NEVER: GLenum;\\\\n    readonly NICEST: GLenum;\\\\n    readonly NONE: GLenum;\\\\n    readonly NOTEQUAL: GLenum;\\\\n    readonly NO_ERROR: GLenum;\\\\n    readonly ONE: GLenum;\\\\n    readonly ONE_MINUS_CONSTANT_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_CONSTANT_COLOR: GLenum;\\\\n    readonly ONE_MINUS_DST_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_DST_COLOR: GLenum;\\\\n    readonly ONE_MINUS_SRC_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_SRC_COLOR: GLenum;\\\\n    readonly OUT_OF_MEMORY: GLenum;\\\\n    readonly PACK_ALIGNMENT: GLenum;\\\\n    readonly POINTS: GLenum;\\\\n    readonly POLYGON_OFFSET_FACTOR: GLenum;\\\\n    readonly POLYGON_OFFSET_FILL: GLenum;\\\\n    readonly POLYGON_OFFSET_UNITS: GLenum;\\\\n    readonly RED_BITS: GLenum;\\\\n    readonly RENDERBUFFER: GLenum;\\\\n    readonly RENDERBUFFER_ALPHA_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_BINDING: GLenum;\\\\n    readonly RENDERBUFFER_BLUE_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_DEPTH_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_GREEN_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_HEIGHT: GLenum;\\\\n    readonly RENDERBUFFER_INTERNAL_FORMAT: GLenum;\\\\n    readonly RENDERBUFFER_RED_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_STENCIL_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_WIDTH: GLenum;\\\\n    readonly RENDERER: GLenum;\\\\n    readonly REPEAT: GLenum;\\\\n    readonly REPLACE: GLenum;\\\\n    readonly RGB: GLenum;\\\\n    readonly RGB565: GLenum;\\\\n    readonly RGB5_A1: GLenum;\\\\n    readonly RGBA: GLenum;\\\\n    readonly RGBA4: GLenum;\\\\n    readonly SAMPLER_2D: GLenum;\\\\n    readonly SAMPLER_CUBE: GLenum;\\\\n    readonly SAMPLES: GLenum;\\\\n    readonly SAMPLE_ALPHA_TO_COVERAGE: GLenum;\\\\n    readonly SAMPLE_BUFFERS: GLenum;\\\\n    readonly SAMPLE_COVERAGE: GLenum;\\\\n    readonly SAMPLE_COVERAGE_INVERT: GLenum;\\\\n    readonly SAMPLE_COVERAGE_VALUE: GLenum;\\\\n    readonly SCISSOR_BOX: GLenum;\\\\n    readonly SCISSOR_TEST: GLenum;\\\\n    readonly SHADER_TYPE: GLenum;\\\\n    readonly SHADING_LANGUAGE_VERSION: GLenum;\\\\n    readonly SHORT: GLenum;\\\\n    readonly SRC_ALPHA: GLenum;\\\\n    readonly SRC_ALPHA_SATURATE: GLenum;\\\\n    readonly SRC_COLOR: GLenum;\\\\n    readonly STATIC_DRAW: GLenum;\\\\n    readonly STENCIL_ATTACHMENT: GLenum;\\\\n    readonly STENCIL_BACK_FAIL: GLenum;\\\\n    readonly STENCIL_BACK_FUNC: GLenum;\\\\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;\\\\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: GLenum;\\\\n    readonly STENCIL_BACK_REF: GLenum;\\\\n    readonly STENCIL_BACK_VALUE_MASK: GLenum;\\\\n    readonly STENCIL_BACK_WRITEMASK: GLenum;\\\\n    readonly STENCIL_BITS: GLenum;\\\\n    readonly STENCIL_BUFFER_BIT: GLenum;\\\\n    readonly STENCIL_CLEAR_VALUE: GLenum;\\\\n    readonly STENCIL_FAIL: GLenum;\\\\n    readonly STENCIL_FUNC: GLenum;\\\\n    readonly STENCIL_INDEX8: GLenum;\\\\n    readonly STENCIL_PASS_DEPTH_FAIL: GLenum;\\\\n    readonly STENCIL_PASS_DEPTH_PASS: GLenum;\\\\n    readonly STENCIL_REF: GLenum;\\\\n    readonly STENCIL_TEST: GLenum;\\\\n    readonly STENCIL_VALUE_MASK: GLenum;\\\\n    readonly STENCIL_WRITEMASK: GLenum;\\\\n    readonly STREAM_DRAW: GLenum;\\\\n    readonly SUBPIXEL_BITS: GLenum;\\\\n    readonly TEXTURE: GLenum;\\\\n    readonly TEXTURE0: GLenum;\\\\n    readonly TEXTURE1: GLenum;\\\\n    readonly TEXTURE10: GLenum;\\\\n    readonly TEXTURE11: GLenum;\\\\n    readonly TEXTURE12: GLenum;\\\\n    readonly TEXTURE13: GLenum;\\\\n    readonly TEXTURE14: GLenum;\\\\n    readonly TEXTURE15: GLenum;\\\\n    readonly TEXTURE16: GLenum;\\\\n    readonly TEXTURE17: GLenum;\\\\n    readonly TEXTURE18: GLenum;\\\\n    readonly TEXTURE19: GLenum;\\\\n    readonly TEXTURE2: GLenum;\\\\n    readonly TEXTURE20: GLenum;\\\\n    readonly TEXTURE21: GLenum;\\\\n    readonly TEXTURE22: GLenum;\\\\n    readonly TEXTURE23: GLenum;\\\\n    readonly TEXTURE24: GLenum;\\\\n    readonly TEXTURE25: GLenum;\\\\n    readonly TEXTURE26: GLenum;\\\\n    readonly TEXTURE27: GLenum;\\\\n    readonly TEXTURE28: GLenum;\\\\n    readonly TEXTURE29: GLenum;\\\\n    readonly TEXTURE3: GLenum;\\\\n    readonly TEXTURE30: GLenum;\\\\n    readonly TEXTURE31: GLenum;\\\\n    readonly TEXTURE4: GLenum;\\\\n    readonly TEXTURE5: GLenum;\\\\n    readonly TEXTURE6: GLenum;\\\\n    readonly TEXTURE7: GLenum;\\\\n    readonly TEXTURE8: GLenum;\\\\n    readonly TEXTURE9: GLenum;\\\\n    readonly TEXTURE_2D: GLenum;\\\\n    readonly TEXTURE_BINDING_2D: GLenum;\\\\n    readonly TEXTURE_BINDING_CUBE_MAP: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;\\\\n    readonly TEXTURE_MAG_FILTER: GLenum;\\\\n    readonly TEXTURE_MIN_FILTER: GLenum;\\\\n    readonly TEXTURE_WRAP_S: GLenum;\\\\n    readonly TEXTURE_WRAP_T: GLenum;\\\\n    readonly TRIANGLES: GLenum;\\\\n    readonly TRIANGLE_FAN: GLenum;\\\\n    readonly TRIANGLE_STRIP: GLenum;\\\\n    readonly UNPACK_ALIGNMENT: GLenum;\\\\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;\\\\n    readonly UNPACK_FLIP_Y_WEBGL: GLenum;\\\\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;\\\\n    readonly UNSIGNED_BYTE: GLenum;\\\\n    readonly UNSIGNED_INT: GLenum;\\\\n    readonly UNSIGNED_SHORT: GLenum;\\\\n    readonly UNSIGNED_SHORT_4_4_4_4: GLenum;\\\\n    readonly UNSIGNED_SHORT_5_5_5_1: GLenum;\\\\n    readonly UNSIGNED_SHORT_5_6_5: GLenum;\\\\n    readonly VALIDATE_STATUS: GLenum;\\\\n    readonly VENDOR: GLenum;\\\\n    readonly VERSION: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: GLenum;\\\\n    readonly VERTEX_SHADER: GLenum;\\\\n    readonly VIEWPORT: GLenum;\\\\n    readonly ZERO: GLenum;\\\\n}\\\\n\\\\ninterface WebGLRenderingContextOverloads {\\\\n    bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;\\\\n    bufferData(target: GLenum, data: BufferSource | null, usage: GLenum): void;\\\\n    bufferSubData(target: GLenum, offset: GLintptr, data: BufferSource): void;\\\\n    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, data: ArrayBufferView): void;\\\\n    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, data: ArrayBufferView): void;\\\\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    uniform1fv(location: WebGLUniformLocation | null, v: Float32List): void;\\\\n    uniform1iv(location: WebGLUniformLocation | null, v: Int32List): void;\\\\n    uniform2fv(location: WebGLUniformLocation | null, v: Float32List): void;\\\\n    uniform2iv(location: WebGLUniformLocation | null, v: Int32List): void;\\\\n    uniform3fv(location: WebGLUniformLocation | null, v: Float32List): void;\\\\n    uniform3iv(location: WebGLUniformLocation | null, v: Int32List): void;\\\\n    uniform4fv(location: WebGLUniformLocation | null, v: Float32List): void;\\\\n    uniform4iv(location: WebGLUniformLocation | null, v: Int32List): void;\\\\n    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;\\\\n    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;\\\\n    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;\\\\n}\\\\n\\\\ninterface WebGLSampler extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLSampler: {\\\\n    prototype: WebGLSampler;\\\\n    new(): WebGLSampler;\\\\n};\\\\n\\\\n/** The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders. */\\\\ninterface WebGLShader extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLShader: {\\\\n    prototype: WebGLShader;\\\\n    new(): WebGLShader;\\\\n};\\\\n\\\\n/** Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method. */\\\\ninterface WebGLShaderPrecisionFormat {\\\\n    readonly precision: GLint;\\\\n    readonly rangeMax: GLint;\\\\n    readonly rangeMin: GLint;\\\\n}\\\\n\\\\ndeclare var WebGLShaderPrecisionFormat: {\\\\n    prototype: WebGLShaderPrecisionFormat;\\\\n    new(): WebGLShaderPrecisionFormat;\\\\n};\\\\n\\\\ninterface WebGLSync extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLSync: {\\\\n    prototype: WebGLSync;\\\\n    new(): WebGLSync;\\\\n};\\\\n\\\\n/** Part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations. */\\\\ninterface WebGLTexture extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLTexture: {\\\\n    prototype: WebGLTexture;\\\\n    new(): WebGLTexture;\\\\n};\\\\n\\\\ninterface WebGLTransformFeedback extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLTransformFeedback: {\\\\n    prototype: WebGLTransformFeedback;\\\\n    new(): WebGLTransformFeedback;\\\\n};\\\\n\\\\n/** Part of the WebGL API and represents the location of a uniform variable in a shader program. */\\\\ninterface WebGLUniformLocation {\\\\n}\\\\n\\\\ndeclare var WebGLUniformLocation: {\\\\n    prototype: WebGLUniformLocation;\\\\n    new(): WebGLUniformLocation;\\\\n};\\\\n\\\\ninterface WebGLVertexArrayObject extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLVertexArrayObject: {\\\\n    prototype: WebGLVertexArrayObject;\\\\n    new(): WebGLVertexArrayObject;\\\\n};\\\\n\\\\ninterface WebGLVertexArrayObjectOES extends WebGLObject {\\\\n}\\\\n\\\\ninterface WebSocketEventMap {\\\\n    \\\\\\\"close\\\\\\\": CloseEvent;\\\\n    \\\\\\\"error\\\\\\\": Event;\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n    \\\\\\\"open\\\\\\\": Event;\\\\n}\\\\n\\\\n/** Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection. */\\\\ninterface WebSocket extends EventTarget {\\\\n    binaryType: BinaryType;\\\\n    readonly bufferedAmount: number;\\\\n    readonly extensions: string;\\\\n    onclose: ((this: WebSocket, ev: CloseEvent) => any) | null;\\\\n    onerror: ((this: WebSocket, ev: Event) => any) | null;\\\\n    onmessage: ((this: WebSocket, ev: MessageEvent) => any) | null;\\\\n    onopen: ((this: WebSocket, ev: Event) => any) | null;\\\\n    readonly protocol: string;\\\\n    readonly readyState: number;\\\\n    readonly url: string;\\\\n    close(code?: number, reason?: string): void;\\\\n    send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;\\\\n    readonly CLOSED: number;\\\\n    readonly CLOSING: number;\\\\n    readonly CONNECTING: number;\\\\n    readonly OPEN: number;\\\\n    addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var WebSocket: {\\\\n    prototype: WebSocket;\\\\n    new(url: string, protocols?: string | string[]): WebSocket;\\\\n    readonly CLOSED: number;\\\\n    readonly CLOSING: number;\\\\n    readonly CONNECTING: number;\\\\n    readonly OPEN: number;\\\\n};\\\\n\\\\ninterface WindowBase64 {\\\\n    atob(encodedString: string): string;\\\\n    btoa(rawString: string): string;\\\\n}\\\\n\\\\n/** This ServiceWorker API interface represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources. */\\\\ninterface WindowClient extends Client {\\\\n    readonly ancestorOrigins: ReadonlyArray<string>;\\\\n    readonly focused: boolean;\\\\n    readonly visibilityState: VisibilityState;\\\\n    focus(): Promise<WindowClient>;\\\\n    navigate(url: string): Promise<WindowClient | null>;\\\\n}\\\\n\\\\ndeclare var WindowClient: {\\\\n    prototype: WindowClient;\\\\n    new(): WindowClient;\\\\n};\\\\n\\\\ninterface WindowConsole {\\\\n    readonly console: Console;\\\\n}\\\\n\\\\ninterface WindowOrWorkerGlobalScope {\\\\n    readonly caches: CacheStorage;\\\\n    readonly crypto: Crypto;\\\\n    readonly indexedDB: IDBFactory;\\\\n    readonly origin: string;\\\\n    readonly performance: Performance;\\\\n    atob(data: string): string;\\\\n    btoa(data: string): string;\\\\n    clearInterval(handle?: number): void;\\\\n    clearTimeout(handle?: number): void;\\\\n    createImageBitmap(image: ImageBitmapSource): Promise<ImageBitmap>;\\\\n    createImageBitmap(image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number): Promise<ImageBitmap>;\\\\n    fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;\\\\n    queueMicrotask(callback: Function): void;\\\\n    setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\\\\n    setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\\\\n}\\\\n\\\\ninterface WorkerEventMap extends AbstractWorkerEventMap {\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n}\\\\n\\\\n/** This Web Workers API interface represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread. */\\\\ninterface Worker extends EventTarget, AbstractWorker {\\\\n    onmessage: ((this: Worker, ev: MessageEvent) => any) | null;\\\\n    postMessage(message: any, transfer: Transferable[]): void;\\\\n    postMessage(message: any, options?: PostMessageOptions): void;\\\\n    terminate(): void;\\\\n    addEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var Worker: {\\\\n    prototype: Worker;\\\\n    new(stringUrl: string | URL, options?: WorkerOptions): Worker;\\\\n};\\\\n\\\\ninterface WorkerGlobalScopeEventMap {\\\\n    \\\\\\\"error\\\\\\\": ErrorEvent;\\\\n}\\\\n\\\\n/** This Web Workers API interface is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop. */\\\\ninterface WorkerGlobalScope extends EventTarget, WorkerUtils, WindowConsole, WindowOrWorkerGlobalScope {\\\\n    readonly caches: CacheStorage;\\\\n    readonly isSecureContext: boolean;\\\\n    readonly location: WorkerLocation;\\\\n    onerror: ((this: WorkerGlobalScope, ev: ErrorEvent) => any) | null;\\\\n    readonly performance: Performance;\\\\n    readonly self: WorkerGlobalScope & typeof globalThis;\\\\n    msWriteProfilerMark(profilerMarkName: string): void;\\\\n    addEventListener<K extends keyof WorkerGlobalScopeEventMap>(type: K, listener: (this: WorkerGlobalScope, ev: WorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof WorkerGlobalScopeEventMap>(type: K, listener: (this: WorkerGlobalScope, ev: WorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var WorkerGlobalScope: {\\\\n    prototype: WorkerGlobalScope;\\\\n    new(): WorkerGlobalScope;\\\\n};\\\\n\\\\n/** The absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location. */\\\\ninterface WorkerLocation {\\\\n    readonly hash: string;\\\\n    readonly host: string;\\\\n    readonly hostname: string;\\\\n    readonly href: string;\\\\n    readonly origin: string;\\\\n    readonly pathname: string;\\\\n    readonly port: string;\\\\n    readonly protocol: string;\\\\n    readonly search: string;\\\\n    toString(): string;\\\\n}\\\\n\\\\ndeclare var WorkerLocation: {\\\\n    prototype: WorkerLocation;\\\\n    new(): WorkerLocation;\\\\n};\\\\n\\\\n/** A subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator. */\\\\ninterface WorkerNavigator extends NavigatorID, NavigatorOnLine, NavigatorBeacon, NavigatorConcurrentHardware, NavigatorStorage {\\\\n    readonly permissions: Permissions;\\\\n    readonly serviceWorker: ServiceWorkerContainer;\\\\n}\\\\n\\\\ndeclare var WorkerNavigator: {\\\\n    prototype: WorkerNavigator;\\\\n    new(): WorkerNavigator;\\\\n};\\\\n\\\\ninterface WorkerUtils extends WindowBase64 {\\\\n    readonly indexedDB: IDBFactory;\\\\n    readonly msIndexedDB: IDBFactory;\\\\n    readonly navigator: WorkerNavigator;\\\\n    importScripts(...urls: string[]): void;\\\\n}\\\\n\\\\n/** This Streams API interface provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing. */\\\\ninterface WritableStream<W = any> {\\\\n    readonly locked: boolean;\\\\n    abort(reason?: any): Promise<void>;\\\\n    getWriter(): WritableStreamDefaultWriter<W>;\\\\n}\\\\n\\\\ndeclare var WritableStream: {\\\\n    prototype: WritableStream;\\\\n    new<W = any>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>;\\\\n};\\\\n\\\\n/** This Streams API interface represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate. */\\\\ninterface WritableStreamDefaultController {\\\\n    error(error?: any): void;\\\\n}\\\\n\\\\n/** This Streams API interface is the object returned by WritableStream.getWriter() and once created locks the < writer to the WritableStream ensuring that no other streams can write to the underlying sink. */\\\\ninterface WritableStreamDefaultWriter<W = any> {\\\\n    readonly closed: Promise<void>;\\\\n    readonly desiredSize: number | null;\\\\n    readonly ready: Promise<void>;\\\\n    abort(reason?: any): Promise<void>;\\\\n    close(): Promise<void>;\\\\n    releaseLock(): void;\\\\n    write(chunk: W): Promise<void>;\\\\n}\\\\n\\\\ninterface XMLHttpRequestEventMap extends XMLHttpRequestEventTargetEventMap {\\\\n    \\\\\\\"readystatechange\\\\\\\": Event;\\\\n}\\\\n\\\\n/** Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing. */\\\\ninterface XMLHttpRequest extends XMLHttpRequestEventTarget {\\\\n    onreadystatechange: ((this: XMLHttpRequest, ev: Event) => any) | null;\\\\n    /**\\\\n     * Returns client's state.\\\\n     */\\\\n    readonly readyState: number;\\\\n    /**\\\\n     * Returns the response's body.\\\\n     */\\\\n    readonly response: any;\\\\n    /**\\\\n     * Returns the text response.\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if responseType is not the empty string or \\\\\\\"text\\\\\\\".\\\\n     */\\\\n    readonly responseText: string;\\\\n    /**\\\\n     * Returns the response type.\\\\n     * \\\\n     * Can be set to change the response type. Values are: the empty string (default), \\\\\\\"arraybuffer\\\\\\\", \\\\\\\"blob\\\\\\\", \\\\\\\"document\\\\\\\", \\\\\\\"json\\\\\\\", and \\\\\\\"text\\\\\\\".\\\\n     * \\\\n     * When set: setting to \\\\\\\"document\\\\\\\" is ignored if current global object is not a Window object.\\\\n     * \\\\n     * When set: throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if state is loading or done.\\\\n     * \\\\n     * When set: throws an \\\\\\\"InvalidAccessError\\\\\\\" DOMException if the synchronous flag is set and current global object is a Window object.\\\\n     */\\\\n    responseType: XMLHttpRequestResponseType;\\\\n    readonly responseURL: string;\\\\n    readonly status: number;\\\\n    readonly statusText: string;\\\\n    /**\\\\n     * Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the request has not yet completed, and the synchronous flag is unset, a timeout event will then be dispatched, or a \\\\\\\"TimeoutError\\\\\\\" DOMException will be thrown otherwise (for the send() method).\\\\n     * \\\\n     * When set: throws an \\\\\\\"InvalidAccessError\\\\\\\" DOMException if the synchronous flag is set and current global object is a Window object.\\\\n     */\\\\n    timeout: number;\\\\n    /**\\\\n     * Returns the associated XMLHttpRequestUpload object. It can be used to gather transmission information when data is transferred to a server.\\\\n     */\\\\n    readonly upload: XMLHttpRequestUpload;\\\\n    /**\\\\n     * True when credentials are to be included in a cross-origin request. False when they are to be excluded in a cross-origin request and when cookies are to be ignored in its response. Initially false.\\\\n     * \\\\n     * When set: throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if state is not unsent or opened, or if the send() flag is set.\\\\n     */\\\\n    withCredentials: boolean;\\\\n    /**\\\\n     * Cancels any network activity.\\\\n     */\\\\n    abort(): void;\\\\n    getAllResponseHeaders(): string;\\\\n    getResponseHeader(name: string): string | null;\\\\n    /**\\\\n     * Sets the request method, request URL, and synchronous flag.\\\\n     * \\\\n     * Throws a \\\\\\\"SyntaxError\\\\\\\" DOMException if either method is not a valid HTTP method or url cannot be parsed.\\\\n     * \\\\n     * Throws a \\\\\\\"SecurityError\\\\\\\" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidAccessError\\\\\\\" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.\\\\n     */\\\\n    open(method: string, url: string): void;\\\\n    open(method: string, url: string, async: boolean, username?: string | null, password?: string | null): void;\\\\n    /**\\\\n     * Acts as if the `Content-Type` header value for response is mime. (It does not actually change the header though.)\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if state is loading or done.\\\\n     */\\\\n    overrideMimeType(mime: string): void;\\\\n    /**\\\\n     * Initiates the request. The body argument provides the request body, if any, and is ignored if the request method is GET or HEAD.\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if either state is not opened or the send() flag is set.\\\\n     */\\\\n    send(body?: BodyInit | null): void;\\\\n    /**\\\\n     * Combines a header in author request headers.\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if either state is not opened or the send() flag is set.\\\\n     * \\\\n     * Throws a \\\\\\\"SyntaxError\\\\\\\" DOMException if name is not a header name or if value is not a header value.\\\\n     */\\\\n    setRequestHeader(name: string, value: string): void;\\\\n    readonly DONE: number;\\\\n    readonly HEADERS_RECEIVED: number;\\\\n    readonly LOADING: number;\\\\n    readonly OPENED: number;\\\\n    readonly UNSENT: number;\\\\n    addEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var XMLHttpRequest: {\\\\n    prototype: XMLHttpRequest;\\\\n    new(): XMLHttpRequest;\\\\n    readonly DONE: number;\\\\n    readonly HEADERS_RECEIVED: number;\\\\n    readonly LOADING: number;\\\\n    readonly OPENED: number;\\\\n    readonly UNSENT: number;\\\\n};\\\\n\\\\ninterface XMLHttpRequestEventTargetEventMap {\\\\n    \\\\\\\"abort\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n    \\\\\\\"error\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n    \\\\\\\"load\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n    \\\\\\\"loadend\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n    \\\\\\\"loadstart\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n    \\\\\\\"progress\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n    \\\\\\\"timeout\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n}\\\\n\\\\ninterface XMLHttpRequestEventTarget extends EventTarget {\\\\n    onabort: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    onerror: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    onload: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    onloadend: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    onloadstart: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    onprogress: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    ontimeout: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestEventTarget, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestEventTarget, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var XMLHttpRequestEventTarget: {\\\\n    prototype: XMLHttpRequestEventTarget;\\\\n    new(): XMLHttpRequestEventTarget;\\\\n};\\\\n\\\\ninterface XMLHttpRequestUpload extends XMLHttpRequestEventTarget {\\\\n    addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var XMLHttpRequestUpload: {\\\\n    prototype: XMLHttpRequestUpload;\\\\n    new(): XMLHttpRequestUpload;\\\\n};\\\\n\\\\ndeclare type EventListenerOrEventListenerObject = EventListener | EventListenerObject;\\\\n\\\\ndeclare namespace WebAssembly {\\\\n    interface Global {\\\\n        value: any;\\\\n        valueOf(): any;\\\\n    }\\\\n    \\\\n    var Global: {\\\\n        prototype: Global;\\\\n        new(descriptor: GlobalDescriptor, value?: any): Global;\\\\n    };\\\\n    \\\\n    interface Instance {\\\\n        readonly exports: any;\\\\n    }\\\\n    \\\\n    var Instance: {\\\\n        prototype: Instance;\\\\n        new(module: Module, importObject?: any): Instance;\\\\n    };\\\\n    \\\\n    interface Memory {\\\\n        readonly buffer: ArrayBuffer;\\\\n        grow(delta: number): number;\\\\n    }\\\\n    \\\\n    var Memory: {\\\\n        prototype: Memory;\\\\n        new(descriptor: MemoryDescriptor): Memory;\\\\n    };\\\\n    \\\\n    interface Module {\\\\n    }\\\\n    \\\\n    var Module: {\\\\n        prototype: Module;\\\\n        new(bytes: BufferSource): Module;\\\\n        customSections(module: Module, sectionName: string): ArrayBuffer[];\\\\n        exports(module: Module): ModuleExportDescriptor[];\\\\n        imports(module: Module): ModuleImportDescriptor[];\\\\n    };\\\\n    \\\\n    interface Table {\\\\n        readonly length: number;\\\\n        get(index: number): Function | null;\\\\n        grow(delta: number): number;\\\\n        set(index: number, value: Function | null): void;\\\\n    }\\\\n    \\\\n    var Table: {\\\\n        prototype: Table;\\\\n        new(descriptor: TableDescriptor): Table;\\\\n    };\\\\n    \\\\n    interface GlobalDescriptor {\\\\n        mutable?: boolean;\\\\n        value: string;\\\\n    }\\\\n    \\\\n    interface MemoryDescriptor {\\\\n        initial: number;\\\\n        maximum?: number;\\\\n    }\\\\n    \\\\n    interface ModuleExportDescriptor {\\\\n        kind: ImportExportKind;\\\\n        name: string;\\\\n    }\\\\n    \\\\n    interface ModuleImportDescriptor {\\\\n        kind: ImportExportKind;\\\\n        module: string;\\\\n        name: string;\\\\n    }\\\\n    \\\\n    interface TableDescriptor {\\\\n        element: TableKind;\\\\n        initial: number;\\\\n        maximum?: number;\\\\n    }\\\\n    \\\\n    interface WebAssemblyInstantiatedSource {\\\\n        instance: Instance;\\\\n        module: Module;\\\\n    }\\\\n    \\\\n    type ImportExportKind = \\\\\\\"function\\\\\\\" | \\\\\\\"table\\\\\\\" | \\\\\\\"memory\\\\\\\" | \\\\\\\"global\\\\\\\";\\\\n    type TableKind = \\\\\\\"anyfunc\\\\\\\";\\\\n    function compile(bytes: BufferSource): Promise<Module>;\\\\n    function instantiate(bytes: BufferSource, importObject?: any): Promise<WebAssemblyInstantiatedSource>;\\\\n    function instantiate(moduleObject: Module, importObject?: any): Promise<Instance>;\\\\n    function validate(bytes: BufferSource): boolean;\\\\n}\\\\n\\\\ninterface EventHandlerNonNull {\\\\n    (event: Event): any;\\\\n}\\\\n\\\\ninterface FrameRequestCallback {\\\\n    (time: number): void;\\\\n}\\\\n\\\\ninterface PerformanceObserverCallback {\\\\n    (entries: PerformanceObserverEntryList, observer: PerformanceObserver): void;\\\\n}\\\\n\\\\ninterface QueuingStrategySizeCallback<T = any> {\\\\n    (chunk: T): number;\\\\n}\\\\n\\\\ninterface ReadableByteStreamControllerCallback {\\\\n    (controller: ReadableByteStreamController): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface ReadableStreamDefaultControllerCallback<R> {\\\\n    (controller: ReadableStreamDefaultController<R>): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface ReadableStreamErrorCallback {\\\\n    (reason: any): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface TransformStreamDefaultControllerCallback<O> {\\\\n    (controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface TransformStreamDefaultControllerTransformCallback<I, O> {\\\\n    (chunk: I, controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface WritableStreamDefaultControllerCloseCallback {\\\\n    (): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface WritableStreamDefaultControllerStartCallback {\\\\n    (controller: WritableStreamDefaultController): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface WritableStreamDefaultControllerWriteCallback<W> {\\\\n    (chunk: W, controller: WritableStreamDefaultController): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface WritableStreamErrorCallback {\\\\n    (reason: any): void | PromiseLike<void>;\\\\n}\\\\n\\\\ndeclare var onmessage: ((this: DedicatedWorkerGlobalScope, ev: MessageEvent) => any) | null;\\\\ndeclare function close(): void;\\\\ndeclare function postMessage(message: any, transfer: Transferable[]): void;\\\\ndeclare function postMessage(message: any, options?: PostMessageOptions): void;\\\\n/**\\\\n * Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.\\\\n */\\\\ndeclare function dispatchEvent(event: Event): boolean;\\\\ndeclare var caches: CacheStorage;\\\\ndeclare var isSecureContext: boolean;\\\\ndeclare var location: WorkerLocation;\\\\ndeclare var onerror: ((this: DedicatedWorkerGlobalScope, ev: ErrorEvent) => any) | null;\\\\ndeclare var performance: Performance;\\\\ndeclare var self: WorkerGlobalScope & typeof globalThis;\\\\ndeclare function msWriteProfilerMark(profilerMarkName: string): void;\\\\n/**\\\\n * Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.\\\\n */\\\\ndeclare function dispatchEvent(event: Event): boolean;\\\\ndeclare var indexedDB: IDBFactory;\\\\ndeclare var msIndexedDB: IDBFactory;\\\\ndeclare var navigator: WorkerNavigator;\\\\ndeclare function importScripts(...urls: string[]): void;\\\\ndeclare function atob(encodedString: string): string;\\\\ndeclare function btoa(rawString: string): string;\\\\ndeclare var console: Console;\\\\ndeclare var caches: CacheStorage;\\\\ndeclare var crypto: Crypto;\\\\ndeclare var indexedDB: IDBFactory;\\\\ndeclare var origin: string;\\\\ndeclare var performance: Performance;\\\\ndeclare function atob(data: string): string;\\\\ndeclare function btoa(data: string): string;\\\\ndeclare function clearInterval(handle?: number): void;\\\\ndeclare function clearTimeout(handle?: number): void;\\\\ndeclare function createImageBitmap(image: ImageBitmapSource): Promise<ImageBitmap>;\\\\ndeclare function createImageBitmap(image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number): Promise<ImageBitmap>;\\\\ndeclare function fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;\\\\ndeclare function queueMicrotask(callback: Function): void;\\\\ndeclare function setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\\\\ndeclare function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\\\\ndeclare function cancelAnimationFrame(handle: number): void;\\\\ndeclare function requestAnimationFrame(callback: FrameRequestCallback): number;\\\\ndeclare function addEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type: K, listener: (this: DedicatedWorkerGlobalScope, ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\ndeclare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\ndeclare function removeEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type: K, listener: (this: DedicatedWorkerGlobalScope, ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\ndeclare function removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\ntype HeadersInit = Headers | string[][] | Record<string, string>;\\\\ntype BodyInit = Blob | BufferSource | FormData | URLSearchParams | ReadableStream<Uint8Array> | string;\\\\ntype RequestInfo = Request | string;\\\\ntype BlobPart = BufferSource | Blob | string;\\\\ntype DOMHighResTimeStamp = number;\\\\ntype CanvasImageSource = ImageBitmap | OffscreenCanvas;\\\\ntype OffscreenRenderingContext = OffscreenCanvasRenderingContext2D | ImageBitmapRenderingContext | WebGLRenderingContext | WebGL2RenderingContext;\\\\ntype MessageEventSource = MessagePort | ServiceWorker;\\\\ntype ImageBitmapSource = CanvasImageSource | Blob | ImageData;\\\\ntype TimerHandler = string | Function;\\\\ntype PerformanceEntryList = PerformanceEntry[];\\\\ntype PushMessageDataInit = BufferSource | string;\\\\ntype VibratePattern = number | number[];\\\\ntype AlgorithmIdentifier = string | Algorithm;\\\\ntype HashAlgorithmIdentifier = AlgorithmIdentifier;\\\\ntype BigInteger = Uint8Array;\\\\ntype NamedCurve = string;\\\\ntype GLenum = number;\\\\ntype GLboolean = boolean;\\\\ntype GLbitfield = number;\\\\ntype GLint = number;\\\\ntype GLsizei = number;\\\\ntype GLintptr = number;\\\\ntype GLsizeiptr = number;\\\\ntype GLuint = number;\\\\ntype GLfloat = number;\\\\ntype GLclampf = number;\\\\ntype TexImageSource = ImageBitmap | ImageData | OffscreenCanvas;\\\\ntype Float32List = Float32Array | GLfloat[];\\\\ntype Int32List = Int32Array | GLint[];\\\\ntype GLint64 = number;\\\\ntype GLuint64 = number;\\\\ntype Uint32List = Uint32Array | GLuint[];\\\\ntype BufferSource = ArrayBufferView | ArrayBuffer;\\\\ntype DOMTimeStamp = number;\\\\ntype FormDataEntryValue = File | string;\\\\ntype IDBValidKey = number | string | Date | BufferSource | IDBArrayKey;\\\\ntype Transferable = ArrayBuffer | MessagePort | ImageBitmap;\\\\ntype BinaryType = \\\\\\\"blob\\\\\\\" | \\\\\\\"arraybuffer\\\\\\\";\\\\ntype CanvasDirection = \\\\\\\"ltr\\\\\\\" | \\\\\\\"rtl\\\\\\\" | \\\\\\\"inherit\\\\\\\";\\\\ntype CanvasFillRule = \\\\\\\"nonzero\\\\\\\" | \\\\\\\"evenodd\\\\\\\";\\\\ntype CanvasLineCap = \\\\\\\"butt\\\\\\\" | \\\\\\\"round\\\\\\\" | \\\\\\\"square\\\\\\\";\\\\ntype CanvasLineJoin = \\\\\\\"round\\\\\\\" | \\\\\\\"bevel\\\\\\\" | \\\\\\\"miter\\\\\\\";\\\\ntype CanvasTextAlign = \\\\\\\"start\\\\\\\" | \\\\\\\"end\\\\\\\" | \\\\\\\"left\\\\\\\" | \\\\\\\"right\\\\\\\" | \\\\\\\"center\\\\\\\";\\\\ntype CanvasTextBaseline = \\\\\\\"top\\\\\\\" | \\\\\\\"hanging\\\\\\\" | \\\\\\\"middle\\\\\\\" | \\\\\\\"alphabetic\\\\\\\" | \\\\\\\"ideographic\\\\\\\" | \\\\\\\"bottom\\\\\\\";\\\\ntype ClientTypes = \\\\\\\"window\\\\\\\" | \\\\\\\"worker\\\\\\\" | \\\\\\\"sharedworker\\\\\\\" | \\\\\\\"all\\\\\\\";\\\\ntype EndingType = \\\\\\\"transparent\\\\\\\" | \\\\\\\"native\\\\\\\";\\\\ntype FrameType = \\\\\\\"auxiliary\\\\\\\" | \\\\\\\"top-level\\\\\\\" | \\\\\\\"nested\\\\\\\" | \\\\\\\"none\\\\\\\";\\\\ntype IDBCursorDirection = \\\\\\\"next\\\\\\\" | \\\\\\\"nextunique\\\\\\\" | \\\\\\\"prev\\\\\\\" | \\\\\\\"prevunique\\\\\\\";\\\\ntype IDBRequestReadyState = \\\\\\\"pending\\\\\\\" | \\\\\\\"done\\\\\\\";\\\\ntype IDBTransactionMode = \\\\\\\"readonly\\\\\\\" | \\\\\\\"readwrite\\\\\\\" | \\\\\\\"versionchange\\\\\\\";\\\\ntype ImageSmoothingQuality = \\\\\\\"low\\\\\\\" | \\\\\\\"medium\\\\\\\" | \\\\\\\"high\\\\\\\";\\\\ntype KeyFormat = \\\\\\\"raw\\\\\\\" | \\\\\\\"spki\\\\\\\" | \\\\\\\"pkcs8\\\\\\\" | \\\\\\\"jwk\\\\\\\";\\\\ntype KeyType = \\\\\\\"public\\\\\\\" | \\\\\\\"private\\\\\\\" | \\\\\\\"secret\\\\\\\";\\\\ntype KeyUsage = \\\\\\\"encrypt\\\\\\\" | \\\\\\\"decrypt\\\\\\\" | \\\\\\\"sign\\\\\\\" | \\\\\\\"verify\\\\\\\" | \\\\\\\"deriveKey\\\\\\\" | \\\\\\\"deriveBits\\\\\\\" | \\\\\\\"wrapKey\\\\\\\" | \\\\\\\"unwrapKey\\\\\\\";\\\\ntype NotificationDirection = \\\\\\\"auto\\\\\\\" | \\\\\\\"ltr\\\\\\\" | \\\\\\\"rtl\\\\\\\";\\\\ntype NotificationPermission = \\\\\\\"default\\\\\\\" | \\\\\\\"denied\\\\\\\" | \\\\\\\"granted\\\\\\\";\\\\ntype OffscreenRenderingContextId = \\\\\\\"2d\\\\\\\" | \\\\\\\"bitmaprenderer\\\\\\\" | \\\\\\\"webgl\\\\\\\" | \\\\\\\"webgl2\\\\\\\";\\\\ntype PermissionName = \\\\\\\"geolocation\\\\\\\" | \\\\\\\"notifications\\\\\\\" | \\\\\\\"push\\\\\\\" | \\\\\\\"midi\\\\\\\" | \\\\\\\"camera\\\\\\\" | \\\\\\\"microphone\\\\\\\" | \\\\\\\"speaker\\\\\\\" | \\\\\\\"device-info\\\\\\\" | \\\\\\\"background-sync\\\\\\\" | \\\\\\\"bluetooth\\\\\\\" | \\\\\\\"persistent-storage\\\\\\\" | \\\\\\\"ambient-light-sensor\\\\\\\" | \\\\\\\"accelerometer\\\\\\\" | \\\\\\\"gyroscope\\\\\\\" | \\\\\\\"magnetometer\\\\\\\" | \\\\\\\"clipboard\\\\\\\";\\\\ntype PermissionState = \\\\\\\"granted\\\\\\\" | \\\\\\\"denied\\\\\\\" | \\\\\\\"prompt\\\\\\\";\\\\ntype PushEncryptionKeyName = \\\\\\\"p256dh\\\\\\\" | \\\\\\\"auth\\\\\\\";\\\\ntype PushPermissionState = \\\\\\\"denied\\\\\\\" | \\\\\\\"granted\\\\\\\" | \\\\\\\"prompt\\\\\\\";\\\\ntype ReferrerPolicy = \\\\\\\"\\\\\\\" | \\\\\\\"no-referrer\\\\\\\" | \\\\\\\"no-referrer-when-downgrade\\\\\\\" | \\\\\\\"same-origin\\\\\\\" | \\\\\\\"origin\\\\\\\" | \\\\\\\"strict-origin\\\\\\\" | \\\\\\\"origin-when-cross-origin\\\\\\\" | \\\\\\\"strict-origin-when-cross-origin\\\\\\\" | \\\\\\\"unsafe-url\\\\\\\";\\\\ntype RequestCache = \\\\\\\"default\\\\\\\" | \\\\\\\"no-store\\\\\\\" | \\\\\\\"reload\\\\\\\" | \\\\\\\"no-cache\\\\\\\" | \\\\\\\"force-cache\\\\\\\" | \\\\\\\"only-if-cached\\\\\\\";\\\\ntype RequestCredentials = \\\\\\\"omit\\\\\\\" | \\\\\\\"same-origin\\\\\\\" | \\\\\\\"include\\\\\\\";\\\\ntype RequestDestination = \\\\\\\"\\\\\\\" | \\\\\\\"audio\\\\\\\" | \\\\\\\"audioworklet\\\\\\\" | \\\\\\\"document\\\\\\\" | \\\\\\\"embed\\\\\\\" | \\\\\\\"font\\\\\\\" | \\\\\\\"image\\\\\\\" | \\\\\\\"manifest\\\\\\\" | \\\\\\\"object\\\\\\\" | \\\\\\\"paintworklet\\\\\\\" | \\\\\\\"report\\\\\\\" | \\\\\\\"script\\\\\\\" | \\\\\\\"sharedworker\\\\\\\" | \\\\\\\"style\\\\\\\" | \\\\\\\"track\\\\\\\" | \\\\\\\"video\\\\\\\" | \\\\\\\"worker\\\\\\\" | \\\\\\\"xslt\\\\\\\";\\\\ntype RequestMode = \\\\\\\"navigate\\\\\\\" | \\\\\\\"same-origin\\\\\\\" | \\\\\\\"no-cors\\\\\\\" | \\\\\\\"cors\\\\\\\";\\\\ntype RequestRedirect = \\\\\\\"follow\\\\\\\" | \\\\\\\"error\\\\\\\" | \\\\\\\"manual\\\\\\\";\\\\ntype ResponseType = \\\\\\\"basic\\\\\\\" | \\\\\\\"cors\\\\\\\" | \\\\\\\"default\\\\\\\" | \\\\\\\"error\\\\\\\" | \\\\\\\"opaque\\\\\\\" | \\\\\\\"opaqueredirect\\\\\\\";\\\\ntype ServiceWorkerState = \\\\\\\"installing\\\\\\\" | \\\\\\\"installed\\\\\\\" | \\\\\\\"activating\\\\\\\" | \\\\\\\"activated\\\\\\\" | \\\\\\\"redundant\\\\\\\";\\\\ntype ServiceWorkerUpdateViaCache = \\\\\\\"imports\\\\\\\" | \\\\\\\"all\\\\\\\" | \\\\\\\"none\\\\\\\";\\\\ntype VisibilityState = \\\\\\\"hidden\\\\\\\" | \\\\\\\"visible\\\\\\\" | \\\\\\\"prerender\\\\\\\";\\\\ntype WebGLPowerPreference = \\\\\\\"default\\\\\\\" | \\\\\\\"low-power\\\\\\\" | \\\\\\\"high-performance\\\\\\\";\\\\ntype WorkerType = \\\\\\\"classic\\\\\\\" | \\\\\\\"module\\\\\\\";\\\\ntype XMLHttpRequestResponseType = \\\\\\\"\\\\\\\" | \\\\\\\"arraybuffer\\\\\\\" | \\\\\\\"blob\\\\\\\" | \\\\\\\"document\\\\\\\" | \\\\\\\"json\\\\\\\" | \\\\\\\"text\\\\\\\";\\\\n\\\"},{\\\"path\\\":\\\"/types/common/emptybuffer.d.ts\\\",\\\"content\\\":\\\"declare class Buffer{\\\\n}\\\"},{\\\"path\\\":\\\"/types/common/void$w$w.d.ts\\\",\\\"content\\\":\\\"declare namespace $w {\\\\n    type $w = () => void;\\\\n}\\\"},{\\\"path\\\":\\\"/types/common/declaration.d.ts\\\",\\\"content\\\":\\\"/**\\\\r\\\\n * The wix-location module contains functionality for getting information\\\\r\\\\n *  about the URL of the current page and for navigating to other pages.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-location' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the base URL of the current page.\\\\r\\\\n     */\\\\r\\\\n    const baseUrl: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the path of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    const path: string[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the prefix of a dynamic page's or router page's URL.\\\\r\\\\n     */\\\\r\\\\n    const prefix: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the protocol of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    const protocol: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets an object that represents the query segment of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    const query: any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets an object used to manage the query segment of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    const queryParams: wix_location.QueryParams;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the full URL of the current page.\\\\r\\\\n     */\\\\r\\\\n    const url: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds an event handler that runs when an application page's URL changes.\\\\r\\\\n     */\\\\r\\\\n    function onChange(handler: wix_location.LocationChangeHandler): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Directs the browser to navigate to the specified URL.\\\\r\\\\n     */\\\\r\\\\n    function to(url: string): void;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-site module contains functionality for obtaining information about your site and its pages.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-site' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets a code representing the site's currency.\\\\r\\\\n     */\\\\r\\\\n    const currency: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets information about the current page or lightbox.\\\\r\\\\n     */\\\\r\\\\n    const currentPage: wix_site.StructurePage | wix_site.StructureLightbox;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets a code representing the site's language.\\\\r\\\\n     */\\\\r\\\\n    const language: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the site's regional settings.\\\\r\\\\n     */\\\\r\\\\n    const regionalSettings: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the site revision ID.\\\\r\\\\n     */\\\\r\\\\n    const revision: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the site's timezone.\\\\r\\\\n     */\\\\r\\\\n    const timezone: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns information about the site's pages, prefixes, and lightboxes.\\\\r\\\\n     */\\\\r\\\\n    function getSiteStructure(): wix_site.SiteStructure;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Optimizes resource fetching of pages and lightboxes in the site so they will load faster.\\\\r\\\\n     */\\\\r\\\\n    function prefetchPageResources(prefetchItems: wix_site.PrefetchItems): wix_site.PrefetchResult;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the sitemap for a router or dynamic page prefix.\\\\r\\\\n     */\\\\r\\\\n    function routerSitemap(routerPrefix: string): Promise<wix_router.WixRouterSitemapEntry[]>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-storage module contains functionality for the persistent\\\\r\\\\n *  storage of key/value data in the site visitor's browser.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-storage' {\\\\r\\\\n    /**\\\\r\\\\n     * Used for local storage of data.\\\\r\\\\n     */\\\\r\\\\n    const local: wix_storage.Storage;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Used for memory storage of data.\\\\r\\\\n     */\\\\r\\\\n    const memory: wix_storage.Storage;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Used for session storage of data.\\\\r\\\\n     */\\\\r\\\\n    const session: wix_storage.Storage;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-window module contains functionality that pertains to the\\\\r\\\\n *  current browser window.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-window' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the locale of the site visitor's browser.\\\\r\\\\n     */\\\\r\\\\n    const browserLocale: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets what kind of device is being used to view the page.\\\\r\\\\n     */\\\\r\\\\n    const formFactor: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the locale of the current environment.\\\\r\\\\n     */\\\\r\\\\n    const locale: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the HTTP referrer header field.\\\\r\\\\n     */\\\\r\\\\n    const referrer: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets which mode the site is currently being viewed in.\\\\r\\\\n     */\\\\r\\\\n    const viewMode: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Copies text to the site visitor's clipboard.\\\\r\\\\n     */\\\\r\\\\n    function copyToClipboard(toCopy: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns information about the window.\\\\r\\\\n     */\\\\r\\\\n    function getBoundingRect(): Promise<wix_window.WindowSizeInfo>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the current geolocation of the user.\\\\r\\\\n     */\\\\r\\\\n    function getCurrentGeolocation(): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the data that a router passed to the page in its response.\\\\r\\\\n     */\\\\r\\\\n    function getRouterData(): any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Opens a lightbox and optionally passes it the given data.\\\\r\\\\n     */\\\\r\\\\n    function openLightbox(name: string, data?: any): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Opens a modal window that displays the specified web page.\\\\r\\\\n     */\\\\r\\\\n    function openModal(url: string, options: wix_window.OpenModalOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a message to the page's parent.\\\\r\\\\n     */\\\\r\\\\n    function postMessage(message: any, target?: string): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Scrolls the page by a given number of pixels.\\\\r\\\\n     */\\\\r\\\\n    function scrollBy(x: number, y: number): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Scrolls the page to a specific location.\\\\r\\\\n     */\\\\r\\\\n    function scrollTo(x: number, y: number, options?: wix_window.ScrollToOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a tracking event to external analytics tools.\\\\r\\\\n     */\\\\r\\\\n    function trackEvent(eventName: string, parameters: wix_window.trackingParameters.AddPaymentInfoEvent | wix_window.trackingParameters.AddProductImpressionEvent | wix_window.trackingParameters.AddToCartEvent | wix_window.trackingParameters.ClickProductEvent | wix_window.trackingParameters.CustomEvent | wix_window.trackingParameters.InitiateCheckoutEvent | wix_window.trackingParameters.PurchaseEvent | wix_window.trackingParameters.RemoveFromCartEvent | wix_window.trackingParameters.ViewContentEvent): void;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-captcha-backend module contains functionality for working with the reCAPTCHA element from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-captcha-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Authorizes the CAPTCHA token.\\\\r\\\\n     */\\\\r\\\\n    function authorize(token: string): Promise<wix_captcha_backend.SuccessReport>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-chat-backend module contains functionality for working with the Wix Chat application from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-chat-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Sends a chat message from the backend.\\\\r\\\\n     */\\\\r\\\\n    function sendMessage(messageInfo: wix_chat_backend.MessageInfo): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * HTTP functions are used to expose an API of your site's functionality.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-http-functions' {\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 400 (Bad Request) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function badRequest(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 201 (Created) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function created(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP DELETE method.\\\\r\\\\n     */\\\\r\\\\n    /* Illegal function name 'delete' can't be used here\\\\r\\\\n    function delete(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n    */\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 403 (Forbidden) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function forbidden(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP GET method.\\\\r\\\\n     */\\\\r\\\\n    function get(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 404 (Not Found) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function notFound(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 200 (OK) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function ok(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP OPTIONS method.\\\\r\\\\n     */\\\\r\\\\n    function options(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP POST method.\\\\r\\\\n     */\\\\r\\\\n    function post(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP PUT method.\\\\r\\\\n     */\\\\r\\\\n    function put(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response populated with the information from the options parameter.\\\\r\\\\n     *  The `response()` function creates a custom response built with the\\\\r\\\\n     *  information passed to the `options` parameter in a [`WixHttpFunctionResponseOptions`](#WixHttpFunctionResponseOptions)\\\\r\\\\n     *  object.\\\\r\\\\n     * \\\\r\\\\n     *  Use the `response()` function to create a response to return from an HTTP\\\\r\\\\n     *  function.\\\\r\\\\n     */\\\\r\\\\n    function response(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 500 (Internal Server Error) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function serverError(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with any HTTP method.\\\\r\\\\n     */\\\\r\\\\n    function use(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-crm-backend module contains functionality for working with\\\\r\\\\n *  [your site's contacts](https://support.wix.com/en/article/about-your-contact-list)\\\\r\\\\n *  from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-crm-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new contact or updates an existing contact.\\\\r\\\\n     */\\\\r\\\\n    function createContact(contactInfo: wix_crm_backend.ContactInfo): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Deletes an existing contact.\\\\r\\\\n     */\\\\r\\\\n    function deleteContact(contactId: string, options: wix_crm_backend.DeleteOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a Triggered Email to a contact.\\\\r\\\\n     */\\\\r\\\\n    function emailContact(emailId: string, toContact: string, options?: wix_users.TriggeredEmailOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets an existing contact by ID.\\\\r\\\\n     */\\\\r\\\\n    function getContactById(contactId: string): Promise<wix_crm_backend.ContactInfo>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates an existing contact.\\\\r\\\\n     */\\\\r\\\\n    function updateContact(contactId: string, contactInfo: wix_crm_backend.ContactInfo): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-data module contains functionality for working with data in collections.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-data' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates an aggregation.\\\\r\\\\n     */\\\\r\\\\n    function aggregate(collectionName: string): wix_data.WixDataAggregate;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds a number of items to a collection.\\\\r\\\\n     */\\\\r\\\\n    function bulkInsert(collectionName: string, items: any[], options?: wix_data.WixDataOptions): Promise<wix_data.WixDataBulkResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes a number of items from a collection.\\\\r\\\\n     */\\\\r\\\\n    function bulkRemove(collectionName: string, itemIds: string[], options?: wix_data.WixDataOptions): Promise<wix_data.WixDataBulkResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Inserts or updates a number of items in a collection.\\\\r\\\\n     */\\\\r\\\\n    function bulkSave(collectionName: string, items: any[], options?: wix_data.WixDataOptions): Promise<wix_data.WixDataBulkResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates a number of items in a collection.\\\\r\\\\n     */\\\\r\\\\n    function bulkUpdate(collectionName: string, items: any[], options?: wix_data.WixDataOptions): Promise<wix_data.WixDataBulkResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a filter to be used with the dataset `setFilter()` function.\\\\r\\\\n     */\\\\r\\\\n    function filter(): wix_data.WixDataFilter;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Retrieves an item from a collection.\\\\r\\\\n     */\\\\r\\\\n    function get(collectionName: string, itemId: string, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds an item to a collection.\\\\r\\\\n     */\\\\r\\\\n    function insert(collectionName: string, item: any, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Inserts a reference in the specified property.\\\\r\\\\n     */\\\\r\\\\n    function insertReference(collectionName: string, propertyName: string, referringItem: any | string, referencedItem: any | string | any[] | string[], options?: wix_data.WixDataOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Checks if a reference to the referenced item exists in the specified\\\\r\\\\n     *   property of the referring item.\\\\r\\\\n     */\\\\r\\\\n    function isReferenced(collectionName: string, propertyName: string, referringItem: any | string, referencedItem: any | string): Promise<boolean>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a query.\\\\r\\\\n     */\\\\r\\\\n    function query(collectionName: string): wix_data.WixDataQuery;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the full items referenced in the specified property.\\\\r\\\\n     */\\\\r\\\\n    function queryReferenced(collectionName: string, item: any | string, propertyName: string, options: wix_data.WixDataQueryReferencedOptions): Promise<wix_data.WixDataQueryReferencedResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes an item from a collection.\\\\r\\\\n     */\\\\r\\\\n    function remove(collectionName: string, itemId: string, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes a reference from the specified property.\\\\r\\\\n     */\\\\r\\\\n    function removeReference(collectionName: string, propertyName: string, referringItem: any | string, referencedItem: any | string | any[] | string[], options?: wix_data.WixDataOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Replaces current references with references in the specified property.\\\\r\\\\n     */\\\\r\\\\n    function replaceReferences(collectionName: string, propertyName: string, referringItem: any | string, referencedItem: any | string | any[] | string[], options?: wix_data.WixDataOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Inserts or updates an item in a collection.\\\\r\\\\n     */\\\\r\\\\n    function save(collectionName: string, item: any, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a sort to be used with the dataset `setSort()` function.\\\\r\\\\n     */\\\\r\\\\n    function sort(): wix_data.WixDataSort;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes all items from a collection.\\\\r\\\\n     */\\\\r\\\\n    function truncate(collectionName: string, options?: wix_data.WixDataOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates an item in a collection.\\\\r\\\\n     */\\\\r\\\\n    function update(collectionName: string, item: any, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * An implementation of the standard [Javascript Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API)\\\\r\\\\n *  which can be used in public and backend code for fetching resources\\\\r\\\\n *  from [3rd party services](https://support.wix.com/en/article/accessing-3rd-party-services)\\\\r\\\\n *  using HTTPS.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-fetch' {\\\\r\\\\n    /**\\\\r\\\\n     * Retrieves the specified resource from the network using HTTPS.\\\\r\\\\n     */\\\\r\\\\n    function fetch(url: string, options?: wix_fetch.WixFetchRequest): Promise<wix_fetch.WixFetchResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Retrieves the specified JSON resource from the network using HTTPS.\\\\r\\\\n     */\\\\r\\\\n    function getJSON(url: string, options?: wix_fetch.WixFetchRequest): Promise<any>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-pay-backend module contains functionality for working with\\\\r\\\\n *  payments from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-pay-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new payment.\\\\r\\\\n     */\\\\r\\\\n    function createPayment(paymentInfo: wix_pay_backend.PaymentInfo): Promise<wix_pay_backend.Payment>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * This module contains the APIs for code routers and data binding router hooks.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-router' {\\\\r\\\\n    /**\\\\r\\\\n     * Registers a hook that is called after a router.\\\\r\\\\n     */\\\\r\\\\n    function afterRouter(request: wix_router.WixRouterRequest, response: wix_router.WixRouterResponse): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a hook that is called after a sitemap is created.\\\\r\\\\n     */\\\\r\\\\n    function afterSitemap(request: wix_router.WixRouterSitemapRequest, sitemapEntries: wix_router.WixRouterSitemapEntry[]): Promise<wix_router.WixRouterSitemapEntry[]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a hook that is called before a router.\\\\r\\\\n     */\\\\r\\\\n    function beforeRouter(request: wix_router.WixRouterRequest): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a hook that is called after a route is resolved by the data binding router, but before the wix-data query is executed.\\\\r\\\\n     */\\\\r\\\\n    function customizeQuery(request: wix_router.WixRouterRequest, route: string, query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with a status code 403 (Forbidden) and instructs the router to show a 403 page.\\\\r\\\\n     */\\\\r\\\\n    function forbidden(message?: string): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response that instructs the router to continue.\\\\r\\\\n     */\\\\r\\\\n    function next(): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with a status code 404 (Not Found) and instructs the router to show a 404 page.\\\\r\\\\n     */\\\\r\\\\n    function notFound(message?: string): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with a status code 200 (OK) and instructs the router to show the selected page.\\\\r\\\\n     */\\\\r\\\\n    function ok(Page: string | string[], routerReturnedData?: any, head?: wix_router.WixRouterResponse.HeadOptions): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with a status code of 301 (Moved Permanently) or 302 (Found) and instructs the router to redirect to the given URL.\\\\r\\\\n     */\\\\r\\\\n    function redirect(url: string, statusCode?: string): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function containing routing logic for a given URL prefix.\\\\r\\\\n     */\\\\r\\\\n    function router(request: wix_router.WixRouterRequest): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with the specified HTTP status code with an optional message.\\\\r\\\\n     */\\\\r\\\\n    function sendStatus(statusCode: string, message?: string): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function containing sitemap logic for a given URL prefix.\\\\r\\\\n     */\\\\r\\\\n    function sitemap(request: wix_router.WixRouterSitemapRequest): Promise<wix_router.WixRouterSitemapEntry[]>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-site-backend module contains functionality for working with\\\\r\\\\n *  your site and its pages from backend code.\\\\r\\\\n * \\\\r\\\\n *  To use the backend site API, import `wixSiteBackend` from the `wix-site-backend` module:\\\\r\\\\n * \\\\r\\\\n *    ```javascript\\\\r\\\\n *    import wixSiteBackend from 'wix-site-backend';\\\\r\\\\n *    ```\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-site-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Invalidates the cache for a site.\\\\r\\\\n     */\\\\r\\\\n    function invalidateCache(): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-stores-backend module contains functionality for working with your\\\\r\\\\n *  site's store from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-stores-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Adds media items by ID to a product.\\\\r\\\\n     */\\\\r\\\\n    function addProductMedia(productId: string, media: wix_stores_backend.Media[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds media items by ID to product options.\\\\r\\\\n     */\\\\r\\\\n    function addProductMediaToChoices(productId: string, mediaChoices: wix_stores_backend.MediaChoices[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds products by ID to a product collection.\\\\r\\\\n     */\\\\r\\\\n    function addProductsToCollection(collectionId: string, productIds: string[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new product.\\\\r\\\\n     */\\\\r\\\\n    function createProduct(productInfo: wix_stores_backend.ProductInfo): Promise<wix_stores_backend.Product>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Deletes an existing product.\\\\r\\\\n     */\\\\r\\\\n    function deleteProduct(productId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Deletes all options for an existing product.\\\\r\\\\n     */\\\\r\\\\n    function deleteProductOptions(productId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the current site visitor's shopping cart.\\\\r\\\\n     */\\\\r\\\\n    function getAbandonedCart(cartId: string): Promise<wix_stores_backend.AbandonedCart>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the current site visitor's shopping cart.\\\\r\\\\n     */\\\\r\\\\n    function getCurrentCart(): Promise<wix_stores_backend.Cart>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the availability of a product based on the specified option choices.\\\\r\\\\n     */\\\\r\\\\n    function getProductOptionsAvailability(productId: string, choices: wix_stores_backend.ProductChoices): Promise<wix_stores_backend.ProductOptionsAvailability>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets a product's available variants based on the specified option choices.\\\\r\\\\n     */\\\\r\\\\n    function getProductVariants(productId: string, options: wix_stores_backend.ProductVariantOptions): Promise<wix_stores_backend.Variants>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes media items by ID from a product.\\\\r\\\\n     */\\\\r\\\\n    function removeProductMedia(productId: string, mediaIds: wix_stores_backend.Media[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes media items by ID from a product's options.\\\\r\\\\n     */\\\\r\\\\n    function removeProductMediaFromChoices(productId: string, mediaChoices: wix_stores_backend.MediaChoices[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes products by ID from a product collection.\\\\r\\\\n     */\\\\r\\\\n    function removeProductsFromCollection(collectionId: string, productIds?: string[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Resets the data (such as the price and the weight) of all variants for a given product to their default values.\\\\r\\\\n     */\\\\r\\\\n    function resetVariantData(productId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates an existing product by ID.\\\\r\\\\n     */\\\\r\\\\n    function updateProductFields(productId: string, productInfo: wix_stores_backend.ProductInfo): Promise<wix_stores_backend.Product>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates the data (such as the price and the weight) of an existing product variant in the store.\\\\r\\\\n     */\\\\r\\\\n    function updateVariantData(productId: string, variantInfo: wix_stores_backend.ProductVariantInfo[]): Promise<wix_stores_backend.ProductVariants>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-users-backend module contains functionality for working with your\\\\r\\\\n *  site's users from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-users-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the current user viewing the site.\\\\r\\\\n     */\\\\r\\\\n    const currentUser: wix_users.User;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Approve a member whose status is `\\\\\\\"Pending\\\\\\\"` using an email address.\\\\r\\\\n     */\\\\r\\\\n    function approveByEmail(email: string): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Approve a member whose status is `\\\\\\\"Pending\\\\\\\"` using an approval token.\\\\r\\\\n     */\\\\r\\\\n    function approveByToken(token: string): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Blocks a member from logging into the site.\\\\r\\\\n     */\\\\r\\\\n    function blockByEmail(email: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Deletes an existing user.\\\\r\\\\n     */\\\\r\\\\n    function deleteUser(userId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a Triggered Email to the specified site member.\\\\r\\\\n     */\\\\r\\\\n    function emailUser(emailId: string, toUser: string, options?: wix_users.TriggeredEmailOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Create a session token for a member authenticated by a 3rd party.\\\\r\\\\n     */\\\\r\\\\n    function generateSessionToken(email: string): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets an existing user by ID.\\\\r\\\\n     */\\\\r\\\\n    function getUser(userId: string): Promise<wix_users_backend.UserInfo>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Logs a user in based on email and password.\\\\r\\\\n     */\\\\r\\\\n    function login(email: string, password: string): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a new site member.\\\\r\\\\n     */\\\\r\\\\n    function register(email: string, password: string, options?: wix_users.RegistrationOptions): Promise<wix_users_backend.RegistrationResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates an existing user by ID.\\\\r\\\\n     */\\\\r\\\\n    function updateUserFields(userId: string, userInfo: wix_users_backend.UserInfo): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-bookings module contains functionality for working with\\\\r\\\\n *  bookings from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-bookings' {\\\\r\\\\n    /**\\\\r\\\\n     * Books a service and processes payment for the service.\\\\r\\\\n     */\\\\r\\\\n    function checkoutBooking(bookingInfo: wix_bookings.BookingInfo, options?: wix_bookings.PaymentOptions): Promise<wix_bookings.BookingResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the valid checkout options for a service's slot.\\\\r\\\\n     */\\\\r\\\\n    function getCheckoutOptions(slotId: string): Promise<wix_bookings.CheckoutOption[]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the available slots for a specific service.\\\\r\\\\n     */\\\\r\\\\n    function getServiceAvailability(serviceId: string, options?: wix_bookings.AvailabilityOptions): Promise<wix_bookings.ServiceAvailability>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-crm module contains functionality for working with\\\\r\\\\n *  [your site's contacts](https://support.wix.com/en/article/about-your-contact-list)\\\\r\\\\n *  from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-crm' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new contact or updates an existing contact.\\\\r\\\\n     */\\\\r\\\\n    function createContact(contactInfo: wix_crm.ContactInfo): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a Triggered Email to the contact.\\\\r\\\\n     */\\\\r\\\\n    function emailContact(emailId: string, toContact: string, options?: wix_users.TriggeredEmailOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-events module contains functionality for working with\\\\r\\\\n *  Wix Events from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-events' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new RSVP form for the specified event.\\\\r\\\\n     */\\\\r\\\\n    function createEventRsvpForm(eventId: string): wix_events.RsvpForm;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-paid-plans module contains functionality for working with\\\\r\\\\n *  paid plans from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-paid-plans' {\\\\r\\\\n    /**\\\\r\\\\n     * Cancels a specific order (subscription) of a plan.\\\\r\\\\n     */\\\\r\\\\n    function cancelOrder(orderId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Orders a paid plan.\\\\r\\\\n     */\\\\r\\\\n    function orderPlan(planId: string): Promise<wix_paid_plans.OrderResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Orders and purchases a paid plan.\\\\r\\\\n     */\\\\r\\\\n    function purchasePlan(planId: string): Promise<wix_paid_plans.PurchaseResult>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-pay module contains functionality for working with\\\\r\\\\n *  payments from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-pay' {\\\\r\\\\n    /**\\\\r\\\\n     * Starts a payment.\\\\r\\\\n     */\\\\r\\\\n    function startPayment(paymentId: string, options?: wix_pay.PaymentOptions): Promise<wix_pay.PaymentResult>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-search module contains functionality for searching a site.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-search' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a search.\\\\r\\\\n     */\\\\r\\\\n    function search(phrase?: string): wix_search.WixSearchBuilder;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-seo module contains functionality for working with\\\\r\\\\n *  your site's SEO from\\\\r\\\\n *  client-side code.\\\\r\\\\n * \\\\r\\\\n *  Because you want the SEO data you set to be read by search engines, you should\\\\r\\\\n *  always set such data in the [`onReady()`]($w.html#onReady) event handler.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-seo' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the page's SEO-related link tags.\\\\r\\\\n     */\\\\r\\\\n    const links: wix_seo.Link[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the page's SEO-related meta tags.\\\\r\\\\n     */\\\\r\\\\n    const metaTags: wix_seo.MetaTag[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the page's structured data.\\\\r\\\\n     */\\\\r\\\\n    const structuredData: any[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the page's title.\\\\r\\\\n     */\\\\r\\\\n    const title: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the page's SEO-related link tags.\\\\r\\\\n     */\\\\r\\\\n    function setLinks(links: wix_seo.Link[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the page's SEO-related meta tags.\\\\r\\\\n     */\\\\r\\\\n    function setMetaTags(The: wix_seo.MetaTag[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the page's structured data.\\\\r\\\\n     */\\\\r\\\\n    function setStructuredData(structuredData: any[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the page's title.\\\\r\\\\n     */\\\\r\\\\n    function setTitle(): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-stores module contains functionality for working with your\\\\r\\\\n *  site's store from from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-stores' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the availability of a product based on the specified option choices.\\\\r\\\\n     */\\\\r\\\\n    function getProductOptionsAvailability(productId: string, choices: wix_stores.ProductChoices): Promise<wix_stores.ProductOptionsAvailability>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets a product's available variants based on the specified option choices.\\\\r\\\\n     */\\\\r\\\\n    function getProductVariants(productId: string, options: wix_stores.ProductVariantOptions): Promise<wix_stores.VariantList>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-users module contains functionality for working with your\\\\r\\\\n *  site's users from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-users' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the current user viewing the site.\\\\r\\\\n     */\\\\r\\\\n    const currentUser: wix_users.User;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Logs the current user into the site using the given session token.\\\\r\\\\n     */\\\\r\\\\n    function applySessionToken(sessionToken: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a Triggered Email to the currently logged-in site member.\\\\r\\\\n     */\\\\r\\\\n    function emailUser(emailId: string, toUser: string, options?: wix_users.TriggeredEmailOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Logs a user in based on email and password.\\\\r\\\\n     */\\\\r\\\\n    function login(email: string, password: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Logs the current user out of the site.\\\\r\\\\n     */\\\\r\\\\n    function logout(): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the function that runs when a user logs in.\\\\r\\\\n     */\\\\r\\\\n    function onLogin(handler: wix_users.LoginHandler): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Prompts the current site visitor with a password reset.\\\\r\\\\n     */\\\\r\\\\n    function promptForgotPassword(language?: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Prompts the current site visitor to log in as a site member.\\\\r\\\\n     */\\\\r\\\\n    function promptLogin(options: wix_users.LoginOptions): Promise<wix_users.User>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a new site member.\\\\r\\\\n     */\\\\r\\\\n    function register(email: string, password: string, options?: wix_users.RegistrationOptions): Promise<wix_users.RegistrationResult>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace $w {\\\\r\\\\n    /**\\\\r\\\\n     * An element for sending and receiving chat messages.\\\\r\\\\n     */\\\\r\\\\n    interface Chatbox extends $w.Element, $w.HiddenMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an element appears on all pages or only on the current page.\\\\r\\\\n         */\\\\r\\\\n        readonly global: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the chatbox is visible or hidden.\\\\r\\\\n         */\\\\r\\\\n        readonly hidden: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is actually visible.\\\\r\\\\n         */\\\\r\\\\n        readonly isVisible: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the chatbox is maximized.\\\\r\\\\n         */\\\\r\\\\n        readonly maximized: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Note: This standard element property is not relevant for Chatbox.\\\\r\\\\n         */\\\\r\\\\n        readonly parent: $w.Node;\\\\r\\\\n        /**\\\\r\\\\n         * Expands the chatbox and focuses it on the specified chat channel.\\\\r\\\\n         */\\\\r\\\\n        focusChannel(channelInfo: $w.Chatbox.ChannelInfo): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a chatbox channel.\\\\r\\\\n         */\\\\r\\\\n        getChannel(channelInfo: $w.Chatbox.ChannelInfo): Promise<$w.Chatbox.Channel>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of available chat channels for a site visitor.\\\\r\\\\n         */\\\\r\\\\n        getChannelList(): Promise<$w.Chatbox.Channel[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Expands the chatbox and sets its [`maximized`](#maximized) property to `true`.\\\\r\\\\n         */\\\\r\\\\n        maximize(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Collapses the chatbox and sets its [`maximized`](#maximized) property to `false`.\\\\r\\\\n         */\\\\r\\\\n        minimize(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when the chatbox is maximized.\\\\r\\\\n         */\\\\r\\\\n        onMaximize(): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a site visitor receives a chat message.\\\\r\\\\n         */\\\\r\\\\n        onMessageReceived(message: $w.Chatbox.Message): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a site visitor sends a chat message.\\\\r\\\\n         */\\\\r\\\\n        onMessageSent(message: $w.Chatbox.Message): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when the chatbox is minimized.\\\\r\\\\n         */\\\\r\\\\n        onMinimize(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Note: This standard element event is not relevant for Chatbox.\\\\r\\\\n         */\\\\r\\\\n        onViewportEnter(handler: $w.EventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Note: This standard element event is not relevant for Chatbox.\\\\r\\\\n         */\\\\r\\\\n        onViewportLeave(handler: $w.EventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Note: This standard element function is not relevant for Chatbox.\\\\r\\\\n         */\\\\r\\\\n        scrollTo(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Sends a chat message from a site visitor.\\\\r\\\\n         */\\\\r\\\\n        sendMessage(messageInfo: $w.Chatbox.MessageInfo): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Chatbox {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a chat channel.\\\\r\\\\n         */\\\\r\\\\n        type Channel = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the channel.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Display information associated with the channel.\\\\r\\\\n             */\\\\r\\\\n            displayData: $w.Chatbox.DisplayData;\\\\r\\\\n            /**\\\\r\\\\n             * An array of messages sent over the channel. Currently only the last message is included.\\\\r\\\\n             */\\\\r\\\\n            messages: $w.Chatbox.Message[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about a chat channel.\\\\r\\\\n         */\\\\r\\\\n        type ChannelInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of a chat channel.\\\\r\\\\n             */\\\\r\\\\n            channelId?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of chat channel.\\\\r\\\\n             *  One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Focused\\\\\\\"`: Currently focused channel.\\\\r\\\\n             *  + `\\\\\\\"Business\\\\\\\"`: Business channel.\\\\r\\\\n             */\\\\r\\\\n            type?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing display information associated with a [`Channel`](#channel).\\\\r\\\\n         */\\\\r\\\\n        type DisplayData = {\\\\r\\\\n            /**\\\\r\\\\n             * The image associated with the channel.\\\\r\\\\n             *  One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + For private social channels, the image associated with the site member's account. If there is no image associated with the account, defaults to the avatar image.\\\\r\\\\n             *  + For group social channels, the image associated with the chat group.\\\\r\\\\n             *  + For business channels, `image` is not currently supported.\\\\r\\\\n             */\\\\r\\\\n            image: string;\\\\r\\\\n            /**\\\\r\\\\n             * For social channels, the member's name or chat group name. For business channels, the site's [display name](wix-site-backend.generalInfo.html#getSiteDisplayName).\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Only supported for business channels. Initials of the site's business.\\\\r\\\\n             */\\\\r\\\\n            initials: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about a chat message.\\\\r\\\\n         */\\\\r\\\\n        type Message = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the channel on which the message was sent.\\\\r\\\\n             */\\\\r\\\\n            channelId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of message. Currently only `TEXT` is supported.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * First 250 characters of the chat message. Currently only text is included in the summary.\\\\r\\\\n             */\\\\r\\\\n            summary: string;\\\\r\\\\n            /**\\\\r\\\\n             * The sender's member ID. For a message sent from the site's business, the site owner's member ID.\\\\r\\\\n             */\\\\r\\\\n            participantId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time the message was sent.\\\\r\\\\n             */\\\\r\\\\n            createdAt: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Content of the message.\\\\r\\\\n             */\\\\r\\\\n            payload: $w.Chatbox.MessagePayload;\\\\r\\\\n            /**\\\\r\\\\n             * An object representing additional contextual message information included in a chat message. Only relevant for messages sent using the backend [`sendMessage()`](wix-chat-backend.html#sendMessage) function. Site visitors do not see metadata.\\\\r\\\\n             */\\\\r\\\\n            metadata?: any;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a chat message to be sent.\\\\r\\\\n         */\\\\r\\\\n        type MessageInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * The text to be sent in the message.\\\\r\\\\n             */\\\\r\\\\n            messageText: string;\\\\r\\\\n            /**\\\\r\\\\n             * The ID of the channel over which the message is sent. If empty, message is sent to the site's business.\\\\r\\\\n             */\\\\r\\\\n            channelId?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * The content of a chat message.\\\\r\\\\n         */\\\\r\\\\n        type MessagePayload = {\\\\r\\\\n            /**\\\\r\\\\n             * Text of the chat message.\\\\r\\\\n             */\\\\r\\\\n            text: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A post page for a specific blog post.\\\\r\\\\n     */\\\\r\\\\n    interface PostPage extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the all the information associated with the current blog post.\\\\r\\\\n         */\\\\r\\\\n        getPost(): Promise<$w.PostPage.BlogPost>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace PostPage {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a blog post on a post page.\\\\r\\\\n         */\\\\r\\\\n        type BlogPost = {\\\\r\\\\n            /**\\\\r\\\\n             * Post ID.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Post title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Text of the post.\\\\r\\\\n             */\\\\r\\\\n            plainContent: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the post was originally published.\\\\r\\\\n             */\\\\r\\\\n            publishedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Number of times the post was viewed.\\\\r\\\\n             */\\\\r\\\\n            viewCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of likes the post received.\\\\r\\\\n             */\\\\r\\\\n            likeCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of comments the post received.\\\\r\\\\n             */\\\\r\\\\n            commentCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Date the post was most recently published.\\\\r\\\\n             */\\\\r\\\\n            lastPublishedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the cover image is displayed in the post.\\\\r\\\\n             */\\\\r\\\\n            coverImageDisplayed: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Estimated time in minutes required to read the post.\\\\r\\\\n             */\\\\r\\\\n            timeToRead: number;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the post was pinned to the top of the blog feed.\\\\r\\\\n             */\\\\r\\\\n            pinned: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the post is set as featured in the post settings. Featured posts appear in custom blog feeds.\\\\r\\\\n             */\\\\r\\\\n            featured: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * List of all hashtags in the post.\\\\r\\\\n             */\\\\r\\\\n            hashtags: string[];\\\\r\\\\n            /**\\\\r\\\\n             * The post's cover [image]($w.Image.html#src).\\\\r\\\\n             */\\\\r\\\\n            coverImage: string;\\\\r\\\\n            /**\\\\r\\\\n             * Relative URL of the post page on your published site.\\\\r\\\\n             */\\\\r\\\\n            postPageUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * A few lines of text that appear in the blog feed. Defined in Post Settings or default of first 160 characters of the post.\\\\r\\\\n             */\\\\r\\\\n            excerpt: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The menu in a user profile.\\\\r\\\\n     */\\\\r\\\\n    interface AccountNavBar extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Anchors\\\\r\\\\n     *  are invisible position markers which you can place anywhere on your site.\\\\r\\\\n     *  They are a useful way to direct users to important sections.\\\\r\\\\n     */\\\\r\\\\n    interface Anchor extends $w.Node, $w.ViewportMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the name of an anchor.\\\\r\\\\n         */\\\\r\\\\n        readonly name: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for background images in certain elements.\\\\r\\\\n     */\\\\r\\\\n    interface Background {\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the element's background.\\\\r\\\\n         */\\\\r\\\\n        readonly background: $w.Background.BackgroundOptions;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Background {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `background` property that contains the background options.\\\\r\\\\n         */\\\\r\\\\n        type BackgroundOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * The file location of the background image or video.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Container boxes\\\\r\\\\n     *  are used to structure your site. You can attach\\\\r\\\\n     *  any element to a container box and move the box around, which is a useful\\\\r\\\\n     *  way to to keep elements together. Some actions performed on a box affect the\\\\r\\\\n     *  elements it contains. For example, [hiding](#hide) a box also effectively\\\\r\\\\n     *  hides all the elements in the box, although the values of the\\\\r\\\\n     *  [hidden](#hidden) properties of the elements contained in the box do not change.\\\\r\\\\n     */\\\\r\\\\n    interface Box extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin, $w.ContainableMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the box's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A text button or an icon button.\\\\r\\\\n     */\\\\r\\\\n    interface Button extends $w.Element, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.LinkableMixin, $w.ClickableMixin, $w.StyleMixin, $w.LabelMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the label of a text button.\\\\r\\\\n         */\\\\r\\\\n        label: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the button's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Checkboxes are used for a single binary choice.\\\\r\\\\n     */\\\\r\\\\n    interface Checkbox extends $w.FormElement, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin, $w.CheckedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a checkbox is checked.\\\\r\\\\n         */\\\\r\\\\n        checked: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Determines if a checkbox is required to be checked.\\\\r\\\\n         */\\\\r\\\\n        required: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the checkbox's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a checkbox's value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Checkbox groups are used for selecting any number of the given\\\\r\\\\n     *  options. Checkbox groups consist of a list of [options](#Option). Each\\\\r\\\\n     *  [option](#Option) contains a label, which is what the user sees, and a\\\\r\\\\n     *  value, which is what is used in code and stored in your collections.\\\\r\\\\n     */\\\\r\\\\n    interface CheckboxGroup extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the options of a checkbox group.\\\\r\\\\n         */\\\\r\\\\n        options: $w.CheckboxGroup.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the indices of the selected options.\\\\r\\\\n         */\\\\r\\\\n        selectedIndices: number[];\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the checkbox group's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the selected options.\\\\r\\\\n         */\\\\r\\\\n        value: string[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace CheckboxGroup {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `options` property that contains the attributes of checkbox item.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * The value of the checkbox option. This is what you use in code and is what is stored in your collections.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * The label of the checkbox option. This is what a user sees.\\\\r\\\\n             */\\\\r\\\\n            label?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface CheckedMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether the element is checked or not.\\\\r\\\\n         */\\\\r\\\\n        checked: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface ClickableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element is clicked.\\\\r\\\\n         */\\\\r\\\\n        onClick(handler: $w.MouseEventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element is double-clicked.\\\\r\\\\n         */\\\\r\\\\n        onDblClick(handler: $w.MouseEventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be collapsed.\\\\r\\\\n     * \\\\r\\\\n     *  To learn about the behavior of a collapsed element,\\\\r\\\\n     *  see the [`collapsed`](#collapsed) property.\\\\r\\\\n     */\\\\r\\\\n    interface CollapsedMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is collapsed or expanded.\\\\r\\\\n         */\\\\r\\\\n        readonly collapsed: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Collapses the element and sets its `collapsed` property to `true`.\\\\r\\\\n         */\\\\r\\\\n        collapse(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Expands the element and sets its `collapsed` property to `false`.\\\\r\\\\n         */\\\\r\\\\n        expand(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A `Column` is a component part of a `ColumnStrip`.\\\\r\\\\n     */\\\\r\\\\n    interface Column extends $w.Element, $w.HiddenCollapsedMixin, $w.Background, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A `ColumnStrip` is a strip of `Column` elements.\\\\r\\\\n     */\\\\r\\\\n    interface ColumnStrip extends $w.Element, $w.Background, $w.HiddenCollapsedMixin, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the column strip's background, such as its image or video source.\\\\r\\\\n         */\\\\r\\\\n        readonly background: $w.Document.BackgroundOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of all the columns contained in the column strip.\\\\r\\\\n         */\\\\r\\\\n        readonly columns: $w.Column[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can contain other elements.\\\\r\\\\n     *  Some elements, such as pages, headers, footers, and boxes, can contain\\\\r\\\\n     *  other elements. This occurs when you drag an element onto a container\\\\r\\\\n     *  element and attach it.\\\\r\\\\n     *  These attached elements are considered the parent element's children. Some\\\\r\\\\n     *  actions performed on the parent, such as [`hiding`]($w.HiddenMixin.html#hide),\\\\r\\\\n     *  affect the element's children as well.\\\\r\\\\n     */\\\\r\\\\n    interface ContainableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Gets an array of the elements that are contained within the element.\\\\r\\\\n         */\\\\r\\\\n        readonly children: $w.Element[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A container for Repeater items.\\\\r\\\\n     */\\\\r\\\\n    interface Container extends $w.Element, $w.HiddenCollapsedMixin, $w.Background, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A `DatePicker` is used for entering dates. It lets users populate a\\\\r\\\\n     *  date field by picking a date using a calendar popup.\\\\r\\\\n     */\\\\r\\\\n    interface DatePicker extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.ReadOnlyMixin, $w.ClickableMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the dates that a user cannot select.\\\\r\\\\n         */\\\\r\\\\n        disabledDates: Date[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the days of the week that a user cannot select.\\\\r\\\\n         */\\\\r\\\\n        disabledDaysOfWeek: number[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the latest date that a user can select.\\\\r\\\\n         */\\\\r\\\\n        maxDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the earliest date that a user can select.\\\\r\\\\n         */\\\\r\\\\n        minDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the date picker.\\\\r\\\\n         */\\\\r\\\\n        value: Date;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface DisabledMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is enabled or disabled.\\\\r\\\\n         */\\\\r\\\\n        readonly enabled: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Disables the element and sets its `enabled` property to `false`.\\\\r\\\\n         */\\\\r\\\\n        disable(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Enables the element and sets its `enabled` property to `true`.\\\\r\\\\n         */\\\\r\\\\n        enable(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A complete web page, which consists of a Header, Page, and Footer.\\\\r\\\\n     */\\\\r\\\\n    interface Document {\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the document's background, such as its image or video source.\\\\r\\\\n         */\\\\r\\\\n        readonly background: $w.Document.BackgroundOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the document's Header, Page, and Footer.\\\\r\\\\n         */\\\\r\\\\n        readonly children: $w.Node[];\\\\r\\\\n        /**\\\\r\\\\n         * Gets the document's type.\\\\r\\\\n         */\\\\r\\\\n        readonly type: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Document {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `background` property that contains the background options.\\\\r\\\\n         */\\\\r\\\\n        type BackgroundOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * The file location of the background image.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Dropdowns are used for selecting one of a number of options.\\\\r\\\\n     *  They are especially useful when there are too many options to display using\\\\r\\\\n     *  [radio buttons]($w.RadioButtonGroup.html). Dropdowns consist of a list\\\\r\\\\n     *  of [options](#Option). Each [option](#Option) contains a label, which is\\\\r\\\\n     *  what the user sees, and a value, which is what is used in code and stored in\\\\r\\\\n     *  you collections.\\\\r\\\\n     */\\\\r\\\\n    interface Dropdown extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the options in a dropdown.\\\\r\\\\n         */\\\\r\\\\n        options: $w.Dropdown.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the dropdown's placeholder text.\\\\r\\\\n         */\\\\r\\\\n        placeholder: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the index of the selected option.\\\\r\\\\n         */\\\\r\\\\n        selectedIndex: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the dropdown's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an element's value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Dropdown {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `options` property that contains the attributes of a dropdown list item.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * The value of the dropdown option. This is what you use in code and is what is stored in your collections.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * The label of the dropdown option. This is what a user sees.\\\\r\\\\n             */\\\\r\\\\n            label?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Use effect options to customize an effect when showing or hiding an element.\\\\r\\\\n     */\\\\r\\\\n    interface EffectOptions {\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace EffectOptions {\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"arc\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type ArcEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"bounce\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type BounceEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n            intensity: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"fade\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FadeEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"flip\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FlipEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"float\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FloatEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"fly\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FlyEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"fold\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FoldEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"glide\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type GlideEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            angle: number;\\\\r\\\\n            distance: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"puff\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type PuffEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"roll\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type RollEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"slide\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type SlideEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"spin\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type SpinEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n            cycles: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"turn\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type TurnEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"zoom\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type ZoomEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides basic functionality for elements.\\\\r\\\\n     */\\\\r\\\\n    interface Element extends $w.Node, $w.ViewportMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an element is currently in the DOM structure.\\\\r\\\\n         */\\\\r\\\\n        readonly rendered: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the mouse pointer is moved\\\\r\\\\n         *  onto the element.\\\\r\\\\n         */\\\\r\\\\n        onMouseIn(handler: $w.MouseEventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the mouse pointer is moved\\\\r\\\\n         *  off of the element.\\\\r\\\\n         */\\\\r\\\\n        onMouseOut(handler: $w.MouseEventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Events are fired when certain actions occur to elements.\\\\r\\\\n     */\\\\r\\\\n    interface Event {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the context of the event on a repeated element.\\\\r\\\\n         */\\\\r\\\\n        readonly context: $w.Event.EventContext;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the element that the event was fired on.\\\\r\\\\n         */\\\\r\\\\n        readonly target: $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the type of event that was fired.\\\\r\\\\n         */\\\\r\\\\n        readonly type: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Event {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about the context in which an event was fired.\\\\r\\\\n         */\\\\r\\\\n        type EventContext = {\\\\r\\\\n            /**\\\\r\\\\n             * `\\\\\\\"GLOBAL_SCOPE\\\\\\\"` for events fired outside\\\\r\\\\n             *  of repeaters, or `\\\\\\\"COMPONENT_SCOPE\\\\\\\"` for events fired from repeaters.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the repeater item where the\\\\r\\\\n             *  event was fired from.\\\\r\\\\n             */\\\\r\\\\n            itemId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can set and lose focus.\\\\r\\\\n     * \\\\r\\\\n     *  The element on the page that is currently active is the element in focus.\\\\r\\\\n     *  Only one element on the page can have focus at any given moment.\\\\r\\\\n     *  Typically, an element exhibits a visual cue, such as a subtle outline,\\\\r\\\\n     *  indicating that it is in focus. The element in focus receives keystroke\\\\r\\\\n     *  events if the user causes any.\\\\r\\\\n     * \\\\r\\\\n     *  An element receives focus and loses focus (blurs) through user actions,\\\\r\\\\n     *  such as clicking and tabbing, or programmatically, using the\\\\r\\\\n     *  [focus( )](#focus) and [blur( )](#blur) functions.\\\\r\\\\n     */\\\\r\\\\n    interface FocusMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Removes focus from the element.\\\\r\\\\n         */\\\\r\\\\n        blur(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Places focus on the element.\\\\r\\\\n         */\\\\r\\\\n        focus(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element loses focus.\\\\r\\\\n         */\\\\r\\\\n        onBlur(handler: $w.EventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element receives focus.\\\\r\\\\n         */\\\\r\\\\n        onFocus(handler: $w.EventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The footer is the area of your site that appears at the bottom and\\\\r\\\\n     *  throughout all of your pages.\\\\r\\\\n     */\\\\r\\\\n    interface Footer extends $w.Element, $w.ClickableMixin, $w.ContainableMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the footer's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality related to user input elements.\\\\r\\\\n     */\\\\r\\\\n    interface FormElement extends $w.Element, $w.ValidatableMixin, $w.ValueMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A gallery for displaying multiple items.\\\\r\\\\n     */\\\\r\\\\n    interface Gallery extends $w.Element, $w.HiddenCollapsedMixin, $w.PlayableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the action that occurs when an item in the gallery is clicked.\\\\r\\\\n         */\\\\r\\\\n        clickAction: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the index of the gallery's current item.\\\\r\\\\n         */\\\\r\\\\n        readonly currentIndex: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the current item.\\\\r\\\\n         */\\\\r\\\\n        readonly currentItem: $w.Gallery.ImageItem | $w.Gallery.VideoItem;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the gallery's capabilities.\\\\r\\\\n         */\\\\r\\\\n        readonly galleryCapabilities: $w.Gallery.GalleryCapabilities;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the items in a gallery.\\\\r\\\\n         */\\\\r\\\\n        items: $w.Gallery.ImageItem[] | $w.Gallery.VideoItem[];\\\\r\\\\n        /**\\\\r\\\\n         * Determines if a gallery's navigation arrows are shown.\\\\r\\\\n         */\\\\r\\\\n        showNavigationButtons: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a gallery's current item changes.\\\\r\\\\n         */\\\\r\\\\n        onCurrentItemChanged(handler: $w.GalleryItemChangedEventHandler): $w.Gallery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an item in a gallery is\\\\r\\\\n         *  clicked.\\\\r\\\\n         */\\\\r\\\\n        onItemClicked(handler: $w.GalleryItemClickedEventHandler): $w.Gallery;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Gallery {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `galleryCapabilities` property that contains the capabilities of a gallery.\\\\r\\\\n         */\\\\r\\\\n        type GalleryCapabilities = {\\\\r\\\\n            /**\\\\r\\\\n             * Indicates if the gallery supports play operations.\\\\r\\\\n             */\\\\r\\\\n            isPlayable: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates if the gallery supports the notion of a current item.\\\\r\\\\n             */\\\\r\\\\n            hasCurrentItem: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates if the gallery supports navigation buttons.\\\\r\\\\n             */\\\\r\\\\n            hasNavigationButtons: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the Gallery properties `items` and `currentItem` to represent a single gallery image.\\\\r\\\\n         */\\\\r\\\\n        type ImageItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Item type. Value is `\\\\\\\"image\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Item slug.\\\\r\\\\n             */\\\\r\\\\n            slug: string;\\\\r\\\\n            /**\\\\r\\\\n             * Image source URL.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n            /**\\\\r\\\\n             * Image description. Descriptions over 100 characters are truncated.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Image title.\\\\r\\\\n             */\\\\r\\\\n            title?: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the image's clickable link. See [here]($w.LinkableMixin.html#link) for more information about links.\\\\r\\\\n             */\\\\r\\\\n            link?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the Gallery properties `items` and `currentItem` to represent a single gallery video.\\\\r\\\\n         */\\\\r\\\\n        type VideoItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Item type. Value is `\\\\\\\"video\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Item slug.\\\\r\\\\n             */\\\\r\\\\n            slug: string;\\\\r\\\\n            /**\\\\r\\\\n             * Video source URL.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n            /**\\\\r\\\\n             * Video description. Descriptions over 100 characters are truncated.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Video title.\\\\r\\\\n             */\\\\r\\\\n            title?: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the video's clickable link. See [here]($w.LinkableMixin.html#link) for more information about links.\\\\r\\\\n             */\\\\r\\\\n            link?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Video thumbnail URL.\\\\r\\\\n             */\\\\r\\\\n            thumbnail?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a gallery moves to a new image.\\\\r\\\\n     */\\\\r\\\\n    interface GalleryItemChangedEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the gallery item.\\\\r\\\\n         */\\\\r\\\\n        readonly item: $w.Gallery.ImageItem | $w.Gallery.VideoItem;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the gallery item's index.\\\\r\\\\n         */\\\\r\\\\n        readonly itemIndex: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when an image in a gallery is clicked.\\\\r\\\\n     */\\\\r\\\\n    interface GalleryItemClickedEvent extends $w.GalleryItemChangedEvent, $w.Event{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A [Google Map element](https://www.wix.com/support/html5/article/adding-google-maps)\\\\r\\\\n     *  that allows you to display a given location.\\\\r\\\\n     */\\\\r\\\\n    interface GoogleMap extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the location information of a map's marked location.\\\\r\\\\n         */\\\\r\\\\n        location: $w.GoogleMap.MapLocation;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace GoogleMap {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `location` property that\\\\r\\\\n         *  contains the attributes of a marked map location.\\\\r\\\\n         */\\\\r\\\\n        type MapLocation = {\\\\r\\\\n            /**\\\\r\\\\n             * The latitude of the location. Must be between -90 and 90.\\\\r\\\\n             */\\\\r\\\\n            latitude: number;\\\\r\\\\n            /**\\\\r\\\\n             * The longitude of the location. Must be between -180 and 180.\\\\r\\\\n             */\\\\r\\\\n            longitude: number;\\\\r\\\\n            /**\\\\r\\\\n             * The description of the location.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The header is the area of your site that appears at the top and\\\\r\\\\n     *  throughout all of your pages.\\\\r\\\\n     */\\\\r\\\\n    interface Header extends $w.Element, $w.ClickableMixin, $w.ContainableMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the header's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for all elements that can be hidden or collapsed.\\\\r\\\\n     */\\\\r\\\\n    interface HiddenCollapsedElement extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for all elements that can be hidden or collapsed.\\\\r\\\\n     */\\\\r\\\\n    interface HiddenCollapsedMixin extends $w.HiddenMixin, $w.CollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be hidden.\\\\r\\\\n     * \\\\r\\\\n     *  To learn about the behavior of a hidden element,\\\\r\\\\n     *  see the [`hidden`](#hidden) property.\\\\r\\\\n     */\\\\r\\\\n    interface HiddenMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is visible or hidden.\\\\r\\\\n         */\\\\r\\\\n        readonly hidden: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is actually visible.\\\\r\\\\n         */\\\\r\\\\n        readonly isVisible: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Hides the element and sets its `hidden` property\\\\r\\\\n         *  to `true`, using an effect if specified.\\\\r\\\\n         */\\\\r\\\\n        hide(effectName?: string, effectOptions?: $w.EffectOptions.ArcEffectOptions | $w.EffectOptions.BounceEffectOptions | $w.EffectOptions.FadeEffectOptions | $w.EffectOptions.FlipEffectOptions | $w.EffectOptions.FloatEffectOptions | $w.EffectOptions.FlyEffectOptions | $w.EffectOptions.FoldEffectOptions | $w.EffectOptions.GlideEffectOptions | $w.EffectOptions.PuffEffectOptions | $w.EffectOptions.RollEffectOptions | $w.EffectOptions.SlideEffectOptions | $w.EffectOptions.SpinEffectOptions | $w.EffectOptions.TurnEffectOptions | $w.EffectOptions.ZoomEffectOptions): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Shows the element and sets its `hidden` property\\\\r\\\\n         *  to `false`, using an effect if specified.\\\\r\\\\n         */\\\\r\\\\n        show(effectName?: string, effectOptions?: $w.EffectOptions.ArcEffectOptions | $w.EffectOptions.BounceEffectOptions | $w.EffectOptions.FadeEffectOptions | $w.EffectOptions.FlipEffectOptions | $w.EffectOptions.FloatEffectOptions | $w.EffectOptions.FlyEffectOptions | $w.EffectOptions.FoldEffectOptions | $w.EffectOptions.GlideEffectOptions | $w.EffectOptions.PuffEffectOptions | $w.EffectOptions.RollEffectOptions | $w.EffectOptions.SlideEffectOptions | $w.EffectOptions.SpinEffectOptions | $w.EffectOptions.TurnEffectOptions | $w.EffectOptions.ZoomEffectOptions): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A container for internal or external HTML code. Messages can be sent\\\\r\\\\n     *  from your page code to the code in an HTML component and from the HTML\\\\r\\\\n     *  component to your page code using the [`postMessage()`](#postMessage) and\\\\r\\\\n     *  [`onMessage()`](#onMessage) functions. To learn more about what code an HTML\\\\r\\\\n     *  component can hold, see here.\\\\r\\\\n     * \\\\r\\\\n     *  For an overview of working with an HTML Component using code, see Working with the HTML Element.\\\\r\\\\n     */\\\\r\\\\n    interface HtmlComponent extends $w.IFrame{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether the HTML Component displays scrollbars.\\\\r\\\\n         */\\\\r\\\\n        scrolling: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the URL of the HTML Component's code.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Allows the HTML Component to be put into full screen mode.\\\\r\\\\n         */\\\\r\\\\n        allowFullScreen(): $w.HtmlComponent;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the HTML Component\\\\r\\\\n         *  sends a message.\\\\r\\\\n         */\\\\r\\\\n        onMessage(handler: $w.HtmlComponentMessageEventHandler): $w.HtmlComponent;\\\\r\\\\n        /**\\\\r\\\\n         * Sends a message to the HTML Component.\\\\r\\\\n         */\\\\r\\\\n        postMessage(message: string | number | boolean | any | any[]): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when the code in an HtmlComponent sends a message.\\\\r\\\\n     */\\\\r\\\\n    interface HtmlComponentMessageEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the event data.\\\\r\\\\n         */\\\\r\\\\n        readonly data: $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for iframe-based elements, such as `HtmlComponent`.\\\\r\\\\n     */\\\\r\\\\n    interface IFrame extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a user hovers over a star on a ratings input component.\\\\r\\\\n     */\\\\r\\\\n    interface IconMouseInEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the display label that corresponds to the icon that the mouse entered.\\\\r\\\\n         */\\\\r\\\\n        readonly label: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the value (1-5) that corresponds to the icon that the mouse entered.\\\\r\\\\n         */\\\\r\\\\n        readonly value: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Images are images stored in the Media Manager\\\\r\\\\n     *  or retrieved from an external web location.\\\\r\\\\n     * \\\\r\\\\n     *  The URL formats for images are:\\\\r\\\\n     * \\\\r\\\\n     *  + Images from the Media Manager: `wix:image://v1//#originWidth=&originHeight=[&watermark=]`\\\\r\\\\n     *  + Images from the web: `http(s)://`\\\\r\\\\n     */\\\\r\\\\n    interface Image extends $w.Element, $w.HiddenCollapsedMixin, $w.LinkableMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an image's alt text.\\\\r\\\\n         */\\\\r\\\\n        alt: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the action that occurs when an image is clicked.\\\\r\\\\n         */\\\\r\\\\n        clickAction: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets how an image is placed inside an image element.\\\\r\\\\n         */\\\\r\\\\n        fitMode: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the file location of the image.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an image's tooltip.\\\\r\\\\n         */\\\\r\\\\n        tooltip: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when the keyboard is pressed.\\\\r\\\\n     */\\\\r\\\\n    interface KeyboardEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the Option key on a Mac or Alt key on a PC was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly altKey: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the Control (Ctrl) key was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly ctrlKey: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a string representation of the key that was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly key: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the ⌘ Command key on a Mac or ⊞ Windows key on a PC\\\\r\\\\n         *  was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly metaKey: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the Shift key was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly shiftKey: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface LabelMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the label of an element.\\\\r\\\\n         */\\\\r\\\\n        label: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can acts as links.\\\\r\\\\n     */\\\\r\\\\n    interface LinkableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the element's link.\\\\r\\\\n         */\\\\r\\\\n        link: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the target of the element's link.\\\\r\\\\n         */\\\\r\\\\n        target: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A container for media items.\\\\r\\\\n     */\\\\r\\\\n    interface MediaBox extends $w.Element, $w.HiddenCollapsedMixin, $w.Background{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A menu container is a container that holds the elements in a\\\\r\\\\n     *  mobile menu. You can add and remove elements to the container to customize\\\\r\\\\n     *  your site's mobile menu. The menu only appears in the mobile version of your\\\\r\\\\n     *  site.\\\\r\\\\n     */\\\\r\\\\n    interface MenuContainer extends $w.Element{\\\\r\\\\n        /**\\\\r\\\\n         * Closes a mobile menu.\\\\r\\\\n         */\\\\r\\\\n        close(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Opens a mobile menu.\\\\r\\\\n         */\\\\r\\\\n        open(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when the mouse is clicked.\\\\r\\\\n     */\\\\r\\\\n    interface MouseEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  left edge of the browser's viewable area.\\\\r\\\\n         */\\\\r\\\\n        readonly clientX: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  top edge of the browser's viewable area.\\\\r\\\\n         */\\\\r\\\\n        readonly clientY: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  left edge of the element that triggered this event.\\\\r\\\\n         */\\\\r\\\\n        readonly offsetX: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  top edge of the element that triggered this event.\\\\r\\\\n         */\\\\r\\\\n        readonly offsetY: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  left edge of the page.\\\\r\\\\n         */\\\\r\\\\n        readonly pageX: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  top edge of the page.\\\\r\\\\n         */\\\\r\\\\n        readonly pageY: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  left edge of the screen or screens.\\\\r\\\\n         */\\\\r\\\\n        readonly screenX: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  top edge of the screen or screens.\\\\r\\\\n         */\\\\r\\\\n        readonly screenY: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Multi-state boxes are containers for states.\\\\r\\\\n     */\\\\r\\\\n    interface MultiStateBox extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the multi-state box's current state.\\\\r\\\\n         */\\\\r\\\\n        readonly currentState: $w.State;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of all the states contained in the multi-state box.\\\\r\\\\n         */\\\\r\\\\n        readonly states: $w.State[];\\\\r\\\\n        /**\\\\r\\\\n         * Change the multi-state box's current state to a specific state.\\\\r\\\\n         */\\\\r\\\\n        changeState(stateReference: string | $w.State): Promise<$w.State>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the multi-state box moves to a new state.\\\\r\\\\n         */\\\\r\\\\n        onChange(eventHandler: $w.EventHandler): $w.MultiStateBox;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides basic functionality for all Wix objects, including objects\\\\r\\\\n     *  that are not [elements]($w.Element.html).\\\\r\\\\n     */\\\\r\\\\n    interface Node {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an element appears on all pages or only on the current page.\\\\r\\\\n         */\\\\r\\\\n        readonly global: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the element's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the element's parent element.\\\\r\\\\n         */\\\\r\\\\n        readonly parent: $w.Node;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the element's type.\\\\r\\\\n         */\\\\r\\\\n        readonly type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Scrolls the page to the element using an animation.\\\\r\\\\n         */\\\\r\\\\n        scrollTo(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A page is a web page that can contain other elements.\\\\r\\\\n     */\\\\r\\\\n    interface Page extends $w.Element, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the page's SEO description.\\\\r\\\\n         */\\\\r\\\\n        readonly description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the page's keywords.\\\\r\\\\n         */\\\\r\\\\n        readonly keywords: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Gets the page's title.\\\\r\\\\n         */\\\\r\\\\n        readonly title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the page is included in the site's menu.\\\\r\\\\n         */\\\\r\\\\n        readonly visibleInMenu: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be played.\\\\r\\\\n     */\\\\r\\\\n    interface PlayableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is currently playing.\\\\r\\\\n         */\\\\r\\\\n        readonly isPlaying: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Moves to the next item.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<$w.Element>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is paused.\\\\r\\\\n         */\\\\r\\\\n        onPause(handler: $w.EventHandler): $w.Gallery & $w.Slideshow;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is started or restarted.\\\\r\\\\n         */\\\\r\\\\n        onPlay(handler: $w.EventHandler): $w.Gallery & $w.Slideshow;\\\\r\\\\n        /**\\\\r\\\\n         * Pauses playback.\\\\r\\\\n         */\\\\r\\\\n        pause(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Begins or resumes playback.\\\\r\\\\n         */\\\\r\\\\n        play(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Moves to the previous image or slide.\\\\r\\\\n         */\\\\r\\\\n        previous(): Promise<$w.Element>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A [quick action bar](https://support.wix.com/en/article/adding-and-setting-up-the-quick-action-bar-on-your-mobile-site)\\\\r\\\\n     *  helps your visitors contact you instantly from their mobile devices. You can\\\\r\\\\n     *  choose which actions appear on it and customize the design to match your site.\\\\r\\\\n     */\\\\r\\\\n    interface QuickActionBar extends $w.HiddenCollapsedMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a quick action bar's alignment.\\\\r\\\\n         */\\\\r\\\\n        alignment: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a quick action bar's color scheme.\\\\r\\\\n         */\\\\r\\\\n        colorScheme: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a quick action bar's color scheme is inverted.\\\\r\\\\n         */\\\\r\\\\n        invertColorScheme: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a quick action bar's labels are shown.\\\\r\\\\n         */\\\\r\\\\n        showLabels: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an item in a quick action bar is\\\\r\\\\n         *  clicked.\\\\r\\\\n         */\\\\r\\\\n        onItemClicked(handler: $w.QuickActionBarItemClickedEventHandler): $w.QuickActionBar;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a quick action bar item is clicked.\\\\r\\\\n     */\\\\r\\\\n    interface QuickActionBarItemClickedEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the gallery item.\\\\r\\\\n         */\\\\r\\\\n        readonly item: $w.QuickActionBarItemClickedEvent.QuickActionBarItem;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the quick action bar item's index.\\\\r\\\\n         */\\\\r\\\\n        readonly itemIndex: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace QuickActionBarItemClickedEvent {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a quick action bar item.\\\\r\\\\n         */\\\\r\\\\n        type QuickActionBarItem = {\\\\r\\\\n            /**\\\\r\\\\n             * The quick action bar item type.\\\\r\\\\n             */\\\\r\\\\n            itemType: string;\\\\r\\\\n            /**\\\\r\\\\n             * The quick action bar item label.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n            /**\\\\r\\\\n             * The quick action bar item link.\\\\r\\\\n             */\\\\r\\\\n            link: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Radio button groups are used for selecting one of a number of\\\\r\\\\n     *  options. Radio button groups consist of a list of [options](#Option). Each\\\\r\\\\n     *  [option](#Option) contains a label, which is what the user sees, and a\\\\r\\\\n     *  value, which is what is used in code and stored in you collections.\\\\r\\\\n     */\\\\r\\\\n    interface RadioButtonGroup extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the options in a radio button group.\\\\r\\\\n         */\\\\r\\\\n        options: $w.RadioButtonGroup.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the index of the selected option.\\\\r\\\\n         */\\\\r\\\\n        selectedIndex: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the radio button group's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the selected option.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace RadioButtonGroup {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `options` property that contains the attributes of a radio button item.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * The value of the radio button option. This is what you use in code and is what is stored in your collections.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * The label of the radio button option. This is what a user sees.\\\\r\\\\n             */\\\\r\\\\n            label?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for input elements which support readonly mode.\\\\r\\\\n     */\\\\r\\\\n    interface ReadOnlyMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets if a user can modify the value of the input element.\\\\r\\\\n         */\\\\r\\\\n        readOnly: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A repeating layout.\\\\r\\\\n     */\\\\r\\\\n    interface Repeater extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the repeater data.\\\\r\\\\n         */\\\\r\\\\n        data: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Runs a function for each repeated item.\\\\r\\\\n         */\\\\r\\\\n        forEachItem(callback: $w.ForItemCallback): void;\\\\r\\\\n        /**\\\\r\\\\n         * Runs a function for each repeated item with the given IDs.\\\\r\\\\n         */\\\\r\\\\n        forItems(itemIds: string[], callback: $w.ForItemCallback): void;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the function that runs when a new repeated item is created.\\\\r\\\\n         */\\\\r\\\\n        onItemReady(handler: $w.ItemReadyEventHandler): $w.Repeater;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the function that runs when a repeated item is removed.\\\\r\\\\n         */\\\\r\\\\n        onItemRemoved(handler: $w.ItemRemovedEventHandler): $w.Repeater;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for input elements can be required to have a value.\\\\r\\\\n     */\\\\r\\\\n    interface RequiredMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether an input element is required to have a value.\\\\r\\\\n         */\\\\r\\\\n        required: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A `Slide` from a `Slideshow` that can contain other elements.\\\\r\\\\n     */\\\\r\\\\n    interface Slide extends $w.Element, $w.Background, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the slide's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the name of the slide.\\\\r\\\\n         */\\\\r\\\\n        readonly name: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Slideshows are playable containers for slides.\\\\r\\\\n     */\\\\r\\\\n    interface Slideshow extends $w.Element, $w.HiddenCollapsedMixin, $w.PlayableMixin, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the index of the slideshow's current slide.\\\\r\\\\n         */\\\\r\\\\n        readonly currentIndex: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the slideshow's current slide.\\\\r\\\\n         */\\\\r\\\\n        readonly currentSlide: $w.Slide;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a slideshow's navigation buttons are shown.\\\\r\\\\n         */\\\\r\\\\n        showNavigationButtons: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Set or returns whether a slideshow's slide buttons are shown.\\\\r\\\\n         */\\\\r\\\\n        showSlideButtons: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of all the slides contained in the slideshow.\\\\r\\\\n         */\\\\r\\\\n        readonly slides: $w.Slide[];\\\\r\\\\n        /**\\\\r\\\\n         * Change the slideshow's current slide to a specific slide or index.\\\\r\\\\n         */\\\\r\\\\n        changeSlide(slideReference: number | $w.Slide): Promise<$w.Slide>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the slideshow moves to a new slide.\\\\r\\\\n         */\\\\r\\\\n        onChange(eventHandler: $w.EventHandler): $w.Slideshow;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Note: This feature is not yet available to all users.\\\\r\\\\n     */\\\\r\\\\n    interface State extends $w.Element, $w.Background, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the state's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an element's styles.\\\\r\\\\n     * \\\\r\\\\n     * Elements that expose a style property can be styled programmatically.\\\\r\\\\n     * You cannot programmatically style elements that do not expose a style property.\\\\r\\\\n     * \\\\r\\\\n     * The following elements expose the style property:\\\\r\\\\n     * \\\\r\\\\n     *  + [`Box`]($w.Box.html)\\\\r\\\\n     *  + [`Button`]($w.Button.html)\\\\r\\\\n     *  + [`Checkbox`]($w.Checkbox.html)\\\\r\\\\n     *  + [`CheckboxGroup`]($w.CheckboxGroup.html)\\\\r\\\\n     *  + [`Dropdown`]($w.Dropdown.html)\\\\r\\\\n     *  + [`Footer`]($w.Footer.html)\\\\r\\\\n     *  + [`Header`]($w.Header.html)\\\\r\\\\n     *  + [`ProgressBar`]($w.ProgressBar.html)\\\\r\\\\n     *  + [`QuickActionBar`]($w.QuickActionBar.html)\\\\r\\\\n     *  + [`RadioButtonGroup`]($w.RadioButtonGroup.html)\\\\r\\\\n     *  + [`TextBox`]($w.TextBox.html)\\\\r\\\\n     *  + [`TextInput`]($w.TextInput.html)\\\\r\\\\n     *  + [`UploadButton`]($w.UploadButton.html)\\\\r\\\\n     */\\\\r\\\\n    interface Style {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the background color of an element.\\\\r\\\\n         */\\\\r\\\\n        backgroundColor: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the border color of an element.\\\\r\\\\n         */\\\\r\\\\n        borderColor: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the border radius of an element.\\\\r\\\\n         */\\\\r\\\\n        borderRadius: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the border width of an element.\\\\r\\\\n         */\\\\r\\\\n        borderWidth: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the text color of an element.\\\\r\\\\n         */\\\\r\\\\n        color: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the foreground color of an element.\\\\r\\\\n         */\\\\r\\\\n        foregroundColor: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be styled.\\\\r\\\\n     */\\\\r\\\\n    interface StyleMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the element's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A table for displaying data.\\\\r\\\\n     */\\\\r\\\\n    interface Table extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the defining properties of the columns in a table.\\\\r\\\\n         */\\\\r\\\\n        columns: $w.Table.Column[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets the function that is called when a new page of table data is to be displayed.\\\\r\\\\n         */\\\\r\\\\n        dataFetcher: Function;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the table's pagination options.\\\\r\\\\n         */\\\\r\\\\n        pagination: $w.Table.PaginationOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the table's row data.\\\\r\\\\n         */\\\\r\\\\n        rows: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a table cell is selected.\\\\r\\\\n         */\\\\r\\\\n        onCellSelect(eventHandler: $w.TableCellEventHandler): $w.Table;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the table's data is changed.\\\\r\\\\n         */\\\\r\\\\n        onDataChange(eventHandler: $w.EventHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a table row is selected.\\\\r\\\\n         */\\\\r\\\\n        onRowSelect(eventHandler: $w.TableRowEventHandler): $w.Table;\\\\r\\\\n        /**\\\\r\\\\n         * Fetches the most current data and updates the table.\\\\r\\\\n         */\\\\r\\\\n        refresh(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Selects a table row by index.\\\\r\\\\n         */\\\\r\\\\n        selectRow(index: number): void;\\\\r\\\\n        /**\\\\r\\\\n         * Updates a the row data of a single row at the specified index.\\\\r\\\\n         */\\\\r\\\\n        updateRow(index: number, rowData: any): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Table {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `columns` property that\\\\r\\\\n         *  contains the properties that define a table column. Table columns do not\\\\r\\\\n         *  store any data.\\\\r\\\\n         */\\\\r\\\\n        type Column = {\\\\r\\\\n            /**\\\\r\\\\n             * The column ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * The location of the data displayed\\\\r\\\\n             *  in the column.\\\\r\\\\n             * \\\\r\\\\n             *  When the table is populated by a connection to a dataset, the `dataPath`\\\\r\\\\n             *  value is a field key from the collection that the dataset is connected to.\\\\r\\\\n             * \\\\r\\\\n             *  When the table is populated by using the [`rows`](#rows) or\\\\r\\\\n             *  [`dataFetcher`](#dataFetcher) properties, the `dataPath` value is one of the\\\\r\\\\n             *  property keys from the table's row objects.\\\\r\\\\n             */\\\\r\\\\n            dataPath: string;\\\\r\\\\n            /**\\\\r\\\\n             * The column header label.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n            /**\\\\r\\\\n             * The type of data in this column: `\\\\\\\"number\\\\\\\"`, `\\\\\\\"string\\\\\\\"`, `\\\\\\\"date\\\\\\\"`, `\\\\\\\"image\\\\\\\"`, `\\\\\\\"bool\\\\\\\"`, or `\\\\\\\"richText\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * The pixel width of the column.\\\\r\\\\n             */\\\\r\\\\n            width?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the column is visible.\\\\r\\\\n             */\\\\r\\\\n            visible?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * The location of the links used when\\\\r\\\\n             *  the items in the column are clicked.\\\\r\\\\n             * \\\\r\\\\n             *  When the table is populated by a connection to a dataset, the `linkPath`\\\\r\\\\n             *  value is a field key from the collection that the dataset is connected to.\\\\r\\\\n             *  The collection field can be a [regular field](https://support.wix.com/en/article/about-database-collections#regular-fields)\\\\r\\\\n             *  that contains URLs or a [calculated field](https://support.wix.com/en/article/about-database-collections#calculated-fields)\\\\r\\\\n             *  that contains relative links to dynamic pages.\\\\r\\\\n             * \\\\r\\\\n             *  When the table is populated by using the [`rows`](#rows) or\\\\r\\\\n             *  [`dataFetcher`](#dataFetcher) properties, the `linkPath` value is one of the\\\\r\\\\n             *  property keys from the table's rows objects.\\\\r\\\\n             *  The property values associated with that key contain URLs or relative links.\\\\r\\\\n             */\\\\r\\\\n            linkPath?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `pagination` property that\\\\r\\\\n         * contains the pagination options which determine if and how the table\\\\r\\\\n         * is paginated.\\\\r\\\\n         */\\\\r\\\\n        type PaginationOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * The type of pagination to use: `\\\\\\\"normal\\\\\\\"`, `\\\\\\\"pagination\\\\\\\"`, or `\\\\\\\"virtual\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * The number of rows per page.\\\\r\\\\n             */\\\\r\\\\n            rowsPerPage: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a table cell is selected.\\\\r\\\\n     */\\\\r\\\\n    interface TableCellEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the column ID of the selected cell.\\\\r\\\\n         */\\\\r\\\\n        readonly cellColumnId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the data from the selected cell.\\\\r\\\\n         */\\\\r\\\\n        readonly cellData: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the row index of the selected cell.\\\\r\\\\n         */\\\\r\\\\n        readonly cellRowIndex: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a table row is selected.\\\\r\\\\n     */\\\\r\\\\n    interface TableRowEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the data for the selected row.\\\\r\\\\n         */\\\\r\\\\n        readonly rowData: any;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the index of the selected row.\\\\r\\\\n         */\\\\r\\\\n        readonly rowIndex: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for text elements.\\\\r\\\\n     */\\\\r\\\\n    interface Text extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the contents of a text element using standard HTML.\\\\r\\\\n         */\\\\r\\\\n        html: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the plain-text contents of a text element.\\\\r\\\\n         */\\\\r\\\\n        text: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An input element for capturing large amounts of text.\\\\r\\\\n     */\\\\r\\\\n    interface TextBox extends $w.FormElement, $w.DisabledMixin, $w.TextInputMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ReadOnlyMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the text box's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a text input's value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n        /**\\\\r\\\\n         * Determines if the text contains line breaks when its value is read.\\\\r\\\\n         */\\\\r\\\\n        wrap: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An input element for capturing small amounts of text.\\\\r\\\\n     */\\\\r\\\\n    interface TextInput extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.TextInputMixin, $w.FocusMixin, $w.ReadOnlyMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the input type of an Input element.\\\\r\\\\n         */\\\\r\\\\n        inputType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the maximum value for a text input element whose\\\\r\\\\n         *  type is set to **Number**.\\\\r\\\\n         */\\\\r\\\\n        max: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the minimum value for a text input element whose\\\\r\\\\n         *  type is set to **Number**.\\\\r\\\\n         */\\\\r\\\\n        min: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the text input's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a text input's value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that accept text as input.\\\\r\\\\n     */\\\\r\\\\n    interface TextInputMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the maximum number of characters that can be entered.\\\\r\\\\n         */\\\\r\\\\n        maxLength: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the element's placeholder text.\\\\r\\\\n         */\\\\r\\\\n        placeholder: string;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the cursor is inside the\\\\r\\\\n         *  input element and a key is pressed.\\\\r\\\\n         */\\\\r\\\\n        onKeyPress(eventHandler: $w.KeyboardEventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An upload button enables users to upload files to your site.\\\\r\\\\n     */\\\\r\\\\n    interface UploadButton extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the label on the upload button.\\\\r\\\\n         */\\\\r\\\\n        buttonLabel: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the type of file that a user can upload.\\\\r\\\\n         */\\\\r\\\\n        fileType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the upload button's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Returns a list of files that are pending upload.\\\\r\\\\n         */\\\\r\\\\n        value: $w.UploadButton.File[];\\\\r\\\\n        /**\\\\r\\\\n         * Clears the files that are pending upload.\\\\r\\\\n         */\\\\r\\\\n        reset(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Uploads the files that the user has chosen.\\\\r\\\\n         */\\\\r\\\\n        startUpload(): Promise<$w.UploadButton.UploadedFile>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace UploadButton {\\\\r\\\\n        /**\\\\r\\\\n         * The object used by the `value` property that represents\\\\r\\\\n         *  files ready for upload.\\\\r\\\\n         */\\\\r\\\\n        type File = {\\\\r\\\\n            /**\\\\r\\\\n             * The file's name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * The file's size in bytes.\\\\r\\\\n             */\\\\r\\\\n            size: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * The object returned by the `startUpload()` function's\\\\r\\\\n         *  Promise when an upload fails.\\\\r\\\\n         */\\\\r\\\\n        type UploadError = {\\\\r\\\\n            /**\\\\r\\\\n             * Numeric The error's code.\\\\r\\\\n             */\\\\r\\\\n            errorCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * The error's description.\\\\r\\\\n             */\\\\r\\\\n            errorDescription: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * The object returned by the `startUpload()` function's\\\\r\\\\n         *  Promise that contains the URL of the successfully uploaded file.\\\\r\\\\n         */\\\\r\\\\n        type UploadedFile = {\\\\r\\\\n            /**\\\\r\\\\n             * The Wix URL of the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            url: string;\\\\r\\\\n            /**\\\\r\\\\n             * The Wix media ID of the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            mediaId: string;\\\\r\\\\n            /**\\\\r\\\\n             * The title of the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * The width of an uploaded image file.\\\\r\\\\n             */\\\\r\\\\n            width: number;\\\\r\\\\n            /**\\\\r\\\\n             * The height of an uploaded image file.\\\\r\\\\n             */\\\\r\\\\n            height: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be validated.\\\\r\\\\n     * \\\\r\\\\n     * Certain input elements contain properties that are used in basic form\\\\r\\\\n     * validation, such as [`required`]($w.RequiredMixin.html#required) and\\\\r\\\\n     * [`maxlength`]($w.TextInputMixin.html#maxlength). More complex validation\\\\r\\\\n     * logic is achieved using the properties and functions below.\\\\r\\\\n     * \\\\r\\\\n     * Basic validation of elements against the constraints set in the Editor or\\\\r\\\\n     * programmatically is always peformed, regardless of any custom validation.\\\\r\\\\n     * \\\\r\\\\n     * However, sometimes more complex validation is needed, including validations\\\\r\\\\n     * that depend on more than one element. This is typically achieved by adding\\\\r\\\\n     * custom validation logic in an event handler that you set using the input\\\\r\\\\n     * element's [`onCustomValidation()`](#onCustomValidation) function. Within that\\\\r\\\\n     * handler, you call the `reject()` function to indicate that the element is\\\\r\\\\n     * invalid. The element's validity is checked when the value of the element\\\\r\\\\n     * changes either by user interaction or programmatically.\\\\r\\\\n     * \\\\r\\\\n     * Note that validations other than **required**, including custom validations,\\\\r\\\\n     * are not run on input elements when they don't have a value.\\\\r\\\\n     */\\\\r\\\\n    interface ValidatableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an input element's value is valid.\\\\r\\\\n         */\\\\r\\\\n        readonly valid: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a message indicating why the element is invalid, or an\\\\r\\\\n         *  empty string if the message is valid.\\\\r\\\\n         */\\\\r\\\\n        readonly validationMessage: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a ValidityState object that contains\\\\r\\\\n         *  detailed information about the validity states of the element.\\\\r\\\\n         */\\\\r\\\\n        readonly validity: $w.ValidatableMixin.ValidityState;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element's validation is checked.\\\\r\\\\n         */\\\\r\\\\n        onCustomValidation(validator: $w.Validator): void;\\\\r\\\\n        /**\\\\r\\\\n         * Resets the element's visual validity indication.\\\\r\\\\n         */\\\\r\\\\n        resetValidityIndication(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the element's visual validity indication based on its current validity state.\\\\r\\\\n         */\\\\r\\\\n        updateValidityIndication(): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace ValidatableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Contains detailed information about the validity states of an element.\\\\r\\\\n         */\\\\r\\\\n        type ValidityState = {\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's custom\\\\r\\\\n             *  validity message has been set to a non-empty string.\\\\r\\\\n             */\\\\r\\\\n            customError: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element meets all\\\\r\\\\n             *  constraint validations.\\\\r\\\\n             */\\\\r\\\\n            valid: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's\\\\r\\\\n             *  [`required`]($w.RequiredElement.html#required) property is `true`, but\\\\r\\\\n             *  it does not contain a value.\\\\r\\\\n             */\\\\r\\\\n            valueMissing: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's value\\\\r\\\\n             *  does not match its type when the type is email or url.\\\\r\\\\n             */\\\\r\\\\n            typeMismatch: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's\\\\r\\\\n             *  value does not match its pattern validation.\\\\r\\\\n             */\\\\r\\\\n            patternMismatch: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the length of the\\\\r\\\\n             *  element's value exceeds its [`maxlength`]($w.TextInputElement.html#maxlength)\\\\r\\\\n             *  property.\\\\r\\\\n             */\\\\r\\\\n            tooLong: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the length of the\\\\r\\\\n             *  element's value is smaller than its minlength.\\\\r\\\\n             */\\\\r\\\\n            tooShort: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's\\\\r\\\\n             *  value is less than the its [`min`]($w.TextInput.html#min) property.\\\\r\\\\n             */\\\\r\\\\n            rangeUnderflow: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's\\\\r\\\\n             *  value is more than the its [`max`]($w.TextInput.html#max) property.\\\\r\\\\n             */\\\\r\\\\n            rangeOverflow: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element is\\\\r\\\\n             *  an upload button that is required and a file has been selected but not\\\\r\\\\n             *  uploaded.\\\\r\\\\n             */\\\\r\\\\n            fileNotUploaded: boolean;\\\\r\\\\n            stepMismatch: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's value\\\\r\\\\n             *  cannot be converted to a value\\\\r\\\\n             */\\\\r\\\\n            badInput: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface ValueMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an element's value.\\\\r\\\\n         */\\\\r\\\\n        value: any;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an input element's value\\\\r\\\\n         *  is changed.\\\\r\\\\n         */\\\\r\\\\n        onChange(handler: $w.EventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Vector images are digital illustrations based on geometric shapes.\\\\r\\\\n     *  They maintain their high quality when resized.\\\\r\\\\n     */\\\\r\\\\n    interface VectorImage extends $w.Element, $w.HiddenCollapsedMixin, $w.LinkableMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the file location of the vector image.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A vertical site menu.\\\\r\\\\n     */\\\\r\\\\n    interface VerticalMenu extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element that displays a video.\\\\r\\\\n     */\\\\r\\\\n    interface Video extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the URL of the video.\\\\r\\\\n         */\\\\r\\\\n        videoUrl: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be scrolled into and out\\\\r\\\\n     *  of view.\\\\r\\\\n     */\\\\r\\\\n    interface ViewportMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an element is displayed\\\\r\\\\n         *  in the viewable part of the current window.\\\\r\\\\n         */\\\\r\\\\n        onViewportEnter(handler: $w.EventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an element is no longer\\\\r\\\\n         *  displayed in the viewable part of the current window.\\\\r\\\\n         */\\\\r\\\\n        onViewportLeave(handler: $w.EventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    type EventHandler = (event: $w.Event, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    type ForItemCallback = ($item: $w.$w, itemData: any, index: number)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when a gallery moves to a new image.\\\\r\\\\n     */\\\\r\\\\n    type GalleryItemChangedEventHandler = (event: $w.GalleryItemChangedEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when an image in a gallery is clicked.\\\\r\\\\n     */\\\\r\\\\n    type GalleryItemClickedEventHandler = (event: $w.GalleryItemClickedEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when google map / marker is clicked.\\\\r\\\\n     */\\\\r\\\\n    type GoogleMapClickEvent = (event: $w.GoogleMapClickEvent)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when the code in an HtmlComponent sends a message.\\\\r\\\\n     */\\\\r\\\\n    type HtmlComponentMessageEventHandler = (event: $w.HtmlComponentMessageEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    type HtmlElementEventHandler = (event: $w.HtmlComponentMessageEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when a user hovers over a star on the rating component.\\\\r\\\\n     */\\\\r\\\\n    type IconMouseInEventHandler = (event: $w.IconMouseInEvent)=>void;\\\\r\\\\n\\\\r\\\\n    type ItemReadyEventHandler = ($item: $w.$w, itemData: any, index: number)=>void;\\\\r\\\\n\\\\r\\\\n    type ItemRemovedEventHandler = (itemData: any)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when the keyboard is pressed.\\\\r\\\\n     */\\\\r\\\\n    type KeyboardEventHandler = (event: $w.KeyboardEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when the mouse is clicked.\\\\r\\\\n     */\\\\r\\\\n    type MouseEventHandler = (event: $w.MouseEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when an item in a quick action bar is clicked.\\\\r\\\\n     */\\\\r\\\\n    type QuickActionBarItemClickedEventHandler = (event: $w.QuickActionBarItemClickedEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function that runs when all page elements have finished loading.\\\\r\\\\n     */\\\\r\\\\n    type ReadyHandler = ()=>Promise<void> | void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when a table cell is selected.\\\\r\\\\n     */\\\\r\\\\n    type TableCellEventHandler = (event: $w.TableCellEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when a table row is selected.\\\\r\\\\n     */\\\\r\\\\n    type TableRowEventHandler = (event: $w.TableRowEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function that runs when custom validation is checked.\\\\r\\\\n     */\\\\r\\\\n    type Validator = (value: string | $w.UploadButton.File[] | boolean, reject: Function)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Note: This feature is not yet available to all users.\\\\r\\\\n     * \\\\r\\\\n     * \\\\r\\\\n     * `AddressInput` is used for entering addresses. It lets users type\\\\r\\\\n     * an address, and suggests exact locations using Google Maps services.\\\\r\\\\n     */\\\\r\\\\n    interface AddressInput extends $w.FormElement, $w.DisabledMixin, $w.RequiredMixin, $w.ReadOnlyMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the filter of the address input.\\\\r\\\\n         */\\\\r\\\\n        filter: $w.AddressInput.AddressFilter;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the placeholder of the address input.\\\\r\\\\n         */\\\\r\\\\n        placeholder: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the address input.\\\\r\\\\n         */\\\\r\\\\n        value: $w.AddressInput.Address;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace AddressInput {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a physical address.\\\\r\\\\n         */\\\\r\\\\n        type Address = {\\\\r\\\\n            /**\\\\r\\\\n             * Address in human-readable format. The formatted address is displayed in the address input element.\\\\r\\\\n             */\\\\r\\\\n            formatted: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address coordinates.\\\\r\\\\n             */\\\\r\\\\n            location?: $w.AddressInput.AddressLocation;\\\\r\\\\n            /**\\\\r\\\\n             * Address street name and number.\\\\r\\\\n             */\\\\r\\\\n            streetAddress?: $w.AddressInput.StreetAddress;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address subdivision of a country, such as a state or province.\\\\r\\\\n             */\\\\r\\\\n            subdivision?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address postal code.\\\\r\\\\n             */\\\\r\\\\n            postalCode?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing a filter for filtering address suggestions\\\\r\\\\n         * in an address input. Suggestions are restricted to addresses within\\\\r\\\\n         * the specified country.\\\\r\\\\n         */\\\\r\\\\n        type AddressFilter = {\\\\r\\\\n            /**\\\\r\\\\n             * ISO_3166 country code.\\\\r\\\\n             */\\\\r\\\\n            country?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing the coordinates of an address.\\\\r\\\\n         */\\\\r\\\\n        type AddressLocation = {\\\\r\\\\n            /**\\\\r\\\\n             * Address latitude.\\\\r\\\\n             */\\\\r\\\\n            latitude: number;\\\\r\\\\n            /**\\\\r\\\\n             * Address longitude.\\\\r\\\\n             */\\\\r\\\\n            longitude: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing the street name and number of an address.\\\\r\\\\n         */\\\\r\\\\n        type StreetAddress = {\\\\r\\\\n            /**\\\\r\\\\n             * Street name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Street number.\\\\r\\\\n             */\\\\r\\\\n            number?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element for playing audio files.\\\\r\\\\n     */\\\\r\\\\n    interface AudioPlayer extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the name of the artist displayed in an audio player.\\\\r\\\\n         */\\\\r\\\\n        artistName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the cover image displayed in an audio player.\\\\r\\\\n         */\\\\r\\\\n        coverImage: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the current play time from the beginning of the audio track, in seconds.\\\\r\\\\n         */\\\\r\\\\n        readonly currentTime: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the total play time of the audio track, in seconds.\\\\r\\\\n         */\\\\r\\\\n        readonly duration: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the volume is currently muted.\\\\r\\\\n         */\\\\r\\\\n        readonly isMuted: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an audio track is currently playing.\\\\r\\\\n         */\\\\r\\\\n        readonly isPlaying: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the file location of the audio file.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the track name displayed in an audio player.\\\\r\\\\n         */\\\\r\\\\n        trackName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an audio player's volume.\\\\r\\\\n         */\\\\r\\\\n        volume: number;\\\\r\\\\n        /**\\\\r\\\\n         * Mutes audio volume.\\\\r\\\\n         */\\\\r\\\\n        mute(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback has ended.\\\\r\\\\n         */\\\\r\\\\n        onEnded(handler: $w.EventHandler): $w.AudioPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is paused.\\\\r\\\\n         */\\\\r\\\\n        onPause(handler: $w.EventHandler): $w.AudioPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is started or restarted.\\\\r\\\\n         */\\\\r\\\\n        onPlay(handler: $w.EventHandler): $w.AudioPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback progresses.\\\\r\\\\n         */\\\\r\\\\n        onProgress(handler: $w.EventHandler): $w.AudioPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Pauses playback.\\\\r\\\\n         */\\\\r\\\\n        pause(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Begins or resumes playback.\\\\r\\\\n         */\\\\r\\\\n        play(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves playback to the specified time, in seconds.\\\\r\\\\n         */\\\\r\\\\n        seek(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Stops playback.\\\\r\\\\n         */\\\\r\\\\n        stop(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Toggles playback.\\\\r\\\\n         */\\\\r\\\\n        togglePlay(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Unmutes audio volume.\\\\r\\\\n         */\\\\r\\\\n        unmute(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The reCAPTCHA element allows you to present a challenge-response test to site visitors to determine whether they are human or a bot.\\\\r\\\\n     */\\\\r\\\\n    interface Captcha extends $w.Element, $w.FocusMixin, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the reCAPTCHA token.\\\\r\\\\n         */\\\\r\\\\n        readonly token: string;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a connection error occurs while completing the CAPTCHA challenge.\\\\r\\\\n         */\\\\r\\\\n        onError(handler: $w.Captcha.ErrorHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the CAPTCHA token expires.\\\\r\\\\n         */\\\\r\\\\n        onTimeout(handler: $w.Captcha.TimeoutHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the CAPTCHA challenge is successfully completed.\\\\r\\\\n         */\\\\r\\\\n        onVerified(handler: $w.Captcha.VerifiedHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Resets the reCAPTCHA element.\\\\r\\\\n         */\\\\r\\\\n        reset(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Captcha {\\\\r\\\\n        /**\\\\r\\\\n         * An error event handler.\\\\r\\\\n         */\\\\r\\\\n        type ErrorHandler = ()=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A timeout event handler.\\\\r\\\\n         */\\\\r\\\\n        type TimeoutHandler = ()=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A verification event handler.\\\\r\\\\n         */\\\\r\\\\n        type VerifiedHandler = ()=>Promise<void>;\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * This feature is not yet available to all users.\\\\r\\\\n     */\\\\r\\\\n    interface CustomElement extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the SEO markup to be rendered for search engine bots.\\\\r\\\\n         */\\\\r\\\\n        seoMarkup: string;\\\\r\\\\n        /**\\\\r\\\\n         * Registers a callback function in Corvid for an event triggered from the custom element.\\\\r\\\\n         */\\\\r\\\\n        on(eventName: string, callBackFunction: Function): void;\\\\r\\\\n        /**\\\\r\\\\n         * Sets an HTML attribute on the custom element's DOM node.\\\\r\\\\n         */\\\\r\\\\n        setAttribute(key: string, value: string): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element for working with paging.\\\\r\\\\n     */\\\\r\\\\n    interface Pagination extends $w.Element, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.ClickableMixin, $w.ViewportMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the current page.\\\\r\\\\n         */\\\\r\\\\n        currentPage: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the total number of pages shown in a pagination bar.\\\\r\\\\n         */\\\\r\\\\n        totalPages: number;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the pagination bar\\\\r\\\\n         *  is changed.\\\\r\\\\n         */\\\\r\\\\n        onChange(handler: $w.EventHandler): $w.Pagination;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element for displaying the status of an ongoing process.\\\\r\\\\n     */\\\\r\\\\n    interface ProgressBar extends $w.Element, $w.HiddenCollapsedMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the progress bar's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a progress bar's target value.\\\\r\\\\n         */\\\\r\\\\n        readonly targetValue: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a progress bar's value.\\\\r\\\\n         */\\\\r\\\\n        readonly value: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A ratings display element allows you to display a value to your users\\\\r\\\\n     *  using icons.\\\\r\\\\n     */\\\\r\\\\n    interface RatingsDisplay extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the displayed number of ratings.\\\\r\\\\n         */\\\\r\\\\n        numRatings: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the displayed rating.\\\\r\\\\n         */\\\\r\\\\n        rating: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A ratings input element allows you to capture a value from your users\\\\r\\\\n     *  using icons.\\\\r\\\\n     */\\\\r\\\\n    interface RatingsInput extends $w.FormElement, $w.DisabledMixin, $w.RequiredMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ClickableMixin, $w.ViewportMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the rating value.\\\\r\\\\n         */\\\\r\\\\n        value: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the function that runs when a user's mouse enters one of the rating icons.\\\\r\\\\n         */\\\\r\\\\n        onIconMouseIn(handler: $w.IconMouseInEventHandler): $w.RatingsInput;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * RichTextBox is a rich text input as form element\\\\r\\\\n     */\\\\r\\\\n    interface RichTextBox extends $w.FormElement, $w.DisabledMixin, $w.TextInputMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ReadOnlyMixin, $w.ClickableMixin, $w.RequiredMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Note: This feature is not yet available to all users.\\\\r\\\\n     */\\\\r\\\\n    interface SelectionTags extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a list of items which will be rendered as tags.\\\\r\\\\n         */\\\\r\\\\n        options: $w.SelectionTags.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the indices of the selected options.\\\\r\\\\n         */\\\\r\\\\n        selectedIndices: number[];\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the selection tags' styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the values of the selected options.\\\\r\\\\n         */\\\\r\\\\n        value: string[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace SelectionTags {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the [`options`](#options) property that contains the attributes of the selection tag item.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * The value of the selection tag option. This is what you use in code and is what is stored in your collections.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * The label of the selection tag option. This is what a site visitor sees.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sliders allow users to select a number from a given range.\\\\r\\\\n     */\\\\r\\\\n    interface Slider extends $w.Element, $w.ValueMixin, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.FocusMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the slider's maximum value.\\\\r\\\\n         */\\\\r\\\\n        max: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the slider's minimum value.\\\\r\\\\n         */\\\\r\\\\n        min: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a slider's step value.\\\\r\\\\n         */\\\\r\\\\n        step: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a slider's step type.\\\\r\\\\n         */\\\\r\\\\n        stepType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the slider.\\\\r\\\\n         */\\\\r\\\\n        readonly value: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Switches are used for a single binary choice.\\\\r\\\\n     */\\\\r\\\\n    interface Switch extends $w.Element, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ClickableMixin, $w.ValueMixin, $w.CheckedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a switch is on or off.\\\\r\\\\n         */\\\\r\\\\n        checked: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An input element for capturing the time of day.\\\\r\\\\n     */\\\\r\\\\n    interface TimePicker extends $w.FocusMixin, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.RequiredMixin, $w.ReadOnlyMixin, $w.FormElement{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the number of minutes the time picker steps.\\\\r\\\\n         */\\\\r\\\\n        readonly step: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether the time picker uses 12-hour or 24-hour format.\\\\r\\\\n         */\\\\r\\\\n        readonly useAmPmFormat: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a time picker's value.\\\\r\\\\n         */\\\\r\\\\n        readonly value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element for presenting videos.\\\\r\\\\n     */\\\\r\\\\n    interface VideoPlayer extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the current play time from the beginning of the current video, in seconds.\\\\r\\\\n         */\\\\r\\\\n        readonly currentTime: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the description of a video.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the total play time of the current video, in seconds.\\\\r\\\\n         */\\\\r\\\\n        readonly duration: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the volume is currently muted.\\\\r\\\\n         */\\\\r\\\\n        readonly isMuted: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if a video is currently playing.\\\\r\\\\n         */\\\\r\\\\n        readonly isPlaying: boolean;\\\\r\\\\n        poster: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the file location of the current video.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the title displayed in a video player.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the video player volume.\\\\r\\\\n         */\\\\r\\\\n        volume: number;\\\\r\\\\n        /**\\\\r\\\\n         * Mutes video volume.\\\\r\\\\n         */\\\\r\\\\n        mute(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback has ended.\\\\r\\\\n         */\\\\r\\\\n        onEnded(handler: $w.EventHandler): $w.VideoPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is paused.\\\\r\\\\n         */\\\\r\\\\n        onPause(handler: $w.EventHandler): $w.VideoPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is started or restarted.\\\\r\\\\n         */\\\\r\\\\n        onPlay(handler: $w.EventHandler): $w.VideoPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback progresses.\\\\r\\\\n         */\\\\r\\\\n        onProgress(handler: $w.EventHandler): $w.VideoPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Pauses playback.\\\\r\\\\n         */\\\\r\\\\n        pause(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Begins or resumes playback.\\\\r\\\\n         */\\\\r\\\\n        play(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves playback to the specified time, in seconds.\\\\r\\\\n         */\\\\r\\\\n        seek(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Pauses playback.\\\\r\\\\n         */\\\\r\\\\n        stop(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Toggles playback.\\\\r\\\\n         */\\\\r\\\\n        togglePlay(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Unmutes video volume.\\\\r\\\\n         */\\\\r\\\\n        unmute(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An icon that leads users to the shopping cart.\\\\r\\\\n     */\\\\r\\\\n    interface CartIcon extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Adds multiple products to the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        addProductsToCart(products: $w.CartIcon.AddToCartItem[]): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a product to the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        addToCart(productID: string, quantity?: number, options?: $w.CartIcon.AddToCartOptions): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace CartIcon {\\\\r\\\\n        /**\\\\r\\\\n         * An object used to pass a custom text field when adding a product to\\\\r\\\\n         *  the shopping cart with options.\\\\r\\\\n         */\\\\r\\\\n        type AddToCartCustomTextField = {\\\\r\\\\n            /**\\\\r\\\\n             * Custom text field title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Custom text field value.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when adding multiple products to the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        type AddToCartItem = {\\\\r\\\\n            /**\\\\r\\\\n             * The ID of the product to add to the cart.\\\\r\\\\n             */\\\\r\\\\n            productID: string;\\\\r\\\\n            /**\\\\r\\\\n             * Custom custom\\\\r\\\\n             *  text fields to use when adding the product to the cart.\\\\r\\\\n             */\\\\r\\\\n            options?: $w.CartIcon.AddToCartOptions;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when adding a product to the shopping cart with options.\\\\r\\\\n         */\\\\r\\\\n        type AddToCartOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Product options to use when adding the\\\\r\\\\n             *  product to the cart. The object contains key:value pairs where the key is the\\\\r\\\\n             *  option name and the value is the chosen option value.\\\\r\\\\n             */\\\\r\\\\n            choices: any;\\\\r\\\\n            /**\\\\r\\\\n             * Custom custom\\\\r\\\\n             *  text fields to use when adding the product to the cart.\\\\r\\\\n             */\\\\r\\\\n            customTextField: $w.CartIcon.AddToCartCustomTextField;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A store page for a specific product.\\\\r\\\\n     */\\\\r\\\\n    interface ProductPage extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the values entered in the product's custom text fields.\\\\r\\\\n         */\\\\r\\\\n        getCustomTextFieldsValues(): $w.ProductPage.Product;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the all the information associated with the current product.\\\\r\\\\n         */\\\\r\\\\n        getProduct(): Promise<$w.ProductPage.Product>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace ProductPage {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a media item.\\\\r\\\\n         */\\\\r\\\\n        type MediaItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Media item ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item description. Descriptions over 100 characters are truncated.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item type. Can be \\\\\\\"image\\\\\\\" or \\\\\\\"video.\\\\\\\"\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item source URL.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n            /**\\\\r\\\\n             * Thumbnail URL for videos only.\\\\r\\\\n             */\\\\r\\\\n            thumbnail?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product in a store.\\\\r\\\\n         */\\\\r\\\\n        type Product = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * Main product media item (image or video thumbnail) URL.\\\\r\\\\n             */\\\\r\\\\n            mainMedia: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of product media items.\\\\r\\\\n             */\\\\r\\\\n            mediaItems: $w.ProductPage.MediaItem;\\\\r\\\\n            /**\\\\r\\\\n             * Product stock keeping unit value. Must be unique.\\\\r\\\\n             */\\\\r\\\\n            sku: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of product ribbons.\\\\r\\\\n             */\\\\r\\\\n            ribbons: $w.ProductPage.ProductRibbon[];\\\\r\\\\n            /**\\\\r\\\\n             * Product currency.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price. \\\\r\\\\n             *  The price must be greater than its discount.\\\\r\\\\n             *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted product price.\\\\r\\\\n             */\\\\r\\\\n            discountedPrice: number;\\\\r\\\\n            /**\\\\r\\\\n             * Product price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted product price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedDiscountedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product discount.\\\\r\\\\n             */\\\\r\\\\n            discount: $w.ProductPage.ProductDiscount;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether inventory is tracked for the product.\\\\r\\\\n             */\\\\r\\\\n            trackInventory: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the product is in stock.\\\\r\\\\n             */\\\\r\\\\n            inStock: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Number of units currently in stock.\\\\r\\\\n             */\\\\r\\\\n            quantityInStock: number;\\\\r\\\\n            /**\\\\r\\\\n             * Additional product information sections.\\\\r\\\\n             */\\\\r\\\\n            additionalInfoSections: $w.ProductPage.ProductAdditionalInfoSection[];\\\\r\\\\n            /**\\\\r\\\\n             * All the available options for a store product.\\\\r\\\\n             */\\\\r\\\\n            productOptions: $w.ProductPage.ProductOptions;\\\\r\\\\n            /**\\\\r\\\\n             * Product page relative URL.\\\\r\\\\n             */\\\\r\\\\n            productPageUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether product variants are managed. Can be set to true only if the product has options. Once set to true, `manageVariants` can only be reset to false only if no variants exist. Use [`getProductVariants()`](https://www.wix.com/corvid/reference/wix-stores.html#getProductVariants) to check if variants exist. You cannot set `manageVariants` to true if more than 300 variants are defined.\\\\r\\\\n             */\\\\r\\\\n            manageVariants: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Product type. Either `\\\\\\\"physical\\\\\\\"` or `\\\\\\\"digital\\\\\\\"`. When creating a product using the API, currently only `\\\\\\\"physical\\\\\\\"` is supported.\\\\r\\\\n             */\\\\r\\\\n            productType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product slug.\\\\r\\\\n             */\\\\r\\\\n            slug: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product weight.\\\\r\\\\n             */\\\\r\\\\n            weight: number;\\\\r\\\\n            /**\\\\r\\\\n             * Product variants.\\\\r\\\\n             */\\\\r\\\\n            variants: $w.ProductPage.ProductVariants;\\\\r\\\\n            /**\\\\r\\\\n             * Date product was last updated.\\\\r\\\\n             */\\\\r\\\\n            _updatedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * ID for the inventory item.\\\\r\\\\n             */\\\\r\\\\n            inventoryItemId: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of product customization fields.\\\\r\\\\n             */\\\\r\\\\n            customTextFields: $w.ProductPage.ProductCustomTextFields[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an additional info section for a store product.\\\\r\\\\n         */\\\\r\\\\n        type ProductAdditionalInfoSection = {\\\\r\\\\n            /**\\\\r\\\\n             * Section title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Section description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product variant's option choices.\\\\r\\\\n         */\\\\r\\\\n        type ProductChoices = {\\\\r\\\\n            /**\\\\r\\\\n             * Value of the choice. This key name is dependent on the\\\\r\\\\n             *  product option. For example, if a product has a size option, this\\\\r\\\\n             *  key value will be something like `\\\\\\\"Size\\\\\\\"` and its value will be something like\\\\r\\\\n             *  `\\\\\\\"Large\\\\\\\"`.\\\\r\\\\n             *  \\\\r\\\\n             *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n             */\\\\r\\\\n            optionKey: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a custom text field for a store product.\\\\r\\\\n         */\\\\r\\\\n        type ProductCustomTextFields = {\\\\r\\\\n            /**\\\\r\\\\n             * Product customization field title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Maximum length of product customization field in characters.\\\\r\\\\n             */\\\\r\\\\n            maxLength: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product discount.\\\\r\\\\n         */\\\\r\\\\n        type ProductDiscount = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount type. Required.\\\\r\\\\n             * \\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             * \\\\r\\\\n             * \\\\r\\\\n             *  - `\\\\\\\"AMOUNT\\\\\\\"`\\\\r\\\\n             *  - `\\\\\\\"PERCENT\\\\\\\"`\\\\r\\\\n             *  - `\\\\\\\"NONE\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discount value. The discount value cannot be greater than the price of the product or the variant.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an option for a store product.\\\\r\\\\n         */\\\\r\\\\n        type ProductOption = {\\\\r\\\\n            /**\\\\r\\\\n             * Option type. Either `\\\\\\\"color\\\\\\\"` or `\\\\\\\"drop_down\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            optionType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Option name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Option choices.\\\\r\\\\n             */\\\\r\\\\n            choices: $w.ProductPage.ProductOptionsChoice[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing all the available options for a store product, such as \\\\\\\"Size\\\\\\\" and \\\\\\\"Color.\\\\\\\"\\\\r\\\\n         */\\\\r\\\\n        type ProductOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the option. This key name\\\\r\\\\n             *  is dependent on the options added to the product. For example, if a product has a size \\\\r\\\\n             *  option, this key will be something like `\\\\\\\"Size\\\\\\\"`.\\\\r\\\\n             *  \\\\r\\\\n             *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n             */\\\\r\\\\n            optionKey: $w.ProductPage.ProductOption;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an option's choice for a store product, such as choice \\\\\\\"Small\\\\\\\" for the option \\\\\\\"Size.\\\\\\\"\\\\r\\\\n         */\\\\r\\\\n        type ProductOptionsChoice = {\\\\r\\\\n            /**\\\\r\\\\n             * Choice value.\\\\r\\\\n             */\\\\r\\\\n            value: number;\\\\r\\\\n            /**\\\\r\\\\n             * Choice description.\\\\r\\\\n             */\\\\r\\\\n            description: number;\\\\r\\\\n            /**\\\\r\\\\n             * Choice media.\\\\r\\\\n             */\\\\r\\\\n            media: $w.ProductPage.ProductOptionsChoiceMedia;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the product with this choice is in stock.\\\\r\\\\n             */\\\\r\\\\n            inStock: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the product with this option is visible.\\\\r\\\\n             */\\\\r\\\\n            visible: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the choice media.\\\\r\\\\n         */\\\\r\\\\n        type ProductOptionsChoiceMedia = {\\\\r\\\\n            /**\\\\r\\\\n             * Main choice media item (image or video thumbnail) URL.\\\\r\\\\n             */\\\\r\\\\n            mainMedia: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of choice media items.\\\\r\\\\n             */\\\\r\\\\n            mediaItems: $w.ProductPage.MediaItem;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a ribbon for a store product.\\\\r\\\\n         */\\\\r\\\\n        type ProductRibbon = {\\\\r\\\\n            /**\\\\r\\\\n             * Ribbon text.\\\\r\\\\n             */\\\\r\\\\n            text: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product's variant information used when creating or updating variants.\\\\r\\\\n         */\\\\r\\\\n        type ProductVariantInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Variant currency.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant price. The variant price must be greater than its discount. If the variant price has been updated, changes to the product price do not affect the variant price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted variant price.\\\\r\\\\n             */\\\\r\\\\n            discountedPrice: number;\\\\r\\\\n            /**\\\\r\\\\n             * Formatted variant price.\\\\r\\\\n             */\\\\r\\\\n            formattedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted variant price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedDiscountedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant weight.\\\\r\\\\n             */\\\\r\\\\n            weight: number;\\\\r\\\\n            /**\\\\r\\\\n             * Variant stock keeping unit number.\\\\r\\\\n             */\\\\r\\\\n            sku: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the variant is visible in the store.\\\\r\\\\n             */\\\\r\\\\n            visible: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product's variant item.\\\\r\\\\n         */\\\\r\\\\n        type ProductVariantItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique product variant ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product variant option choices.\\\\r\\\\n             */\\\\r\\\\n            choices: $w.ProductPage.ProductChoices;\\\\r\\\\n            /**\\\\r\\\\n             * Product variant information.\\\\r\\\\n             */\\\\r\\\\n            variant: $w.ProductPage.ProductVariantInfo[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product's variants.\\\\r\\\\n         */\\\\r\\\\n        type ProductVariants = {\\\\r\\\\n            /**\\\\r\\\\n             * Variant items.\\\\r\\\\n             */\\\\r\\\\n            items: $w.ProductPage.ProductVariantItem[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A thank you page displayed when an order is created.\\\\r\\\\n     */\\\\r\\\\n    interface ThankYouPage extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the order associated with the current page.\\\\r\\\\n         */\\\\r\\\\n        getOrder(): Promise<$w.ThankYouPage.Order>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace ThankYouPage {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains address information.\\\\r\\\\n         */\\\\r\\\\n        type Address = {\\\\r\\\\n            /**\\\\r\\\\n             * Address address line.\\\\r\\\\n             */\\\\r\\\\n            addressLine: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address subdivision.\\\\r\\\\n             */\\\\r\\\\n            subdivision: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address postal code.\\\\r\\\\n             */\\\\r\\\\n            postalCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address in human readable format.\\\\r\\\\n             */\\\\r\\\\n            formatted: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's billing info.\\\\r\\\\n         */\\\\r\\\\n        type BillingInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone: string;\\\\r\\\\n            /**\\\\r\\\\n             * Company name.\\\\r\\\\n             */\\\\r\\\\n            company: string;\\\\r\\\\n            /**\\\\r\\\\n             * Company name.\\\\r\\\\n             */\\\\r\\\\n            vatId: $w.ThankYouPage.VatId;\\\\r\\\\n            /**\\\\r\\\\n             * Billing address.\\\\r\\\\n             */\\\\r\\\\n            address: $w.ThankYouPage.Address;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about a buyer.\\\\r\\\\n         */\\\\r\\\\n        type BuyerInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's unique ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's first name.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's last name.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's identity.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"ADMIN\\\\\\\"`: Buyer is the site owner.\\\\r\\\\n             *  + `\\\\\\\"MEMBER\\\\\\\"`: Buyer is a logged-in site member.\\\\r\\\\n             *  + `\\\\\\\"VISITOR\\\\\\\"`: Buyer is not logged in.\\\\r\\\\n             *  + `\\\\\\\"CONTACT\\\\\\\"`: A contact has been created for the buyer.\\\\r\\\\n             */\\\\r\\\\n            identityType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's phone number.\\\\r\\\\n             */\\\\r\\\\n            phone: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a custom text field.\\\\r\\\\n         */\\\\r\\\\n        type CustomTextField = {\\\\r\\\\n            /**\\\\r\\\\n             * Field title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Field value.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a line item in a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        type LineItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the line item.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Notes about the line item.\\\\r\\\\n             */\\\\r\\\\n            notes: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item price.\\\\r\\\\n             */\\\\r\\\\n            price: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item product ID.\\\\r\\\\n             */\\\\r\\\\n            productId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item stock keeping unit.\\\\r\\\\n             */\\\\r\\\\n            sku: string;\\\\r\\\\n            /**\\\\r\\\\n             * Total price charged to the customer for all line items after any applicable discounts.\\\\r\\\\n             */\\\\r\\\\n            totalPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item weight.\\\\r\\\\n             */\\\\r\\\\n            weight: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of the line item.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"DIGITAL\\\\\\\"`: Digital item.\\\\r\\\\n             *  + `\\\\\\\"PHYSICAL\\\\\\\"`: Physical item.\\\\r\\\\n             *  + `\\\\\\\"CUSTOM_AMOUNT_ITEM\\\\\\\"`: Item with a custom price.\\\\r\\\\n             *  + `\\\\\\\"UNSPECIFIED\\\\\\\"`: Type can't be classified due to an error.\\\\r\\\\n             */\\\\r\\\\n            lineItemType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item options.\\\\r\\\\n             */\\\\r\\\\n            options: $w.ThankYouPage.Option[];\\\\r\\\\n            /**\\\\r\\\\n             * Media item.\\\\r\\\\n             */\\\\r\\\\n            mediaItem: $w.ThankYouPage.MediaItem;\\\\r\\\\n            /**\\\\r\\\\n             * Custom text.\\\\r\\\\n             */\\\\r\\\\n            customTextFields: $w.ThankYouPage.CustomTextField[];\\\\r\\\\n            /**\\\\r\\\\n             * Line item index.\\\\r\\\\n             */\\\\r\\\\n            index: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a media item.\\\\r\\\\n         */\\\\r\\\\n        type MediaItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Type of the media item.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"IMAGE\\\\\\\"`: Image item.\\\\r\\\\n             *  + `\\\\\\\"UNSPECIFIED_MEDIA_TYPE_ITEM\\\\\\\"`: Media item type can't be classified due to an error.\\\\r\\\\n             */\\\\r\\\\n            mediaType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item URL.\\\\r\\\\n             */\\\\r\\\\n            url: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item height.\\\\r\\\\n             */\\\\r\\\\n            height: number;\\\\r\\\\n            /**\\\\r\\\\n             * Media item width.\\\\r\\\\n             */\\\\r\\\\n            width: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a line item option.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the product option.\\\\r\\\\n             */\\\\r\\\\n            option: string;\\\\r\\\\n            /**\\\\r\\\\n             * Selected option.\\\\r\\\\n             */\\\\r\\\\n            selection: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order.\\\\r\\\\n         */\\\\r\\\\n        type Order = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique order identifier.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the order was created.\\\\r\\\\n             */\\\\r\\\\n            _dateCreated: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Running order number.\\\\r\\\\n             */\\\\r\\\\n            number: number;\\\\r\\\\n            /**\\\\r\\\\n             * Order currency.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Billing information.\\\\r\\\\n             */\\\\r\\\\n            billingInfo: $w.ThankYouPage.BillingInfo;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer information.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: $w.ThankYouPage.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * Order items.\\\\r\\\\n             */\\\\r\\\\n            lineItems: $w.ThankYouPage.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Order totals.\\\\r\\\\n             */\\\\r\\\\n            totals: $w.ThankYouPage.Totals;\\\\r\\\\n            /**\\\\r\\\\n             * The unit in which the order's weight is\\\\r\\\\n             *  measured. Either `\\\\\\\"KG\\\\\\\"` or `\\\\\\\"LB\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            weightUnit: string;\\\\r\\\\n            /**\\\\r\\\\n             * Shipping information.\\\\r\\\\n             */\\\\r\\\\n            shippingInfo: $w.ThankYouPage.ShippingInfo;\\\\r\\\\n            /**\\\\r\\\\n             * A note added by the buyer.\\\\r\\\\n             */\\\\r\\\\n            buyerNote: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's shipping details.\\\\r\\\\n         */\\\\r\\\\n        type PickupDetails = {\\\\r\\\\n            /**\\\\r\\\\n             * Pickup instructions.\\\\r\\\\n             */\\\\r\\\\n            pickupInstructions: string;\\\\r\\\\n            /**\\\\r\\\\n             * Pickup address.\\\\r\\\\n             */\\\\r\\\\n            pickupAddress: $w.ThankYouPage.Address;\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's shipping details.\\\\r\\\\n         */\\\\r\\\\n        type ShipmentDetails = {\\\\r\\\\n            /**\\\\r\\\\n             * Shipping address.\\\\r\\\\n             */\\\\r\\\\n            address: $w.ThankYouPage.Address;\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's shipping info.\\\\r\\\\n         */\\\\r\\\\n        type ShippingInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Delivery option information.\\\\r\\\\n             */\\\\r\\\\n            deliveryOption: string;\\\\r\\\\n            /**\\\\r\\\\n             * Estimated delivery time.\\\\r\\\\n             */\\\\r\\\\n            estimatedDeliveryTime: string;\\\\r\\\\n            shipmentDetails: $w.ThankYouPage.ShipmentDetails;\\\\r\\\\n            pickupDetails: $w.ThankYouPage.PickupDetails;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's totals.\\\\r\\\\n         */\\\\r\\\\n        type Totals = {\\\\r\\\\n            /**\\\\r\\\\n             * The subtotal of all the order's line items, excluding tax.\\\\r\\\\n             */\\\\r\\\\n            subtotal: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total shipping price, including tax.\\\\r\\\\n             */\\\\r\\\\n            shipping: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total amount of tax.\\\\r\\\\n             */\\\\r\\\\n            tax: string;\\\\r\\\\n            /**\\\\r\\\\n             * The total calculated discount amount.\\\\r\\\\n             */\\\\r\\\\n            discount: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total price.\\\\r\\\\n             */\\\\r\\\\n            total: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total weight of the order's items.\\\\r\\\\n             */\\\\r\\\\n            weight: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total quantity of the the order's line items.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains VAT information.\\\\r\\\\n         */\\\\r\\\\n        type VatId = {\\\\r\\\\n            /**\\\\r\\\\n             * VAT number.\\\\r\\\\n             */\\\\r\\\\n            number: string;\\\\r\\\\n            /**\\\\r\\\\n             * VAT type. Either `\\\\\\\"CFP\\\\\\\"` or `\\\\\\\"CPNJ\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    type dataset = wix_dataset.Dataset;\\\\r\\\\n\\\\r\\\\n    type router_dataset = wix_dataset.DynamicDataset;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_dataset {\\\\r\\\\n    /**\\\\r\\\\n     * A [dataset](wix-dataset.html) connects page elements to a set of items in a data collection.\\\\r\\\\n     */\\\\r\\\\n    interface Dataset {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the current item.\\\\r\\\\n         */\\\\r\\\\n        getCurrentItem(): any;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the current item's index.\\\\r\\\\n         */\\\\r\\\\n        getCurrentItemIndex(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the index of the dataset's current page.\\\\r\\\\n         */\\\\r\\\\n        getCurrentPageIndex(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the selected items.\\\\r\\\\n         */\\\\r\\\\n        getItems(fromIndex: number, numberOfItems: number): Promise<wix_dataset.Dataset.GetItemsResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the dataset's page size.\\\\r\\\\n         */\\\\r\\\\n        getPageSize(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of items in the dataset that match its filter criteria.\\\\r\\\\n         */\\\\r\\\\n        getTotalCount(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the number of pages in the dataset.\\\\r\\\\n         */\\\\r\\\\n        getTotalPageCount(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if there is a next item.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if there is a next page of data.\\\\r\\\\n         */\\\\r\\\\n        hasNextPage(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if there is a previous item.\\\\r\\\\n         */\\\\r\\\\n        hasPrevious(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if there is a previous page of data.\\\\r\\\\n         */\\\\r\\\\n        hasPreviousPage(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Loads the next page of data in addition to the current data.\\\\r\\\\n         */\\\\r\\\\n        loadMore(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Loads the specified page.\\\\r\\\\n         */\\\\r\\\\n        loadPage(pageIndex: number): Promise<any[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Create a new blank item.\\\\r\\\\n         */\\\\r\\\\n        new(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Saves the current item and moves to the next item.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<any>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves to the next page of data.\\\\r\\\\n         */\\\\r\\\\n        nextPage(): Promise<any[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs just after a save.\\\\r\\\\n         */\\\\r\\\\n        onAfterSave(handler: wix_dataset.Dataset.AfterSaveHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs just before a save.\\\\r\\\\n         */\\\\r\\\\n        onBeforeSave(handler: wix_dataset.Dataset.BeforeSaveHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the current index changes.\\\\r\\\\n         */\\\\r\\\\n        onCurrentIndexChanged(handler: wix_dataset.Dataset.CurrentIndexChangedHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an error occurs.\\\\r\\\\n         */\\\\r\\\\n        onError(handler: wix_dataset.Dataset.ErrorHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a value of the current item changes.\\\\r\\\\n         */\\\\r\\\\n        onItemValuesChanged(handler: wix_dataset.Dataset.ItemValuesChangedHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the dataset is ready.\\\\r\\\\n         */\\\\r\\\\n        onReady(handler: wix_dataset.Dataset.ReadyHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Saves the current item and moves to the previous item.\\\\r\\\\n         */\\\\r\\\\n        previous(): Promise<any>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves to the previous page of data.\\\\r\\\\n         */\\\\r\\\\n        previousPage(): Promise<any[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Refetches the contents of the dataset from the collection.\\\\r\\\\n         */\\\\r\\\\n        refresh(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Removes the current item.\\\\r\\\\n         */\\\\r\\\\n        remove(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Reverts the current item to its saved value.\\\\r\\\\n         */\\\\r\\\\n        revert(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Saves the current item.\\\\r\\\\n         */\\\\r\\\\n        save(): Promise<any>;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the current item by index.\\\\r\\\\n         */\\\\r\\\\n        setCurrentItemIndex(index: number): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the value of a field in the current item.\\\\r\\\\n         */\\\\r\\\\n        setFieldValue(fieldKey: string, value: any): void;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the values of a set of fields in the current item.\\\\r\\\\n         */\\\\r\\\\n        setFieldValues(fieldValues: any): void;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the dataset filter.\\\\r\\\\n         */\\\\r\\\\n        setFilter(filter: wix_data.WixDataFilter): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the dataset's page size.\\\\r\\\\n         */\\\\r\\\\n        setPageSize(pageSize: number): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the dataset sort order.\\\\r\\\\n         */\\\\r\\\\n        setSort(sort: wix_data.WixDataSort): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Dataset {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a dataset error.\\\\r\\\\n         */\\\\r\\\\n        type DatasetError = {\\\\r\\\\n            /**\\\\r\\\\n             * Error code.\\\\r\\\\n             */\\\\r\\\\n            code: string;\\\\r\\\\n            /**\\\\r\\\\n             * Error message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `getItems()` function that contains the items retrieved and the total number of items in the dataset that match its filter criteria\\\\r\\\\n         */\\\\r\\\\n        type GetItemsResult = {\\\\r\\\\n            /**\\\\r\\\\n             * List of items objects where key:value pairs are the field keys and field values of the retrieved items, including all hidden fields.\\\\r\\\\n             */\\\\r\\\\n            items: any[];\\\\r\\\\n            /**\\\\r\\\\n             * The number of items in the dataset that match its filter criteria.\\\\r\\\\n             */\\\\r\\\\n            totalCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * The index in the dataset of the first item in the items property.\\\\r\\\\n             */\\\\r\\\\n            offset: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An after save event handler.\\\\r\\\\n         */\\\\r\\\\n        type AfterSaveHandler = (itemBeforeSave: any, itemAfterSave: any)=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A before save event handler.\\\\r\\\\n         */\\\\r\\\\n        type BeforeSaveHandler = ()=>Promise<boolean>;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A current item index change event handler.\\\\r\\\\n         */\\\\r\\\\n        type CurrentIndexChangedHandler = (index: number)=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An error event handler.\\\\r\\\\n         */\\\\r\\\\n        type ErrorHandler = (operation: string, error: wix_dataset.Dataset.DatasetError)=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A current item value change event handler.\\\\r\\\\n         */\\\\r\\\\n        type ItemValuesChangedHandler = (itemBeforeChange: any, updatedItem: any)=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A dataset ready event handler.\\\\r\\\\n         */\\\\r\\\\n        type ReadyHandler = ()=>void;\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A [dataset](wix-dataset.html) connects page elements on a dynamic page to a set of items in a data collection.\\\\r\\\\n     */\\\\r\\\\n    interface DynamicDataset extends wix_dataset.Dataset{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the next dynamic page URL.\\\\r\\\\n         */\\\\r\\\\n        getNextDynamicPage(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the previous dynamic page URL.\\\\r\\\\n         */\\\\r\\\\n        getPreviousDynamicPage(): Promise<string>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace site_monitoring {\\\\r\\\\n    /**\\\\r\\\\n     * A single record of a Wix site event in JSON format.\\\\r\\\\n     */\\\\r\\\\n    interface LogEntry {\\\\r\\\\n        /**\\\\r\\\\n         * Unique identifier for the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly insertId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payload of the log entry in JSON format.\\\\r\\\\n         */\\\\r\\\\n        readonly jsonPayload: site_monitoring.LogEntry.LogEntryJsonPayload;\\\\r\\\\n        /**\\\\r\\\\n         * Additional information about the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly labels: site_monitoring.LogEntry.LogEntryLabels;\\\\r\\\\n        /**\\\\r\\\\n         * Additional information about a potentially long-running operation associated with the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly operation: site_monitoring.LogEntry.LogEntryOperation;\\\\r\\\\n        /**\\\\r\\\\n         * Time the log entry was received by site monitoring.\\\\r\\\\n         */\\\\r\\\\n        readonly receiveTimestamp: string;\\\\r\\\\n        /**\\\\r\\\\n         * Severity of the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly severity: string;\\\\r\\\\n        /**\\\\r\\\\n         * Source code location information associated with the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly sourceLocation: site_monitoring.LogEntry.LogEntrySourceLocation;\\\\r\\\\n        /**\\\\r\\\\n         * Time the site event occurred.\\\\r\\\\n         */\\\\r\\\\n        readonly timestamp: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace LogEntry {\\\\r\\\\n        /**\\\\r\\\\n         * Payload of the log entry in JSON format.\\\\r\\\\n         */\\\\r\\\\n        type LogEntryJsonPayload = {\\\\r\\\\n            /**\\\\r\\\\n             * Payload message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * Additional information about the log entry.\\\\r\\\\n         */\\\\r\\\\n        type LogEntryLabels = {\\\\r\\\\n            /**\\\\r\\\\n             * [`baseUrl`](wix-location.html#baseUrl) of the site with which the log entry is associated.\\\\r\\\\n             */\\\\r\\\\n            siteUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of Wix application with which the log entry is associated, such as Stores or Bookings. The generic namespace `Corvid` represents site code not associated with a specific Wix application. Currently only the `Corvid` namespace is supported.\\\\r\\\\n             */\\\\r\\\\n            namespace: string;\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier for the site. Does not change even if the site name or other site attributes change.\\\\r\\\\n             */\\\\r\\\\n            tenantId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates the viewing mode from which the log entry originates.\\\\r\\\\n             *  One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Preview\\\\\\\"`: Preview mode.\\\\r\\\\n             *  + `\\\\\\\"Site\\\\\\\"`: Published site mode.\\\\r\\\\n             */\\\\r\\\\n            viewMode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier for a specific site [`revision`](wix-site.html#revision). You can use the `revision` property together with the Release Manager to monitor and debug new revisions of your site.\\\\r\\\\n             */\\\\r\\\\n            revision: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * Additional information about a potentially long-running operation associated with the log entry.\\\\r\\\\n         */\\\\r\\\\n        type LogEntryOperation = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier useful for linking together all log entries associated with a specific operation.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Context of the operation, such as a URL path for page code or a web module function name.\\\\r\\\\n             */\\\\r\\\\n            producer: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * Source code location information associated with the log entry. Currently only applicable for backend log entries with the `Corvid` namespace.\\\\r\\\\n         */\\\\r\\\\n        type LogEntrySourceLocation = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the source file.\\\\r\\\\n             */\\\\r\\\\n            file: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line within the source file. 1-based. 0 indicates no line number available.\\\\r\\\\n             */\\\\r\\\\n            line: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_location {\\\\r\\\\n    /**\\\\r\\\\n     * An object used to manage the query segment of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    interface QueryParams {\\\\r\\\\n        /**\\\\r\\\\n         * Adds query parameters to the current page's URL.\\\\r\\\\n         */\\\\r\\\\n        add(toAdd: any): void;\\\\r\\\\n        /**\\\\r\\\\n         * Removes query parameters from the current page's URL.\\\\r\\\\n         */\\\\r\\\\n        remove(toRemove: string[]): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object containing information about a location.\\\\r\\\\n     */\\\\r\\\\n    type Location = {\\\\r\\\\n        /**\\\\r\\\\n         * Location path.\\\\r\\\\n         */\\\\r\\\\n        path: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles location change events.\\\\r\\\\n     */\\\\r\\\\n    type LocationChangeHandler = (event: wix_location.Location)=>void;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_site {\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about which pages and lightboxes to\\\\r\\\\n     *  prefetch resources for.\\\\r\\\\n     */\\\\r\\\\n    type PrefetchItems = {\\\\r\\\\n        /**\\\\r\\\\n         * The relative or absolute URLs of the pages in your site\\\\r\\\\n         *  to prefetch resources for.\\\\r\\\\n         */\\\\r\\\\n        pages: string[];\\\\r\\\\n        /**\\\\r\\\\n         * The names of the lightboxes in your site to prefetch \\\\r\\\\n         *  resources for.\\\\r\\\\n         */\\\\r\\\\n        lightboxes: string[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that is returned from a prefetch request.\\\\r\\\\n     */\\\\r\\\\n    type PrefetchResult = {\\\\r\\\\n        /**\\\\r\\\\n         * A success or failure message.\\\\r\\\\n         */\\\\r\\\\n        message: string;\\\\r\\\\n        /**\\\\r\\\\n         * The errors that occurred.\\\\r\\\\n         */\\\\r\\\\n        errors: wix_site.PrefetchResultError;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that is returned when a resource prefetch is unsuccessful.\\\\r\\\\n     */\\\\r\\\\n    type PrefetchResultError = {\\\\r\\\\n        /**\\\\r\\\\n         * The names of the pages for which prefetch failed.\\\\r\\\\n         */\\\\r\\\\n        pages: string[];\\\\r\\\\n        /**\\\\r\\\\n         * The names of the lightbox for which prefetch failed.\\\\r\\\\n         */\\\\r\\\\n        lightboxes: string[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the site's prefixes.\\\\r\\\\n     */\\\\r\\\\n    type Prefix = {\\\\r\\\\n        /**\\\\r\\\\n         * The name of the prefix.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * The type of the prefix: `\\\\\\\"dynamicPages\\\\\\\"`, `\\\\\\\"router\\\\\\\"`, or `\\\\\\\"app\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * The prefix.\\\\r\\\\n         */\\\\r\\\\n        prefix: string;\\\\r\\\\n        /**\\\\r\\\\n         * If the prefix is an app's prefix, the `applicationId` property is the app's ID.\\\\r\\\\n         */\\\\r\\\\n        applicationId?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the site's pages, prefixes, and lightboxes.\\\\r\\\\n     */\\\\r\\\\n    type SiteStructure = {\\\\r\\\\n        /**\\\\r\\\\n         * The pages of the site.\\\\r\\\\n         */\\\\r\\\\n        pages: wix_site.StructurePage[];\\\\r\\\\n        /**\\\\r\\\\n         * The prefixes of the site's routers and dynamic pages.\\\\r\\\\n         */\\\\r\\\\n        prefixes: wix_site.Prefix[];\\\\r\\\\n        /**\\\\r\\\\n         * The site's lightboxes.\\\\r\\\\n         */\\\\r\\\\n        lightboxes: wix_site.StructureLightbox[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a lightbox on the site.\\\\r\\\\n     */\\\\r\\\\n    type StructureLightbox = {\\\\r\\\\n        /**\\\\r\\\\n         * The name of the lightbox.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a page on the site.\\\\r\\\\n     */\\\\r\\\\n    type StructurePage = {\\\\r\\\\n        /**\\\\r\\\\n         * The name of the page.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * The type of the page: `\\\\\\\"static\\\\\\\"` or `\\\\\\\"template\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * The URL of the page. If the page is a `static` page the `url` property is the page's SEO URL.\\\\r\\\\n         */\\\\r\\\\n        url?: string;\\\\r\\\\n        /**\\\\r\\\\n         * If the page is an app page, the `applicationId` property is the app's ID.\\\\r\\\\n         */\\\\r\\\\n        applicationId?: string;\\\\r\\\\n        /**\\\\r\\\\n         * If the page is a router or dynamic page, the `prefix` property is the page's prefix.\\\\r\\\\n         */\\\\r\\\\n        prefix?: string;\\\\r\\\\n        /**\\\\r\\\\n         * If the page is the Home page, `isHomePage` is `true`. Otherwise, it does not exist.\\\\r\\\\n         */\\\\r\\\\n        isHomePage?: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_storage {\\\\r\\\\n    /**\\\\r\\\\n     * Used for storing local, session, or memory key/value data in the visitor's browser.\\\\r\\\\n     */\\\\r\\\\n    interface Storage {\\\\r\\\\n        /**\\\\r\\\\n         * Removes **all** items from local, session, or memory storage.\\\\r\\\\n         */\\\\r\\\\n        clear(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an item from local, session, or memory storage.\\\\r\\\\n         */\\\\r\\\\n        getItem(key: string): string;\\\\r\\\\n        /**\\\\r\\\\n         * Removes an item from local, session, or memory storage.\\\\r\\\\n         */\\\\r\\\\n        removeItem(key: string): void;\\\\r\\\\n        /**\\\\r\\\\n         * Stores an item in local, session, or memory storage.\\\\r\\\\n         */\\\\r\\\\n        setItem(key: string, value: string): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_window {\\\\r\\\\n    /**\\\\r\\\\n     * A lightbox pops up on your site to grab your visitor's attention.\\\\r\\\\n     */\\\\r\\\\n    interface lightbox {\\\\r\\\\n        /**\\\\r\\\\n         * Closes the lightbox.\\\\r\\\\n         */\\\\r\\\\n        close(data?: any): void;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the data object that was passed to a lightbox.\\\\r\\\\n         */\\\\r\\\\n        getContext(): any;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The Multilingual API is used when working with the languages in a multilingual site.\\\\r\\\\n     */\\\\r\\\\n    interface multilingual {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the site's current display language.\\\\r\\\\n         */\\\\r\\\\n        readonly currentLanguage: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets whether the site has been set up to be shown in multiple languages.\\\\r\\\\n         */\\\\r\\\\n        readonly isEnabled: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets information about the site's languages.\\\\r\\\\n         */\\\\r\\\\n        readonly siteLanguages: wix_window.multilingual.SiteLanguage[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace multilingual {\\\\r\\\\n        /**\\\\r\\\\n         * An object returned by the `siteLanguages` property that contains information about the site's languages.\\\\r\\\\n         */\\\\r\\\\n        type SiteLanguage = {\\\\r\\\\n            /**\\\\r\\\\n             * The language's full name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * The language's locale code, which represents a set of language-related formatting preferences.\\\\r\\\\n             */\\\\r\\\\n            locale: string;\\\\r\\\\n            /**\\\\r\\\\n             * The language's two-letter code.\\\\r\\\\n             */\\\\r\\\\n            languageCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * The language's three-letter country code.\\\\r\\\\n             */\\\\r\\\\n            countryCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the language is the site's primary language.\\\\r\\\\n             */\\\\r\\\\n            isPrimaryLanguage: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The Rendering API is used to control when code is run as a page is being loaded.\\\\r\\\\n     */\\\\r\\\\n    interface rendering {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the current environment the rendering process is running in.\\\\r\\\\n         */\\\\r\\\\n        readonly env: string;\\\\r\\\\n        /**\\\\r\\\\n         * **Deprecated:** Gets the current cycle in the rendering process.\\\\r\\\\n         */\\\\r\\\\n        readonly renderCycle: number;\\\\r\\\\n        /**\\\\r\\\\n         * **Deprecated:** Gets data sent from server-side code to client-side code.\\\\r\\\\n         */\\\\r\\\\n        readonly warmupData: boolean | number | string | any;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Objects used when calling the [`trackEvent()`](wix-window.html#trackEvent) function.\\\\r\\\\n     */\\\\r\\\\n    interface trackingParameters {\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace trackingParameters {\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an AddPaymentInfo track event.\\\\r\\\\n         */\\\\r\\\\n        type AddPaymentInfoEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Describes option information on a checkout page, such as selected payment method.\\\\r\\\\n             */\\\\r\\\\n            option?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an AddProductImpression track event.\\\\r\\\\n         */\\\\r\\\\n        type AddProductImpressionEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product information.\\\\r\\\\n             */\\\\r\\\\n            contents: wix_window.trackingParameters.AddProductImpressionEventContents[];\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an AddProductImpression track event.\\\\r\\\\n         */\\\\r\\\\n        type AddProductImpressionEventContents = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * List or collection the product is in.\\\\r\\\\n             */\\\\r\\\\n            list?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an AddToCart track event.\\\\r\\\\n         */\\\\r\\\\n        type AddToCartEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an CheckoutStep track event.\\\\r\\\\n         */\\\\r\\\\n        type CheckoutStepEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Checkout step number. Be sure to report\\\\r\\\\n             *  consistent step values. For example, use `3` when this step follows\\\\r\\\\n             *  `StartPayment` and `AddPaymentInfo` events.\\\\r\\\\n             */\\\\r\\\\n            step?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Action the visitor has taken, such as `\\\\\\\"Select shipping\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            action?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Describes option information on a checkout page, such as selected payment method.\\\\r\\\\n             */\\\\r\\\\n            option?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a ClickProduct track event.\\\\r\\\\n         */\\\\r\\\\n        type ClickProductEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * List or collection the product is in.\\\\r\\\\n             */\\\\r\\\\n            list?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a CustomEvent track event.\\\\r\\\\n         */\\\\r\\\\n        type CustomEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            event: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an InitiateCheckout track event.\\\\r\\\\n         */\\\\r\\\\n        type InitiateCheckoutEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product information.\\\\r\\\\n             */\\\\r\\\\n            contents: wix_window.trackingParameters.InitiateCheckoutEventContents[];\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an InitiateCheckout track event.\\\\r\\\\n         */\\\\r\\\\n        type InitiateCheckoutEventContents = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a Purchase track event.\\\\r\\\\n         */\\\\r\\\\n        type PurchaseEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the store where the event occurred.\\\\r\\\\n             */\\\\r\\\\n            affiliation?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Total amount of the purchase including shipping, taxes, etc.\\\\r\\\\n             */\\\\r\\\\n            revenue?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total tax charge.\\\\r\\\\n             */\\\\r\\\\n            tax?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total shipping charge.\\\\r\\\\n             */\\\\r\\\\n            shipping?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon code applied to the transaction.\\\\r\\\\n             */\\\\r\\\\n            coupon?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product information.\\\\r\\\\n             */\\\\r\\\\n            contents: wix_window.trackingParameters.PurchaseEventContents[];\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an Purchase track event.\\\\r\\\\n         */\\\\r\\\\n        type PurchaseEventContents = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a RemoveFromCart track event.\\\\r\\\\n         */\\\\r\\\\n        type RemoveFromCartEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an StartPayment track event.\\\\r\\\\n         */\\\\r\\\\n        type StartPaymentEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Describes option information on a checkout page, such as selected payment method.\\\\r\\\\n             */\\\\r\\\\n            option?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a ViewContent track event.\\\\r\\\\n         */\\\\r\\\\n        type ViewContentEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * List or collection the product is in.\\\\r\\\\n             */\\\\r\\\\n            list?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when opening a modal window.\\\\r\\\\n     */\\\\r\\\\n    type OpenModalOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Width of the modal window.\\\\r\\\\n         */\\\\r\\\\n        width: number;\\\\r\\\\n        /**\\\\r\\\\n         * Height of the modal window.\\\\r\\\\n         */\\\\r\\\\n        height: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used for providing options for the `scrollTo()` method.\\\\r\\\\n     */\\\\r\\\\n    type ScrollToOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether to scroll with an animation. Defaults to `true`.\\\\r\\\\n         */\\\\r\\\\n        scrollAnimation: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by the `getBoundingRect()` function that contains information about the window's size, the document's size, and the current scroll position.\\\\r\\\\n     */\\\\r\\\\n    type WindowSizeInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * An object with `height` and `width` key:value pairs containing the size of the viewable area of the current browser window.\\\\r\\\\n         */\\\\r\\\\n        window: any;\\\\r\\\\n        /**\\\\r\\\\n         * An object with `height` and `width` key:value pairs containing the size of the actual body of the page, which may be larger or smaller than the current window.\\\\r\\\\n         */\\\\r\\\\n        document: any;\\\\r\\\\n        /**\\\\r\\\\n         * An object with `x` and `y` key:value pairs containing the scroll offset of the page within the window from the top-left corner.\\\\r\\\\n         */\\\\r\\\\n        scroll: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_billing_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired by actions relating to billing.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an invoice is created.\\\\r\\\\n         */\\\\r\\\\n        onInvoiceCreated(event: wix_billing_backend.invoices.Invoice): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an invoice is overdue.\\\\r\\\\n         */\\\\r\\\\n        onInvoiceOverdue(event: wix_billing_backend.invoices.Invoice): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an invoice is paid.\\\\r\\\\n         */\\\\r\\\\n        onInvoicePaid(event: wix_billing_backend.invoices.Invoice): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an invoice is sent.\\\\r\\\\n         */\\\\r\\\\n        onInvoiceSent(event: wix_billing_backend.invoices.Invoice): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a price quote is accepted.\\\\r\\\\n         */\\\\r\\\\n        onPriceQuoteAccepted(event: wix_billing_backend.priceQuotes.PriceQuote): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a price quote is created.\\\\r\\\\n         */\\\\r\\\\n        onPriceQuoteCreated(event: wix_billing_backend.priceQuotes.PriceQuote): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a price quote has expired.\\\\r\\\\n         */\\\\r\\\\n        onPriceQuoteExpired(event: wix_billing_backend.priceQuotes.PriceQuote): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a price quote is sent.\\\\r\\\\n         */\\\\r\\\\n        onPriceQuoteSent(event: wix_billing_backend.priceQuotes.PriceQuote): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The wix-billing-backend module contains functionality for working with\\\\r\\\\n     *  [your site's invoices](https://support.wix.com/en/article/about-wix-invoices)\\\\r\\\\n     *  from backend code.\\\\r\\\\n     */\\\\r\\\\n    interface invoices {\\\\r\\\\n        /**\\\\r\\\\n         * Adds a payment to the invoice and reports the payment to the payment provider.\\\\r\\\\n         */\\\\r\\\\n        addPayment(id: wix_billing_backend.invoices.IdAndVersion, payment: wix_billing_backend.invoices.Payment): Promise<wix_billing_backend.invoices.Response>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new invoice.\\\\r\\\\n         */\\\\r\\\\n        createInvoice(invoiceFields: wix_billing_backend.invoices.InvoiceFields): Promise<wix_billing_backend.invoices.Response>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a link that can be used by a customer to preview the invoice.\\\\r\\\\n         */\\\\r\\\\n        createInvoicePreviewUrl(id: wix_billing_backend.invoices.IdAndVersion): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes an invoice by ID.\\\\r\\\\n         */\\\\r\\\\n        deleteInvoice(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an existing invoice by ID.\\\\r\\\\n         */\\\\r\\\\n        getInvoice(id: string): Promise<wix_billing_backend.invoices.Invoice>;\\\\r\\\\n        /**\\\\r\\\\n         * Sends an invoice preview link to a customer via email.\\\\r\\\\n         */\\\\r\\\\n        sendInvoice(id: wix_billing_backend.invoices.IdAndVersion, emailInfo: wix_billing_backend.invoices.EmailInfo): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Update an existing invoice.\\\\r\\\\n         */\\\\r\\\\n        updateInvoice(id: wix_billing_backend.invoices.IdAndVersion, invoiceFields: wix_billing_backend.invoices.InvoiceFields): Promise<wix_billing_backend.invoices.Response>;\\\\r\\\\n        /**\\\\r\\\\n         * Voids an invoice.\\\\r\\\\n         */\\\\r\\\\n        voidInvoice(id: wix_billing_backend.invoices.IdAndVersion): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace invoices {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains address information.\\\\r\\\\n         */\\\\r\\\\n        type Address = {\\\\r\\\\n            /**\\\\r\\\\n             * Address line.\\\\r\\\\n             */\\\\r\\\\n            addressLine: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address subdivision.\\\\r\\\\n             */\\\\r\\\\n            subdivision: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address postal code.\\\\r\\\\n             */\\\\r\\\\n            postalCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address in human readable format.\\\\r\\\\n             */\\\\r\\\\n            formatted: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains calculated tax information.\\\\r\\\\n         */\\\\r\\\\n        type CalculatedTax = {\\\\r\\\\n            /**\\\\r\\\\n             * Tax name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Tax rate.\\\\r\\\\n             */\\\\r\\\\n            rate: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total value of taxable goods.\\\\r\\\\n             */\\\\r\\\\n            taxable: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total amount of tax applied.\\\\r\\\\n             */\\\\r\\\\n            taxed: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains customer information.\\\\r\\\\n         */\\\\r\\\\n        type Customer = {\\\\r\\\\n            /**\\\\r\\\\n             * Contact ID.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Physical address.\\\\r\\\\n             */\\\\r\\\\n            address?: wix_billing_backend.invoices.Address;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Company name.\\\\r\\\\n             */\\\\r\\\\n            company?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Full name.\\\\r\\\\n             */\\\\r\\\\n            fullName?: string;\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains discount information.\\\\r\\\\n         */\\\\r\\\\n        type Discount = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount amount.\\\\r\\\\n             */\\\\r\\\\n            value: number;\\\\r\\\\n            /**\\\\r\\\\n             * Discount type.\\\\r\\\\n             * \\\\r\\\\n             * Either:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"Fixed\\\\\\\"`: A fixed amount is deducted.\\\\r\\\\n             * + `\\\\\\\"Percentage\\\\\\\"`: A percentage of the total amount is deducted.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information used to send an invoice to a customer.\\\\r\\\\n         */\\\\r\\\\n        type EmailInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Email subject.\\\\r\\\\n             */\\\\r\\\\n            subject: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email body. Limited formatting in the email body can be\\\\r\\\\n             * achieved using standard JavaScript string formatting.\\\\r\\\\n             */\\\\r\\\\n            body: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains ID and version information.\\\\r\\\\n         */\\\\r\\\\n        type IdAndVersion = {\\\\r\\\\n            /**\\\\r\\\\n             * Invoice ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Invoice version.\\\\r\\\\n             */\\\\r\\\\n            version: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that represents an invoice.\\\\r\\\\n         */\\\\r\\\\n        type Invoice = {\\\\r\\\\n            /**\\\\r\\\\n             * ID and version of the invoice.\\\\r\\\\n             */\\\\r\\\\n            id: wix_billing_backend.invoices.IdAndVersion;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the invoice.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Draft\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Sent\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Processing\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Paid\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Overdue\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Void\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Deleted\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"PartiallyPaid\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"PartialAndOverdue\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * Number of the invoice, unique within your site.\\\\r\\\\n             */\\\\r\\\\n            number: string;\\\\r\\\\n            /**\\\\r\\\\n             * Title of the invoice.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Locale information.\\\\r\\\\n             */\\\\r\\\\n            locale: wix_billing_backend.invoices.Locale;\\\\r\\\\n            /**\\\\r\\\\n             * Customer listed on the invoice.\\\\r\\\\n             */\\\\r\\\\n            customer: wix_billing_backend.invoices.Customer;\\\\r\\\\n            /**\\\\r\\\\n             * Line items listed on the invoice.\\\\r\\\\n             */\\\\r\\\\n            lineItems: wix_billing_backend.invoices.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Discount included in the invoice.\\\\r\\\\n             */\\\\r\\\\n            discount: wix_billing_backend.invoices.Discount;\\\\r\\\\n            /**\\\\r\\\\n             * List of payments already received from the customer.\\\\r\\\\n             */\\\\r\\\\n            payments: wix_billing_backend.invoices.Payment[];\\\\r\\\\n            /**\\\\r\\\\n             * List of taxes calculated based on the line items.\\\\r\\\\n             */\\\\r\\\\n            taxes: wix_billing_backend.invoices.CalculatedTax[];\\\\r\\\\n            /**\\\\r\\\\n             * Total values.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_billing_backend.invoices.TotalPrice;\\\\r\\\\n            /**\\\\r\\\\n             * Invoice dynamic totals.\\\\r\\\\n             */\\\\r\\\\n            dynamicTotals: wix_billing_backend.invoices.InvoiceDynamicTotals;\\\\r\\\\n            /**\\\\r\\\\n             * Additional metadata included in the invoice.\\\\r\\\\n             */\\\\r\\\\n            metadata: wix_billing_backend.invoices.MetaData;\\\\r\\\\n            /**\\\\r\\\\n             * Dates associated with the invoice.\\\\r\\\\n             */\\\\r\\\\n            dates: wix_billing_backend.invoices.InvoiceDates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains date information for an invoice.\\\\r\\\\n         */\\\\r\\\\n        type InvoiceDates = {\\\\r\\\\n            /**\\\\r\\\\n             * Invoice issue date.\\\\r\\\\n             */\\\\r\\\\n            issueDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Invoice due date.\\\\r\\\\n             */\\\\r\\\\n            dueDate: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about invoice totals that change when payments are received.\\\\r\\\\n         */\\\\r\\\\n        type InvoiceDynamicTotals = {\\\\r\\\\n            /**\\\\r\\\\n             * Amount paid.\\\\r\\\\n             */\\\\r\\\\n            paidAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Balance amount.\\\\r\\\\n             */\\\\r\\\\n            balance: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information used when creating or updating an invoice.\\\\r\\\\n         */\\\\r\\\\n        type InvoiceFields = {\\\\r\\\\n            /**\\\\r\\\\n             * Title of the invoice.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Customer listed on the invoice.\\\\r\\\\n             */\\\\r\\\\n            customer: wix_billing_backend.invoices.Customer;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line items listed on the invoice.\\\\r\\\\n             */\\\\r\\\\n            lineItems: wix_billing_backend.invoices.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Discount included in the invoice.\\\\r\\\\n             */\\\\r\\\\n            discount?: wix_billing_backend.invoices.Discount;\\\\r\\\\n            /**\\\\r\\\\n             * Invoice payments.\\\\r\\\\n             */\\\\r\\\\n            payments: wix_billing_backend.invoices.Payment[];\\\\r\\\\n            /**\\\\r\\\\n             * Invoice metadata.\\\\r\\\\n             */\\\\r\\\\n            metadata?: wix_billing_backend.invoices.MetaData;\\\\r\\\\n            /**\\\\r\\\\n             * Dates associated with the invoice.\\\\r\\\\n             */\\\\r\\\\n            dates: wix_billing_backend.invoices.InvoiceDates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains itemized fee information.\\\\r\\\\n         */\\\\r\\\\n        type ItemizedFee = {\\\\r\\\\n            /**\\\\r\\\\n             * Item fee name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Item fee price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains line item information.\\\\r\\\\n         */\\\\r\\\\n        type LineItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Line item ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item taxes.\\\\r\\\\n             */\\\\r\\\\n            taxes?: wix_billing_backend.invoices.LineItemTax[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains tax information for a line item.\\\\r\\\\n         */\\\\r\\\\n        type LineItemTax = {\\\\r\\\\n            /**\\\\r\\\\n             * Line item tax name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item tax rate.\\\\r\\\\n             */\\\\r\\\\n            rate: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains locale information.\\\\r\\\\n         */\\\\r\\\\n        type Locale = {\\\\r\\\\n            /**\\\\r\\\\n             * An IETF language tag.\\\\r\\\\n             * Some common language tags include:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"en-US\\\\\\\"`: English, United States\\\\r\\\\n             * + `\\\\\\\"en-GB\\\\\\\"`: English, British\\\\r\\\\n             * + `\\\\\\\"es-ES\\\\\\\"`: Spanish, Spain\\\\r\\\\n             * + `\\\\\\\"de-DE\\\\\\\"`: German, Germany\\\\r\\\\n             * + `\\\\\\\"ja-JP\\\\\\\"`: Japanese, Japan\\\\r\\\\n             * + `\\\\\\\"fr-CH\\\\\\\"`: French, Switzerland\\\\r\\\\n             * + `\\\\\\\"it-IT\\\\\\\"`: Italian, Italy\\\\r\\\\n             */\\\\r\\\\n            language: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains metadata information.\\\\r\\\\n         */\\\\r\\\\n        type MetaData = {\\\\r\\\\n            /**\\\\r\\\\n             * Invoice notes.\\\\r\\\\n             */\\\\r\\\\n            notes?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Legal terms.\\\\r\\\\n             */\\\\r\\\\n            legalTerms?: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL to legal terms.\\\\r\\\\n             */\\\\r\\\\n            sourceUrl?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about an invoice payment.\\\\r\\\\n         */\\\\r\\\\n        type Payment = {\\\\r\\\\n            /**\\\\r\\\\n             * Payment id.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Payment type, describing how the payment was made.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Payment amount.\\\\r\\\\n             */\\\\r\\\\n            amount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Payment date.\\\\r\\\\n             */\\\\r\\\\n            date: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains response information.\\\\r\\\\n         */\\\\r\\\\n        type Response = {\\\\r\\\\n            /**\\\\r\\\\n             * ID and version information.\\\\r\\\\n             */\\\\r\\\\n            id: wix_billing_backend.invoices.IdAndVersion;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains price totals.\\\\r\\\\n         */\\\\r\\\\n        type TotalPrice = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount amount.\\\\r\\\\n             */\\\\r\\\\n            discountAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * List of itemized fees.\\\\r\\\\n             */\\\\r\\\\n            fees: wix_billing_backend.invoices.ItemizedFee[];\\\\r\\\\n            /**\\\\r\\\\n             * Sum of line item tax amounts.\\\\r\\\\n             */\\\\r\\\\n            taxedAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Subtotal of the line items without the tax included.\\\\r\\\\n             */\\\\r\\\\n            subtotal: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total price of the itemized fees and taxes.\\\\r\\\\n             */\\\\r\\\\n            total: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The wix-billing-backend module contains functionality for working with\\\\r\\\\n     *  your site's [price quotes](https://support.wix.com/en/article/about-price-quotes)\\\\r\\\\n     *  from backend code.\\\\r\\\\n     */\\\\r\\\\n    interface priceQuotes {\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new price quote.\\\\r\\\\n         */\\\\r\\\\n        createPriceQuote(priceQuoteInfo: wix_billing_backend.priceQuotes.PriceQuoteInfo): Promise<wix_billing_backend.priceQuotes.Response>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes a price quote by ID.\\\\r\\\\n         */\\\\r\\\\n        deletePriceQuote(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an existing price quote by ID.\\\\r\\\\n         */\\\\r\\\\n        getPriceQuote(id: string): Promise<wix_billing_backend.priceQuotes.PriceQuote>;\\\\r\\\\n        /**\\\\r\\\\n         * Sends a price quote preview link to a customer via email.\\\\r\\\\n         */\\\\r\\\\n        sendPriceQuote(id: wix_billing_backend.priceQuotes.IdAndVersion, emailInfo: wix_billing_backend.priceQuotes.EmailInfo): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates an existing price quote.\\\\r\\\\n         */\\\\r\\\\n        updatePriceQuote(id: wix_billing_backend.priceQuotes.IdAndVersion, priceQuoteInfo: wix_billing_backend.priceQuotes.PriceQuoteInfo): Promise<wix_billing_backend.priceQuotes.Response>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace priceQuotes {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains address information.\\\\r\\\\n         */\\\\r\\\\n        type Address = {\\\\r\\\\n            /**\\\\r\\\\n             * Address line.\\\\r\\\\n             */\\\\r\\\\n            addressLine: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address subdivision.\\\\r\\\\n             */\\\\r\\\\n            subdivision: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address postal code.\\\\r\\\\n             */\\\\r\\\\n            postalCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address in human readable format.\\\\r\\\\n             */\\\\r\\\\n            formatted: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains calculated tax information.\\\\r\\\\n         */\\\\r\\\\n        type CalculatedTax = {\\\\r\\\\n            /**\\\\r\\\\n             * Tax name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Tax rate.\\\\r\\\\n             */\\\\r\\\\n            rate: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total value of taxable goods.\\\\r\\\\n             */\\\\r\\\\n            taxable: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total amount of tax applied.\\\\r\\\\n             */\\\\r\\\\n            taxed: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains customer information.\\\\r\\\\n         */\\\\r\\\\n        type Customer = {\\\\r\\\\n            /**\\\\r\\\\n             * Contact ID.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Physical address.\\\\r\\\\n             */\\\\r\\\\n            address?: wix_billing_backend.priceQuotes.Address;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Company name.\\\\r\\\\n             */\\\\r\\\\n            company?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Full name.\\\\r\\\\n             */\\\\r\\\\n            fullName?: string;\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains discount information.\\\\r\\\\n         */\\\\r\\\\n        type Discount = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount amount.\\\\r\\\\n             */\\\\r\\\\n            value: number;\\\\r\\\\n            /**\\\\r\\\\n             * Discount type.\\\\r\\\\n             * \\\\r\\\\n             * Either:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"Fixed\\\\\\\"`: A fixed amount is deducted.\\\\r\\\\n             * + `\\\\\\\"Percentage\\\\\\\"`: A percentage of the total amount is deducted.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information used to send a price quote to a customer.\\\\r\\\\n         */\\\\r\\\\n        type EmailInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Email subject.\\\\r\\\\n             */\\\\r\\\\n            subject: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email body. Limited formatting in the email body can be\\\\r\\\\n             * achieved using standard JavaScript string formatting.\\\\r\\\\n             */\\\\r\\\\n            body: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains ID and version information.\\\\r\\\\n         */\\\\r\\\\n        type IdAndVersion = {\\\\r\\\\n            /**\\\\r\\\\n             * Price quote ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Price quote version.\\\\r\\\\n             */\\\\r\\\\n            version: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains itemized fee information.\\\\r\\\\n         */\\\\r\\\\n        type ItemizedFee = {\\\\r\\\\n            /**\\\\r\\\\n             * Item fee name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Item fee price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains line item information.\\\\r\\\\n         */\\\\r\\\\n        type LineItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Line item ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item taxes.\\\\r\\\\n             */\\\\r\\\\n            taxes?: wix_billing_backend.priceQuotes.LineItemTax[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains tax information for a line item.\\\\r\\\\n         */\\\\r\\\\n        type LineItemTax = {\\\\r\\\\n            /**\\\\r\\\\n             * Line item tax name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item tax rate.\\\\r\\\\n             */\\\\r\\\\n            rate: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains locale information.\\\\r\\\\n         */\\\\r\\\\n        type Locale = {\\\\r\\\\n            /**\\\\r\\\\n             * An IETF language tag.\\\\r\\\\n             * Some common language tags include:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"en-US\\\\\\\"`: English, United States\\\\r\\\\n             * + `\\\\\\\"en-GB\\\\\\\"`: English, British\\\\r\\\\n             * + `\\\\\\\"es-ES\\\\\\\"`: Spanish, Spain\\\\r\\\\n             * + `\\\\\\\"de-DE\\\\\\\"`: German, Germany\\\\r\\\\n             * + `\\\\\\\"ja-JP\\\\\\\"`: Japanese, Japan\\\\r\\\\n             * + `\\\\\\\"fr-CH\\\\\\\"`: French, Switzerland\\\\r\\\\n             * + `\\\\\\\"it-IT\\\\\\\"`: Italian, Italy\\\\r\\\\n             */\\\\r\\\\n            language: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains metadata information.\\\\r\\\\n         */\\\\r\\\\n        type MetaData = {\\\\r\\\\n            /**\\\\r\\\\n             * Price quote notes.\\\\r\\\\n             */\\\\r\\\\n            notes?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Legal terms.\\\\r\\\\n             */\\\\r\\\\n            legalTerms?: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL to legal terms.\\\\r\\\\n             */\\\\r\\\\n            sourceUrl?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about price quote payment terms.\\\\r\\\\n         */\\\\r\\\\n        type PaymentTerms = {\\\\r\\\\n            /**\\\\r\\\\n             * Price quote term type.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"DueOnReceipt\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"NetPlus\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"TimeStamp\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Other\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            termType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Term data. When `termType` is `\\\\\\\"NetPlus\\\\\\\"`,\\\\r\\\\n             *  `termData` contains a positive integer indicating how many days after the charge\\\\r\\\\n             *  payment is due.\\\\r\\\\n             */\\\\r\\\\n            termData?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that represents a price quote.\\\\r\\\\n         */\\\\r\\\\n        type PriceQuote = {\\\\r\\\\n            /**\\\\r\\\\n             * ID and version of the price quote.\\\\r\\\\n             */\\\\r\\\\n            id: wix_billing_backend.priceQuotes.IdAndVersion;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the price quote.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Draft\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Sent\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Processing\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Accepted\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Rejected\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Expired\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Void\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Deleted\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Invoiced\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * Number of the price quote, unique within your site.\\\\r\\\\n             */\\\\r\\\\n            number: string;\\\\r\\\\n            /**\\\\r\\\\n             * Title of the price quote.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Locale information.\\\\r\\\\n             */\\\\r\\\\n            locale: wix_billing_backend.priceQuotes.Locale;\\\\r\\\\n            /**\\\\r\\\\n             * Customer listed on the price quote.\\\\r\\\\n             */\\\\r\\\\n            customer: wix_billing_backend.priceQuotes.Customer;\\\\r\\\\n            /**\\\\r\\\\n             * Line items listed on the price quote.\\\\r\\\\n             */\\\\r\\\\n            lineItems: wix_billing_backend.priceQuotes.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Discount included in the price quote.\\\\r\\\\n             */\\\\r\\\\n            discount: wix_billing_backend.priceQuotes.Discount;\\\\r\\\\n            /**\\\\r\\\\n             * Payment terms.\\\\r\\\\n             */\\\\r\\\\n            paymentTerms: wix_billing_backend.priceQuotes.PaymentTerms;\\\\r\\\\n            /**\\\\r\\\\n             * List of taxes calculated based on the line items.\\\\r\\\\n             */\\\\r\\\\n            taxes: wix_billing_backend.priceQuotes.CalculatedTax[];\\\\r\\\\n            /**\\\\r\\\\n             * Total values.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_billing_backend.priceQuotes.TotalPrice;\\\\r\\\\n            /**\\\\r\\\\n             * Additional metadata included in the price quote.\\\\r\\\\n             */\\\\r\\\\n            metadata: wix_billing_backend.priceQuotes.MetaData;\\\\r\\\\n            /**\\\\r\\\\n             * Price quote company ID.\\\\r\\\\n             */\\\\r\\\\n            companyId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Price quote invoice ID, when converting price quote to invoice.\\\\r\\\\n             */\\\\r\\\\n            invoiceId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Dates associated with the price quote.\\\\r\\\\n             */\\\\r\\\\n            dates: wix_billing_backend.priceQuotes.PriceQuoteDates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains date information for a price quote.\\\\r\\\\n         */\\\\r\\\\n        type PriceQuoteDates = {\\\\r\\\\n            /**\\\\r\\\\n             * Date the price quote was issued.\\\\r\\\\n             */\\\\r\\\\n            issueDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Date that the price quote is valid until.\\\\r\\\\n             */\\\\r\\\\n            validThroughDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Date the price quote was accepted.\\\\r\\\\n             */\\\\r\\\\n            acceptanceDate?: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Date the price quote was last seen.\\\\r\\\\n             */\\\\r\\\\n            lastSeenDate?: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information used when creating or updating a price quote.\\\\r\\\\n         */\\\\r\\\\n        type PriceQuoteInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Title of the price quote.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Customer listed on the price quote.\\\\r\\\\n             */\\\\r\\\\n            customer: wix_billing_backend.priceQuotes.Customer;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line items listed on the price quote.\\\\r\\\\n             */\\\\r\\\\n            lineItems: wix_billing_backend.priceQuotes.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Discount included in the price quote.\\\\r\\\\n             */\\\\r\\\\n            discount?: wix_billing_backend.priceQuotes.Discount;\\\\r\\\\n            /**\\\\r\\\\n             * Payment terms.\\\\r\\\\n             */\\\\r\\\\n            paymentTerms: wix_billing_backend.priceQuotes.PaymentTerms;\\\\r\\\\n            /**\\\\r\\\\n             * Price quote metadata.\\\\r\\\\n             */\\\\r\\\\n            metadata?: wix_billing_backend.priceQuotes.MetaData;\\\\r\\\\n            /**\\\\r\\\\n             * Dates associated with the price quote.\\\\r\\\\n             */\\\\r\\\\n            dates: wix_billing_backend.priceQuotes.PriceQuoteDates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains response information.\\\\r\\\\n         */\\\\r\\\\n        type Response = {\\\\r\\\\n            /**\\\\r\\\\n             * ID and version information.\\\\r\\\\n             */\\\\r\\\\n            id: wix_billing_backend.priceQuotes.IdAndVersion;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains price totals.\\\\r\\\\n         */\\\\r\\\\n        type TotalPrice = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount amount.\\\\r\\\\n             */\\\\r\\\\n            discountAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * List of itemized fees.\\\\r\\\\n             */\\\\r\\\\n            fees: wix_billing_backend.priceQuotes.ItemizedFee[];\\\\r\\\\n            /**\\\\r\\\\n             * Sum of line item tax amounts.\\\\r\\\\n             */\\\\r\\\\n            taxedAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Subtotal of the line items without the tax included.\\\\r\\\\n             */\\\\r\\\\n            subtotal: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total price of the itemized fees and taxes.\\\\r\\\\n             */\\\\r\\\\n            total: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_captcha_backend {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a CAPTCHA authorization error message.\\\\r\\\\n     */\\\\r\\\\n    type ErrorReport = {\\\\r\\\\n        /**\\\\r\\\\n         * Error message.\\\\r\\\\n         */\\\\r\\\\n        error: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a CAPTCHA authorization success message.\\\\r\\\\n     */\\\\r\\\\n    type SuccessReport = {\\\\r\\\\n        /**\\\\r\\\\n         * Value is `true` when authorization is successful.\\\\r\\\\n         */\\\\r\\\\n        success: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_chat_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired by actions relating to chat messages.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a chat message is sent to or from the business.\\\\r\\\\n         */\\\\r\\\\n        onMessage(event: wix_chat_backend.Events.SendMessageEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * The content of a chat message.\\\\r\\\\n         */\\\\r\\\\n        type MessagePayload = {\\\\r\\\\n            /**\\\\r\\\\n             * Text of the chat message.\\\\r\\\\n             */\\\\r\\\\n            text: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a chat message that was sent.\\\\r\\\\n         */\\\\r\\\\n        type SendMessageEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the channel on which the message was sent.\\\\r\\\\n             */\\\\r\\\\n            channelId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Direction of the message.\\\\r\\\\n             * One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"VisitorToBusiness\\\\\\\"`: From a site visitor to the business.\\\\r\\\\n             *  + `\\\\\\\"BusinessToVisitor\\\\\\\"`: From the business to a site visitor.\\\\r\\\\n             */\\\\r\\\\n            direction: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of message. Currently only `TEXT` is supported.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * First 250 characters of the chat message. Currently only text is included in the summary.\\\\r\\\\n             */\\\\r\\\\n            summary: string;\\\\r\\\\n            /**\\\\r\\\\n             * The sender's member ID. For a message sent from the site's business, the site owner's member ID.\\\\r\\\\n             */\\\\r\\\\n            participantId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time the message was sent.\\\\r\\\\n             */\\\\r\\\\n            createdAt: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Content of the message.\\\\r\\\\n             */\\\\r\\\\n            payload: wix_chat_backend.Events.MessagePayload;\\\\r\\\\n            /**\\\\r\\\\n             * An object representing additional contextual message information included in a chat message. The site visitor does not see the metadata.\\\\r\\\\n             */\\\\r\\\\n            metadata?: any;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a chat message to be sent.\\\\r\\\\n     */\\\\r\\\\n    type MessageInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * The content of the message.\\\\r\\\\n         */\\\\r\\\\n        messageText: string;\\\\r\\\\n        /**\\\\r\\\\n         * The ID of the channel to send the message to. Currently only IDs of business channels are supported.\\\\r\\\\n         */\\\\r\\\\n        channelId: string;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing additional contextual message information included in a chat message. The site visitor does not see the metadata.\\\\r\\\\n         */\\\\r\\\\n        metadata?: any;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the message is sent from the visitor to the business. If `sendAsVisitor` is `true`, the message is sent from the site visitor to the business. If `sendAsVisitor` is `undefined` or `false`, the message is sent from the business to the site visitor. The default is `undefined`.\\\\r\\\\n         */\\\\r\\\\n        sendAsVisitor?: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_http_functions {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an incoming request received by a call to an HTTP function.\\\\r\\\\n     */\\\\r\\\\n    interface WixHttpFunctionRequest {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the base URL of a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly baseUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns an object representing the body of the incoming call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly body: wix_http_functions.WixHttpFunctionRequest.WixHttpFunctionRequestBody;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the function name of a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly functionName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the HTTP header fields used in a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly headers: any;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the IP address of the client who called the HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly ip: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the HTTP method used in calling an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly method: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the path of the URL used to call an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly path: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the query fields and values of the URL used to call an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly query: any;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the full URL of a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly url: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace WixHttpFunctionRequest {\\\\r\\\\n        /**\\\\r\\\\n         * An object returned by the `body` property representing the body of a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        type WixHttpFunctionRequestBody = {\\\\r\\\\n            /**\\\\r\\\\n             * Returns a Promise which resolves to the body of the call as a string.\\\\r\\\\n             */\\\\r\\\\n            \\\\\\\"text()\\\\\\\": Promise<string>;\\\\r\\\\n            /**\\\\r\\\\n             * Returns a Promise which resolves to the body of the call as a JSON object.\\\\r\\\\n             */\\\\r\\\\n            \\\\\\\"json()\\\\\\\": Promise<any>;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a response to an HTTP function request.\\\\r\\\\n     */\\\\r\\\\n    interface WixHttpFunctionResponse {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the body of the response as a string or binary buffer.\\\\r\\\\n         */\\\\r\\\\n        body: string | Buffer;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the HTTP response header fields.\\\\r\\\\n         */\\\\r\\\\n        headers: any;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the HTTP status code of the response.\\\\r\\\\n         */\\\\r\\\\n        status: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used to customize a response to an HTTP function call.\\\\r\\\\n     */\\\\r\\\\n    type WixHttpFunctionResponseOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * The response's HTTP status code.\\\\r\\\\n         */\\\\r\\\\n        status?: number;\\\\r\\\\n        /**\\\\r\\\\n         * The response's body.\\\\r\\\\n         */\\\\r\\\\n        body?: string | Buffer;\\\\r\\\\n        /**\\\\r\\\\n         * The response's header fields. The `headers` property contains an object of `key:value` pairs where the `key` is the header field name and the `value` is the header field value.\\\\r\\\\n         */\\\\r\\\\n        headers?: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_crm_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired by actions relating to site contacts.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a new workflow card is created.\\\\r\\\\n         */\\\\r\\\\n        onCardCreated(event: wix_crm_backend.Events.CardCreatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a workflow card is moved.\\\\r\\\\n         */\\\\r\\\\n        onCardMoved(event: wix_crm_backend.Events.CardMovedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a workflow card is moved.\\\\r\\\\n         */\\\\r\\\\n        onCardRestored(event: wix_crm_backend.Events.CardRestoredEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a user submits a form.\\\\r\\\\n         */\\\\r\\\\n        onFormSubmit(event: wix_crm_backend.Events.FormSubmitEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a created card.\\\\r\\\\n         */\\\\r\\\\n        type CardCreatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's workflow.\\\\r\\\\n             */\\\\r\\\\n            workflowId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's workflow.\\\\r\\\\n             */\\\\r\\\\n            workflowName: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's phase.\\\\r\\\\n             */\\\\r\\\\n            phaseId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's phase.\\\\r\\\\n             */\\\\r\\\\n            phaseName: string;\\\\r\\\\n            /**\\\\r\\\\n             * The card that was created.\\\\r\\\\n             */\\\\r\\\\n            card: wix_crm_backend.workflows.Card;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a moved card.\\\\r\\\\n         */\\\\r\\\\n        type CardMovedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's workflow.\\\\r\\\\n             */\\\\r\\\\n            workflowId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's workflow.\\\\r\\\\n             */\\\\r\\\\n            workflowName: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's new phase.\\\\r\\\\n             */\\\\r\\\\n            newPhaseId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's new phase.\\\\r\\\\n             */\\\\r\\\\n            newPhaseName: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's old phase.\\\\r\\\\n             */\\\\r\\\\n            previousPhaseId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's old phase.\\\\r\\\\n             */\\\\r\\\\n            previousPhaseName: string;\\\\r\\\\n            /**\\\\r\\\\n             * The card that was moved.\\\\r\\\\n             */\\\\r\\\\n            card: wix_crm_backend.workflows.Card;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a moved card.\\\\r\\\\n         */\\\\r\\\\n        type CardRestoredEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the workflow the card was restored to.\\\\r\\\\n             */\\\\r\\\\n            workflowId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the workflow the card was restored to.\\\\r\\\\n             */\\\\r\\\\n            workflowName: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the phase the card was restored to.\\\\r\\\\n             */\\\\r\\\\n            phaseId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the phase the card was restored to.\\\\r\\\\n             */\\\\r\\\\n            phaseName: string;\\\\r\\\\n            /**\\\\r\\\\n             * The card that was restored.\\\\r\\\\n             */\\\\r\\\\n            card: wix_crm_backend.workflows.Card;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an attachment to a form.\\\\r\\\\n         */\\\\r\\\\n        type FormAttachment = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the attachment.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of attachment.\\\\r\\\\n             * One of:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"UNDEFINED\\\\\\\"`\\\\r\\\\n             * + `\\\\\\\"DOCUMENT\\\\\\\"`\\\\r\\\\n             * + `\\\\\\\"IMAGE\\\\\\\"`\\\\r\\\\n             * + `\\\\\\\"VIDEO\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the attachment.\\\\r\\\\n             */\\\\r\\\\n            url: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a form field.\\\\r\\\\n         */\\\\r\\\\n        type FormField = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the field.\\\\r\\\\n             */\\\\r\\\\n            fieldName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Value of the field.\\\\r\\\\n             */\\\\r\\\\n            fieldValue: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a form.\\\\r\\\\n         */\\\\r\\\\n        type FormSubmitEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Contact ID of the user submitting the form.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the form.\\\\r\\\\n             */\\\\r\\\\n            formName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time that the form was submitted.\\\\r\\\\n             */\\\\r\\\\n            submissionTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Data submitted in the form. The object contains key:value pairs where the key is the field name and the value is the contents of the field.\\\\r\\\\n             */\\\\r\\\\n            submissionData: wix_crm_backend.Events.FormField[];\\\\r\\\\n            /**\\\\r\\\\n             * The form's attachments.\\\\r\\\\n             */\\\\r\\\\n            attachments: wix_crm_backend.Events.FormAttachment[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The Notifications API is used to send notifications to the site owner and contributors.\\\\r\\\\n     */\\\\r\\\\n    interface notifications {\\\\r\\\\n        /**\\\\r\\\\n         * Sends a notification.\\\\r\\\\n         */\\\\r\\\\n        notify(body: string, channels: string[], options: wix_crm_backend.notifications.NotificationOptions): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace notifications {\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about where to navigate when a notification is clicked.\\\\r\\\\n         */\\\\r\\\\n        type ActionTarget = {\\\\r\\\\n            /**\\\\r\\\\n             * URL to navigate to when the `actionTitle` text is clicked.\\\\r\\\\n             */\\\\r\\\\n            url?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing notification options.\\\\r\\\\n         */\\\\r\\\\n        type NotificationOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Notification title. Only displayed on mobile and browser notifications. Max length: 512 characters.\\\\r\\\\n             */\\\\r\\\\n            title?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Call to action text to be clicked on. When clicked, navigates to the `actionTarget` URL. Max length: 512 characters.\\\\r\\\\n             */\\\\r\\\\n            actionTitle?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Where to navigate to when the `actionTitle` text is clicked.\\\\r\\\\n             */\\\\r\\\\n            actionTarget?: wix_crm_backend.notifications.ActionTarget;\\\\r\\\\n            /**\\\\r\\\\n             * Contributor that will receive the notifications, based on their assigned roles.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"All_Contributors\\\\\\\"`: All site contributors, including the site owner.\\\\r\\\\n             *  + `\\\\\\\"Owner\\\\\\\"`: Only the site owner.\\\\r\\\\n             */\\\\r\\\\n            recipients?: wix_crm_backend.notifications.SiteContributors;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about which contributors will receive a notification.\\\\r\\\\n         */\\\\r\\\\n        type SiteContributors = {\\\\r\\\\n            /**\\\\r\\\\n             * Roles to receive the notification.\\\\r\\\\n             * One of:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"All_Contributors\\\\\\\"`: All site contributors (default).\\\\r\\\\n             * + `\\\\\\\"Owner\\\\\\\"`: Only the site owner.\\\\r\\\\n             */\\\\r\\\\n            role?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The Tasks API is used to manage a site's tasks.\\\\r\\\\n     */\\\\r\\\\n    interface tasks {\\\\r\\\\n        /**\\\\r\\\\n         * Sets a task as completed.\\\\r\\\\n         */\\\\r\\\\n        completeTask(taskId: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new task.\\\\r\\\\n         */\\\\r\\\\n        createTask(taskInfo: wix_crm_backend.tasks.TaskInfo): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a task by ID.\\\\r\\\\n         */\\\\r\\\\n        getTask(taskId: string): Promise<wix_crm_backend.tasks.Task>;\\\\r\\\\n        /**\\\\r\\\\n         * Removes an existing task.\\\\r\\\\n         */\\\\r\\\\n        removeTask(taskId: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Resets a task as not completed.\\\\r\\\\n         */\\\\r\\\\n        resetTask(taskId: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the specified fields of an existing task.\\\\r\\\\n         */\\\\r\\\\n        updateTaskFields(taskId: string, taskInfo: wix_crm_backend.tasks.TaskInfo): Promise<string>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace tasks {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a task.\\\\r\\\\n         */\\\\r\\\\n        type Task = {\\\\r\\\\n            /**\\\\r\\\\n             * Task title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the task has been\\\\r\\\\n             *  completed.\\\\r\\\\n             */\\\\r\\\\n            isCompleted: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier of the site contact\\\\r\\\\n             *  that this task is linked to.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Running task version number. Each time an\\\\r\\\\n             *  action is performed on a task its version number is incremented.\\\\r\\\\n             */\\\\r\\\\n            version: number;\\\\r\\\\n            /**\\\\r\\\\n             * Unique task identifier.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the task is due.\\\\r\\\\n             */\\\\r\\\\n            dueDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Type of the task's creator. `\\\\\\\"USER\\\\\\\"`\\\\r\\\\n             *  if the task was created using the site's dashboard. `\\\\\\\"APP\\\\\\\"` if the task was\\\\r\\\\n             *  created using the [`createTask()`](#createTask) function or if it was created\\\\r\\\\n             *  by an app installed on the site.\\\\r\\\\n             */\\\\r\\\\n            creatorType: string;\\\\r\\\\n            /**\\\\r\\\\n             * When `creatorType` is `\\\\\\\"USER\\\\\\\"`, the unique\\\\r\\\\n             *  identifier of the user that created the task in the dashboard. Otherwise, `userId` is not\\\\r\\\\n             *  present.\\\\r\\\\n             */\\\\r\\\\n            userId?: string;\\\\r\\\\n            /**\\\\r\\\\n             * When `creatorType` is `\\\\\\\"APP\\\\\\\"`, the unique\\\\r\\\\n             *  identifier of the application that created the task. Otherwise, `applicationId` is not\\\\r\\\\n             *  present.\\\\r\\\\n             */\\\\r\\\\n            applicationId?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information for creating or updating a task.\\\\r\\\\n         */\\\\r\\\\n        type TaskInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Task title.\\\\r\\\\n             */\\\\r\\\\n            title?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the task is due.\\\\r\\\\n             */\\\\r\\\\n            dueDate?: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier of the site contact\\\\r\\\\n             *  that this task is linked to.\\\\r\\\\n             */\\\\r\\\\n            contactId?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The wix-crm-backend module contains functionality for working with\\\\r\\\\n     *  your site's [workflows](https://support.wix.com/en/article/about-workflows)\\\\r\\\\n     *  from backend code.\\\\r\\\\n     * \\\\r\\\\n     *  A workflow consists of a number of phases, also known as steps. The final phase\\\\r\\\\n     *  in the workflow, the phase that indicates the workflow has been completed,\\\\r\\\\n     *  is know as the win phase. Each phase can contain cards that move between the phases,\\\\r\\\\n     *  indicating the card's progression through the workflow.\\\\r\\\\n     */\\\\r\\\\n    interface workflows {\\\\r\\\\n        /**\\\\r\\\\n         * Archives a workflow card.\\\\r\\\\n         */\\\\r\\\\n        archiveCard(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new workflow card.\\\\r\\\\n         */\\\\r\\\\n        createCard(workflowId: string, phaseId: string, card: wix_crm_backend.workflows.Card, position?: number): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new workflow phase.\\\\r\\\\n         */\\\\r\\\\n        createPhase(workflowId: string, phase: wix_crm_backend.workflows.Phase, position?: number): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new workflow.\\\\r\\\\n         */\\\\r\\\\n        createWorkflow(workflowInfo: wix_crm_backend.workflows.WorkflowInfo): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes a workflow card by ID.\\\\r\\\\n         */\\\\r\\\\n        deleteCard(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes a workflow phase by ID.\\\\r\\\\n         */\\\\r\\\\n        deletePhase(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes a workflow by ID.\\\\r\\\\n         */\\\\r\\\\n        deleteWorkflow(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a workflow card by ID.\\\\r\\\\n         */\\\\r\\\\n        getCard(id: string): Promise<wix_crm_backend.workflows.Card>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a phase info by ID.\\\\r\\\\n         */\\\\r\\\\n        getPhaseInfo(id: string): Promise<wix_crm_backend.workflows.Phase>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a workflow info by ID.\\\\r\\\\n         */\\\\r\\\\n        getWorkflowInfo(id: string): Promise<wix_crm_backend.workflows.WorkflowInfo>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of a workflow's cards.\\\\r\\\\n         */\\\\r\\\\n        listCards(workflowId: string, options: wix_crm_backend.workflows.ListCardOptions): Promise<wix_crm_backend.workflows.CardList>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of a workflow's phases.\\\\r\\\\n         */\\\\r\\\\n        listPhasesInfo(workflowId: string, options: wix_crm_backend.workflows.ListOptions): Promise<wix_crm_backend.workflows.PhaseList>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of the site's workflows info.\\\\r\\\\n         */\\\\r\\\\n        listWorkflowsInfo(options: wix_crm_backend.workflows.ListOptions): Promise<wix_crm_backend.workflows.WorkflowList>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves a card to a new position within a workflow.\\\\r\\\\n         */\\\\r\\\\n        moveCard(cardId: string, options: wix_crm_backend.workflows.MoveCardOptions): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves a phase to a new position with a workflow.\\\\r\\\\n         */\\\\r\\\\n        movePhase(id: string, options: wix_crm_backend.workflows.MovePhaseOptions): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Restores an archived workflow card.\\\\r\\\\n         */\\\\r\\\\n        restoreCard(id: string, options: wix_crm_backend.workflows.MoveCardOptions): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates an existing workflow card.\\\\r\\\\n         */\\\\r\\\\n        updateCardFields(id: string, card: wix_crm_backend.workflows.Card): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates an existing workflow phase.\\\\r\\\\n         */\\\\r\\\\n        updatePhaseFields(id: string, phase: wix_crm_backend.workflows.Phase): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates an existing workflow.\\\\r\\\\n         */\\\\r\\\\n        updateWorkflowFields(id: string, workflowInfo: wix_crm_backend.workflows.WorkflowInfo): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace workflows {\\\\r\\\\n        /**\\\\r\\\\n         * An object containing card information.\\\\r\\\\n         */\\\\r\\\\n        type Card = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Unique card identifier.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the contact associated with the card.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the card was created.\\\\r\\\\n             */\\\\r\\\\n            createdDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Date the card was last updated.\\\\r\\\\n             */\\\\r\\\\n            updatedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Source that created the card.\\\\r\\\\n             * \\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Contacts\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Inbox\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Invoices\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Price Quotes\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Wix Forms\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            source: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the phase which contains the card.\\\\r\\\\n             */\\\\r\\\\n            phaseId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing a list of cards and pagination info.\\\\r\\\\n         */\\\\r\\\\n        type CardList = {\\\\r\\\\n            /**\\\\r\\\\n             * List of cards matching the list options.\\\\r\\\\n             */\\\\r\\\\n            items: wix_crm_backend.workflows.Card[];\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in the current results page.\\\\r\\\\n             */\\\\r\\\\n            length: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of cards in the specified workflow and phase.\\\\r\\\\n             */\\\\r\\\\n            totalCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items returned per page with the current list options.\\\\r\\\\n             */\\\\r\\\\n            pageSize: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of results pages.\\\\r\\\\n             */\\\\r\\\\n            totalPages: number;\\\\r\\\\n            /**\\\\r\\\\n             * Index of the current page. Indices are zero-based.\\\\r\\\\n             */\\\\r\\\\n            currentPage: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object contains ListCards request data.\\\\r\\\\n         */\\\\r\\\\n        type ListCardOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Maximum number of cards to retrieve. Defaults to `50`.\\\\r\\\\n             */\\\\r\\\\n            limit?: number;\\\\r\\\\n            /**\\\\r\\\\n             * ID of phase to retrieve cards from. If omitted, will retrieve cards from all phases. Not to be used with `fetchOnlyArchived`.\\\\r\\\\n             */\\\\r\\\\n            phaseId?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether to retrieve only archived cards. Not to be used with `phaseId`.\\\\r\\\\n             */\\\\r\\\\n            fetchOnlyArchived?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Ordering options.\\\\r\\\\n             */\\\\r\\\\n            order?: wix_crm_backend.workflows.OrderOptions;\\\\r\\\\n            /**\\\\r\\\\n             * Number of cards to skip before the retrieved items. Defaults to `0`.\\\\r\\\\n             */\\\\r\\\\n            skip?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing options used when requesting a list of workflows or phases.\\\\r\\\\n         */\\\\r\\\\n        type ListOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Maximum number of items to retrieve. Defaults to `50` for phases and `100` for workflows.\\\\r\\\\n             */\\\\r\\\\n            limit?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Ordering options.\\\\r\\\\n             */\\\\r\\\\n            order?: wix_crm_backend.workflows.OrderOptions;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items to skip before the retrieved items. Defaults to `0`.\\\\r\\\\n             */\\\\r\\\\n            skip?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information used when moving a card.\\\\r\\\\n         */\\\\r\\\\n        type MoveCardOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the phase to move the card to. If omitted, the card remains in the same phase.\\\\r\\\\n             */\\\\r\\\\n            newPhaseId?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Position within the phase to move the card to. If omitted, the card is moved to the top of the phase.\\\\r\\\\n             */\\\\r\\\\n            newPosition?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information used when moving a phase.\\\\r\\\\n         */\\\\r\\\\n        type MovePhaseOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the workflow to move the phase to.\\\\r\\\\n             */\\\\r\\\\n            workflowId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Position within the workflow to move the phase to.\\\\r\\\\n             */\\\\r\\\\n            newPosition: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing sort order options.\\\\r\\\\n         */\\\\r\\\\n        type OrderOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Order of sort. Either `\\\\\\\"asc\\\\\\\"` or `\\\\\\\"desc\\\\\\\"` (defaults to `\\\\\\\"asc\\\\\\\"`).\\\\r\\\\n             */\\\\r\\\\n            sort: string;\\\\r\\\\n            /**\\\\r\\\\n             * Field to sort on.\\\\r\\\\n             */\\\\r\\\\n            field: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing phase information.\\\\r\\\\n         */\\\\r\\\\n        type Phase = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the phase.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Unique phase identifier.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing a list of phases and pagination info.\\\\r\\\\n         */\\\\r\\\\n        type PhaseList = {\\\\r\\\\n            /**\\\\r\\\\n             * List of phases matching the list options.\\\\r\\\\n             */\\\\r\\\\n            items: wix_crm_backend.workflows.Phase[];\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in the current results page.\\\\r\\\\n             */\\\\r\\\\n            length: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of phases in the specified workflow.\\\\r\\\\n             */\\\\r\\\\n            totalCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items returned per page with the current list options.\\\\r\\\\n             */\\\\r\\\\n            pageSize: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of results pages.\\\\r\\\\n             */\\\\r\\\\n            totalPages: number;\\\\r\\\\n            /**\\\\r\\\\n             * Index of the current page. Indices are zero-based.\\\\r\\\\n             */\\\\r\\\\n            currentPage: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object contains workflow.\\\\r\\\\n         */\\\\r\\\\n        type Workflow = {\\\\r\\\\n            /**\\\\r\\\\n             * Workflow information.\\\\r\\\\n             */\\\\r\\\\n            workflowInfo: wix_crm_backend.workflows.WorkflowInfo;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the win phase.\\\\r\\\\n             */\\\\r\\\\n            winPhaseId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about a workflow.\\\\r\\\\n         */\\\\r\\\\n        type WorkflowInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique workflow identifier.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the workflow.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Workflow description.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the workflow was created.\\\\r\\\\n             */\\\\r\\\\n            createdDate?: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing a list of workflows and pagination info.\\\\r\\\\n         */\\\\r\\\\n        type WorkflowList = {\\\\r\\\\n            /**\\\\r\\\\n             * List of workflows matching the list options.\\\\r\\\\n             */\\\\r\\\\n            items: wix_crm_backend.workflows.WorkflowInfo[];\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in the current results page.\\\\r\\\\n             */\\\\r\\\\n            length: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of workflows in the site.\\\\r\\\\n             */\\\\r\\\\n            totalCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items returned per page with the current list options.\\\\r\\\\n             */\\\\r\\\\n            pageSize: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of results pages.\\\\r\\\\n             */\\\\r\\\\n            totalPages: number;\\\\r\\\\n            /**\\\\r\\\\n             * Index of the current page. Indices are zero-based.\\\\r\\\\n             */\\\\r\\\\n            currentPage: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site contact.\\\\r\\\\n     */\\\\r\\\\n    type ContactInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Contact's first name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Contact's last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Contact's image source.\\\\r\\\\n         */\\\\r\\\\n        picture: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's email addresses.\\\\r\\\\n         */\\\\r\\\\n        emails: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Email address the contact who is also\\\\r\\\\n         *  a member uses to log into the system.\\\\r\\\\n         */\\\\r\\\\n        loginEmail: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's phone numbers.\\\\r\\\\n         */\\\\r\\\\n        phones: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)\\\\r\\\\n         *  are used to organize contacts. When setting the `labels` property, you can\\\\r\\\\n         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         */\\\\r\\\\n        labels: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Contact's language.\\\\r\\\\n         */\\\\r\\\\n        language: string;\\\\r\\\\n        /**\\\\r\\\\n         * Any\\\\r\\\\n         *  number of custom fields. [Customs fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\\\\r\\\\n         *  are used to store additional information about your site's contacts. When\\\\r\\\\n         *  setting a custom field, use key:value pairs where the key matches the names\\\\r\\\\n         *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         *  You can only set values for custom fields that already exist in the Contacts\\\\r\\\\n         *  application.\\\\r\\\\n         */\\\\r\\\\n        customFields: string | number | Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains contact deletion options.\\\\r\\\\n     */\\\\r\\\\n    type DeleteOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Whether to perform the deletion when the contact is also a member. Defaults to `false`.\\\\r\\\\n         */\\\\r\\\\n        deleteMembers: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_data {\\\\r\\\\n    /**\\\\r\\\\n     * Hooks that can be added to wix-data operations.\\\\r\\\\n     */\\\\r\\\\n    interface Hooks {\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after a `count()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterCount(count: number, context: wix_data.Hooks.HookContext): Promise<number> & number;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after a `get()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterGet(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after an `insert()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterInsert(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after a `find` operation, for each of the items in the query results.\\\\r\\\\n         */\\\\r\\\\n        afterQuery(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after a `remove()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterRemove(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after an `update()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterUpdate(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before a `count()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeCount(query: wix_data.WixDataQuery, context: wix_data.Hooks.HookContext): Promise<wix_data.WixDataQuery> & wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before a `get()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeGet(itemId: string, context: wix_data.Hooks.HookContext): Promise<string> & string;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before an `insert()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeInsert(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before a `find()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeQuery(query: wix_data.WixDataQuery, context: wix_data.Hooks.HookContext): Promise<wix_data.WixDataQuery> & wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is called before a `remove()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeRemove(itemId: string, context: wix_data.Hooks.HookContext): Promise<string> & string;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before an `update()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeUpdate(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered on any error or rejected Promise from any of the wix-data operations.\\\\r\\\\n         */\\\\r\\\\n        onFailure(error: Error, context: wix_data.Hooks.HookContext): Promise<any>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Hooks {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains contextual information about the hook being called.\\\\r\\\\n         */\\\\r\\\\n        type HookContext = {\\\\r\\\\n            /**\\\\r\\\\n             * The name of the collection the hook affects.\\\\r\\\\n             */\\\\r\\\\n            collectionName: string;\\\\r\\\\n            /**\\\\r\\\\n             * The current site user id. If no user is logged in to the site it may be null.\\\\r\\\\n             */\\\\r\\\\n            userId: string;\\\\r\\\\n            /**\\\\r\\\\n             * The permissions role of the current user. Possibilities are: `anonymous`, `siteMember`,  `siteOwner` and `dataOwner`.\\\\r\\\\n             */\\\\r\\\\n            userRole: string;\\\\r\\\\n            /**\\\\r\\\\n             * The item stored in the database before an `update` or `delete` operation.\\\\r\\\\n             * Will be `undefined` for all other operations.\\\\r\\\\n             */\\\\r\\\\n            currentItem: any;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for performing aggregations on collection data.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataAggregate {\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to an aggregation, sorting by the items or groups by the specified properties in ascending order.\\\\r\\\\n         */\\\\r\\\\n        ascending(propertyName: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to only contain the average value from each aggregation group.\\\\r\\\\n         */\\\\r\\\\n        avg(propertyName: string, projectedName?: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to contain the item count of each group in the aggregation.\\\\r\\\\n         */\\\\r\\\\n        count(): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to an aggregation, sorting by the items or groups by the specified properties in descending order.\\\\r\\\\n         */\\\\r\\\\n        descending(propertyName: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Filters out items from being used in an aggregation.\\\\r\\\\n         */\\\\r\\\\n        filter(filter: wix_data.WixDataFilter): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Groups items together in an aggregation.\\\\r\\\\n         */\\\\r\\\\n        group(propertyName: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Filters out groups from being returned from an aggregation.\\\\r\\\\n         */\\\\r\\\\n        having(filter: wix_data.WixDataFilter): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Limits the number of items or groups the aggregation returns.\\\\r\\\\n         */\\\\r\\\\n        limit(limit: number): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to only contain the maximum value from each aggregation group.\\\\r\\\\n         */\\\\r\\\\n        max(propertyName: string, projectedName?: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to only contain the minimum value from each aggregation group.\\\\r\\\\n         */\\\\r\\\\n        min(propertyName: string, projectedName?: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Runs the aggregation and returns the results.\\\\r\\\\n         */\\\\r\\\\n        run(): Promise<wix_data.WixDataAggregateResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the number of items or groups to skip before returning aggregation results.\\\\r\\\\n         */\\\\r\\\\n        skip(skip: number): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to contain the sum from each aggregation group.\\\\r\\\\n         */\\\\r\\\\n        sum(propertyName: string, projectedName?: string): wix_data.WixDataAggregate;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The results of an aggregation, containing the aggregated values.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataAggregateResult {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the aggregated values.\\\\r\\\\n         */\\\\r\\\\n        readonly items: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of values in the aggregate results.\\\\r\\\\n         */\\\\r\\\\n        readonly length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the aggregation has more results.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the next page of aggregate results.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<wix_data.WixDataAggregateResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface WixDataFilter {\\\\r\\\\n        /**\\\\r\\\\n         * Adds an `and` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        and(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is within a specified range.\\\\r\\\\n         */\\\\r\\\\n        between(propertyName: string, rangeStart: string | number | Date, rangeEnd: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value contains a specified string.\\\\r\\\\n         */\\\\r\\\\n        contains(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value ends with a specified string.\\\\r\\\\n         */\\\\r\\\\n        endsWith(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value equals the specified value.\\\\r\\\\n         */\\\\r\\\\n        eq(propertyName: string, value: any): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is greater than or equal to the specified value.\\\\r\\\\n         */\\\\r\\\\n        ge(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is greater than the specified value.\\\\r\\\\n         */\\\\r\\\\n        gt(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property values equals all of the specified `value` parameters.\\\\r\\\\n         */\\\\r\\\\n        hasAll(propertyName: string, value: string | number | Date | any[]): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value equals any of the specified `value` parameters.\\\\r\\\\n         */\\\\r\\\\n        hasSome(propertyName: string, value: string | number | Date | any[]): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property does not exist or does not have any value.\\\\r\\\\n         */\\\\r\\\\n        isEmpty(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property has any value.\\\\r\\\\n         */\\\\r\\\\n        isNotEmpty(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is less than or equal to the specified value.\\\\r\\\\n         */\\\\r\\\\n        le(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is less than the specified value.\\\\r\\\\n         */\\\\r\\\\n        lt(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value does not equal the specified value.\\\\r\\\\n         */\\\\r\\\\n        ne(propertyName: string, value: any): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a `not` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        not(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an `or` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        or(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value starts with a specified string.\\\\r\\\\n         */\\\\r\\\\n        startsWith(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Contains functionality for refining a data query.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataQuery {\\\\r\\\\n        /**\\\\r\\\\n         * Adds an `and` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        and(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to a query or sort, sorting by the specified properties in ascending order.\\\\r\\\\n         */\\\\r\\\\n        ascending(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is within a specified range.\\\\r\\\\n         */\\\\r\\\\n        between(propertyName: string, rangeStart: string | number | Date, rangeEnd: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value contains a specified string.\\\\r\\\\n         */\\\\r\\\\n        contains(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of items that match the query.\\\\r\\\\n         */\\\\r\\\\n        count(options?: wix_data.WixDataOptions): Promise<number>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to a query or sort, sorting by the specified properties in descending order.\\\\r\\\\n         */\\\\r\\\\n        descending(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the distinct values that match the query, without duplicates.\\\\r\\\\n         */\\\\r\\\\n        distinct(propertyName: string, options?: wix_data.WixDataOptions): Promise<wix_data.WixDataQueryResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value ends with a specified string.\\\\r\\\\n         */\\\\r\\\\n        endsWith(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value equals the specified value.\\\\r\\\\n         */\\\\r\\\\n        eq(propertyName: string, value: any): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the items that match the query.\\\\r\\\\n         */\\\\r\\\\n        find(options?: wix_data.WixDataOptions): Promise<wix_data.WixDataQueryResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is greater than or equal to the specified value.\\\\r\\\\n         */\\\\r\\\\n        ge(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is greater than the specified value.\\\\r\\\\n         */\\\\r\\\\n        gt(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property values equals all of the specified `value` parameters.\\\\r\\\\n         */\\\\r\\\\n        hasAll(propertyName: string, value: string | number | Date | any[]): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value equals any of the specified `value` parameters.\\\\r\\\\n         */\\\\r\\\\n        hasSome(propertyName: string, value: string | number | Date | any[]): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Includes referenced items for the specified properties in a query's results.\\\\r\\\\n         */\\\\r\\\\n        include(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property does not exist or does not have any value.\\\\r\\\\n         */\\\\r\\\\n        isEmpty(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property has any value.\\\\r\\\\n         */\\\\r\\\\n        isNotEmpty(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is less than or equal to the specified value.\\\\r\\\\n         */\\\\r\\\\n        le(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Limits the number of items the query returns.\\\\r\\\\n         */\\\\r\\\\n        limit(limit: number): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is less than the specified value.\\\\r\\\\n         */\\\\r\\\\n        lt(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value does not equal the specified value.\\\\r\\\\n         */\\\\r\\\\n        ne(propertyName: string, value: any): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a `not` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        not(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an `or` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        or(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the number of items to skip before returning query results.\\\\r\\\\n         */\\\\r\\\\n        skip(skip: number): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value starts with a specified string.\\\\r\\\\n         */\\\\r\\\\n        startsWith(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The results of a data reference query, containing the retrieved items.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataQueryReferencedResult {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the items that match the reference query.\\\\r\\\\n         */\\\\r\\\\n        readonly items: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of items that match the reference query.\\\\r\\\\n         */\\\\r\\\\n        readonly totalCount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the reference query has more results.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the reference query has previous results.\\\\r\\\\n         */\\\\r\\\\n        hasPrev(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the next page of reference query results.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<wix_data.WixDataQueryReferencedResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the previous page of reference query results.\\\\r\\\\n         */\\\\r\\\\n        prev(): Promise<wix_data.WixDataQueryReferencedResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The results of a data query, containing the retrieved items.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataQueryResult {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the index of the current results page number.\\\\r\\\\n         */\\\\r\\\\n        readonly currentPage: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the items that match the query.\\\\r\\\\n         */\\\\r\\\\n        readonly items: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of items in the current results page.\\\\r\\\\n         */\\\\r\\\\n        readonly length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the query page size.\\\\r\\\\n         */\\\\r\\\\n        readonly pageSize: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if referenced items have been trimmed from the results.\\\\r\\\\n         */\\\\r\\\\n        readonly partialIncludes: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the query used to get the current results.\\\\r\\\\n         */\\\\r\\\\n        readonly query: wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of items that match the query.\\\\r\\\\n         */\\\\r\\\\n        readonly totalCount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of pages the query produced.\\\\r\\\\n         */\\\\r\\\\n        readonly totalPages: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the query has more results.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates the query has previous results.\\\\r\\\\n         */\\\\r\\\\n        hasPrev(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the next page of query results.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<wix_data.WixDataQueryResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the previous page of query results.\\\\r\\\\n         */\\\\r\\\\n        prev(): Promise<wix_data.WixDataQueryResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface WixDataSort {\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to a query or sort, sorting by the specified properties in ascending order.\\\\r\\\\n         */\\\\r\\\\n        ascending(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to a query or sort, sorting by the specified properties in descending order.\\\\r\\\\n         */\\\\r\\\\n        descending(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by Wix Data bulk operations.\\\\r\\\\n     */\\\\r\\\\n    type WixDataBulkResult = {\\\\r\\\\n        /**\\\\r\\\\n         * The number of inserted items.\\\\r\\\\n         */\\\\r\\\\n        inserted: number;\\\\r\\\\n        /**\\\\r\\\\n         * The number of updated items.\\\\r\\\\n         */\\\\r\\\\n        updated: number;\\\\r\\\\n        /**\\\\r\\\\n         * The number of skipped items.\\\\r\\\\n         */\\\\r\\\\n        skipped: number;\\\\r\\\\n        /**\\\\r\\\\n         * List of IDs of inserted items.\\\\r\\\\n         */\\\\r\\\\n        insertedItemIds: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of errors.\\\\r\\\\n         */\\\\r\\\\n        errors: Error[];\\\\r\\\\n        /**\\\\r\\\\n         * The number of removed items.\\\\r\\\\n         */\\\\r\\\\n        removed: number;\\\\r\\\\n        /**\\\\r\\\\n         * List of IDs of removed items.\\\\r\\\\n         */\\\\r\\\\n        removedItemIds: string[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that you pass as the `options` parameter that modifies how an operation is performed.\\\\r\\\\n     */\\\\r\\\\n    type WixDataOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Prevents permission checks from running for the operation.\\\\r\\\\n         */\\\\r\\\\n        suppressAuth?: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Prevents hooks from running for the operation.\\\\r\\\\n         */\\\\r\\\\n        suppressHooks?: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object for controlling the order of returned referenced items.\\\\r\\\\n     */\\\\r\\\\n    type WixDataQueryReferencedOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * The order of the returned referenced items. Either \\\\\\\"asc\\\\\\\" or \\\\\\\"desc\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        order: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_fetch {\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by the `fetch()` function representing\\\\r\\\\n     *  an HTTP response to a fetch.\\\\r\\\\n     */\\\\r\\\\n    interface WixFetchResponse {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the body of the response has been used yet.\\\\r\\\\n         */\\\\r\\\\n        readonly bodyUsed: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * The response headers.\\\\r\\\\n         */\\\\r\\\\n        readonly headers: any;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the request was successful, meaning its `status` is in the range 2xx.\\\\r\\\\n         */\\\\r\\\\n        readonly ok: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * The response [status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).\\\\r\\\\n         */\\\\r\\\\n        readonly status: number;\\\\r\\\\n        /**\\\\r\\\\n         * The response [status message](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).\\\\r\\\\n         */\\\\r\\\\n        readonly statusText: string;\\\\r\\\\n        /**\\\\r\\\\n         * The response URL.\\\\r\\\\n         */\\\\r\\\\n        readonly url: string;\\\\r\\\\n        /**\\\\r\\\\n         * Reads the response body as JSON.\\\\r\\\\n         */\\\\r\\\\n        json(): Promise<any>;\\\\r\\\\n        /**\\\\r\\\\n         * Reads the response body as a string.\\\\r\\\\n         */\\\\r\\\\n        text(): Promise<string>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used by the `fetch()` function representing an HTTPS request.\\\\r\\\\n     */\\\\r\\\\n    type WixFetchRequest = {\\\\r\\\\n        /**\\\\r\\\\n         * The [HTTP method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods) to use (if omitted, defaults to `\\\\\\\"GET\\\\\\\"`).\\\\r\\\\n         */\\\\r\\\\n        method: string;\\\\r\\\\n        /**\\\\r\\\\n         * The request headers.\\\\r\\\\n         */\\\\r\\\\n        headers: any;\\\\r\\\\n        /**\\\\r\\\\n         * The request body.\\\\r\\\\n         */\\\\r\\\\n        body: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_marketing_backend {\\\\r\\\\n    /**\\\\r\\\\n     * The Coupons API is used to manage your site's coupons.\\\\r\\\\n     */\\\\r\\\\n    interface coupons {\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new coupon.\\\\r\\\\n         */\\\\r\\\\n        createCoupon(couponInfo: wix_marketing_backend.coupons.CouponInfo): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes an existing coupon.\\\\r\\\\n         */\\\\r\\\\n        deleteCoupon(couponId: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the specified fields of an existing coupon.\\\\r\\\\n         */\\\\r\\\\n        updateCouponFields(couponId: string, couponInfo: wix_marketing_backend.coupons.CouponInfo): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace coupons {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information for creating or updating a coupon.\\\\r\\\\n         */\\\\r\\\\n        type CouponInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of coupon.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon code. Must be unique for all coupons in your site. Maximum 20 characters.\\\\r\\\\n             */\\\\r\\\\n            code: string;\\\\r\\\\n            /**\\\\r\\\\n             * Start date and time of coupon.\\\\r\\\\n             */\\\\r\\\\n            startTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * End date and time of coupon.\\\\r\\\\n             */\\\\r\\\\n            expirationTime?: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The maximum number of times a coupon can be used. Note that multiple purchases by the same customer or purchases by different customers are both counted toward usage limit.\\\\r\\\\n             */\\\\r\\\\n            usageLimit?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the coupon is limited to 1 discount per order. If true and a customer pays for multiple items the coupon applies to, only the lowest priced item is discounted. Coupons with a `bookings` [`namespace`](#CouponScope) are always limited to one item.\\\\r\\\\n             */\\\\r\\\\n            limitedToOneItem?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the coupon is currently active.\\\\r\\\\n             */\\\\r\\\\n            active?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * The coupon is only applicable when the order subtotal is over this amount.\\\\r\\\\n             */\\\\r\\\\n            minimumSubtotal?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Scope of the coupon. When no scope is defined, the coupon applies to all items in all [`namespaces`](#CouponScope) in the site.\\\\r\\\\n             */\\\\r\\\\n            scope?: wix_marketing_backend.coupons.CouponScope;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Free products when making a purchase. Currently only supported for coupons with a `stores` [`namespace`](#CouponScope).\\\\r\\\\n             */\\\\r\\\\n            buyXGetY?: wix_marketing_backend.coupons.CouponTypeBuyXGetY;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Free shipping. If true, the coupon applies to all items in all [`namespaces`](#CouponScope) in the site.\\\\r\\\\n             */\\\\r\\\\n            freeShipping?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Fixed price discount.\\\\r\\\\n             */\\\\r\\\\n            moneyOffAmount?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Discount as a percentage.\\\\r\\\\n             */\\\\r\\\\n            percentOffRate?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Specific sale price. Currently only supported for coupons with a `stores` [`namespace`](#CouponScope).\\\\r\\\\n             */\\\\r\\\\n            fixedPriceAmount?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing the scope of a coupon.\\\\r\\\\n         */\\\\r\\\\n        type CouponScope = {\\\\r\\\\n            /**\\\\r\\\\n             * Wix application for which the coupon is applicable.\\\\r\\\\n             * One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"stores\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"bookings\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"events\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            namespace: string;\\\\r\\\\n            /**\\\\r\\\\n             * Group within a `namespace` for which the coupon is applicable. If no group is specified, the coupon applies to all items in the namespace. `group` is required in some cases.\\\\r\\\\n             */\\\\r\\\\n            group?: wix_marketing_backend.coupons.ScopeGroup;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object defining the number of purchases required and the number of free items received for a \\\\\\\"Buy X Get Y\\\\\\\" coupon type.\\\\r\\\\n         */\\\\r\\\\n        type CouponTypeBuyXGetY = {\\\\r\\\\n            /**\\\\r\\\\n             * Number of purchased items required to receive free items.\\\\r\\\\n             */\\\\r\\\\n            x: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items received for free if required number of items were purchased.\\\\r\\\\n             */\\\\r\\\\n            y: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object specifying the group within a [`CouponScope`](#CouponScope)\\\\r\\\\n         * `namespace` for which the coupon is applicable.\\\\r\\\\n         */\\\\r\\\\n        type ScopeGroup = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the group.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the specific item in the group for which the coupon is applicable. If no `entityId` is specified, the coupon applies to all items in the group. In some cases when a group is specified, an `entityId` is required.\\\\r\\\\n             */\\\\r\\\\n            entityId?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_media_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events fired by the Wix Media API.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a file has completed uploading.\\\\r\\\\n         */\\\\r\\\\n        onFileUploaded(event: wix_media_backend.Events.FileEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a video file has completed transcoding.\\\\r\\\\n         */\\\\r\\\\n        onVideoTranscoded(event: wix_media_backend.Events.FileEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an uploaded file and upload context.\\\\r\\\\n         */\\\\r\\\\n        type FileEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Information about the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            fileInfo: wix_media_backend.mediaManager.FileInfo;\\\\r\\\\n            /**\\\\r\\\\n             * An object of key:value string pairs that was sent\\\\r\\\\n             *  when the file was uploaded.\\\\r\\\\n             */\\\\r\\\\n            context: any;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The `mediaManager` module contains functionality for working with\\\\r\\\\n     *  the media that is stored in your site's Media Manager.\\\\r\\\\n     */\\\\r\\\\n    interface mediaManager {\\\\r\\\\n        /**\\\\r\\\\n         * Gets a file's information from the Media Manager by name or URL.\\\\r\\\\n         */\\\\r\\\\n        getFileInfo(fileName: string): Promise<wix_media_backend.mediaManager.FileInfo>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a file's URL from the Media Manager.\\\\r\\\\n         */\\\\r\\\\n        getFileUrl(fileName: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an upload URL and a corresponding upload token.\\\\r\\\\n         */\\\\r\\\\n        getUploadUrl(path: string, options: wix_media_backend.mediaManager.UploadOptions): Promise<wix_media_backend.mediaManager.UploadUrl>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a video file's playback URL from the Media Manager.\\\\r\\\\n         */\\\\r\\\\n        getVideoPlaybackUrl(fileName: string, format: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Imports a file to the Media Manager from a URL.\\\\r\\\\n         */\\\\r\\\\n        importFile(path: string, url: string, options: wix_media_backend.mediaManager.UploadOptions): Promise<wix_media_backend.mediaManager.FileInfo>;\\\\r\\\\n        /**\\\\r\\\\n         * Uploads a file to the Media Manager.\\\\r\\\\n         */\\\\r\\\\n        upload(path: string, fileContent: Buffer, fileName: string, options: wix_media_backend.mediaManager.UploadOptions): Promise<wix_media_backend.mediaManager.FileInfo>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace mediaManager {\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about the file that was uploaded.\\\\r\\\\n         */\\\\r\\\\n        type FileInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * File name of the file that was uploaded. This name\\\\r\\\\n             *  is used when calling the [`getFileInfo()`](#getFileInfo), [`getFileUrl()`](#getFileUrl),\\\\r\\\\n             *  and [`getVideoPlaybackUrl()`](#getVideoPlaybackUrl) functions.\\\\r\\\\n             */\\\\r\\\\n            fileName: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the file.\\\\r\\\\n             */\\\\r\\\\n            fileUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * File hash.\\\\r\\\\n             */\\\\r\\\\n            hash: string;\\\\r\\\\n            /**\\\\r\\\\n             * Size of the uploaded file in bytes.\\\\r\\\\n             */\\\\r\\\\n            sizeInBytes: number;\\\\r\\\\n            /**\\\\r\\\\n             * Mime type of\\\\r\\\\n             *  the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            mimeType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of the file that was uploaded.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"audio\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"document\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"image\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"shape\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"video\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            mediaType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the link to the uploaded file is\\\\r\\\\n             *  public or private. Private links require a token to be used.\\\\r\\\\n             */\\\\r\\\\n            isPrivate: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the uploaded files parent folder.\\\\r\\\\n             */\\\\r\\\\n            parentFolderId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the uploaded file. This is the name\\\\r\\\\n             *  that appears in the Media Manager.\\\\r\\\\n             */\\\\r\\\\n            originalFileName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the file that was uploaded.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"IN-DOWNLOAD-QUEUE\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"IN-QUEUE\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"READY\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            opStatus: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL where the file was uploaded from.\\\\r\\\\n             */\\\\r\\\\n            sourceURL: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the file's icon.\\\\r\\\\n             */\\\\r\\\\n            iconUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of labels assigned to the file by the Media Manager.\\\\r\\\\n             */\\\\r\\\\n            labels: string[];\\\\r\\\\n            /**\\\\r\\\\n             * File height.\\\\r\\\\n             */\\\\r\\\\n            height: string;\\\\r\\\\n            /**\\\\r\\\\n             * File width.\\\\r\\\\n             */\\\\r\\\\n            width: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about the media options of a file to upload.\\\\r\\\\n         */\\\\r\\\\n        type MediaOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Type of the file to upload.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"audio\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"document\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"image\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"shape\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"video\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            mediaType?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Mime type of\\\\r\\\\n             *  the file to import. The specified value must match the actual mime type of\\\\r\\\\n             *  the file's content.\\\\r\\\\n             */\\\\r\\\\n            mimeType?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about the metadata options of a file to upload.\\\\r\\\\n         */\\\\r\\\\n        type MetadataOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Whether the link to the uploaded file will\\\\r\\\\n             *  be public or private. Private links require a token to be used. Defaults to\\\\r\\\\n             *  `false`.\\\\r\\\\n             */\\\\r\\\\n            isPrivate?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates if the file was uploaded by a\\\\r\\\\n             *  site visitor. Files uploaded by visitors are tagged in the Media Manager as\\\\r\\\\n             *  being added by a visitor. Defaults to `true`.\\\\r\\\\n             */\\\\r\\\\n            isVisitorUpload?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * An object of key:value string pairs that is sent\\\\r\\\\n             *  back in the [`onFileUploaded()`](wix-media-backend.Events.html#onFileUploaded)\\\\r\\\\n             *  event.\\\\r\\\\n             */\\\\r\\\\n            context?: any;\\\\r\\\\n            /**\\\\r\\\\n             * The name of the file as it will appear in the Media Manager\\\\r\\\\n             */\\\\r\\\\n            fileName?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about the options of a file to upload.\\\\r\\\\n         */\\\\r\\\\n        type UploadOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Media options of the file to upload.\\\\r\\\\n             */\\\\r\\\\n            mediaOptions?: wix_media_backend.mediaManager.MediaOptions;\\\\r\\\\n            /**\\\\r\\\\n             * Metadata options of the file to upload.\\\\r\\\\n             */\\\\r\\\\n            metadataOptions?: wix_media_backend.mediaManager.MetadataOptions;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about an upload URL.\\\\r\\\\n         */\\\\r\\\\n        type UploadUrl = {\\\\r\\\\n            /**\\\\r\\\\n             * The URL to POST a file to.\\\\r\\\\n             */\\\\r\\\\n            uploadUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * The token to use with the file POST.\\\\r\\\\n             */\\\\r\\\\n            uploadToken: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_pay_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events fired by payments created using the Pay API.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a payment's transaction status is changed.\\\\r\\\\n         */\\\\r\\\\n        onPaymentUpdate(event: wix_pay_backend.Events.PaymentUpdateEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a payment update.\\\\r\\\\n         */\\\\r\\\\n        type PaymentUpdateEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * The payment's information.\\\\r\\\\n             */\\\\r\\\\n            payment: wix_pay_backend.Payment;\\\\r\\\\n            /**\\\\r\\\\n             * Payment status.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Successful\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Pending\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Failed\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Chargeback\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Refunded\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Offline\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"PartiallyRefunded\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Cancelled\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Undefined\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the payment transaction.\\\\r\\\\n             */\\\\r\\\\n            transactionId: string;\\\\r\\\\n            /**\\\\r\\\\n             * User information.\\\\r\\\\n             */\\\\r\\\\n            userInfo: wix_pay_backend.PaymentUserInfo;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment.\\\\r\\\\n     */\\\\r\\\\n    type Payment = {\\\\r\\\\n        /**\\\\r\\\\n         * Payment transaction ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment total amount.\\\\r\\\\n         */\\\\r\\\\n        amount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment currency. A three-letter\\\\r\\\\n         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_pay_backend.PaymentItem[];\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information about the user.\\\\r\\\\n         */\\\\r\\\\n        userInfo: wix_pay_backend.PaymentUserInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing information for creating a payment.\\\\r\\\\n     */\\\\r\\\\n    type PaymentInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Total payment amount. Must equal\\\\r\\\\n         *  the sum of the `price` properties in the `items` list while taking the\\\\r\\\\n         *  `quantity` into account.\\\\r\\\\n         */\\\\r\\\\n        amount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment currency. A three-letter\\\\r\\\\n         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code. Defaults to\\\\r\\\\n         *  the currency defined by the site's [Regional Settings](https://support.wix.com/en/article/changing-your-sites-regional-settings).\\\\r\\\\n         */\\\\r\\\\n        currency?: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of payment items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_pay_backend.PaymentItem;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information about the user. It will be used to prefill\\\\r\\\\n         *  the user info form during the payment process.\\\\r\\\\n         */\\\\r\\\\n        userInfo?: wix_pay_backend.PaymentUserInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment item.\\\\r\\\\n     */\\\\r\\\\n    type PaymentItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Payment item name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment item price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment item quantity.\\\\r\\\\n         */\\\\r\\\\n        quantity: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing information about the user.\\\\r\\\\n     */\\\\r\\\\n    type PaymentUserInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * User's first name. Value is `null` if\\\\r\\\\n         *  there is no first name information.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's last name. Value is `null` if\\\\r\\\\n         *  there is no last name information.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's phone number. Value is `null` if\\\\r\\\\n         *  there is no phone number information.\\\\r\\\\n         */\\\\r\\\\n        phone: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's email address. Value is `null` if\\\\r\\\\n         *  there is no email address information.\\\\r\\\\n         */\\\\r\\\\n        email: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's country code. A three-letter\\\\r\\\\n         *  [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) country code. Value\\\\r\\\\n         *  is `null` if there is no country information.\\\\r\\\\n         */\\\\r\\\\n        countryCode: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_router {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an incoming page request received by a router.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterRequest {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the base URL of the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly baseUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the form factor of the device used to make the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly formFactor: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the remote IP address of the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly ip: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the names of the pages associated with this router.\\\\r\\\\n         */\\\\r\\\\n        readonly pages: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the path of the router request URL.\\\\r\\\\n         */\\\\r\\\\n        readonly path: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the router prefix of the router request URL.\\\\r\\\\n         */\\\\r\\\\n        readonly prefix: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the protocol of the router request URL.\\\\r\\\\n         */\\\\r\\\\n        readonly protocol: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the query fields and values of the request URL.\\\\r\\\\n         */\\\\r\\\\n        readonly query: any;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the `referrer` header from the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly referrer: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the full URL of the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly url: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the details of the current site user who is logged in.\\\\r\\\\n         */\\\\r\\\\n        readonly user: wix_router.WixRouterUser;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the `user-agent` header as sent from the device used to make the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly userAgent: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a response to a request received by a router.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterResponse {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the data to pass with the response.\\\\r\\\\n         */\\\\r\\\\n        data: any;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the members to be written to the HTML head of the page.\\\\r\\\\n         */\\\\r\\\\n        head: wix_router.WixRouterResponse.HeadOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the response message to be used when responding with status codes 4xx and 5xx.\\\\r\\\\n         */\\\\r\\\\n        message: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the page to route to.\\\\r\\\\n         */\\\\r\\\\n        page: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the url to redirect to when responding with status codes 301 and 302.\\\\r\\\\n         */\\\\r\\\\n        redirectUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the response's HTTP status code.\\\\r\\\\n         */\\\\r\\\\n        status: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace WixRouterResponse {\\\\r\\\\n        /**\\\\r\\\\n         * Members of the HTML head.\\\\r\\\\n         */\\\\r\\\\n        type HeadOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * The page title. Written to the `` tag.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * **Deprecated: Use the new `metaTags` format instead.** \\\\r\\\\n             * \\\\r\\\\n             * The page description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * **Deprecated: Use the new `metaTags` format instead.**\\\\r\\\\n             * \\\\r\\\\n             *  The page keywords.\\\\r\\\\n             */\\\\r\\\\n            keywords: string;\\\\r\\\\n            /**\\\\r\\\\n             * **Deprecated: Use the new `metaTags` format instead.**\\\\r\\\\n             * \\\\r\\\\n             *  Indicates whether to add a meta tag that prevents search engines from indexing the\\\\r\\\\n             *  page.\\\\r\\\\n             */\\\\r\\\\n            noIndex: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * The page's SEO-related meta tags.\\\\r\\\\n             * \\\\r\\\\n             *  When setting `og:image` meta tags, the `content` can be and external image URL\\\\r\\\\n             *  or a Media Manager image URL as described [here]($w.Image.html#src).\\\\r\\\\n             * \\\\r\\\\n             *  **Deprecated format:** An object with key:value pairs where the key is the meta tag name\\\\r\\\\n             *  and the value is the content.\\\\r\\\\n             */\\\\r\\\\n            metaTags: wix_router.WixRouterResponse.MetaTag[];\\\\r\\\\n            /**\\\\r\\\\n             * The page's SEO-related link tags\\\\r\\\\n             *  which provide additional SEO information about the page. For example, you can set a\\\\r\\\\n             *  link to a canonical or alternate version of the page.\\\\r\\\\n             */\\\\r\\\\n            links: wix_router.WixRouterResponse.Link[];\\\\r\\\\n            /**\\\\r\\\\n             * The page's structured data, which helps search engines \\\\r\\\\n             *  understand more about the page and your business so they can display a richer snippet of the\\\\r\\\\n             *  page in search results.\\\\r\\\\n             */\\\\r\\\\n            structuredData: any[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a link tag.\\\\r\\\\n         */\\\\r\\\\n        type Link = {\\\\r\\\\n            /**\\\\r\\\\n             * The relationship of the linked resource to the current page.\\\\r\\\\n             */\\\\r\\\\n            rel?: string;\\\\r\\\\n            /**\\\\r\\\\n             * The URL of the linked resource.\\\\r\\\\n             */\\\\r\\\\n            href?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a meta tag.\\\\r\\\\n         */\\\\r\\\\n        type MetaTag = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the meta tag. Either `name` or `property` are required.\\\\r\\\\n             */\\\\r\\\\n            name?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the meta tag property. Either `property` or `name` are required.\\\\r\\\\n             */\\\\r\\\\n            property?: string;\\\\r\\\\n            /**\\\\r\\\\n             * HTTP header that corresponds to the `content`.\\\\r\\\\n             */\\\\r\\\\n            \\\\\\\"http-equiv\\\\\\\"?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Meta tag value. For `og:image` meta tags, the `content` can\\\\r\\\\n             *  be an external image URL or a Media Manager image URL as described [here]($w.Image.html#src).\\\\r\\\\n             */\\\\r\\\\n            content: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a single entry in a sitemap.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterSitemapEntry {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets how frequently the page is likely to change.\\\\r\\\\n         */\\\\r\\\\n        changeFrequency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets when was the page data last modified.\\\\r\\\\n         */\\\\r\\\\n        lastModified: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the page name.\\\\r\\\\n         */\\\\r\\\\n        pageName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the priority of this URL relative to other URLs on your site.\\\\r\\\\n         */\\\\r\\\\n        priority: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the page title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the relative url of the page.\\\\r\\\\n         */\\\\r\\\\n        url: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a request for a sitemap.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterSitemapRequest {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the base URL of the request.\\\\r\\\\n         */\\\\r\\\\n        readonly baseUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the page name.\\\\r\\\\n         */\\\\r\\\\n        readonly pageName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the names of the pages associated with this router.\\\\r\\\\n         */\\\\r\\\\n        readonly pages: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the router prefix of the request.\\\\r\\\\n         */\\\\r\\\\n        readonly prefix: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the details of the current site user who is logged in.\\\\r\\\\n         */\\\\r\\\\n        readonly user: wix_router.WixRouterUser;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the current site visitor who is logged in.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterUser {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's role.\\\\r\\\\n         */\\\\r\\\\n        readonly role: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_site_backend {\\\\r\\\\n    /**\\\\r\\\\n     * The General Info API contains functionality for getting\\\\r\\\\n     *  the information about your business that\\\\r\\\\n     *  has been entered in the **General Info** section of your site's **Dashboard**.\\\\r\\\\n     */\\\\r\\\\n    interface generalInfo {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the physical address of the site's business.\\\\r\\\\n         */\\\\r\\\\n        getAddress(): Promise<wix_site_backend.generalInfo.GeneralInfoAddress>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site business name.\\\\r\\\\n         */\\\\r\\\\n        getBusinessName(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the business hours of the site's business.\\\\r\\\\n         */\\\\r\\\\n        getBusinessSchedule(): Promise<wix_site_backend.generalInfo.GeneralInfoSchedule>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site category information.\\\\r\\\\n         */\\\\r\\\\n        getCategories(): Promise<wix_site_backend.generalInfo.GeneralInfoCategories>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site description.\\\\r\\\\n         */\\\\r\\\\n        getDescription(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the email address used for notifications of activities on your site.\\\\r\\\\n         */\\\\r\\\\n        getEmail(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the fax number used for notifications of activities on your site.\\\\r\\\\n         */\\\\r\\\\n        getFax(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site language information.\\\\r\\\\n         */\\\\r\\\\n        getLanguage(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site locale information.\\\\r\\\\n         */\\\\r\\\\n        getLocale(): Promise<wix_site_backend.generalInfo.GeneralInfoLocale>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site logo file name.\\\\r\\\\n         */\\\\r\\\\n        getLogo(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site multilingual information.\\\\r\\\\n         */\\\\r\\\\n        getMultilingual(): Promise<wix_site_backend.generalInfo.GeneralInfoLanguages>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site payment currency information.\\\\r\\\\n         */\\\\r\\\\n        getPaymentCurrency(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the phone number used for notifications of activities on your site.\\\\r\\\\n         */\\\\r\\\\n        getPhone(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site display name.\\\\r\\\\n         */\\\\r\\\\n        getSiteDisplayName(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site time zone information.\\\\r\\\\n         */\\\\r\\\\n        getTimeZone(): Promise<string>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace generalInfo {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a site's corresponding physical address.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoAddress = {\\\\r\\\\n            /**\\\\r\\\\n             * Address street.\\\\r\\\\n             */\\\\r\\\\n            street: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address state.\\\\r\\\\n             */\\\\r\\\\n            state: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address zip code.\\\\r\\\\n             */\\\\r\\\\n            zip: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address description.\\\\r\\\\n             */\\\\r\\\\n            hint: wix_site_backend.generalInfo.GeneralInfoAddressHint;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the business has a physical address.\\\\r\\\\n             */\\\\r\\\\n            isPhysical: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Address as formatted by Google.\\\\r\\\\n             */\\\\r\\\\n            googleFormattedAddress: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address street number.\\\\r\\\\n             */\\\\r\\\\n            streetNumber: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address apartment number.\\\\r\\\\n             */\\\\r\\\\n            apartmentNumber: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address coordinates.\\\\r\\\\n             */\\\\r\\\\n            coordinates: wix_site_backend.generalInfo.GeneralInfoAddressCoordinates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the coordinates of the site address.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoAddressCoordinates = {\\\\r\\\\n            /**\\\\r\\\\n             * Address latitude.\\\\r\\\\n             */\\\\r\\\\n            latitude: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address longitude.\\\\r\\\\n             */\\\\r\\\\n            longitude: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a description of a site's address.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoAddressHint = {\\\\r\\\\n            /**\\\\r\\\\n             * Address description.\\\\r\\\\n             */\\\\r\\\\n            text: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether description is shown before, after, or instead of the actual address.\\\\r\\\\n             */\\\\r\\\\n            placement: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the categories that describe your site's business.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoCategories = {\\\\r\\\\n            /**\\\\r\\\\n             * Primary site category.\\\\r\\\\n             */\\\\r\\\\n            primary: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of secondary site categories.\\\\r\\\\n             */\\\\r\\\\n            secondary: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the site's languages.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoLanguages = {\\\\r\\\\n            /**\\\\r\\\\n             * List supported languages.\\\\r\\\\n             */\\\\r\\\\n            supportedLanguages: wix_site_backend.generalInfo.GeneralInfoLanguagesSupported[];\\\\r\\\\n            /**\\\\r\\\\n             * Whether to automatically redirect users based on their browser's settings.\\\\r\\\\n             */\\\\r\\\\n            autoRedirect: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the site's supported languages.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoLanguagesSupported = {\\\\r\\\\n            /**\\\\r\\\\n             * Language code.\\\\r\\\\n             */\\\\r\\\\n            languageCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Language locale.\\\\r\\\\n             */\\\\r\\\\n            locale: wix_site_backend.generalInfo.GeneralInfoLocale;\\\\r\\\\n            /**\\\\r\\\\n             * Country Code for the Language icon.\\\\r\\\\n             */\\\\r\\\\n            countryCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the language is the primary language.\\\\r\\\\n             */\\\\r\\\\n            isPrimary: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a site's locale.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoLocale = {\\\\r\\\\n            /**\\\\r\\\\n             * Site country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Site language code.\\\\r\\\\n             */\\\\r\\\\n            languageCode: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing business hours.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoSchedule = {\\\\r\\\\n            /**\\\\r\\\\n             * List of opening and closing days and times.\\\\r\\\\n             */\\\\r\\\\n            periods: wix_site_backend.generalInfo.GeneralInfoSchedulePeriods[];\\\\r\\\\n            /**\\\\r\\\\n             * Special hours.\\\\r\\\\n             */\\\\r\\\\n            specialHourPeriod: wix_site_backend.generalInfo.GeneralInfoScheduleSpecial[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing business opened and closed hours.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoSchedulePeriods = {\\\\r\\\\n            /**\\\\r\\\\n             * Business opening day.\\\\r\\\\n             */\\\\r\\\\n            openDay: string;\\\\r\\\\n            /**\\\\r\\\\n             * Business opening time.\\\\r\\\\n             */\\\\r\\\\n            openTime: string;\\\\r\\\\n            /**\\\\r\\\\n             * Business closing day.\\\\r\\\\n             */\\\\r\\\\n            closeDay: string;\\\\r\\\\n            /**\\\\r\\\\n             * Business closing time.\\\\r\\\\n             */\\\\r\\\\n            closeTime: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing special business hours.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoScheduleSpecial = {\\\\r\\\\n            /**\\\\r\\\\n             * Special hours start date.\\\\r\\\\n             */\\\\r\\\\n            startDate: string;\\\\r\\\\n            /**\\\\r\\\\n             * Special hours end date.\\\\r\\\\n             */\\\\r\\\\n            endDate: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the business is closed.\\\\r\\\\n             */\\\\r\\\\n            isClosed: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Special hours comment.\\\\r\\\\n             */\\\\r\\\\n            comment: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_stores_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired from a Wix Store.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a visitor abandons a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        onCartAbandoned(event: wix_stores_backend.Events.CartAbandonedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a visitor completes a purchase from a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        onCartCompleted(event: wix_stores_backend.Events.CartCompletedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a visitor adds a product to a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        onCartCreated(event: wix_stores_backend.Events.CartCreatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a visitor completes a purchase from an abandoned shopping cart.\\\\r\\\\n         */\\\\r\\\\n        onCartRecovered(event: wix_stores_backend.Events.CartRecoveredEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product collection is created.\\\\r\\\\n         */\\\\r\\\\n        onCollectionCreated(event: wix_stores_backend.Events.CollectionCreatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product collection is deleted.\\\\r\\\\n         */\\\\r\\\\n        onCollectionDeleted(event: wix_stores_backend.Events.CollectionDeletedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product collection is updated.\\\\r\\\\n         */\\\\r\\\\n        onCollectionUpdated(event: wix_stores_backend.Events.CollectionUpdatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an inventory item's information is updated.\\\\r\\\\n         */\\\\r\\\\n        onInventoryItemUpdated(event: wix_stores_backend.Events.InventoryItemUpdatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when the inventory information of a product variant is updated.\\\\r\\\\n         */\\\\r\\\\n        onInventoryVariantUpdated(event: wix_stores_backend.Events.InventoryVariantUpdatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a new order is placed.\\\\r\\\\n         */\\\\r\\\\n        onNewOrder(event: wix_stores_backend.Events.NewOrderEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product is created.\\\\r\\\\n         */\\\\r\\\\n        onProductCreated(event: wix_stores_backend.Events.ProductCreatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product is deleted.\\\\r\\\\n         */\\\\r\\\\n        onProductDeleted(event: wix_stores_backend.Events.ProductDeletedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product is updated.\\\\r\\\\n         */\\\\r\\\\n        onProductUpdated(event: wix_stores_backend.Events.ProductUpdatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when variant information for a product is updated.\\\\r\\\\n         */\\\\r\\\\n        onVariantsUpdated(event: wix_stores_backend.Events.VariantsUpdatedEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a shopping cart that was abandoned.\\\\r\\\\n         */\\\\r\\\\n        type CartAbandonedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Time the abandoned cart was abandoned.\\\\r\\\\n             */\\\\r\\\\n            abandonTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Information about the visitor who abandoned the shopping cart.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the shopping cart that was abandoned.\\\\r\\\\n             */\\\\r\\\\n            cartId: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the abandoned cart's checkout page.\\\\r\\\\n             */\\\\r\\\\n            checkoutUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of coupon used in the abandoned cart.\\\\r\\\\n             */\\\\r\\\\n            couponId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Time the abandoned cart was created.\\\\r\\\\n             */\\\\r\\\\n            creationTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in the abandoned cart.\\\\r\\\\n             */\\\\r\\\\n            itemsCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Abandoned cart totals.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_stores_backend.Events.CartTotals;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a shopping cart that was completed.\\\\r\\\\n         */\\\\r\\\\n        type CartCompletedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the shopping cart that was completed.\\\\r\\\\n             */\\\\r\\\\n            cartId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Time the shopping cart was completed.\\\\r\\\\n             */\\\\r\\\\n            completedTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The buyer's information.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * Message from the buyer.\\\\r\\\\n             */\\\\r\\\\n            buyerNote: string;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon applied in the shopping cart.\\\\r\\\\n             */\\\\r\\\\n            appliedCoupon: wix_stores_backend.AppliedCoupon;\\\\r\\\\n            /**\\\\r\\\\n             * Billing address.\\\\r\\\\n             */\\\\r\\\\n            billingAddress: wix_stores_backend.Address;\\\\r\\\\n            /**\\\\r\\\\n             * Currency of the shopping cart.\\\\r\\\\n             */\\\\r\\\\n            currency: wix_stores_backend.Currency;\\\\r\\\\n            /**\\\\r\\\\n             * The order's units of weight. One of: `\\\\\\\"KG\\\\\\\"`, `\\\\\\\"LB\\\\\\\"`, or `\\\\\\\"UNSPECIFIED_WEIGHT_UNIT\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            weightUnit: string;\\\\r\\\\n            /**\\\\r\\\\n             * The shopping cart's totals.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_stores_backend.OrderTotals;\\\\r\\\\n            /**\\\\r\\\\n             * The shopping cart's shipping information.\\\\r\\\\n             */\\\\r\\\\n            shippingInfo: wix_stores_backend.ShippingInfo;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a shopping cart that was created.\\\\r\\\\n         */\\\\r\\\\n        type CartCreatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the shopping cart that was created.\\\\r\\\\n             */\\\\r\\\\n            cartId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Time the shopping cart was created.\\\\r\\\\n             */\\\\r\\\\n            creationTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The buyer's information.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * The order's units of weight. One of: `\\\\\\\"KG\\\\\\\"`, `\\\\\\\"LB\\\\\\\"`, or `\\\\\\\"UNSPECIFIED_WEIGHT_UNIT\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            weightUnit: string;\\\\r\\\\n            /**\\\\r\\\\n             * Currency of the shopping cart.\\\\r\\\\n             */\\\\r\\\\n            currency: wix_stores_backend.Currency;\\\\r\\\\n            /**\\\\r\\\\n             * The shopping cart's totals.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_stores_backend.OrderTotals;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a shopping cart that was recovered.\\\\r\\\\n         */\\\\r\\\\n        type CartRecoveredEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Time the recovered cart was abandoned.\\\\r\\\\n             */\\\\r\\\\n            abandonedTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the shopping cart that was abandoned.\\\\r\\\\n             */\\\\r\\\\n            cartId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Time the recovered cart was originally created.\\\\r\\\\n             */\\\\r\\\\n            creationTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Time the cart was recovered.\\\\r\\\\n             */\\\\r\\\\n            recoveredTime: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the totals of a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        type CartTotals = {\\\\r\\\\n            /**\\\\r\\\\n             * Subtotal of all the line items in the abandoned cart, not including shipping and tax.\\\\r\\\\n             */\\\\r\\\\n            subtotal: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total of all the line items in the abandoned cart, including shipping and tax.\\\\r\\\\n             */\\\\r\\\\n            total: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total formatted with currency symbol.\\\\r\\\\n             */\\\\r\\\\n            formattedTotal: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product collection that was created.\\\\r\\\\n         */\\\\r\\\\n        type CollectionCreatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the created collection.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Collection name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Main product media item (image) URL.\\\\r\\\\n             */\\\\r\\\\n            mainMedia: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product collection that was deleted.\\\\r\\\\n         */\\\\r\\\\n        type CollectionDeletedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the delete collection.\\\\r\\\\n             */\\\\r\\\\n            collectionId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product collection that was updated.\\\\r\\\\n         */\\\\r\\\\n        type CollectionUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the updated collection.\\\\r\\\\n             */\\\\r\\\\n            collectionId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Names of the collection fields that were updated.\\\\r\\\\n             */\\\\r\\\\n            updatedFields: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an inventory item that was updated.\\\\r\\\\n         */\\\\r\\\\n        type InventoryItemUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the inventory item.\\\\r\\\\n             */\\\\r\\\\n            inventoryItemId: string;\\\\r\\\\n            /**\\\\r\\\\n             * External ID of the inventory item. For example, the product ID for\\\\\\\\n inventory items which are store products.\\\\r\\\\n             */\\\\r\\\\n            externalId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the item's inventory is tracked.\\\\r\\\\n             */\\\\r\\\\n            trackInventory: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing product variant information that was updated.\\\\r\\\\n         */\\\\r\\\\n        type InventoryVariantUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the inventory item.\\\\r\\\\n             */\\\\r\\\\n            inventoryItemId: string;\\\\r\\\\n            /**\\\\r\\\\n             * External ID of the inventory item. For example, the product ID for\\\\\\\\n inventory items which are store products.\\\\r\\\\n             */\\\\r\\\\n            externalId: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of variants that were updated.\\\\r\\\\n             */\\\\r\\\\n            variants: wix_stores_backend.Events.UpdatedVariantInventory[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a new order from a store.\\\\r\\\\n         */\\\\r\\\\n        type NewOrderEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * The ID of the order, auto-generated when an order is created an unique within all Wix Stores.\\\\r\\\\n             */\\\\r\\\\n            orderId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Running order number unique to the current store.\\\\r\\\\n             */\\\\r\\\\n            number: string;\\\\r\\\\n            /**\\\\r\\\\n             * The date the order was created.\\\\r\\\\n             */\\\\r\\\\n            dateCreated: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The buyer's information.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * The currency code for all of the order's prices.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * The order's units of weight. One of: `\\\\\\\"KG\\\\\\\"`, `\\\\\\\"LB\\\\\\\"`, or `\\\\\\\"UNSPECIFIED_WEIGHT_UNIT\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            weightUnit: string;\\\\r\\\\n            /**\\\\r\\\\n             * The order's totals.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_stores_backend.OrderTotals;\\\\r\\\\n            /**\\\\r\\\\n             * The order's payment status. One of: `\\\\\\\"PAID\\\\\\\"` or `\\\\\\\"NOT_PAID\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            paymentStatus: string;\\\\r\\\\n            /**\\\\r\\\\n             * The order's fulfillment status. One of: `\\\\\\\"FULFILLED\\\\\\\"` or `\\\\\\\"NOT_FULFILLED\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            fulfillmentStatus: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the specific choices from the product's options.\\\\r\\\\n         */\\\\r\\\\n        type ProductChoices = {\\\\r\\\\n            /**\\\\r\\\\n             * Value of the option. This key name is\\\\r\\\\n             *  dependent on the option changed in the product. For example, if a product\\\\r\\\\n             *  has a size option, this key value will be something like \\\\\\\"Size\\\\\\\" and its value\\\\r\\\\n             *  will be something like \\\\\\\"Large\\\\\\\".\\\\r\\\\n             *  \\\\r\\\\n             *  `optionKey` is not case-sensitive. Therefore the values for the option keys `\\\\\\\"Size\\\\\\\"` `\\\\\\\"SIZE\\\\\\\"` and `\\\\\\\"size\\\\\\\"` are combined.\\\\r\\\\n             */\\\\r\\\\n            optionKey: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product that was created.\\\\r\\\\n         */\\\\r\\\\n        type ProductCreatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product stock keeping unit.\\\\r\\\\n             */\\\\r\\\\n            sku: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted product price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedDiscountedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the product is shown in the store.\\\\r\\\\n             */\\\\r\\\\n            visible: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Main product media item (image or video) URL.\\\\r\\\\n             */\\\\r\\\\n            mainMedia: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted product price.\\\\r\\\\n             */\\\\r\\\\n            discountedPrice: number;\\\\r\\\\n            /**\\\\r\\\\n             * Product price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Product media items.\\\\r\\\\n             */\\\\r\\\\n            mediaItems: wix_stores_backend.MediaItem[] | $w.Gallery.VideoItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Product currency.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL to the product's page.\\\\r\\\\n             */\\\\r\\\\n            productPageUrl: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product that was deleted.\\\\r\\\\n         */\\\\r\\\\n        type ProductDeletedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the deleted product.\\\\r\\\\n             */\\\\r\\\\n            productId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product that was updated.\\\\r\\\\n         */\\\\r\\\\n        type ProductUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the updated product.\\\\r\\\\n             */\\\\r\\\\n            productId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Names of the product fields that were updated.\\\\r\\\\n             */\\\\r\\\\n            updatedFields: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product variants that was updated.\\\\r\\\\n         */\\\\r\\\\n        type UpdatedVariant = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the variant that was updated.\\\\r\\\\n             */\\\\r\\\\n            variantId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Names of the product variant fields that were updated.\\\\r\\\\n             */\\\\r\\\\n            updatedFields: string[];\\\\r\\\\n            choices: wix_stores_backend.Events.ProductChoices;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing product variant that was updated.\\\\r\\\\n         */\\\\r\\\\n        type UpdatedVariantInventory = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the productVariant that was updated.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Old variant value.\\\\r\\\\n             */\\\\r\\\\n            oldValue: wix_stores_backend.Events.VariantInventoryValue;\\\\r\\\\n            /**\\\\r\\\\n             * Updated variant value.\\\\r\\\\n             */\\\\r\\\\n            newValue: wix_stores_backend.Events.VariantInventoryValue;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product variant value.\\\\r\\\\n         */\\\\r\\\\n        type VariantInventoryValue = {\\\\r\\\\n            /**\\\\r\\\\n             * Whether the variant is in stock.\\\\r\\\\n             */\\\\r\\\\n            inStock: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in stock.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing product variants that were updated.\\\\r\\\\n         */\\\\r\\\\n        type VariantsUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the product in which variants were updated.\\\\r\\\\n             */\\\\r\\\\n            productId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variants that were updated.\\\\r\\\\n             */\\\\r\\\\n            variants: wix_stores_backend.Events.UpdatedVariant[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an abandoned shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type AbandonedCart = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique identifier of the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Date and time the shopping cart was abandoned.\\\\r\\\\n         */\\\\r\\\\n        abandonTime: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Total price of all items in the cart.\\\\r\\\\n         */\\\\r\\\\n        total: string;\\\\r\\\\n        /**\\\\r\\\\n         * The buyer's information.\\\\r\\\\n         */\\\\r\\\\n        buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n        activities: wix_stores_backend.Activity;\\\\r\\\\n        /**\\\\r\\\\n         * Status of the abandoned cart. Either `\\\\\\\"ABANDONED\\\\\\\"` or `\\\\\\\"RECOVERED\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a shopping cart activity.\\\\r\\\\n     */\\\\r\\\\n    type Activity = {\\\\r\\\\n        /**\\\\r\\\\n         * One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"CUSTOM_ACTIVITY\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"EMAIL_NOT_SENT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"EMAIL_SENT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"NOTIFICATION_SENT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"SCHEDULED\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"TASK_CREATED\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"UNRECOGNIZED_TYPE\\\\\\\"`\\\\r\\\\n         */\\\\r\\\\n        activityType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Activity message.\\\\r\\\\n         */\\\\r\\\\n        message: string;\\\\r\\\\n        /**\\\\r\\\\n         * Time activity occurred.\\\\r\\\\n         */\\\\r\\\\n        timestamp: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Custom activity data.\\\\r\\\\n         */\\\\r\\\\n        customData: wix_stores_backend.CustomData;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an address.\\\\r\\\\n     */\\\\r\\\\n    type Address = {\\\\r\\\\n        /**\\\\r\\\\n         * First name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Email address.\\\\r\\\\n         */\\\\r\\\\n        email: string;\\\\r\\\\n        /**\\\\r\\\\n         * Phone number.\\\\r\\\\n         */\\\\r\\\\n        phone: string;\\\\r\\\\n        /**\\\\r\\\\n         * Address.\\\\r\\\\n         */\\\\r\\\\n        address: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a coupon applied in a shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type AppliedCoupon = {\\\\r\\\\n        /**\\\\r\\\\n         * Coupon code.\\\\r\\\\n         */\\\\r\\\\n        code: string;\\\\r\\\\n        /**\\\\r\\\\n         * Coupon unique identifier.\\\\r\\\\n         */\\\\r\\\\n        couponId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Coupon name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Type of coupon.\\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"BuyXGetY\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"FixedPriceAmount\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"FreeShipping\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"MoneyOffAmount\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"PercentOffRate\\\\\\\"`\\\\r\\\\n         */\\\\r\\\\n        couponType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Value of the coupon discount.\\\\r\\\\n         */\\\\r\\\\n        discountValue: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a visitor who abandoned a shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type BuyerInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's unique ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's email address.\\\\r\\\\n         */\\\\r\\\\n        email: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's first name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's identity.\\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"ADMIN\\\\\\\"`: Buyer is the site owner.\\\\r\\\\n         *  + `\\\\\\\"MEMBER\\\\\\\"`: Buyer is a logged-in site member.\\\\r\\\\n         *  + `\\\\\\\"VISITOR\\\\\\\"`: Buyer is not logged in.\\\\r\\\\n         *  + `\\\\\\\"CONTACT\\\\\\\"`: A contact has been created for the buyer.\\\\r\\\\n         */\\\\r\\\\n        identityType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's phone number.\\\\r\\\\n         */\\\\r\\\\n        phone: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type Cart = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique identifier of the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Coupon applied in the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        appliedCoupon: wix_stores_backend.AppliedCoupon;\\\\r\\\\n        /**\\\\r\\\\n         * Cart billing address.\\\\r\\\\n         */\\\\r\\\\n        billingAddress: wix_stores_backend.Address;\\\\r\\\\n        /**\\\\r\\\\n         * The buyer's information.\\\\r\\\\n         */\\\\r\\\\n        buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n        /**\\\\r\\\\n         * Cart status. Either `\\\\\\\"INCOMPLETE\\\\\\\"` or `\\\\\\\"COMPLETE\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * Currency of the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        currency: wix_stores_backend.Currency;\\\\r\\\\n        /**\\\\r\\\\n         * The shopping cart's shipping information.\\\\r\\\\n         */\\\\r\\\\n        shippingInfo: wix_stores_backend.ShippingInfo;\\\\r\\\\n        /**\\\\r\\\\n         * Items in the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        lineItems: wix_stores_backend.LineItem[];\\\\r\\\\n        /**\\\\r\\\\n         * The shopping cart's totals.\\\\r\\\\n         */\\\\r\\\\n        totals: wix_stores_backend.OrderTotals;\\\\r\\\\n        /**\\\\r\\\\n         * The order's units of weight. One of: `\\\\\\\"KG\\\\\\\"`, `\\\\\\\"LB\\\\\\\"`, or `\\\\\\\"UNSPECIFIED_WEIGHT_UNIT\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        weightUnit: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the choice for a product variant.\\\\r\\\\n     */\\\\r\\\\n    type Choice = {\\\\r\\\\n        /**\\\\r\\\\n         * Product options to use when creating or updating the\\\\r\\\\n         *  product. The object contains key:value pairs where the key is the\\\\r\\\\n         *  option name and the value is the chosen option value.\\\\r\\\\n         */\\\\r\\\\n        choices: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the choice for a product variant.\\\\r\\\\n     */\\\\r\\\\n    type Choices = {\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        option: string;\\\\r\\\\n        /**\\\\r\\\\n         * Choice name.\\\\r\\\\n         */\\\\r\\\\n        choice: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a currency.\\\\r\\\\n     */\\\\r\\\\n    type Currency = {\\\\r\\\\n        /**\\\\r\\\\n         * The currency code.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * The currency symbol.\\\\r\\\\n         */\\\\r\\\\n        symbol: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing custom activity data.\\\\r\\\\n     */\\\\r\\\\n    type CustomData = {\\\\r\\\\n        /**\\\\r\\\\n         * Activity namespace.\\\\r\\\\n         */\\\\r\\\\n        namespace: string;\\\\r\\\\n        /**\\\\r\\\\n         * JSON object containing custom data.\\\\r\\\\n         */\\\\r\\\\n        customValue: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a custom text field.\\\\r\\\\n     */\\\\r\\\\n    type CustomTextField = {\\\\r\\\\n        /**\\\\r\\\\n         * Field title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Field value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a line item in a shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type LineItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the line item.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Notes about the line item.\\\\r\\\\n         */\\\\r\\\\n        notes: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item price.\\\\r\\\\n         */\\\\r\\\\n        price: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item product ID.\\\\r\\\\n         */\\\\r\\\\n        productId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item quantity.\\\\r\\\\n         */\\\\r\\\\n        quantity: number;\\\\r\\\\n        /**\\\\r\\\\n         * Line item stock keeping unit.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Total price charged to the customer for all line items after any applicable discounts.\\\\r\\\\n         */\\\\r\\\\n        totalPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item weight.\\\\r\\\\n         */\\\\r\\\\n        weight: string;\\\\r\\\\n        /**\\\\r\\\\n         * Type of the line item.\\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"DIGITAL\\\\\\\"`: Digital item.\\\\r\\\\n         *  + `\\\\\\\"PHYSICAL\\\\\\\"`: Physical item.\\\\r\\\\n         *  + `\\\\\\\"CUSTOM_AMOUNT_ITEM\\\\\\\"`: Item with a custom price.\\\\r\\\\n         *  + `\\\\\\\"UNSPECIFIED\\\\\\\"`: Type can't be classified due to an error.\\\\r\\\\n         */\\\\r\\\\n        lineItemType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item options.\\\\r\\\\n         */\\\\r\\\\n        options: wix_stores_backend.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Media item.\\\\r\\\\n         */\\\\r\\\\n        mediaItem: wix_stores_backend.MediaItem;\\\\r\\\\n        /**\\\\r\\\\n         * Custom text.\\\\r\\\\n         */\\\\r\\\\n        customTextFields: wix_stores_backend.CustomTextField[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the media item for a product.\\\\r\\\\n     */\\\\r\\\\n    type Media = {\\\\r\\\\n        /**\\\\r\\\\n         * One of:\\\\r\\\\n         * \\\\r\\\\n         *  + A Wix media item's ID, or\\\\r\\\\n         *  + A media item's URL\\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         *  Use `mediaId` (preferred) for images hosted by Wix. Use `url` for other images. \\\\r\\\\n         * \\\\r\\\\n         *  If you specify both, `mediaId` takes precedence. We recommend only specifying one to avoid unpredictable results. \\\\r\\\\n         * \\\\r\\\\n         *  You can get the `mediaId` from: \\\\r\\\\n         * \\\\r\\\\n         *   + A query of the [`Product`](https://www.wix.com/corvid/reference/$w.ProductPage.html#Product) object. \\\\r\\\\n         *   + The [`UploadedFile`](https://www.wix.com/corvid/reference/$w.UploadButton.html#UploadedFile)'s properties when uploading an image.\\\\r\\\\n         */\\\\r\\\\n        \\\\\\\"(mediaId|url)\\\\\\\": string;\\\\r\\\\n        /**\\\\r\\\\n         * A choice of the product variant.\\\\r\\\\n         */\\\\r\\\\n        choice: wix_stores_backend.Choice;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the media item for a product's choices.\\\\r\\\\n     */\\\\r\\\\n    type MediaChoices = {\\\\r\\\\n        /**\\\\r\\\\n         * Wix media item IDs.\\\\r\\\\n         */\\\\r\\\\n        mediaIds: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        option: string;\\\\r\\\\n        /**\\\\r\\\\n         * Choice name.\\\\r\\\\n         */\\\\r\\\\n        choice: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a media item.\\\\r\\\\n     */\\\\r\\\\n    type MediaItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Media item ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media items type. Can be \\\\\\\"image\\\\\\\" or \\\\\\\"video.\\\\\\\"\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item URL.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Thumbnail URL for videos only.\\\\r\\\\n         */\\\\r\\\\n        thumbnail?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a line item option.\\\\r\\\\n     */\\\\r\\\\n    type Option = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the product option.\\\\r\\\\n         */\\\\r\\\\n        option: string;\\\\r\\\\n        /**\\\\r\\\\n         * Selected option.\\\\r\\\\n         */\\\\r\\\\n        selection: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an order's totals.\\\\r\\\\n     */\\\\r\\\\n    type OrderTotals = {\\\\r\\\\n        /**\\\\r\\\\n         * The subtotal of all the order's line items, excluding tax.\\\\r\\\\n         */\\\\r\\\\n        subtotal: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total shipping price, including tax.\\\\r\\\\n         */\\\\r\\\\n        shipping: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total amount of tax.\\\\r\\\\n         */\\\\r\\\\n        tax: string;\\\\r\\\\n        /**\\\\r\\\\n         * The total calculated discount amount.\\\\r\\\\n         */\\\\r\\\\n        discount: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total price.\\\\r\\\\n         */\\\\r\\\\n        total: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total weight of the order's items.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total quantity of the the order's line items.\\\\r\\\\n         */\\\\r\\\\n        quantity: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing paging options.\\\\r\\\\n     */\\\\r\\\\n    type PagingOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Maximum number of variants to retrieve. Defaults to 300.\\\\r\\\\n         */\\\\r\\\\n        limit: number;\\\\r\\\\n        /**\\\\r\\\\n         * Number of variants to skip before the retrieved variants. Defaults to 0.\\\\r\\\\n         */\\\\r\\\\n        skip: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product in a store.\\\\r\\\\n     */\\\\r\\\\n    type Product = {\\\\r\\\\n        /**\\\\r\\\\n         * Product ID.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Date product was last updated.\\\\r\\\\n         */\\\\r\\\\n        _updatedDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Product name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Main product media item (image or video thumbnail) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of product media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores_backend.MediaItem;\\\\r\\\\n        /**\\\\r\\\\n         * Product stock keeping unit value. Must be unique.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of product ribbons.\\\\r\\\\n         */\\\\r\\\\n        ribbons: wix_stores_backend.ProductRibbon[];\\\\r\\\\n        /**\\\\r\\\\n         * Product currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product price. \\\\r\\\\n         *  The price must be greater than its discount.\\\\r\\\\n         *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Product price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID for the inventory item.\\\\r\\\\n         */\\\\r\\\\n        inventoryItemId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product discount.\\\\r\\\\n         */\\\\r\\\\n        discount: wix_stores_backend.ProductDiscount;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether inventory is tracked for the product.\\\\r\\\\n         */\\\\r\\\\n        trackInventory: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product is in stock.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Number of units currently in stock.\\\\r\\\\n         */\\\\r\\\\n        quantityInStock: number;\\\\r\\\\n        /**\\\\r\\\\n         * Additional product information sections.\\\\r\\\\n         */\\\\r\\\\n        additionalInfoSections: wix_stores_backend.ProductAdditionalInfoSection[];\\\\r\\\\n        /**\\\\r\\\\n         * All the available options for a store product.\\\\r\\\\n         */\\\\r\\\\n        productOptions: wix_stores_backend.ProductOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Product page relative URL.\\\\r\\\\n         */\\\\r\\\\n        productPageUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether product variants are managed. Can be set to true only if the product has options. Once set to true, can be reset to false only if no variants exist. Use [`getProductVariants()`](https://www.wix.com/corvid/reference/wix-stores.html#getProductVariants) to check if variants exist. You cannot set `manageVariants` to true if more than 300 variants are defined.\\\\r\\\\n         */\\\\r\\\\n        manageVariants: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * List of product customization fields.\\\\r\\\\n         */\\\\r\\\\n        customTextFields: wix_stores_backend.ProductCustomTextFields[];\\\\r\\\\n        /**\\\\r\\\\n         * Product type. Either `\\\\\\\"physical\\\\\\\"` or `\\\\\\\"digital\\\\\\\"`. When creating a product using the API, currently only `\\\\\\\"physical\\\\\\\"` is supported.\\\\r\\\\n         */\\\\r\\\\n        productType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product slug.\\\\r\\\\n         */\\\\r\\\\n        slug: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product weight.\\\\r\\\\n         */\\\\r\\\\n        weight: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variants.\\\\r\\\\n         */\\\\r\\\\n        variants: wix_stores_backend.ProductVariants;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an additional info section for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductAdditionalInfoSection = {\\\\r\\\\n        /**\\\\r\\\\n         * Section title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Section description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variant's option choices.\\\\r\\\\n     */\\\\r\\\\n    type ProductChoices = {\\\\r\\\\n        /**\\\\r\\\\n         * Value of the choice. This key name is dependent on the\\\\r\\\\n         *  product option. For example, if a product has a size option, this\\\\r\\\\n         *  key value will be something like `\\\\\\\"Size\\\\\\\"` and its value will be something like\\\\r\\\\n         *  `\\\\\\\"Large\\\\\\\"`.\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\", are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a custom text field for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductCustomTextFields = {\\\\r\\\\n        /**\\\\r\\\\n         * Product customization field title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Maximum length of product customization field in characters.\\\\r\\\\n         */\\\\r\\\\n        maxLength: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product discount.\\\\r\\\\n     */\\\\r\\\\n    type ProductDiscount = {\\\\r\\\\n        /**\\\\r\\\\n         * Discount type. Required.\\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         *  - `\\\\\\\"AMOUNT\\\\\\\"` \\\\r\\\\n         * \\\\r\\\\n         *  - `\\\\\\\"PERCENT\\\\\\\"`\\\\r\\\\n         * \\\\r\\\\n         *  - `\\\\\\\"NONE\\\\\\\"`\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discount value. The discount value cannot be greater than the price of the product or the variant.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing information for creating or updating a product in a store.\\\\r\\\\n     */\\\\r\\\\n    type ProductInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Product name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product stock keeping unit value. Must be unique.\\\\r\\\\n         */\\\\r\\\\n        sku: number;\\\\r\\\\n        /**\\\\r\\\\n         * Product price. \\\\r\\\\n         *  The price must be greater than its discount.\\\\r\\\\n         *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product discount.\\\\r\\\\n         */\\\\r\\\\n        discount: wix_stores_backend.ProductDiscount;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing all the available options for a store product.\\\\r\\\\n         */\\\\r\\\\n        productOptions: wix_stores_backend.ProductOptionsInfo;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether product variants can be managed. Can be set to true only if the product has options. Once set to true, can be reset to false only if no variants exist. Use [`getProductVariants()`](https://www.wix.com/corvid/reference/wix-stores.html#getProductVariants) to check if variants exist.  You cannot set `manageVariants` to true if more than 300 variants are defined.\\\\r\\\\n         */\\\\r\\\\n        manageVariants: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Product type. Currently only \\\\\\\"physical\\\\\\\" is supported for creating a new product using the API. Soon \\\\\\\"digital\\\\\\\" will also be supported.\\\\r\\\\n         */\\\\r\\\\n        productType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an option for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOption = {\\\\r\\\\n        /**\\\\r\\\\n         * Option type. Either `\\\\\\\"color\\\\\\\"` or `\\\\\\\"drop_down\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        optionType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductOptionsChoice[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an option for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductOptionsChoice[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing all the available options for a store product, such as \\\\\\\"Size\\\\\\\" or \\\\\\\"Color.\\\\\\\"\\\\r\\\\n     */\\\\r\\\\n    type ProductOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the option. This key name\\\\r\\\\n         *  is dependent on the options added to the product. For example, if a product has a size \\\\r\\\\n         *  option, this key will be something like `\\\\\\\"Size\\\\\\\"`.\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: wix_stores_backend.ProductOption;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by the `getProductOptionsAvailability()` function representing the availability of a product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsAvailability = {\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product with the specified option choices is available for purchase.\\\\r\\\\n         */\\\\r\\\\n        availableForPurchase: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing all the available options for a store product.\\\\r\\\\n         */\\\\r\\\\n        productOptions: wix_stores_backend.ProductOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Main product media item (image or video) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of product media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores_backend.MediaItem;\\\\r\\\\n        /**\\\\r\\\\n         * The variant of the product selected using the specified option choices if there is one.\\\\r\\\\n         */\\\\r\\\\n        selectedVariant: wix_stores_backend.ProductOptionsAvailabilitySelectedVariant;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the product variant selected using the `getProductOptionsAvailability()` function.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsAvailabilitySelectedVariant = {\\\\r\\\\n        /**\\\\r\\\\n         * Product variant stock keeping unit value.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant price. The variant price must be greater than its discount.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product variant is shown in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product variant is in stock.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an options choice for a store product for a store product, such as choice \\\\\\\"Small\\\\\\\" for the option \\\\\\\"Size.\\\\\\\"\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsChoice = {\\\\r\\\\n        /**\\\\r\\\\n         * Choice value.\\\\r\\\\n         */\\\\r\\\\n        value: number;\\\\r\\\\n        /**\\\\r\\\\n         * Choice description.\\\\r\\\\n         */\\\\r\\\\n        description: number;\\\\r\\\\n        /**\\\\r\\\\n         * Choice media.\\\\r\\\\n         */\\\\r\\\\n        media: wix_stores_backend.ProductOptionsChoiceMedia[];\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product with this choice is in stock. When adding a product, this property is read-only.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product with this option is visible.  When adding a product, this property is read-only.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the choice media.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsChoiceMedia = {\\\\r\\\\n        /**\\\\r\\\\n         * Main choice media item (image or video thumbnail) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of choice media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores_backend.MediaItem;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing all the available options for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the option. This key name\\\\r\\\\n         *  is dependent on the options added to the product. For example, if a product has a size \\\\r\\\\n         *  option, this key will be something like `\\\\\\\"Size\\\\\\\"`.\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: wix_stores_backend.ProductOptionInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a ribbon for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductRibbon = {\\\\r\\\\n        /**\\\\r\\\\n         * Ribbon text.\\\\r\\\\n         */\\\\r\\\\n        text: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variant information to use when creating or updating variants.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price. The variant price must be greater than its discount.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Formatted variant price.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant stock keeping unit number.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the variant is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variant item.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique product variant ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant information.\\\\r\\\\n         */\\\\r\\\\n        variant: wix_stores_backend.ProductVariantInfo[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the selection of specific variants of a product. Use only one of\\\\r\\\\n     *  `choices` or `variantIds`.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * The choices the retrieved variants will have.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * IDs of variants to retrieve.\\\\r\\\\n         */\\\\r\\\\n        variantIds: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Paging options.\\\\r\\\\n         */\\\\r\\\\n        paging: wix_stores_backend.PagingOptions;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variants.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariants = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_stores_backend.ProductVariantItem[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing shipping information.\\\\r\\\\n     */\\\\r\\\\n    type ShippingInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Shipment address.\\\\r\\\\n         */\\\\r\\\\n        shippingAddress?: wix_stores_backend.Address;\\\\r\\\\n        /**\\\\r\\\\n         * Pickup address.\\\\r\\\\n         */\\\\r\\\\n        pickupInfo?: wix_stores_backend.Address;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object containing variant information.\\\\r\\\\n     */\\\\r\\\\n    type VariantInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price. The variant price must be greater than its discount.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant stock keeping unit value.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the variant is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variant item.\\\\r\\\\n     */\\\\r\\\\n    type VariantItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique variant ID.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n        /**\\\\r\\\\n         * The choices of the retrieved variant.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * Variant information.\\\\r\\\\n         */\\\\r\\\\n        variant: wix_stores_backend.VariantInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variants.\\\\r\\\\n     */\\\\r\\\\n    type Variants = {\\\\r\\\\n        /**\\\\r\\\\n         * List of variant items that match the specified choices or variant IDs.\\\\r\\\\n         */\\\\r\\\\n        items: wix_stores_backend.VariantItem[];\\\\r\\\\n        /**\\\\r\\\\n         * Number of items in the current results page.\\\\r\\\\n         */\\\\r\\\\n        length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Total number of variants with the specified choices.\\\\r\\\\n         */\\\\r\\\\n        totalCount: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_users_backend {\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site member's address.\\\\r\\\\n     */\\\\r\\\\n    type Address = {\\\\r\\\\n        /**\\\\r\\\\n         * Address street address.\\\\r\\\\n         */\\\\r\\\\n        street: string;\\\\r\\\\n        /**\\\\r\\\\n         * Address city.\\\\r\\\\n         */\\\\r\\\\n        city: string;\\\\r\\\\n        /**\\\\r\\\\n         * Address country.\\\\r\\\\n         */\\\\r\\\\n        country: string;\\\\r\\\\n        /**\\\\r\\\\n         * Address postal code.\\\\r\\\\n         */\\\\r\\\\n        postalCode: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site member's picture.\\\\r\\\\n     */\\\\r\\\\n    type Picture = {\\\\r\\\\n        /**\\\\r\\\\n         * Member's image URL.\\\\r\\\\n         */\\\\r\\\\n        url: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the results of a site registration.\\\\r\\\\n     */\\\\r\\\\n    type RegistrationResult = {\\\\r\\\\n        /**\\\\r\\\\n         * Registration status. Either \\\\\\\"Pending\\\\\\\" or \\\\\\\"Active\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * A token used to log in the current\\\\r\\\\n         *  user as a site member. Pass the token from your backend code to client-side\\\\r\\\\n         *  code and use it when calling the [applySessionToken()](wix-users.html#applySessionToken)\\\\r\\\\n         *  function. The token is only available when `status` is \\\\\\\"Active\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        sessionToken?: string;\\\\r\\\\n        /**\\\\r\\\\n         * A token for approving the user as\\\\r\\\\n         *  a site member using the [approveByToken()](wix-users-backend.html#approveByToken)\\\\r\\\\n         *  function. The token is safe to pass via email or from client-side code to\\\\r\\\\n         *  backend code. The token is only available when `status` is \\\\\\\"Pending\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        approvalToken?: string;\\\\r\\\\n        /**\\\\r\\\\n         * The user that has been registered.\\\\r\\\\n         */\\\\r\\\\n        user: wix_users.User;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site member.\\\\r\\\\n     */\\\\r\\\\n    type UserInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Member's unique id.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * The member's full name. This information is concatenated from the \\\\\\\"First Name\\\\\\\" and \\\\\\\"Last Name\\\\\\\" fields.\\\\r\\\\n         */\\\\r\\\\n        memberName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Member's first name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Member's last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * The email address the member uses to log in to your site. This is the address they supplied when they signed up.\\\\r\\\\n         */\\\\r\\\\n        loginEmail: string;\\\\r\\\\n        /**\\\\r\\\\n         * The name the member specified on their profile.\\\\r\\\\n         */\\\\r\\\\n        nickname: string;\\\\r\\\\n        /**\\\\r\\\\n         * The member's URL-friendly name that is unique across your site. Typically this is made up of the member's email prefix.\\\\r\\\\n         */\\\\r\\\\n        slug: string;\\\\r\\\\n        /**\\\\r\\\\n         * The member's locale based on their last login.\\\\r\\\\n         */\\\\r\\\\n        language: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates the member's current status, between `Applicant`, `Active`, `Blocked`.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * The date and time the member registered to the site.\\\\r\\\\n         */\\\\r\\\\n        creationDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * The last date and time the member's details were updated.\\\\r\\\\n         */\\\\r\\\\n        lastUpdateDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * The date and time when the member last logged in.\\\\r\\\\n         */\\\\r\\\\n        lastLoginDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * List of the member's email addresses.\\\\r\\\\n         */\\\\r\\\\n        emails: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of the member's phone numbers.\\\\r\\\\n         */\\\\r\\\\n        phones: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of the member's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)\\\\r\\\\n         *  are used to organize contacts. When setting the `labels` property, you can\\\\r\\\\n         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         */\\\\r\\\\n        labels: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Member's picture.\\\\r\\\\n         */\\\\r\\\\n        picture: wix_users_backend.Picture;\\\\r\\\\n        /**\\\\r\\\\n         * Any\\\\r\\\\n         *  number of custom fields. [Customs fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\\\\r\\\\n         *  are used to store additional information about your site's contacts. When\\\\r\\\\n         *  setting a custom field, use key:value pairs where the key matches the names\\\\r\\\\n         *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         *  You can only set values for custom fields that already exist in the Contacts\\\\r\\\\n         *  application.\\\\r\\\\n         */\\\\r\\\\n        customFields: string | number | Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_bookings {\\\\r\\\\n    /**\\\\r\\\\n     * An object used when calling [`getServiceAvailability()`](#getServiceAvailability)\\\\r\\\\n     *  containing options for which slots should be returned.\\\\r\\\\n     */\\\\r\\\\n    type AvailabilityOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Start date and time of the slots\\\\r\\\\n         *  to be returned. Defaults to the current date and time.\\\\r\\\\n         */\\\\r\\\\n        startDateTime?: Date;\\\\r\\\\n        /**\\\\r\\\\n         * End date and time of the slots to\\\\r\\\\n         *  be returned. Defaults to one week from `startDateTime`, which is one week\\\\r\\\\n         *  from the current date and time if `startDateTime` is also omitted.\\\\r\\\\n         */\\\\r\\\\n        endDateTime?: Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when calling [`checkoutBooking()`](#checkoutBooking)\\\\r\\\\n     *  containing information about the slot to be booked.\\\\r\\\\n     */\\\\r\\\\n    type BookingInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * The slot to be booked.\\\\r\\\\n         */\\\\r\\\\n        slot: wix_bookings.Slot;\\\\r\\\\n        /**\\\\r\\\\n         * Number of spots to book. Defaults to `1`.\\\\r\\\\n         */\\\\r\\\\n        numberOfSpots?: number;\\\\r\\\\n        /**\\\\r\\\\n         * List of form field values required to book the session.\\\\r\\\\n         */\\\\r\\\\n        formFields: wix_bookings.FormField[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the result of a call to [`checkoutBooking()`](#checkoutBooking).\\\\r\\\\n     */\\\\r\\\\n    type BookingResult = {\\\\r\\\\n        /**\\\\r\\\\n         * Status of the booking that was checked out.\\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"Confirmed\\\\\\\"`: Payment was successful or payment is to be done offline.\\\\r\\\\n         *  + `\\\\\\\"Pending Payment\\\\\\\"`: Payment is pending.\\\\r\\\\n         *  + `\\\\\\\"Terminated\\\\\\\"`: Payment failed or was cancelled.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the booking that was checked out.\\\\r\\\\n         */\\\\r\\\\n        bookingId: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned after calling [`getCheckoutOptions()`](#getCheckoutOptions)\\\\r\\\\n     *  containing information about the available payment options for the service and the logged-in user.\\\\r\\\\n     */\\\\r\\\\n    type CheckoutOption = {\\\\r\\\\n        /**\\\\r\\\\n         * Type of the available payment option. Valid options are:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"wixPay_Online\\\\\\\"` for online collections\\\\r\\\\n         *  + `\\\\\\\"wixPay_Offline\\\\\\\"` for offline collections\\\\r\\\\n         *  + `\\\\\\\"package\\\\\\\"` for a package-type paid plan \\\\r\\\\n         *  + `\\\\\\\"membership\\\\\\\"` for a membership-type paid plan\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Name of the plan package or membership. For booking with paid plans only.\\\\r\\\\n         */\\\\r\\\\n        planName?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Order ID of the plan package or membership. For booking with paid plans only.\\\\r\\\\n         */\\\\r\\\\n        planOrderId?: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the benefit provided by the plan package. For booking with package-type paid plans only.\\\\r\\\\n         */\\\\r\\\\n        benefitId?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Number of sessions remaining in the plan package. For booking with package-type paid plans only.\\\\r\\\\n         */\\\\r\\\\n        remainingCredits?: number;\\\\r\\\\n        /**\\\\r\\\\n         * Number of sessions initially provided with the plan package.  For booking with package-type paid plans only.\\\\r\\\\n         */\\\\r\\\\n        totalCredits?: number;\\\\r\\\\n        /**\\\\r\\\\n         * Date by which the plan package or membership expires. For booking with paid plans only.\\\\r\\\\n         */\\\\r\\\\n        planExpiration?: Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when calling [`checkoutBooking()`](#checkoutBooking)\\\\r\\\\n     *  containing values for form fields required to book the session.\\\\r\\\\n     */\\\\r\\\\n    type FormField = {\\\\r\\\\n        /**\\\\r\\\\n         * Form field value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the form field from the **form** property in the **Booking/Sessions** collection.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when calling [`checkoutBooking()`](#checkoutBooking)\\\\r\\\\n     *  containing information about the payment options.\\\\r\\\\n     */\\\\r\\\\n    type PaymentOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * A coupon code to be used with the payment.\\\\r\\\\n         */\\\\r\\\\n        couponCode?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Type of the payment. Valid options are: \\\\r\\\\n         * \\\\r\\\\n         *   + `\\\\\\\"wixPay_Online\\\\\\\"` for online collections\\\\r\\\\n         *   + `\\\\\\\"wixPay_Offline\\\\\\\"` for offline collections\\\\r\\\\n         *   + `\\\\\\\"package\\\\\\\"` for a package-type paid plan\\\\r\\\\n         *   + `\\\\\\\"membership\\\\\\\"` for a membership-type paid plan\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned from [`getServiceAvailability()`](#getServiceAvailability)\\\\r\\\\n     *  containing the available bookings slots.\\\\r\\\\n     */\\\\r\\\\n    type ServiceAvailability = {\\\\r\\\\n        /**\\\\r\\\\n         * List of available slots.\\\\r\\\\n         */\\\\r\\\\n        slots: wix_bookings.Slot[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a booking slot.\\\\r\\\\n     */\\\\r\\\\n    type Slot = {\\\\r\\\\n        /**\\\\r\\\\n         * Starting date and time of the slot.\\\\r\\\\n         */\\\\r\\\\n        startDateTime: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Ending date and time of the slot.\\\\r\\\\n         */\\\\r\\\\n        endDateTime: Date;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the service that the slot belongs to.\\\\r\\\\n         */\\\\r\\\\n        serviceId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Maximum number of participants that can book the service for this slot.\\\\r\\\\n         */\\\\r\\\\n        capacity: number;\\\\r\\\\n        /**\\\\r\\\\n         * Number of remaining spots that can be booked for the slot.\\\\r\\\\n         */\\\\r\\\\n        remainingSpots: number;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the slot's staff member.\\\\r\\\\n         */\\\\r\\\\n        staffMemberId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Unique slot identifier.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_crm {\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site contact.\\\\r\\\\n     */\\\\r\\\\n    type ContactInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Contact's first name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Contact's last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Contact's image source.\\\\r\\\\n         */\\\\r\\\\n        picture: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's email addresses.\\\\r\\\\n         */\\\\r\\\\n        emails: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Email address the contact who is also\\\\r\\\\n         *  a member uses to log into the system.\\\\r\\\\n         */\\\\r\\\\n        loginEmail: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's phone numbers.\\\\r\\\\n         */\\\\r\\\\n        phones: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)\\\\r\\\\n         *  are used to organize contacts. When setting the `labels` property, you can\\\\r\\\\n         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         */\\\\r\\\\n        labels: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Contact's language.\\\\r\\\\n         */\\\\r\\\\n        language: string;\\\\r\\\\n        /**\\\\r\\\\n         * Any\\\\r\\\\n         *  number of custom fields. [Customs fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\\\\r\\\\n         *  are used to store additional information about your site's contacts. When\\\\r\\\\n         *  setting a custom field, use key:value pairs where the key matches the names\\\\r\\\\n         *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         *  You can only set values for custom fields that already exist in the Contacts\\\\r\\\\n         *  application.\\\\r\\\\n         */\\\\r\\\\n        customFields: string | number | Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_events {\\\\r\\\\n    /**\\\\r\\\\n     * A form for creating an RSVP to an event.\\\\r\\\\n     */\\\\r\\\\n    interface RsvpForm {\\\\r\\\\n        /**\\\\r\\\\n         * Gets information about the event's RSVP form and status.\\\\r\\\\n         */\\\\r\\\\n        getRsvpData(): Promise<wix_events.RsvpForm.RsvpData>;\\\\r\\\\n        /**\\\\r\\\\n         * Submits an RSVP form and adds the new guests to the event's guest list.\\\\r\\\\n         */\\\\r\\\\n        submit(formValues: wix_events.RsvpForm.FormValue[]): Promise<wix_events.RsvpForm.RsvpResponse>;\\\\r\\\\n        /**\\\\r\\\\n         * Validates form fields and values against the registration form as defined in the site Dashboard.\\\\r\\\\n         */\\\\r\\\\n        validate(formValues: wix_events.RsvpForm.FormValue[]): Promise<wix_events.RsvpForm.ValidationResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Validates an input form field value against the registration form as defined in the site Dashboard.\\\\r\\\\n         */\\\\r\\\\n        validateInput(inputName: string, formValues: wix_events.RsvpForm.FormValue[]): Promise<wix_events.RsvpForm.ValidationResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace RsvpForm {\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about a label for a complex input field type.\\\\r\\\\n         */\\\\r\\\\n        type AdditionalLabel = {\\\\r\\\\n            /**\\\\r\\\\n             * Additional label name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Additional label value.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an error that occurred during validation of an RSVP form's fields.\\\\r\\\\n         */\\\\r\\\\n        type FieldValidationError = {\\\\r\\\\n            /**\\\\r\\\\n             * Error message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of fields that caused the error when the form does not pass validation.\\\\r\\\\n             */\\\\r\\\\n            fields: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about form value to submit.\\\\r\\\\n         */\\\\r\\\\n        type FormValue = {\\\\r\\\\n            /**\\\\r\\\\n             * Form field name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Form field value.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a guest on an event RSVP.\\\\r\\\\n         */\\\\r\\\\n        type Guest = {\\\\r\\\\n            /**\\\\r\\\\n             * Index of the guest in the RSVP guest list. Indices are zero-based.\\\\r\\\\n             */\\\\r\\\\n            index: number;\\\\r\\\\n            /**\\\\r\\\\n             * Guest ID, which is unique within the RSVP.\\\\r\\\\n             */\\\\r\\\\n            id: number;\\\\r\\\\n            /**\\\\r\\\\n             * Full name of the guest\\\\r\\\\n             */\\\\r\\\\n            fullName: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a submitted RSVP form input value.\\\\r\\\\n         */\\\\r\\\\n        type InputValue = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the form input.\\\\r\\\\n             */\\\\r\\\\n            inputName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Value of the form input, when there is just one value.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * Value of the form input, when there are multiple values.\\\\r\\\\n             */\\\\r\\\\n            values: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the details needed to create an RSVP form for an event.\\\\r\\\\n         */\\\\r\\\\n        type RsvpData = {\\\\r\\\\n            /**\\\\r\\\\n             * Information about the input fields needed to create an RSVP form.\\\\r\\\\n             */\\\\r\\\\n            rsvpFormInputs: wix_events.RsvpForm.RsvpInputItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Allowed RSVP statuses for an event. \\\\r\\\\n             *  One of: \\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"YES_AND_NO\\\\\\\"`: Guests can RSVP for the event with a \\\\\\\"Yes\\\\\\\" or \\\\\\\"No\\\\\\\". \\\\r\\\\n             *  + `\\\\\\\"YES_ONLY\\\\\\\"`: Guests can only RSVP for the event with a \\\\\\\"Yes\\\\\\\".\\\\r\\\\n             *  + `\\\\\\\"WAITING\\\\\\\"`: The guest limit has been reached, but there is an open waitlist.\\\\r\\\\n             */\\\\r\\\\n            rsvpStatusOptions: string;\\\\r\\\\n            /**\\\\r\\\\n             * Event registration status.\\\\r\\\\n             *  One of:\\\\r\\\\n             *  \\\\r\\\\n             *  + `\\\\\\\"OPEN_RSVP\\\\\\\"`: Registration is open and guest limit has not been reached.\\\\r\\\\n             *  + `\\\\\\\"OPEN_RSVP_WAITLIST\\\\\\\"`: Registration is open, guest limit has been reached,\\\\r\\\\n             *    and additional registering guests are added to the waitlist.\\\\r\\\\n             *  + `\\\\\\\"CLOSED\\\\\\\"`: Registration is closed because the guest limit has been reached.\\\\r\\\\n             *  + `\\\\\\\"CLOSED_MANUALLY\\\\\\\"`: Registration was closed manually.\\\\r\\\\n             */\\\\r\\\\n            registrationStatus: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a submitted RSVP form.\\\\r\\\\n         */\\\\r\\\\n        type RsvpForm = {\\\\r\\\\n            /**\\\\r\\\\n             * Values that were entered in the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            inputValues: wix_events.RsvpForm.InputValue[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about an input field in an RSVP form.\\\\r\\\\n         */\\\\r\\\\n        type RsvpInputItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique input identifier.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the input field's value is an array.\\\\r\\\\n             */\\\\r\\\\n            array: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Input field display label.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n            /**\\\\r\\\\n             * Addition field display labels for complex fields.\\\\r\\\\n             */\\\\r\\\\n            additionalLabels: wix_events.RsvpForm.AdditionalLabel[];\\\\r\\\\n            /**\\\\r\\\\n             * List of value options where applicable.\\\\r\\\\n             */\\\\r\\\\n            options: string[];\\\\r\\\\n            /**\\\\r\\\\n             * Maximum length of the input field's value. A value of `0` indicates no maximum length.\\\\r\\\\n             */\\\\r\\\\n            maxLength: number;\\\\r\\\\n            /**\\\\r\\\\n             * Input field name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the input field is required.\\\\r\\\\n             */\\\\r\\\\n            required: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * The type of the input field.\\\\r\\\\n             *  One of:\\\\r\\\\n             *  \\\\r\\\\n             *  + `\\\\\\\"NAME\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"INPUT\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"RADIO\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"CHECKBOX\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"DROPDOWN\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"GUEST_CONTROL\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"ADDRESS_FULL\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"TEXTAREA\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"DATE\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            controlType: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a response to submitting an RSVP.\\\\r\\\\n         */\\\\r\\\\n        type RsvpResponse = {\\\\r\\\\n            /**\\\\r\\\\n             * RSVP ID\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the guest's personal information has been deleted or not.\\\\r\\\\n             */\\\\r\\\\n            anonymized: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Contact ID of the guest who submitted the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date when the RSVP was submitted.\\\\r\\\\n             */\\\\r\\\\n            createdDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Email address to the guest who submitted the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the event the RSVP is for.\\\\r\\\\n             */\\\\r\\\\n            eventId: string;\\\\r\\\\n            /**\\\\r\\\\n             * First name of the guest who submitted the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name of the guest who submitted the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * All of the guests included in the RSVP.\\\\r\\\\n             */\\\\r\\\\n            guests: wix_events.RsvpForm.Guest[];\\\\r\\\\n            /**\\\\r\\\\n             * A representation of the RSVP form that was submitted.\\\\r\\\\n             */\\\\r\\\\n            rsvpForm: wix_events.RsvpForm.RsvpForm;\\\\r\\\\n            /**\\\\r\\\\n             * Member ID of the guest who submitted the RSVP form if the guest is a site member.\\\\r\\\\n             */\\\\r\\\\n            memberId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date when RSVP was last modified.\\\\r\\\\n             */\\\\r\\\\n            updatedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * RSVP status.\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of guests included in the RSVP.\\\\r\\\\n             */\\\\r\\\\n            totalGuests: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an error that occurred during an RSVP form submission.\\\\r\\\\n         */\\\\r\\\\n        type SubmissionError = {\\\\r\\\\n            /**\\\\r\\\\n             * Error message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n            /**\\\\r\\\\n             * Error type.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"RSVP_CLOSED\\\\\\\"`: Event registration is closed.\\\\r\\\\n             *  + `\\\\\\\"GUEST_LIMIT_REACHED\\\\\\\"`: The maximum number of guests has already been reached.\\\\r\\\\n             *  + `\\\\\\\"MEMBER_ALREADY_REGISTERED\\\\\\\"`: The current registrant is already registered as a guest.\\\\r\\\\n             *  + `\\\\\\\"WAITING_LIST_UNAVAILABLE\\\\\\\"`: The maximum number of guests has already been reached and\\\\r\\\\n             *    there is no waitlist.\\\\r\\\\n             *  + `\\\\\\\"UNKNOWN_ERROR\\\\\\\"`: Unknown error.\\\\r\\\\n             */\\\\r\\\\n            errorType: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the result of a form validation.\\\\r\\\\n         */\\\\r\\\\n        type ValidationResult = {\\\\r\\\\n            /**\\\\r\\\\n             * Indicates that the RSVP form fields are valid.\\\\r\\\\n             */\\\\r\\\\n            valid: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an error that occurred during validation of an RSVP form's values.\\\\r\\\\n         */\\\\r\\\\n        type ValueValidationError = {\\\\r\\\\n            /**\\\\r\\\\n             * Error message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the input field that failed validation.\\\\r\\\\n             */\\\\r\\\\n            inputId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Error type.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"EMPTY_INPUT\\\\\\\"`: A required field is missing its value.\\\\r\\\\n             *  + `\\\\\\\"INVALID_INPUT_VALUE\\\\\\\"`: The value is not valid for the field type.\\\\r\\\\n             *  + `\\\\\\\"INPUT_TOO_LONG\\\\\\\"`: The value is too long.\\\\r\\\\n             *  + `\\\\\\\"INVALID_OPTION\\\\\\\"`: The value does not match one of the defined options for the field.\\\\r\\\\n             *  + `\\\\\\\"INVALID_STATUS\\\\\\\"`: The status value is not valid.\\\\r\\\\n             *  + `\\\\\\\"INVALID_NUMBER_OF_GUESTS\\\\\\\"`: The number of guests does not match the number defined for the form.\\\\r\\\\n             */\\\\r\\\\n            errorType: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_paid_plans_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired by actions relating to paid plans.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a user purchases a plan.\\\\r\\\\n         */\\\\r\\\\n        onPlanPurchased(event: wix_paid_plans_backend.Events.PlanPurchasedEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a new paid plan order.\\\\r\\\\n         */\\\\r\\\\n        type Order = {\\\\r\\\\n            /**\\\\r\\\\n             * Order ID of the purchase of the plan, auto-generated when an order is created.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the payment for the plan. Can be `PAID`, `REFUNDED`, `FAILED`, `UNPAID`, and `PAYMENT_STATUS_UNDEFINED`.\\\\r\\\\n             */\\\\r\\\\n            paymentStatus: string;\\\\r\\\\n            /**\\\\r\\\\n             * Object containing the price of the plan.\\\\r\\\\n             */\\\\r\\\\n            price: wix_paid_plans_backend.Events.Price;\\\\r\\\\n            /**\\\\r\\\\n             * If plan is cancelled, the reason why. Can be `OWNER_CANCELED`, `PAYMENT_PROVIDER_CANCELED`, `PAYMENT_FAILED`, `UOU_CANCELED`, and `CANCELLATION_REASON_UNDEFINED`.\\\\r\\\\n             */\\\\r\\\\n            cancellationReason: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time from which the plan is valid.\\\\r\\\\n             */\\\\r\\\\n            validFrom: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the plan.\\\\r\\\\n             */\\\\r\\\\n            planName: string;\\\\r\\\\n            /**\\\\r\\\\n             * If the plan is recurring. If true, the price is deducted weekly, monthly, or yearly.\\\\r\\\\n             */\\\\r\\\\n            recurring: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time the order was created.\\\\r\\\\n             */\\\\r\\\\n            dateCreated: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the order. Can be `ACTIVE`, `PENDING`, `CANCELED`, `EXPIRED`, `PENDING_CANCELLATION`, and `ORDER_STATUS_UNDEFINED`.\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * Role assigned after purchasing the plan.\\\\r\\\\n             */\\\\r\\\\n            roleID: string;\\\\r\\\\n            /**\\\\r\\\\n             * Description of the plan.\\\\r\\\\n             */\\\\r\\\\n            planDescription: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID for the visitor who purchased the plan.\\\\r\\\\n             */\\\\r\\\\n            memberId: string;\\\\r\\\\n            /**\\\\r\\\\n             * How the plan was purchased, either `ONLINE` pr `OFFLINE`.\\\\r\\\\n             */\\\\r\\\\n            orderType: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the plan.\\\\r\\\\n             */\\\\r\\\\n            planId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Object containing properties about how long the plan is valid.\\\\r\\\\n             */\\\\r\\\\n            validFor: wix_paid_plans_backend.Events.ValidFor;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the plan for wix Pay. If plan is free, this ID is blank.\\\\r\\\\n             */\\\\r\\\\n            wixPayOrderId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time until which the plan is valid.\\\\r\\\\n             */\\\\r\\\\n            validUntil: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the period for which a plan is valid.\\\\r\\\\n         */\\\\r\\\\n        type Period = {\\\\r\\\\n            /**\\\\r\\\\n             * The number of units until the plan expires.\\\\r\\\\n             */\\\\r\\\\n            amount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Time period for billing the plan, such as `MONTH`.\\\\r\\\\n             */\\\\r\\\\n            unit: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a new paid plan purchase.\\\\r\\\\n         */\\\\r\\\\n        type PlanPurchasedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Object containing the details about the plan's order.\\\\r\\\\n             */\\\\r\\\\n            order: wix_paid_plans_backend.Events.Order;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the price of a purchased plan.\\\\r\\\\n         */\\\\r\\\\n        type Price = {\\\\r\\\\n            /**\\\\r\\\\n             * Payment currency. A three-letter\\\\r\\\\n             *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * The cost of the plan.\\\\r\\\\n             */\\\\r\\\\n            amount: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing how long a plan is valid.\\\\r\\\\n         */\\\\r\\\\n        type ValidFor = {\\\\r\\\\n            /**\\\\r\\\\n             * If true, the plan does not expire.\\\\r\\\\n             */\\\\r\\\\n            forever: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Object containing the period for which the plan is valid.\\\\r\\\\n             */\\\\r\\\\n            period: wix_paid_plans_backend.Events.Period;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_paid_plans {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an order result.\\\\r\\\\n     */\\\\r\\\\n    type OrderResult = {\\\\r\\\\n        /**\\\\r\\\\n         * ID of the order.\\\\r\\\\n         */\\\\r\\\\n        orderId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Wix Pay ID of the order being purchased.\\\\r\\\\n         */\\\\r\\\\n        wixPayOrderId: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a purchase result for a non-free plan.\\\\r\\\\n     */\\\\r\\\\n    type PurchaseResult = {\\\\r\\\\n        /**\\\\r\\\\n         * ID of the order being purchased.\\\\r\\\\n         */\\\\r\\\\n        orderId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Wix Pay ID of the order being purchased. Returned for non-free plans.\\\\r\\\\n         */\\\\r\\\\n        wixPayOrderId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment status in Wix Pay. One of:\\\\r\\\\n         * \\\\r\\\\n         *  + \\\\\\\"`Successful`\\\\\\\": Payment was successfully received.\\\\r\\\\n         *  + \\\\\\\"`Pending`\\\\\\\": Payment is pending payment provider approval.\\\\r\\\\n         *  + \\\\\\\"`Failed`\\\\\\\": Payment has failed.\\\\r\\\\n         *  + \\\\\\\"`Chargeback`\\\\\\\": Payment is chargeback.\\\\r\\\\n         *  + \\\\\\\"`Refunded`\\\\\\\": Payment was fully refunded.\\\\r\\\\n         *  + \\\\\\\"`Offline`\\\\\\\": Payment will be executed offline.\\\\r\\\\n         *  + \\\\\\\"`PartiallyRefunded`\\\\\\\": Payment was partially refunded.\\\\r\\\\n         *  + \\\\\\\"`Cancelled`\\\\\\\": Payment was cancelled and was not processed.\\\\r\\\\n         *  + \\\\\\\"`Undefined`\\\\\\\": Payment status is pending payment provider input.\\\\r\\\\n         */\\\\r\\\\n        wixPayStatus: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a purchase result for a free plan.\\\\r\\\\n     */\\\\r\\\\n    type PurchaseResultFree = {\\\\r\\\\n        /**\\\\r\\\\n         * ID of the order being purchased.\\\\r\\\\n         */\\\\r\\\\n        orderId: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_pay {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment.\\\\r\\\\n     */\\\\r\\\\n    type Payment = {\\\\r\\\\n        /**\\\\r\\\\n         * Payment transaction ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment total amount.\\\\r\\\\n         */\\\\r\\\\n        amount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment currency. A three-letter\\\\r\\\\n         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_pay_backend.PaymentItem[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment item.\\\\r\\\\n     */\\\\r\\\\n    type PaymentItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Payment item name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment item quantity.\\\\r\\\\n         */\\\\r\\\\n        quantity: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment item price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the options of a payment.\\\\r\\\\n     */\\\\r\\\\n    type PaymentOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Absolute URL of a terms and conditions\\\\r\\\\n         *  page. If a link is present, an agreement checkbox will be presented alongside the link.\\\\r\\\\n         */\\\\r\\\\n        termsAndConditionsLink?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether to show a thank you page. Defaults to `true`.\\\\r\\\\n         */\\\\r\\\\n        showThankYouPage?: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information about the user. It will be used to prefill\\\\r\\\\n         *  user info form during payment process.\\\\r\\\\n         * \\\\r\\\\n         *  Deprecation note: Pass user information to [`createPayment( )`](wix-pay-backend.html#createPayment) instead.\\\\r\\\\n         */\\\\r\\\\n        userInfo?: wix_pay.PaymentUserInfo;\\\\r\\\\n        /**\\\\r\\\\n         * Whether to skip the user info page. Defaults to `false`.\\\\r\\\\n         *  The page will be skipped only if user info was passed to [`createPayment()`](wix-pay-backend.html#createPayment) as\\\\r\\\\n         *  a part of the [`PaymentInfo`](wix-pay-backend.html#PaymentInfo) object.\\\\r\\\\n         */\\\\r\\\\n        skipUserInfoPage?: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment result.\\\\r\\\\n     */\\\\r\\\\n    type PaymentResult = {\\\\r\\\\n        /**\\\\r\\\\n         * The payment.\\\\r\\\\n         */\\\\r\\\\n        payment: wix_pay.Payment;\\\\r\\\\n        /**\\\\r\\\\n         * Payment status. One of:\\\\r\\\\n         * \\\\r\\\\n         *  + \\\\\\\"`Successful`\\\\\\\": Payment was successfully received.\\\\r\\\\n         *  + \\\\\\\"`Pending`\\\\\\\": Payment is pending payment provider approval.\\\\r\\\\n         *  + \\\\\\\"`Failed`\\\\\\\": Payment has failed.\\\\r\\\\n         *  + \\\\\\\"`Chargeback`\\\\\\\": Payment is chargeback.\\\\r\\\\n         *  + \\\\\\\"`Refunded`\\\\\\\": Payment was fully refunded.\\\\r\\\\n         *  + \\\\\\\"`Offline`\\\\\\\": Payment will be executed offline.\\\\r\\\\n         *  + \\\\\\\"`PartiallyRefunded`\\\\\\\": Payment was partially refunded.\\\\r\\\\n         *  + \\\\\\\"`Cancelled`\\\\\\\": Payment was cancelled and was not processed.\\\\r\\\\n         *  + \\\\\\\"`Undefined`\\\\\\\": Payment status is pending payment provider input.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the payment transaction.\\\\r\\\\n         */\\\\r\\\\n        transactionId: string;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information about the user.\\\\r\\\\n         */\\\\r\\\\n        userInfo: wix_pay.PaymentUserInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing information about the user.\\\\r\\\\n     */\\\\r\\\\n    type PaymentUserInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * User's first name. Value is `null` if\\\\r\\\\n         *  there is no first name information.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's last name. Value is `null` if\\\\r\\\\n         *  there is no last name information.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's country code. A three-letter\\\\r\\\\n         *  [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) country code. Value\\\\r\\\\n         *  is `null` if there is no country information.\\\\r\\\\n         */\\\\r\\\\n        country: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's phone number. Value is `null` if\\\\r\\\\n         *  there is no phone number information.\\\\r\\\\n         */\\\\r\\\\n        phone: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's email address. Value is `null` if\\\\r\\\\n         *  there is no email address information.\\\\r\\\\n         */\\\\r\\\\n        email: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_search {\\\\r\\\\n    /**\\\\r\\\\n     * Contains functionality for refining a site search.\\\\r\\\\n     */\\\\r\\\\n    interface WixSearchBuilder {\\\\r\\\\n        /**\\\\r\\\\n         * Refines a search builder to only search for documents of the specified document type.\\\\r\\\\n         */\\\\r\\\\n        documentType(type: string): wix_search.WixSearchBuilder;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the documents that match the search.\\\\r\\\\n         */\\\\r\\\\n        find(): Promise<wix_search.WixSearchResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a search builder to search in the specified language.\\\\r\\\\n         */\\\\r\\\\n        language(language: string): wix_search.WixSearchBuilder;\\\\r\\\\n        /**\\\\r\\\\n         * Limits the number of documents the search returns.\\\\r\\\\n         */\\\\r\\\\n        limit(limit: number): wix_search.WixSearchBuilder;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the number of documents to skip before returning search results.\\\\r\\\\n         */\\\\r\\\\n        skip(skip: number): wix_search.WixSearchBuilder;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The results of a site search, containing the retrieved documents.\\\\r\\\\n     */\\\\r\\\\n    interface WixSearchResult {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the index of the current results page number.\\\\r\\\\n         */\\\\r\\\\n        readonly currentPage: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the documents that match the search.\\\\r\\\\n         */\\\\r\\\\n        readonly documents: wix_search.WixSearchResult.Document[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of documents in the current results page.\\\\r\\\\n         */\\\\r\\\\n        readonly length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the search page size.\\\\r\\\\n         */\\\\r\\\\n        readonly pageSize: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of documents that match the search.\\\\r\\\\n         */\\\\r\\\\n        readonly totalCount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of pages the search produced.\\\\r\\\\n         */\\\\r\\\\n        readonly totalPages: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the search has more results.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the search has previous results.\\\\r\\\\n         */\\\\r\\\\n        hasPrev(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the next page of search results.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<wix_search.WixSearchResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the previous page of search results.\\\\r\\\\n         */\\\\r\\\\n        prev(): Promise<wix_search.WixSearchResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace WixSearchResult {\\\\r\\\\n        /**\\\\r\\\\n         * A document returned by a site search.\\\\r\\\\n         */\\\\r\\\\n        type Document = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique document identifier.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Document image in the following format: `wix:image://v1//#originWidth=&originHeight=[&watermark=]`\\\\r\\\\n             */\\\\r\\\\n            image: string;\\\\r\\\\n            /**\\\\r\\\\n             * Document type. \\\\r\\\\n             *  One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `Site/Pages`\\\\r\\\\n             *  + `Blog/Posts`\\\\r\\\\n             *  + `Bookings/Services`\\\\r\\\\n             *  + `Forum/Posts`\\\\r\\\\n             *  + `Stores/Products`\\\\r\\\\n             */\\\\r\\\\n            documentType: string;\\\\r\\\\n            /**\\\\r\\\\n             * The relative page URL. For regular site pages, the URL defined in SEO settings. Note that the `url` for the home page is an empty string. For Wix app pages, the URL stored in the database collection.\\\\r\\\\n             */\\\\r\\\\n            url: string;\\\\r\\\\n            /**\\\\r\\\\n             * For regular site pages, all text on the page. For Wix app pages, the description or content stored in the database collection.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * For regular site pages, the SEO page title. For Wix app pages, the title or name stored in the database collection.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_seo {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a link tag.\\\\r\\\\n     */\\\\r\\\\n    type Link = {\\\\r\\\\n        /**\\\\r\\\\n         * The relationship of the linked resource to the current page.\\\\r\\\\n         */\\\\r\\\\n        rel?: string;\\\\r\\\\n        /**\\\\r\\\\n         * The URL of the linked resource.\\\\r\\\\n         */\\\\r\\\\n        href?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a meta tag.\\\\r\\\\n     */\\\\r\\\\n    type MetaTag = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the meta tag. Either `name` or `property` are required.\\\\r\\\\n         */\\\\r\\\\n        name?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Name of the meta tag property. Either `property` or `name` are required.\\\\r\\\\n         */\\\\r\\\\n        property?: string;\\\\r\\\\n        /**\\\\r\\\\n         * HTTP header that corresponds to the `content`.\\\\r\\\\n         */\\\\r\\\\n        \\\\\\\"http-equiv\\\\\\\"?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Meta tag value. For `og:image` meta tags, the `content` can\\\\r\\\\n         *  be an external image URL or a Media Manager image URL as described [here]($w.Image.html#src).\\\\r\\\\n         */\\\\r\\\\n        content: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_stores {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a media item.\\\\r\\\\n     */\\\\r\\\\n    type MediaItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Media item ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media items type. Can be \\\\\\\"image\\\\\\\" or \\\\\\\"video.\\\\\\\"\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item URL.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Thumbnail URL for videos only.\\\\r\\\\n         */\\\\r\\\\n        thumbnail?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing paging options.\\\\r\\\\n     */\\\\r\\\\n    type PagingOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Maximum number of variants to retrieve. Defaults to 300.\\\\r\\\\n         */\\\\r\\\\n        limit: number;\\\\r\\\\n        /**\\\\r\\\\n         * Number of variants to skip before the retrieved variants. Defaults to 0.\\\\r\\\\n         */\\\\r\\\\n        skip: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an additional info section for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductAdditionalInfoSection = {\\\\r\\\\n        /**\\\\r\\\\n         * Section title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Section description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variant's option choices.\\\\r\\\\n     */\\\\r\\\\n    type ProductChoices = {\\\\r\\\\n        /**\\\\r\\\\n         * Value of the choice. This key name is\\\\r\\\\n         *  dependent on the product option. For example, if a product\\\\r\\\\n         *  has a size option, this key value will be something like \\\\\\\"Size\\\\\\\" and its value\\\\r\\\\n         *  will be something like \\\\\\\"Large\\\\\\\".\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a custom text field for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductCustomTextFields = {\\\\r\\\\n        /**\\\\r\\\\n         * Product customization field title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Maximum length of product customization field in characters.\\\\r\\\\n         */\\\\r\\\\n        maxLength: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product discount.\\\\r\\\\n     */\\\\r\\\\n    type ProductDiscount = {\\\\r\\\\n        /**\\\\r\\\\n         * Discount type.\\\\r\\\\n         * \\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"AMOUNT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"PERCENT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"NONE\\\\\\\"`\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discount value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an option for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOption = {\\\\r\\\\n        /**\\\\r\\\\n         * Option type. Either `\\\\\\\"color\\\\\\\"` or `\\\\\\\"drop_down\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        optionType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores.ProductOptionsChoice[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing all the available options for a store product, such as \\\\\\\"Size\\\\\\\" or \\\\\\\"Color\\\\\\\".\\\\r\\\\n     */\\\\r\\\\n    type ProductOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the option. This key name\\\\r\\\\n         *  is dependent on the options added to the product. For example, if a product has a size \\\\r\\\\n         *  option, this key will be something like `\\\\\\\"Size\\\\\\\"`.\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: wix_stores.ProductOption;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by the `getProductOptionsAvailability()` function representing the availability of a product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsAvailability = {\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product with the specified option choices is available for purchase.\\\\r\\\\n         */\\\\r\\\\n        availableForPurchase: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing all the available options for a store product.\\\\r\\\\n         */\\\\r\\\\n        productOptions: wix_stores.ProductOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Main product media item (image or video) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of product media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores.MediaItem;\\\\r\\\\n        /**\\\\r\\\\n         * The variant of the product selected using the specified option choices if there is one.\\\\r\\\\n         */\\\\r\\\\n        selectedVariant: wix_stores.ProductOptionsAvailabilitySelectedVariant;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the product variant selected using the `getProductOptionsAvailability()` function.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsAvailabilitySelectedVariant = {\\\\r\\\\n        /**\\\\r\\\\n         * Product variant stock keeping unit value.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant price. The variant price must be greater than its discount.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product variant is shown in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product variant is in stock.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an options choice for a store product for a store product, such as choice \\\\\\\"Small\\\\\\\" for the option \\\\\\\"Size.\\\\\\\"\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsChoice = {\\\\r\\\\n        /**\\\\r\\\\n         * Choice value.\\\\r\\\\n         */\\\\r\\\\n        value: number;\\\\r\\\\n        /**\\\\r\\\\n         * Choice description.\\\\r\\\\n         */\\\\r\\\\n        description: number;\\\\r\\\\n        /**\\\\r\\\\n         * Choice media.\\\\r\\\\n         */\\\\r\\\\n        media: wix_stores.ProductOptionsChoiceMedia;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product with this choice is in stock.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product with this option is visible.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the choice media.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsChoiceMedia = {\\\\r\\\\n        /**\\\\r\\\\n         * Main choice media item (image or video thumbnail) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of choice media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores.MediaItem;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a ribbon for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductRibbon = {\\\\r\\\\n        /**\\\\r\\\\n         * Ribbon text.\\\\r\\\\n         */\\\\r\\\\n        text: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variant information, used when creating or updating variants.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Formatted variant price.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant stock keeping unit number.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the variant is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variant item.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique product variant ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant information.\\\\r\\\\n         */\\\\r\\\\n        variant: wix_stores.ProductVariantInfo[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the selection of specific variants of a product. Use only one of\\\\r\\\\n     *  `choices` or `variantIds`.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * The choices the retrieved variants will have.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * IDs of variants to retrieve.\\\\r\\\\n         */\\\\r\\\\n        variantIds: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Paging options.\\\\r\\\\n         */\\\\r\\\\n        paging: wix_stores.PagingOptions;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variants.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariants = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_stores.ProductVariantItem[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object containing variant information to use when creating or updating variants.\\\\r\\\\n     */\\\\r\\\\n    type VariantInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price. The variant price must be greater than its discount. If the variant price has been updated, changes to the product price do not affect the variant price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant stock keeping unit value.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the variant is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variant item.\\\\r\\\\n     */\\\\r\\\\n    type VariantItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique variant ID.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n        /**\\\\r\\\\n         * The choices of the retrieved variant.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * Variant information. *\\\\r\\\\n         */\\\\r\\\\n        variant: wix_stores.VariantInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing product variants.\\\\r\\\\n     */\\\\r\\\\n    type VariantList = {\\\\r\\\\n        /**\\\\r\\\\n         * List of variant items that match the specified choices or variant IDs.\\\\r\\\\n         */\\\\r\\\\n        items: wix_stores.VariantItem[];\\\\r\\\\n        /**\\\\r\\\\n         * Number of items in the current results page.\\\\r\\\\n         */\\\\r\\\\n        length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Total number of variants with the specified choices.\\\\r\\\\n         */\\\\r\\\\n        totalCount: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_users {\\\\r\\\\n    /**\\\\r\\\\n     * A site user.\\\\r\\\\n     */\\\\r\\\\n    interface User {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the user is logged in or not.\\\\r\\\\n         */\\\\r\\\\n        readonly loggedIn: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Deprecated: Gets the user's role.\\\\r\\\\n         */\\\\r\\\\n        readonly role: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the email of the current user.\\\\r\\\\n         */\\\\r\\\\n        getEmail(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's member pricing plan.\\\\r\\\\n         */\\\\r\\\\n        getPricingPlans(): Promise<wix_users.User.PricingPlan[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's member roles.\\\\r\\\\n         */\\\\r\\\\n        getRoles(): Promise<wix_users.User.UserRole[]>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace User {\\\\r\\\\n        /**\\\\r\\\\n         * An object returned by the `getPricingPlans()` function representing a user's pricing plans.\\\\r\\\\n         */\\\\r\\\\n        type PricingPlan = {\\\\r\\\\n            /**\\\\r\\\\n             * The pricing plan's name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * The pricing plan's start date.\\\\r\\\\n             */\\\\r\\\\n            startDate?: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The pricing plan's expiry date.\\\\r\\\\n             */\\\\r\\\\n            expiryDate?: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object returned by the `getRoles()` function representing a user's roles.\\\\r\\\\n         */\\\\r\\\\n        type UserRole = {\\\\r\\\\n            /**\\\\r\\\\n             * Role name as defined in the site's dashboard or one of \\\\\\\"Admin\\\\\\\" or \\\\\\\"Member\\\\\\\".\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Role description, if defined in the site's dashboard.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used by the `promptLogin()` function to determine how the login dialog box appears.\\\\r\\\\n     */\\\\r\\\\n    type LoginOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * What type of login experience to present: `\\\\\\\"login\\\\\\\"` or `\\\\\\\"signup\\\\\\\"`. Defaults to the option chosen in the Member Signup Settings panel in the Editor.\\\\r\\\\n         */\\\\r\\\\n        mode?: string;\\\\r\\\\n        /**\\\\r\\\\n         * The two letter language code of the language to show the login form in. Defaults to `\\\\\\\"en\\\\\\\"` if the property doesn't exist or the given language is not one of the languages found in the Permissions tab of the Page Settings panel in the Editor.\\\\r\\\\n         */\\\\r\\\\n        lang?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site registration.\\\\r\\\\n     */\\\\r\\\\n    type RegistrationOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Contact information.\\\\r\\\\n         */\\\\r\\\\n        contactInfo: wix_crm.ContactInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the results of a site registration.\\\\r\\\\n     */\\\\r\\\\n    type RegistrationResult = {\\\\r\\\\n        /**\\\\r\\\\n         * Registration status. Either \\\\\\\"Pending\\\\\\\" or \\\\\\\"Active\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * A token for approving the user as\\\\r\\\\n         *  a site member using the [approveByToken()](wix-users-backend.html#approveByToken)\\\\r\\\\n         *  function. The token is safe to pass via email or from client-side code to\\\\r\\\\n         *  backend code. The token is only available when `status` is \\\\\\\"Pending\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        approvalToken?: string;\\\\r\\\\n        /**\\\\r\\\\n         * The user that has been registered.\\\\r\\\\n         */\\\\r\\\\n        user: wix_users.User;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when sending a Triggered Email.\\\\r\\\\n     */\\\\r\\\\n    type TriggeredEmailOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * An object with `key:value` pairs where each\\\\r\\\\n         *  `key` is a variable in the email template created in Triggered Emails and its\\\\r\\\\n         *  corresponding `value` is the value to insert into the template in place of\\\\r\\\\n         *  variable. The values must be strings.\\\\r\\\\n         */\\\\r\\\\n        variables: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function that runs when a user has logged in.\\\\r\\\\n     */\\\\r\\\\n    type LoginHandler = (user: wix_users.User)=>void;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/types/public/index.d.ts\\\",\\\"content\\\":\\\"/// <reference path=\\\\\\\"../common/emptyBuffer.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"../common/void$w$w.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"../common/declaration.d.ts\\\\\\\" />\\\"}],\\\"PAGES\\\":[{\\\"path\\\":\\\"/node_modules/typescript/lib/lib.webworker.d.ts\\\",\\\"content\\\":\\\"/*! *****************************************************************************\\\\nCopyright (c) Microsoft Corporation. All rights reserved. \\\\nLicensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); you may not use\\\\nthis file except in compliance with the License. You may obtain a copy of the\\\\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \\\\n \\\\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\\\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\\\\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \\\\nMERCHANTABLITY OR NON-INFRINGEMENT. \\\\n \\\\nSee the Apache Version 2.0 License for specific language governing permissions\\\\nand limitations under the License.\\\\n***************************************************************************** */\\\\n\\\\n\\\\n\\\\n/// <reference no-default-lib=\\\\\\\"true\\\\\\\"/>\\\\r\\\\n\\\\n\\\\n/////////////////////////////\\\\n/// Worker APIs\\\\n/////////////////////////////\\\\n\\\\ninterface AddEventListenerOptions extends EventListenerOptions {\\\\n    once?: boolean;\\\\n    passive?: boolean;\\\\n}\\\\n\\\\ninterface AesCbcParams extends Algorithm {\\\\n    iv: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n}\\\\n\\\\ninterface AesCtrParams extends Algorithm {\\\\n    counter: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n    length: number;\\\\n}\\\\n\\\\ninterface AesDerivedKeyParams extends Algorithm {\\\\n    length: number;\\\\n}\\\\n\\\\ninterface AesGcmParams extends Algorithm {\\\\n    additionalData?: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n    iv: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n    tagLength?: number;\\\\n}\\\\n\\\\ninterface AesKeyAlgorithm extends KeyAlgorithm {\\\\n    length: number;\\\\n}\\\\n\\\\ninterface AesKeyGenParams extends Algorithm {\\\\n    length: number;\\\\n}\\\\n\\\\ninterface Algorithm {\\\\n    name: string;\\\\n}\\\\n\\\\ninterface BlobPropertyBag {\\\\n    endings?: EndingType;\\\\n    type?: string;\\\\n}\\\\n\\\\ninterface CacheQueryOptions {\\\\n    ignoreMethod?: boolean;\\\\n    ignoreSearch?: boolean;\\\\n    ignoreVary?: boolean;\\\\n}\\\\n\\\\ninterface CanvasRenderingContext2DSettings {\\\\n    alpha?: boolean;\\\\n    desynchronized?: boolean;\\\\n}\\\\n\\\\ninterface ClientQueryOptions {\\\\n    includeUncontrolled?: boolean;\\\\n    type?: ClientTypes;\\\\n}\\\\n\\\\ninterface CloseEventInit extends EventInit {\\\\n    code?: number;\\\\n    reason?: string;\\\\n    wasClean?: boolean;\\\\n}\\\\n\\\\ninterface CryptoKeyPair {\\\\n    privateKey?: CryptoKey;\\\\n    publicKey?: CryptoKey;\\\\n}\\\\n\\\\ninterface CustomEventInit<T = any> extends EventInit {\\\\n    detail?: T;\\\\n}\\\\n\\\\ninterface DOMMatrix2DInit {\\\\n    a?: number;\\\\n    b?: number;\\\\n    c?: number;\\\\n    d?: number;\\\\n    e?: number;\\\\n    f?: number;\\\\n    m11?: number;\\\\n    m12?: number;\\\\n    m21?: number;\\\\n    m22?: number;\\\\n    m41?: number;\\\\n    m42?: number;\\\\n}\\\\n\\\\ninterface DOMMatrixInit extends DOMMatrix2DInit {\\\\n    is2D?: boolean;\\\\n    m13?: number;\\\\n    m14?: number;\\\\n    m23?: number;\\\\n    m24?: number;\\\\n    m31?: number;\\\\n    m32?: number;\\\\n    m33?: number;\\\\n    m34?: number;\\\\n    m43?: number;\\\\n    m44?: number;\\\\n}\\\\n\\\\ninterface DOMPointInit {\\\\n    w?: number;\\\\n    x?: number;\\\\n    y?: number;\\\\n    z?: number;\\\\n}\\\\n\\\\ninterface DOMQuadInit {\\\\n    p1?: DOMPointInit;\\\\n    p2?: DOMPointInit;\\\\n    p3?: DOMPointInit;\\\\n    p4?: DOMPointInit;\\\\n}\\\\n\\\\ninterface DOMRectInit {\\\\n    height?: number;\\\\n    width?: number;\\\\n    x?: number;\\\\n    y?: number;\\\\n}\\\\n\\\\ninterface DevicePermissionDescriptor extends PermissionDescriptor {\\\\n    deviceId?: string;\\\\n    name: \\\\\\\"camera\\\\\\\" | \\\\\\\"microphone\\\\\\\" | \\\\\\\"speaker\\\\\\\";\\\\n}\\\\n\\\\ninterface EcKeyGenParams extends Algorithm {\\\\n    namedCurve: NamedCurve;\\\\n}\\\\n\\\\ninterface EcKeyImportParams extends Algorithm {\\\\n    namedCurve: NamedCurve;\\\\n}\\\\n\\\\ninterface EcdhKeyDeriveParams extends Algorithm {\\\\n    public: CryptoKey;\\\\n}\\\\n\\\\ninterface EcdsaParams extends Algorithm {\\\\n    hash: HashAlgorithmIdentifier;\\\\n}\\\\n\\\\ninterface ErrorEventInit extends EventInit {\\\\n    colno?: number;\\\\n    error?: any;\\\\n    filename?: string;\\\\n    lineno?: number;\\\\n    message?: string;\\\\n}\\\\n\\\\ninterface EventInit {\\\\n    bubbles?: boolean;\\\\n    cancelable?: boolean;\\\\n    composed?: boolean;\\\\n}\\\\n\\\\ninterface EventListenerOptions {\\\\n    capture?: boolean;\\\\n}\\\\n\\\\ninterface EventSourceInit {\\\\n    withCredentials?: boolean;\\\\n}\\\\n\\\\ninterface ExtendableEventInit extends EventInit {\\\\n}\\\\n\\\\ninterface ExtendableMessageEventInit extends ExtendableEventInit {\\\\n    data?: any;\\\\n    lastEventId?: string;\\\\n    origin?: string;\\\\n    ports?: MessagePort[];\\\\n    source?: Client | ServiceWorker | MessagePort | null;\\\\n}\\\\n\\\\ninterface FetchEventInit extends ExtendableEventInit {\\\\n    clientId?: string;\\\\n    preloadResponse?: Promise<any>;\\\\n    replacesClientId?: string;\\\\n    request: Request;\\\\n    resultingClientId?: string;\\\\n}\\\\n\\\\ninterface FilePropertyBag extends BlobPropertyBag {\\\\n    lastModified?: number;\\\\n}\\\\n\\\\ninterface GetNotificationOptions {\\\\n    tag?: string;\\\\n}\\\\n\\\\ninterface HmacImportParams extends Algorithm {\\\\n    hash: HashAlgorithmIdentifier;\\\\n    length?: number;\\\\n}\\\\n\\\\ninterface HmacKeyGenParams extends Algorithm {\\\\n    hash: HashAlgorithmIdentifier;\\\\n    length?: number;\\\\n}\\\\n\\\\ninterface IDBIndexParameters {\\\\n    multiEntry?: boolean;\\\\n    unique?: boolean;\\\\n}\\\\n\\\\ninterface IDBObjectStoreParameters {\\\\n    autoIncrement?: boolean;\\\\n    keyPath?: string | string[] | null;\\\\n}\\\\n\\\\ninterface IDBVersionChangeEventInit extends EventInit {\\\\n    newVersion?: number | null;\\\\n    oldVersion?: number;\\\\n}\\\\n\\\\ninterface ImageBitmapRenderingContextSettings {\\\\n    alpha?: boolean;\\\\n}\\\\n\\\\ninterface ImageEncodeOptions {\\\\n    quality?: number;\\\\n    type?: string;\\\\n}\\\\n\\\\ninterface JsonWebKey {\\\\n    alg?: string;\\\\n    crv?: string;\\\\n    d?: string;\\\\n    dp?: string;\\\\n    dq?: string;\\\\n    e?: string;\\\\n    ext?: boolean;\\\\n    k?: string;\\\\n    key_ops?: string[];\\\\n    kty?: string;\\\\n    n?: string;\\\\n    oth?: RsaOtherPrimesInfo[];\\\\n    p?: string;\\\\n    q?: string;\\\\n    qi?: string;\\\\n    use?: string;\\\\n    x?: string;\\\\n    y?: string;\\\\n}\\\\n\\\\ninterface KeyAlgorithm {\\\\n    name: string;\\\\n}\\\\n\\\\ninterface MessageEventInit extends EventInit {\\\\n    data?: any;\\\\n    lastEventId?: string;\\\\n    origin?: string;\\\\n    ports?: MessagePort[];\\\\n    source?: MessageEventSource | null;\\\\n}\\\\n\\\\ninterface MidiPermissionDescriptor extends PermissionDescriptor {\\\\n    name: \\\\\\\"midi\\\\\\\";\\\\n    sysex?: boolean;\\\\n}\\\\n\\\\ninterface MultiCacheQueryOptions extends CacheQueryOptions {\\\\n    cacheName?: string;\\\\n}\\\\n\\\\ninterface NavigationPreloadState {\\\\n    enabled?: boolean;\\\\n    headerValue?: string;\\\\n}\\\\n\\\\ninterface NotificationAction {\\\\n    action: string;\\\\n    icon?: string;\\\\n    title: string;\\\\n}\\\\n\\\\ninterface NotificationEventInit extends ExtendableEventInit {\\\\n    action?: string;\\\\n    notification: Notification;\\\\n}\\\\n\\\\ninterface NotificationOptions {\\\\n    actions?: NotificationAction[];\\\\n    badge?: string;\\\\n    body?: string;\\\\n    data?: any;\\\\n    dir?: NotificationDirection;\\\\n    icon?: string;\\\\n    image?: string;\\\\n    lang?: string;\\\\n    renotify?: boolean;\\\\n    requireInteraction?: boolean;\\\\n    silent?: boolean;\\\\n    tag?: string;\\\\n    timestamp?: number;\\\\n    vibrate?: VibratePattern;\\\\n}\\\\n\\\\ninterface Pbkdf2Params extends Algorithm {\\\\n    hash: HashAlgorithmIdentifier;\\\\n    iterations: number;\\\\n    salt: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n}\\\\n\\\\ninterface PerformanceObserverInit {\\\\n    buffered?: boolean;\\\\n    entryTypes?: string[];\\\\n    type?: string;\\\\n}\\\\n\\\\ninterface PermissionDescriptor {\\\\n    name: PermissionName;\\\\n}\\\\n\\\\ninterface PipeOptions {\\\\n    preventAbort?: boolean;\\\\n    preventCancel?: boolean;\\\\n    preventClose?: boolean;\\\\n    signal?: AbortSignal;\\\\n}\\\\n\\\\ninterface PostMessageOptions {\\\\n    transfer?: any[];\\\\n}\\\\n\\\\ninterface ProgressEventInit extends EventInit {\\\\n    lengthComputable?: boolean;\\\\n    loaded?: number;\\\\n    total?: number;\\\\n}\\\\n\\\\ninterface PromiseRejectionEventInit extends EventInit {\\\\n    promise: Promise<any>;\\\\n    reason?: any;\\\\n}\\\\n\\\\ninterface PushEventInit extends ExtendableEventInit {\\\\n    data?: PushMessageDataInit;\\\\n}\\\\n\\\\ninterface PushPermissionDescriptor extends PermissionDescriptor {\\\\n    name: \\\\\\\"push\\\\\\\";\\\\n    userVisibleOnly?: boolean;\\\\n}\\\\n\\\\ninterface PushSubscriptionChangeInit extends ExtendableEventInit {\\\\n    newSubscription?: PushSubscription;\\\\n    oldSubscription?: PushSubscription;\\\\n}\\\\n\\\\ninterface PushSubscriptionJSON {\\\\n    endpoint?: string;\\\\n    expirationTime?: number | null;\\\\n    keys?: Record<string, string>;\\\\n}\\\\n\\\\ninterface PushSubscriptionOptionsInit {\\\\n    applicationServerKey?: BufferSource | string | null;\\\\n    userVisibleOnly?: boolean;\\\\n}\\\\n\\\\ninterface QueuingStrategy<T = any> {\\\\n    highWaterMark?: number;\\\\n    size?: QueuingStrategySizeCallback<T>;\\\\n}\\\\n\\\\ninterface RegistrationOptions {\\\\n    scope?: string;\\\\n    type?: WorkerType;\\\\n    updateViaCache?: ServiceWorkerUpdateViaCache;\\\\n}\\\\n\\\\ninterface RequestInit {\\\\n    /**\\\\n     * A BodyInit object or null to set request's body.\\\\n     */\\\\n    body?: BodyInit | null;\\\\n    /**\\\\n     * A string indicating how the request will interact with the browser's cache to set request's cache.\\\\n     */\\\\n    cache?: RequestCache;\\\\n    /**\\\\n     * A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials.\\\\n     */\\\\n    credentials?: RequestCredentials;\\\\n    /**\\\\n     * A Headers object, an object literal, or an array of two-item arrays to set request's headers.\\\\n     */\\\\n    headers?: HeadersInit;\\\\n    /**\\\\n     * A cryptographic hash of the resource to be fetched by request. Sets request's integrity.\\\\n     */\\\\n    integrity?: string;\\\\n    /**\\\\n     * A boolean to set request's keepalive.\\\\n     */\\\\n    keepalive?: boolean;\\\\n    /**\\\\n     * A string to set request's method.\\\\n     */\\\\n    method?: string;\\\\n    /**\\\\n     * A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode.\\\\n     */\\\\n    mode?: RequestMode;\\\\n    /**\\\\n     * A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.\\\\n     */\\\\n    redirect?: RequestRedirect;\\\\n    /**\\\\n     * A string whose value is a same-origin URL, \\\\\\\"about:client\\\\\\\", or the empty string, to set request's referrer.\\\\n     */\\\\n    referrer?: string;\\\\n    /**\\\\n     * A referrer policy to set request's referrerPolicy.\\\\n     */\\\\n    referrerPolicy?: ReferrerPolicy;\\\\n    /**\\\\n     * An AbortSignal to set request's signal.\\\\n     */\\\\n    signal?: AbortSignal | null;\\\\n    /**\\\\n     * Can only be null. Used to disassociate request from any Window.\\\\n     */\\\\n    window?: any;\\\\n}\\\\n\\\\ninterface ResponseInit {\\\\n    headers?: HeadersInit;\\\\n    status?: number;\\\\n    statusText?: string;\\\\n}\\\\n\\\\ninterface RsaHashedImportParams extends Algorithm {\\\\n    hash: HashAlgorithmIdentifier;\\\\n}\\\\n\\\\ninterface RsaHashedKeyGenParams extends RsaKeyGenParams {\\\\n    hash: HashAlgorithmIdentifier;\\\\n}\\\\n\\\\ninterface RsaKeyGenParams extends Algorithm {\\\\n    modulusLength: number;\\\\n    publicExponent: BigInteger;\\\\n}\\\\n\\\\ninterface RsaOaepParams extends Algorithm {\\\\n    label?: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n}\\\\n\\\\ninterface RsaOtherPrimesInfo {\\\\n    d?: string;\\\\n    r?: string;\\\\n    t?: string;\\\\n}\\\\n\\\\ninterface RsaPssParams extends Algorithm {\\\\n    saltLength: number;\\\\n}\\\\n\\\\ninterface StorageEstimate {\\\\n    quota?: number;\\\\n    usage?: number;\\\\n}\\\\n\\\\ninterface SyncEventInit extends ExtendableEventInit {\\\\n    lastChance?: boolean;\\\\n    tag: string;\\\\n}\\\\n\\\\ninterface TextDecodeOptions {\\\\n    stream?: boolean;\\\\n}\\\\n\\\\ninterface TextDecoderOptions {\\\\n    fatal?: boolean;\\\\n    ignoreBOM?: boolean;\\\\n}\\\\n\\\\ninterface TextEncoderEncodeIntoResult {\\\\n    read?: number;\\\\n    written?: number;\\\\n}\\\\n\\\\ninterface Transformer<I = any, O = any> {\\\\n    flush?: TransformStreamDefaultControllerCallback<O>;\\\\n    readableType?: undefined;\\\\n    start?: TransformStreamDefaultControllerCallback<O>;\\\\n    transform?: TransformStreamDefaultControllerTransformCallback<I, O>;\\\\n    writableType?: undefined;\\\\n}\\\\n\\\\ninterface UnderlyingByteSource {\\\\n    autoAllocateChunkSize?: number;\\\\n    cancel?: ReadableStreamErrorCallback;\\\\n    pull?: ReadableByteStreamControllerCallback;\\\\n    start?: ReadableByteStreamControllerCallback;\\\\n    type: \\\\\\\"bytes\\\\\\\";\\\\n}\\\\n\\\\ninterface UnderlyingSink<W = any> {\\\\n    abort?: WritableStreamErrorCallback;\\\\n    close?: WritableStreamDefaultControllerCloseCallback;\\\\n    start?: WritableStreamDefaultControllerStartCallback;\\\\n    type?: undefined;\\\\n    write?: WritableStreamDefaultControllerWriteCallback<W>;\\\\n}\\\\n\\\\ninterface UnderlyingSource<R = any> {\\\\n    cancel?: ReadableStreamErrorCallback;\\\\n    pull?: ReadableStreamDefaultControllerCallback<R>;\\\\n    start?: ReadableStreamDefaultControllerCallback<R>;\\\\n    type?: undefined;\\\\n}\\\\n\\\\ninterface WebGLContextAttributes {\\\\n    alpha?: boolean;\\\\n    antialias?: boolean;\\\\n    depth?: boolean;\\\\n    desynchronized?: boolean;\\\\n    failIfMajorPerformanceCaveat?: boolean;\\\\n    powerPreference?: WebGLPowerPreference;\\\\n    premultipliedAlpha?: boolean;\\\\n    preserveDrawingBuffer?: boolean;\\\\n    stencil?: boolean;\\\\n}\\\\n\\\\ninterface WebGLContextEventInit extends EventInit {\\\\n    statusMessage?: string;\\\\n}\\\\n\\\\ninterface WorkerOptions {\\\\n    credentials?: RequestCredentials;\\\\n    name?: string;\\\\n    type?: WorkerType;\\\\n}\\\\n\\\\ninterface EventListener {\\\\n    (evt: Event): void;\\\\n}\\\\n\\\\n/** The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type. */\\\\ninterface ANGLE_instanced_arrays {\\\\n    drawArraysInstancedANGLE(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei): void;\\\\n    drawElementsInstancedANGLE(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, primcount: GLsizei): void;\\\\n    vertexAttribDivisorANGLE(index: GLuint, divisor: GLuint): void;\\\\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: GLenum;\\\\n}\\\\n\\\\n/** A controller object that allows you to abort one or more DOM requests as and when desired. */\\\\ninterface AbortController {\\\\n    /**\\\\n     * Returns the AbortSignal object associated with this object.\\\\n     */\\\\n    readonly signal: AbortSignal;\\\\n    /**\\\\n     * Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.\\\\n     */\\\\n    abort(): void;\\\\n}\\\\n\\\\ndeclare var AbortController: {\\\\n    prototype: AbortController;\\\\n    new(): AbortController;\\\\n};\\\\n\\\\ninterface AbortSignalEventMap {\\\\n    \\\\\\\"abort\\\\\\\": Event;\\\\n}\\\\n\\\\n/** A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object. */\\\\ninterface AbortSignal extends EventTarget {\\\\n    /**\\\\n     * Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.\\\\n     */\\\\n    readonly aborted: boolean;\\\\n    onabort: ((this: AbortSignal, ev: Event) => any) | null;\\\\n    addEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var AbortSignal: {\\\\n    prototype: AbortSignal;\\\\n    new(): AbortSignal;\\\\n};\\\\n\\\\ninterface AbstractWorkerEventMap {\\\\n    \\\\\\\"error\\\\\\\": ErrorEvent;\\\\n}\\\\n\\\\ninterface AbstractWorker {\\\\n    onerror: ((this: AbstractWorker, ev: ErrorEvent) => any) | null;\\\\n    addEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ninterface AesCfbParams extends Algorithm {\\\\n    iv: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n}\\\\n\\\\ninterface AesCmacParams extends Algorithm {\\\\n    length: number;\\\\n}\\\\n\\\\ninterface AnimationFrameProvider {\\\\n    cancelAnimationFrame(handle: number): void;\\\\n    requestAnimationFrame(callback: FrameRequestCallback): number;\\\\n}\\\\n\\\\n/** A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system. */\\\\ninterface Blob {\\\\n    readonly size: number;\\\\n    readonly type: string;\\\\n    slice(start?: number, end?: number, contentType?: string): Blob;\\\\n}\\\\n\\\\ndeclare var Blob: {\\\\n    prototype: Blob;\\\\n    new(blobParts?: BlobPart[], options?: BlobPropertyBag): Blob;\\\\n};\\\\n\\\\ninterface Body {\\\\n    readonly body: ReadableStream<Uint8Array> | null;\\\\n    readonly bodyUsed: boolean;\\\\n    arrayBuffer(): Promise<ArrayBuffer>;\\\\n    blob(): Promise<Blob>;\\\\n    formData(): Promise<FormData>;\\\\n    json(): Promise<any>;\\\\n    text(): Promise<string>;\\\\n}\\\\n\\\\ninterface BroadcastChannelEventMap {\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n    \\\\\\\"messageerror\\\\\\\": MessageEvent;\\\\n}\\\\n\\\\ninterface BroadcastChannel extends EventTarget {\\\\n    /**\\\\n     * Returns the channel name (as passed to the constructor).\\\\n     */\\\\n    readonly name: string;\\\\n    onmessage: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;\\\\n    onmessageerror: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;\\\\n    /**\\\\n     * Closes the BroadcastChannel object, opening it up to garbage collection.\\\\n     */\\\\n    close(): void;\\\\n    /**\\\\n     * Sends the given message to other BroadcastChannel objects set up for this channel. Messages can be structured objects, e.g. nested objects and arrays.\\\\n     */\\\\n    postMessage(message: any): void;\\\\n    addEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var BroadcastChannel: {\\\\n    prototype: BroadcastChannel;\\\\n    new(name: string): BroadcastChannel;\\\\n};\\\\n\\\\n/** This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams. */\\\\ninterface ByteLengthQueuingStrategy extends QueuingStrategy<ArrayBufferView> {\\\\n    highWaterMark: number;\\\\n    size(chunk: ArrayBufferView): number;\\\\n}\\\\n\\\\ndeclare var ByteLengthQueuingStrategy: {\\\\n    prototype: ByteLengthQueuingStrategy;\\\\n    new(options: { highWaterMark: number }): ByteLengthQueuingStrategy;\\\\n};\\\\n\\\\n/** Provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec. */\\\\ninterface Cache {\\\\n    add(request: RequestInfo): Promise<void>;\\\\n    addAll(requests: RequestInfo[]): Promise<void>;\\\\n    delete(request: RequestInfo, options?: CacheQueryOptions): Promise<boolean>;\\\\n    keys(request?: RequestInfo, options?: CacheQueryOptions): Promise<ReadonlyArray<Request>>;\\\\n    match(request: RequestInfo, options?: CacheQueryOptions): Promise<Response | undefined>;\\\\n    matchAll(request?: RequestInfo, options?: CacheQueryOptions): Promise<ReadonlyArray<Response>>;\\\\n    put(request: RequestInfo, response: Response): Promise<void>;\\\\n}\\\\n\\\\ndeclare var Cache: {\\\\n    prototype: Cache;\\\\n    new(): Cache;\\\\n};\\\\n\\\\n/** The storage for Cache objects. */\\\\ninterface CacheStorage {\\\\n    delete(cacheName: string): Promise<boolean>;\\\\n    has(cacheName: string): Promise<boolean>;\\\\n    keys(): Promise<string[]>;\\\\n    match(request: RequestInfo, options?: CacheQueryOptions): Promise<Response | undefined>;\\\\n    open(cacheName: string): Promise<Cache>;\\\\n}\\\\n\\\\ndeclare var CacheStorage: {\\\\n    prototype: CacheStorage;\\\\n    new(): CacheStorage;\\\\n};\\\\n\\\\ninterface CanvasCompositing {\\\\n    globalAlpha: number;\\\\n    globalCompositeOperation: string;\\\\n}\\\\n\\\\ninterface CanvasDrawImage {\\\\n    drawImage(image: CanvasImageSource, dx: number, dy: number): void;\\\\n    drawImage(image: CanvasImageSource, dx: number, dy: number, dw: number, dh: number): void;\\\\n    drawImage(image: CanvasImageSource, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void;\\\\n}\\\\n\\\\ninterface CanvasDrawPath {\\\\n    beginPath(): void;\\\\n    clip(fillRule?: CanvasFillRule): void;\\\\n    clip(path: Path2D, fillRule?: CanvasFillRule): void;\\\\n    fill(fillRule?: CanvasFillRule): void;\\\\n    fill(path: Path2D, fillRule?: CanvasFillRule): void;\\\\n    isPointInPath(x: number, y: number, fillRule?: CanvasFillRule): boolean;\\\\n    isPointInPath(path: Path2D, x: number, y: number, fillRule?: CanvasFillRule): boolean;\\\\n    isPointInStroke(x: number, y: number): boolean;\\\\n    isPointInStroke(path: Path2D, x: number, y: number): boolean;\\\\n    stroke(): void;\\\\n    stroke(path: Path2D): void;\\\\n}\\\\n\\\\ninterface CanvasFillStrokeStyles {\\\\n    fillStyle: string | CanvasGradient | CanvasPattern;\\\\n    strokeStyle: string | CanvasGradient | CanvasPattern;\\\\n    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;\\\\n    createPattern(image: CanvasImageSource, repetition: string): CanvasPattern | null;\\\\n    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;\\\\n}\\\\n\\\\ninterface CanvasFilters {\\\\n    filter: string;\\\\n}\\\\n\\\\n/** An opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient(). */\\\\ninterface CanvasGradient {\\\\n    /**\\\\n     * Adds a color stop with the given color to the gradient at the given offset. 0.0 is the offset at one end of the gradient, 1.0 is the offset at the other end.\\\\n     * \\\\n     * Throws an \\\\\\\"IndexSizeError\\\\\\\" DOMException if the offset is out of range. Throws a \\\\\\\"SyntaxError\\\\\\\" DOMException if the color cannot be parsed.\\\\n     */\\\\n    addColorStop(offset: number, color: string): void;\\\\n}\\\\n\\\\ndeclare var CanvasGradient: {\\\\n    prototype: CanvasGradient;\\\\n    new(): CanvasGradient;\\\\n};\\\\n\\\\ninterface CanvasImageData {\\\\n    createImageData(sw: number, sh: number): ImageData;\\\\n    createImageData(imagedata: ImageData): ImageData;\\\\n    getImageData(sx: number, sy: number, sw: number, sh: number): ImageData;\\\\n    putImageData(imagedata: ImageData, dx: number, dy: number): void;\\\\n    putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX: number, dirtyY: number, dirtyWidth: number, dirtyHeight: number): void;\\\\n}\\\\n\\\\ninterface CanvasImageSmoothing {\\\\n    imageSmoothingEnabled: boolean;\\\\n    imageSmoothingQuality: ImageSmoothingQuality;\\\\n}\\\\n\\\\ninterface CanvasPath {\\\\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\\\\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\\\\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\\\\n    closePath(): void;\\\\n    ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\\\\n    lineTo(x: number, y: number): void;\\\\n    moveTo(x: number, y: number): void;\\\\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\\\\n    rect(x: number, y: number, w: number, h: number): void;\\\\n}\\\\n\\\\ninterface CanvasPathDrawingStyles {\\\\n    lineCap: CanvasLineCap;\\\\n    lineDashOffset: number;\\\\n    lineJoin: CanvasLineJoin;\\\\n    lineWidth: number;\\\\n    miterLimit: number;\\\\n    getLineDash(): number[];\\\\n    setLineDash(segments: number[]): void;\\\\n}\\\\n\\\\n/** An opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method. */\\\\ninterface CanvasPattern {\\\\n    /**\\\\n     * Sets the transformation matrix that will be used when rendering the pattern during a fill or stroke painting operation.\\\\n     */\\\\n    setTransform(transform?: DOMMatrix2DInit): void;\\\\n}\\\\n\\\\ndeclare var CanvasPattern: {\\\\n    prototype: CanvasPattern;\\\\n    new(): CanvasPattern;\\\\n};\\\\n\\\\ninterface CanvasRect {\\\\n    clearRect(x: number, y: number, w: number, h: number): void;\\\\n    fillRect(x: number, y: number, w: number, h: number): void;\\\\n    strokeRect(x: number, y: number, w: number, h: number): void;\\\\n}\\\\n\\\\ninterface CanvasShadowStyles {\\\\n    shadowBlur: number;\\\\n    shadowColor: string;\\\\n    shadowOffsetX: number;\\\\n    shadowOffsetY: number;\\\\n}\\\\n\\\\ninterface CanvasState {\\\\n    restore(): void;\\\\n    save(): void;\\\\n}\\\\n\\\\ninterface CanvasText {\\\\n    fillText(text: string, x: number, y: number, maxWidth?: number): void;\\\\n    measureText(text: string): TextMetrics;\\\\n    strokeText(text: string, x: number, y: number, maxWidth?: number): void;\\\\n}\\\\n\\\\ninterface CanvasTextDrawingStyles {\\\\n    direction: CanvasDirection;\\\\n    font: string;\\\\n    textAlign: CanvasTextAlign;\\\\n    textBaseline: CanvasTextBaseline;\\\\n}\\\\n\\\\ninterface CanvasTransform {\\\\n    getTransform(): DOMMatrix;\\\\n    resetTransform(): void;\\\\n    rotate(angle: number): void;\\\\n    scale(x: number, y: number): void;\\\\n    setTransform(a: number, b: number, c: number, d: number, e: number, f: number): void;\\\\n    setTransform(transform?: DOMMatrix2DInit): void;\\\\n    transform(a: number, b: number, c: number, d: number, e: number, f: number): void;\\\\n    translate(x: number, y: number): void;\\\\n}\\\\n\\\\n/** The Client interface represents an executable context such as a Worker, or a SharedWorker. Window clients are represented by the more-specific WindowClient. You can get Client/WindowClient objects from methods such as Clients.matchAll() and Clients.get(). */\\\\ninterface Client {\\\\n    readonly frameType: FrameType;\\\\n    readonly id: string;\\\\n    readonly type: ClientTypes;\\\\n    readonly url: string;\\\\n    postMessage(message: any, transfer?: Transferable[]): void;\\\\n}\\\\n\\\\ndeclare var Client: {\\\\n    prototype: Client;\\\\n    new(): Client;\\\\n};\\\\n\\\\n/** Provides access to Client objects. Access it via self.clients within a service worker. */\\\\ninterface Clients {\\\\n    claim(): Promise<void>;\\\\n    get(id: string): Promise<any>;\\\\n    matchAll(options?: ClientQueryOptions): Promise<ReadonlyArray<Client>>;\\\\n    openWindow(url: string): Promise<WindowClient | null>;\\\\n}\\\\n\\\\ndeclare var Clients: {\\\\n    prototype: Clients;\\\\n    new(): Clients;\\\\n};\\\\n\\\\n/** A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute. */\\\\ninterface CloseEvent extends Event {\\\\n    readonly code: number;\\\\n    readonly reason: string;\\\\n    readonly wasClean: boolean;\\\\n    /** @deprecated */\\\\n    initCloseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, wasCleanArg: boolean, codeArg: number, reasonArg: string): void;\\\\n}\\\\n\\\\ndeclare var CloseEvent: {\\\\n    prototype: CloseEvent;\\\\n    new(type: string, eventInitDict?: CloseEventInit): CloseEvent;\\\\n};\\\\n\\\\ninterface ConcatParams extends Algorithm {\\\\n    algorithmId: Uint8Array;\\\\n    hash?: string | Algorithm;\\\\n    partyUInfo: Uint8Array;\\\\n    partyVInfo: Uint8Array;\\\\n    privateInfo?: Uint8Array;\\\\n    publicInfo?: Uint8Array;\\\\n}\\\\n\\\\n/** Provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided. */\\\\ninterface Console {\\\\n    memory: any;\\\\n    assert(condition?: boolean, message?: string, ...data: any[]): void;\\\\n    clear(): void;\\\\n    count(label?: string): void;\\\\n    debug(message?: any, ...optionalParams: any[]): void;\\\\n    dir(value?: any, ...optionalParams: any[]): void;\\\\n    dirxml(value: any): void;\\\\n    error(message?: any, ...optionalParams: any[]): void;\\\\n    exception(message?: string, ...optionalParams: any[]): void;\\\\n    group(groupTitle?: string, ...optionalParams: any[]): void;\\\\n    groupCollapsed(groupTitle?: string, ...optionalParams: any[]): void;\\\\n    groupEnd(): void;\\\\n    info(message?: any, ...optionalParams: any[]): void;\\\\n    log(message?: any, ...optionalParams: any[]): void;\\\\n    markTimeline(label?: string): void;\\\\n    profile(reportName?: string): void;\\\\n    profileEnd(reportName?: string): void;\\\\n    table(...tabularData: any[]): void;\\\\n    time(label?: string): void;\\\\n    timeEnd(label?: string): void;\\\\n    timeStamp(label?: string): void;\\\\n    timeline(label?: string): void;\\\\n    timelineEnd(label?: string): void;\\\\n    trace(message?: any, ...optionalParams: any[]): void;\\\\n    warn(message?: any, ...optionalParams: any[]): void;\\\\n}\\\\n\\\\ndeclare var Console: {\\\\n    prototype: Console;\\\\n    new(): Console;\\\\n};\\\\n\\\\n/** This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams. */\\\\ninterface CountQueuingStrategy extends QueuingStrategy {\\\\n    highWaterMark: number;\\\\n    size(chunk: any): 1;\\\\n}\\\\n\\\\ndeclare var CountQueuingStrategy: {\\\\n    prototype: CountQueuingStrategy;\\\\n    new(options: { highWaterMark: number }): CountQueuingStrategy;\\\\n};\\\\n\\\\n/** Basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives. */\\\\ninterface Crypto {\\\\n    readonly subtle: SubtleCrypto;\\\\n    getRandomValues<T extends Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | null>(array: T): T;\\\\n}\\\\n\\\\ndeclare var Crypto: {\\\\n    prototype: Crypto;\\\\n    new(): Crypto;\\\\n};\\\\n\\\\n/** The CryptoKey dictionary of the Web Crypto API represents a cryptographic key. */\\\\ninterface CryptoKey {\\\\n    readonly algorithm: KeyAlgorithm;\\\\n    readonly extractable: boolean;\\\\n    readonly type: KeyType;\\\\n    readonly usages: KeyUsage[];\\\\n}\\\\n\\\\ndeclare var CryptoKey: {\\\\n    prototype: CryptoKey;\\\\n    new(): CryptoKey;\\\\n};\\\\n\\\\ninterface CustomEvent<T = any> extends Event {\\\\n    /**\\\\n     * Returns any custom data event was created with. Typically used for synthetic events.\\\\n     */\\\\n    readonly detail: T;\\\\n    initCustomEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, detailArg: T): void;\\\\n}\\\\n\\\\ndeclare var CustomEvent: {\\\\n    prototype: CustomEvent;\\\\n    new<T>(typeArg: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>;\\\\n};\\\\n\\\\n/** An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API. */\\\\ninterface DOMException {\\\\n    readonly code: number;\\\\n    readonly message: string;\\\\n    readonly name: string;\\\\n    readonly ABORT_ERR: number;\\\\n    readonly DATA_CLONE_ERR: number;\\\\n    readonly DOMSTRING_SIZE_ERR: number;\\\\n    readonly HIERARCHY_REQUEST_ERR: number;\\\\n    readonly INDEX_SIZE_ERR: number;\\\\n    readonly INUSE_ATTRIBUTE_ERR: number;\\\\n    readonly INVALID_ACCESS_ERR: number;\\\\n    readonly INVALID_CHARACTER_ERR: number;\\\\n    readonly INVALID_MODIFICATION_ERR: number;\\\\n    readonly INVALID_NODE_TYPE_ERR: number;\\\\n    readonly INVALID_STATE_ERR: number;\\\\n    readonly NAMESPACE_ERR: number;\\\\n    readonly NETWORK_ERR: number;\\\\n    readonly NOT_FOUND_ERR: number;\\\\n    readonly NOT_SUPPORTED_ERR: number;\\\\n    readonly NO_DATA_ALLOWED_ERR: number;\\\\n    readonly NO_MODIFICATION_ALLOWED_ERR: number;\\\\n    readonly QUOTA_EXCEEDED_ERR: number;\\\\n    readonly SECURITY_ERR: number;\\\\n    readonly SYNTAX_ERR: number;\\\\n    readonly TIMEOUT_ERR: number;\\\\n    readonly TYPE_MISMATCH_ERR: number;\\\\n    readonly URL_MISMATCH_ERR: number;\\\\n    readonly VALIDATION_ERR: number;\\\\n    readonly WRONG_DOCUMENT_ERR: number;\\\\n}\\\\n\\\\ndeclare var DOMException: {\\\\n    prototype: DOMException;\\\\n    new(message?: string, name?: string): DOMException;\\\\n    readonly ABORT_ERR: number;\\\\n    readonly DATA_CLONE_ERR: number;\\\\n    readonly DOMSTRING_SIZE_ERR: number;\\\\n    readonly HIERARCHY_REQUEST_ERR: number;\\\\n    readonly INDEX_SIZE_ERR: number;\\\\n    readonly INUSE_ATTRIBUTE_ERR: number;\\\\n    readonly INVALID_ACCESS_ERR: number;\\\\n    readonly INVALID_CHARACTER_ERR: number;\\\\n    readonly INVALID_MODIFICATION_ERR: number;\\\\n    readonly INVALID_NODE_TYPE_ERR: number;\\\\n    readonly INVALID_STATE_ERR: number;\\\\n    readonly NAMESPACE_ERR: number;\\\\n    readonly NETWORK_ERR: number;\\\\n    readonly NOT_FOUND_ERR: number;\\\\n    readonly NOT_SUPPORTED_ERR: number;\\\\n    readonly NO_DATA_ALLOWED_ERR: number;\\\\n    readonly NO_MODIFICATION_ALLOWED_ERR: number;\\\\n    readonly QUOTA_EXCEEDED_ERR: number;\\\\n    readonly SECURITY_ERR: number;\\\\n    readonly SYNTAX_ERR: number;\\\\n    readonly TIMEOUT_ERR: number;\\\\n    readonly TYPE_MISMATCH_ERR: number;\\\\n    readonly URL_MISMATCH_ERR: number;\\\\n    readonly VALIDATION_ERR: number;\\\\n    readonly WRONG_DOCUMENT_ERR: number;\\\\n};\\\\n\\\\ninterface DOMMatrix extends DOMMatrixReadOnly {\\\\n    a: number;\\\\n    b: number;\\\\n    c: number;\\\\n    d: number;\\\\n    e: number;\\\\n    f: number;\\\\n    m11: number;\\\\n    m12: number;\\\\n    m13: number;\\\\n    m14: number;\\\\n    m21: number;\\\\n    m22: number;\\\\n    m23: number;\\\\n    m24: number;\\\\n    m31: number;\\\\n    m32: number;\\\\n    m33: number;\\\\n    m34: number;\\\\n    m41: number;\\\\n    m42: number;\\\\n    m43: number;\\\\n    m44: number;\\\\n    invertSelf(): DOMMatrix;\\\\n    multiplySelf(other?: DOMMatrixInit): DOMMatrix;\\\\n    preMultiplySelf(other?: DOMMatrixInit): DOMMatrix;\\\\n    rotateAxisAngleSelf(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;\\\\n    rotateFromVectorSelf(x?: number, y?: number): DOMMatrix;\\\\n    rotateSelf(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;\\\\n    scale3dSelf(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\\\\n    scaleSelf(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\\\\n    skewXSelf(sx?: number): DOMMatrix;\\\\n    skewYSelf(sy?: number): DOMMatrix;\\\\n    translateSelf(tx?: number, ty?: number, tz?: number): DOMMatrix;\\\\n}\\\\n\\\\ndeclare var DOMMatrix: {\\\\n    prototype: DOMMatrix;\\\\n    new(init?: string | number[]): DOMMatrix;\\\\n    fromFloat32Array(array32: Float32Array): DOMMatrix;\\\\n    fromFloat64Array(array64: Float64Array): DOMMatrix;\\\\n    fromMatrix(other?: DOMMatrixInit): DOMMatrix;\\\\n};\\\\n\\\\ninterface DOMMatrixReadOnly {\\\\n    readonly a: number;\\\\n    readonly b: number;\\\\n    readonly c: number;\\\\n    readonly d: number;\\\\n    readonly e: number;\\\\n    readonly f: number;\\\\n    readonly is2D: boolean;\\\\n    readonly isIdentity: boolean;\\\\n    readonly m11: number;\\\\n    readonly m12: number;\\\\n    readonly m13: number;\\\\n    readonly m14: number;\\\\n    readonly m21: number;\\\\n    readonly m22: number;\\\\n    readonly m23: number;\\\\n    readonly m24: number;\\\\n    readonly m31: number;\\\\n    readonly m32: number;\\\\n    readonly m33: number;\\\\n    readonly m34: number;\\\\n    readonly m41: number;\\\\n    readonly m42: number;\\\\n    readonly m43: number;\\\\n    readonly m44: number;\\\\n    flipX(): DOMMatrix;\\\\n    flipY(): DOMMatrix;\\\\n    inverse(): DOMMatrix;\\\\n    multiply(other?: DOMMatrixInit): DOMMatrix;\\\\n    rotate(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;\\\\n    rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;\\\\n    rotateFromVector(x?: number, y?: number): DOMMatrix;\\\\n    scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\\\\n    scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;\\\\n    /** @deprecated */\\\\n    scaleNonUniform(scaleX?: number, scaleY?: number): DOMMatrix;\\\\n    skewX(sx?: number): DOMMatrix;\\\\n    skewY(sy?: number): DOMMatrix;\\\\n    toFloat32Array(): Float32Array;\\\\n    toFloat64Array(): Float64Array;\\\\n    toJSON(): any;\\\\n    transformPoint(point?: DOMPointInit): DOMPoint;\\\\n    translate(tx?: number, ty?: number, tz?: number): DOMMatrix;\\\\n}\\\\n\\\\ndeclare var DOMMatrixReadOnly: {\\\\n    prototype: DOMMatrixReadOnly;\\\\n    new(init?: string | number[]): DOMMatrixReadOnly;\\\\n    fromFloat32Array(array32: Float32Array): DOMMatrixReadOnly;\\\\n    fromFloat64Array(array64: Float64Array): DOMMatrixReadOnly;\\\\n    fromMatrix(other?: DOMMatrixInit): DOMMatrixReadOnly;\\\\n};\\\\n\\\\ninterface DOMPoint extends DOMPointReadOnly {\\\\n    w: number;\\\\n    x: number;\\\\n    y: number;\\\\n    z: number;\\\\n}\\\\n\\\\ndeclare var DOMPoint: {\\\\n    prototype: DOMPoint;\\\\n    new(x?: number, y?: number, z?: number, w?: number): DOMPoint;\\\\n    fromPoint(other?: DOMPointInit): DOMPoint;\\\\n};\\\\n\\\\ninterface DOMPointReadOnly {\\\\n    readonly w: number;\\\\n    readonly x: number;\\\\n    readonly y: number;\\\\n    readonly z: number;\\\\n    matrixTransform(matrix?: DOMMatrixInit): DOMPoint;\\\\n    toJSON(): any;\\\\n}\\\\n\\\\ndeclare var DOMPointReadOnly: {\\\\n    prototype: DOMPointReadOnly;\\\\n    new(x?: number, y?: number, z?: number, w?: number): DOMPointReadOnly;\\\\n    fromPoint(other?: DOMPointInit): DOMPointReadOnly;\\\\n};\\\\n\\\\ninterface DOMQuad {\\\\n    readonly p1: DOMPoint;\\\\n    readonly p2: DOMPoint;\\\\n    readonly p3: DOMPoint;\\\\n    readonly p4: DOMPoint;\\\\n    getBounds(): DOMRect;\\\\n    toJSON(): any;\\\\n}\\\\n\\\\ndeclare var DOMQuad: {\\\\n    prototype: DOMQuad;\\\\n    new(p1?: DOMPointInit, p2?: DOMPointInit, p3?: DOMPointInit, p4?: DOMPointInit): DOMQuad;\\\\n    fromQuad(other?: DOMQuadInit): DOMQuad;\\\\n    fromRect(other?: DOMRectInit): DOMQuad;\\\\n};\\\\n\\\\ninterface DOMRect extends DOMRectReadOnly {\\\\n    height: number;\\\\n    width: number;\\\\n    x: number;\\\\n    y: number;\\\\n}\\\\n\\\\ndeclare var DOMRect: {\\\\n    prototype: DOMRect;\\\\n    new(x?: number, y?: number, width?: number, height?: number): DOMRect;\\\\n    fromRect(other?: DOMRectInit): DOMRect;\\\\n};\\\\n\\\\ninterface DOMRectReadOnly {\\\\n    readonly bottom: number;\\\\n    readonly height: number;\\\\n    readonly left: number;\\\\n    readonly right: number;\\\\n    readonly top: number;\\\\n    readonly width: number;\\\\n    readonly x: number;\\\\n    readonly y: number;\\\\n    toJSON(): any;\\\\n}\\\\n\\\\ndeclare var DOMRectReadOnly: {\\\\n    prototype: DOMRectReadOnly;\\\\n    new(x?: number, y?: number, width?: number, height?: number): DOMRectReadOnly;\\\\n    fromRect(other?: DOMRectInit): DOMRectReadOnly;\\\\n};\\\\n\\\\n/** A type returned by some APIs which contains a list of DOMString (strings). */\\\\ninterface DOMStringList {\\\\n    /**\\\\n     * Returns the number of strings in strings.\\\\n     */\\\\n    readonly length: number;\\\\n    /**\\\\n     * Returns true if strings contains string, and false otherwise.\\\\n     */\\\\n    contains(string: string): boolean;\\\\n    /**\\\\n     * Returns the string with index index from strings.\\\\n     */\\\\n    item(index: number): string | null;\\\\n    [index: number]: string;\\\\n}\\\\n\\\\ndeclare var DOMStringList: {\\\\n    prototype: DOMStringList;\\\\n    new(): DOMStringList;\\\\n};\\\\n\\\\ninterface DedicatedWorkerGlobalScopeEventMap extends WorkerGlobalScopeEventMap {\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n}\\\\n\\\\n/** (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers. */\\\\ninterface DedicatedWorkerGlobalScope extends WorkerGlobalScope, AnimationFrameProvider {\\\\n    onmessage: ((this: DedicatedWorkerGlobalScope, ev: MessageEvent) => any) | null;\\\\n    close(): void;\\\\n    postMessage(message: any, transfer: Transferable[]): void;\\\\n    postMessage(message: any, options?: PostMessageOptions): void;\\\\n    addEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type: K, listener: (this: DedicatedWorkerGlobalScope, ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type: K, listener: (this: DedicatedWorkerGlobalScope, ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var DedicatedWorkerGlobalScope: {\\\\n    prototype: DedicatedWorkerGlobalScope;\\\\n    new(): DedicatedWorkerGlobalScope;\\\\n};\\\\n\\\\ninterface DhImportKeyParams extends Algorithm {\\\\n    generator: Uint8Array;\\\\n    prime: Uint8Array;\\\\n}\\\\n\\\\ninterface DhKeyAlgorithm extends KeyAlgorithm {\\\\n    generator: Uint8Array;\\\\n    prime: Uint8Array;\\\\n}\\\\n\\\\ninterface DhKeyDeriveParams extends Algorithm {\\\\n    public: CryptoKey;\\\\n}\\\\n\\\\ninterface DhKeyGenParams extends Algorithm {\\\\n    generator: Uint8Array;\\\\n    prime: Uint8Array;\\\\n}\\\\n\\\\ninterface EXT_blend_minmax {\\\\n    readonly MAX_EXT: GLenum;\\\\n    readonly MIN_EXT: GLenum;\\\\n}\\\\n\\\\n/** The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader. */\\\\ninterface EXT_frag_depth {\\\\n}\\\\n\\\\ninterface EXT_sRGB {\\\\n    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: GLenum;\\\\n    readonly SRGB8_ALPHA8_EXT: GLenum;\\\\n    readonly SRGB_ALPHA_EXT: GLenum;\\\\n    readonly SRGB_EXT: GLenum;\\\\n}\\\\n\\\\ninterface EXT_shader_texture_lod {\\\\n}\\\\n\\\\n/** The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF). */\\\\ninterface EXT_texture_filter_anisotropic {\\\\n    readonly MAX_TEXTURE_MAX_ANISOTROPY_EXT: GLenum;\\\\n    readonly TEXTURE_MAX_ANISOTROPY_EXT: GLenum;\\\\n}\\\\n\\\\n/** Events providing information related to errors in scripts or in files. */\\\\ninterface ErrorEvent extends Event {\\\\n    readonly colno: number;\\\\n    readonly error: any;\\\\n    readonly filename: string;\\\\n    readonly lineno: number;\\\\n    readonly message: string;\\\\n}\\\\n\\\\ndeclare var ErrorEvent: {\\\\n    prototype: ErrorEvent;\\\\n    new(type: string, eventInitDict?: ErrorEventInit): ErrorEvent;\\\\n};\\\\n\\\\n/** An event which takes place in the DOM. */\\\\ninterface Event {\\\\n    /**\\\\n     * Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.\\\\n     */\\\\n    readonly bubbles: boolean;\\\\n    cancelBubble: boolean;\\\\n    /**\\\\n     * Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.\\\\n     */\\\\n    readonly cancelable: boolean;\\\\n    /**\\\\n     * Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.\\\\n     */\\\\n    readonly composed: boolean;\\\\n    /**\\\\n     * Returns the object whose event listener's callback is currently being invoked.\\\\n     */\\\\n    readonly currentTarget: EventTarget | null;\\\\n    /**\\\\n     * Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.\\\\n     */\\\\n    readonly defaultPrevented: boolean;\\\\n    /**\\\\n     * Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.\\\\n     */\\\\n    readonly eventPhase: number;\\\\n    /**\\\\n     * Returns true if event was dispatched by the user agent, and false otherwise.\\\\n     */\\\\n    readonly isTrusted: boolean;\\\\n    returnValue: boolean;\\\\n    /** @deprecated */\\\\n    readonly srcElement: EventTarget | null;\\\\n    /**\\\\n     * Returns the object to which event is dispatched (its target).\\\\n     */\\\\n    readonly target: EventTarget | null;\\\\n    /**\\\\n     * Returns the event's timestamp as the number of milliseconds measured relative to the time origin.\\\\n     */\\\\n    readonly timeStamp: number;\\\\n    /**\\\\n     * Returns the type of event, e.g. \\\\\\\"click\\\\\\\", \\\\\\\"hashchange\\\\\\\", or \\\\\\\"submit\\\\\\\".\\\\n     */\\\\n    readonly type: string;\\\\n    /**\\\\n     * Returns the invocation target objects of event's path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root's mode is \\\\\\\"closed\\\\\\\" that are not reachable from event's currentTarget.\\\\n     */\\\\n    composedPath(): EventTarget[];\\\\n    initEvent(type: string, bubbles?: boolean, cancelable?: boolean): void;\\\\n    /**\\\\n     * If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.\\\\n     */\\\\n    preventDefault(): void;\\\\n    /**\\\\n     * Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.\\\\n     */\\\\n    stopImmediatePropagation(): void;\\\\n    /**\\\\n     * When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.\\\\n     */\\\\n    stopPropagation(): void;\\\\n    readonly AT_TARGET: number;\\\\n    readonly BUBBLING_PHASE: number;\\\\n    readonly CAPTURING_PHASE: number;\\\\n    readonly NONE: number;\\\\n}\\\\n\\\\ndeclare var Event: {\\\\n    prototype: Event;\\\\n    new(type: string, eventInitDict?: EventInit): Event;\\\\n    readonly AT_TARGET: number;\\\\n    readonly BUBBLING_PHASE: number;\\\\n    readonly CAPTURING_PHASE: number;\\\\n    readonly NONE: number;\\\\n};\\\\n\\\\ninterface EventListenerObject {\\\\n    handleEvent(evt: Event): void;\\\\n}\\\\n\\\\ninterface EventSourceEventMap {\\\\n    \\\\\\\"error\\\\\\\": Event;\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n    \\\\\\\"open\\\\\\\": Event;\\\\n}\\\\n\\\\ninterface EventSource extends EventTarget {\\\\n    onerror: ((this: EventSource, ev: Event) => any) | null;\\\\n    onmessage: ((this: EventSource, ev: MessageEvent) => any) | null;\\\\n    onopen: ((this: EventSource, ev: Event) => any) | null;\\\\n    /**\\\\n     * Returns the state of this EventSource object's connection. It can have the values described below.\\\\n     */\\\\n    readonly readyState: number;\\\\n    /**\\\\n     * Returns the URL providing the event stream.\\\\n     */\\\\n    readonly url: string;\\\\n    /**\\\\n     * Returns true if the credentials mode for connection requests to the URL providing the event stream is set to \\\\\\\"include\\\\\\\", and false otherwise.\\\\n     */\\\\n    readonly withCredentials: boolean;\\\\n    /**\\\\n     * Aborts any instances of the fetch algorithm started for this EventSource object, and sets the readyState attribute to CLOSED.\\\\n     */\\\\n    close(): void;\\\\n    readonly CLOSED: number;\\\\n    readonly CONNECTING: number;\\\\n    readonly OPEN: number;\\\\n    addEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var EventSource: {\\\\n    prototype: EventSource;\\\\n    new(url: string, eventSourceInitDict?: EventSourceInit): EventSource;\\\\n    readonly CLOSED: number;\\\\n    readonly CONNECTING: number;\\\\n    readonly OPEN: number;\\\\n};\\\\n\\\\n/** EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them. */\\\\ninterface EventTarget {\\\\n    /**\\\\n     * Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\\\\n     * \\\\n     * The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\\\\n     * \\\\n     * When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\\\\n     * \\\\n     * When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\\\\n     * \\\\n     * When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\\\\n     * \\\\n     * The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\\\\n     */\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void;\\\\n    /**\\\\n     * Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.\\\\n     */\\\\n    dispatchEvent(event: Event): boolean;\\\\n    /**\\\\n     * Removes the event listener in target's event listener list with the same type, callback, and options.\\\\n     */\\\\n    removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;\\\\n}\\\\n\\\\ndeclare var EventTarget: {\\\\n    prototype: EventTarget;\\\\n    new(): EventTarget;\\\\n};\\\\n\\\\n/** Extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries. */\\\\ninterface ExtendableEvent extends Event {\\\\n    waitUntil(f: any): void;\\\\n}\\\\n\\\\ndeclare var ExtendableEvent: {\\\\n    prototype: ExtendableEvent;\\\\n    new(type: string, eventInitDict?: ExtendableEventInit): ExtendableEvent;\\\\n};\\\\n\\\\n/** This ServiceWorker API interface represents the event object of a message event fired on a service worker (when a channel message is received on the ServiceWorkerGlobalScope from another context) — extends the lifetime of such events. */\\\\ninterface ExtendableMessageEvent extends ExtendableEvent {\\\\n    readonly data: any;\\\\n    readonly lastEventId: string;\\\\n    readonly origin: string;\\\\n    readonly ports: ReadonlyArray<MessagePort>;\\\\n    readonly source: Client | ServiceWorker | MessagePort | null;\\\\n}\\\\n\\\\ndeclare var ExtendableMessageEvent: {\\\\n    prototype: ExtendableMessageEvent;\\\\n    new(type: string, eventInitDict?: ExtendableMessageEventInit): ExtendableMessageEvent;\\\\n};\\\\n\\\\n/** This is the event type for fetch events dispatched on the service worker global scope. It contains information about the fetch, including the request and how the receiver will treat the response. It provides the event.respondWith() method, which allows us to provide a response to this fetch. */\\\\ninterface FetchEvent extends ExtendableEvent {\\\\n    readonly clientId: string;\\\\n    readonly preloadResponse: Promise<any>;\\\\n    readonly replacesClientId: string;\\\\n    readonly request: Request;\\\\n    readonly resultingClientId: string;\\\\n    respondWith(r: Response | Promise<Response>): void;\\\\n}\\\\n\\\\ndeclare var FetchEvent: {\\\\n    prototype: FetchEvent;\\\\n    new(type: string, eventInitDict: FetchEventInit): FetchEvent;\\\\n};\\\\n\\\\n/** Provides information about files and allows JavaScript in a web page to access their content. */\\\\ninterface File extends Blob {\\\\n    readonly lastModified: number;\\\\n    readonly name: string;\\\\n}\\\\n\\\\ndeclare var File: {\\\\n    prototype: File;\\\\n    new(fileBits: BlobPart[], fileName: string, options?: FilePropertyBag): File;\\\\n};\\\\n\\\\n/** An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type=\\\\\\\"file\\\\\\\"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage. */\\\\ninterface FileList {\\\\n    readonly length: number;\\\\n    item(index: number): File | null;\\\\n    [index: number]: File;\\\\n}\\\\n\\\\ndeclare var FileList: {\\\\n    prototype: FileList;\\\\n    new(): FileList;\\\\n};\\\\n\\\\ninterface FileReaderEventMap {\\\\n    \\\\\\\"abort\\\\\\\": ProgressEvent<FileReader>;\\\\n    \\\\\\\"error\\\\\\\": ProgressEvent<FileReader>;\\\\n    \\\\\\\"load\\\\\\\": ProgressEvent<FileReader>;\\\\n    \\\\\\\"loadend\\\\\\\": ProgressEvent<FileReader>;\\\\n    \\\\\\\"loadstart\\\\\\\": ProgressEvent<FileReader>;\\\\n    \\\\\\\"progress\\\\\\\": ProgressEvent<FileReader>;\\\\n}\\\\n\\\\n/** Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read. */\\\\ninterface FileReader extends EventTarget {\\\\n    readonly error: DOMException | null;\\\\n    onabort: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\\\\n    onerror: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\\\\n    onload: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\\\\n    onloadend: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\\\\n    onloadstart: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\\\\n    onprogress: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;\\\\n    readonly readyState: number;\\\\n    readonly result: string | ArrayBuffer | null;\\\\n    abort(): void;\\\\n    readAsArrayBuffer(blob: Blob): void;\\\\n    readAsBinaryString(blob: Blob): void;\\\\n    readAsDataURL(blob: Blob): void;\\\\n    readAsText(blob: Blob, encoding?: string): void;\\\\n    readonly DONE: number;\\\\n    readonly EMPTY: number;\\\\n    readonly LOADING: number;\\\\n    addEventListener<K extends keyof FileReaderEventMap>(type: K, listener: (this: FileReader, ev: FileReaderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof FileReaderEventMap>(type: K, listener: (this: FileReader, ev: FileReaderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var FileReader: {\\\\n    prototype: FileReader;\\\\n    new(): FileReader;\\\\n    readonly DONE: number;\\\\n    readonly EMPTY: number;\\\\n    readonly LOADING: number;\\\\n};\\\\n\\\\n/** Allows to read File or Blob objects in a synchronous way. */\\\\ninterface FileReaderSync {\\\\n    readAsArrayBuffer(blob: Blob): ArrayBuffer;\\\\n    readAsBinaryString(blob: Blob): string;\\\\n    readAsDataURL(blob: Blob): string;\\\\n    readAsText(blob: Blob, encoding?: string): string;\\\\n}\\\\n\\\\ndeclare var FileReaderSync: {\\\\n    prototype: FileReaderSync;\\\\n    new(): FileReaderSync;\\\\n};\\\\n\\\\n/** Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to \\\\\\\"multipart/form-data\\\\\\\". */\\\\ninterface FormData {\\\\n    append(name: string, value: string | Blob, fileName?: string): void;\\\\n    delete(name: string): void;\\\\n    get(name: string): FormDataEntryValue | null;\\\\n    getAll(name: string): FormDataEntryValue[];\\\\n    has(name: string): boolean;\\\\n    set(name: string, value: string | Blob, fileName?: string): void;\\\\n    forEach(callbackfn: (value: FormDataEntryValue, key: string, parent: FormData) => void, thisArg?: any): void;\\\\n}\\\\n\\\\ndeclare var FormData: {\\\\n    prototype: FormData;\\\\n    new(): FormData;\\\\n};\\\\n\\\\ninterface GenericTransformStream {\\\\n    /**\\\\n     * Returns a readable stream whose chunks are strings resulting from running encoding's decoder on the chunks written to writable.\\\\n     */\\\\n    readonly readable: ReadableStream;\\\\n    /**\\\\n     * Returns a writable stream which accepts BufferSource chunks and runs them through encoding's decoder before making them available to readable.\\\\n     * \\\\n     * Typically this will be used via the pipeThrough() method on a ReadableStream source.\\\\n     * \\\\n     * ```\\\\n     * var decoder = new TextDecoderStream(encoding);\\\\n     * byteReadable\\\\n     *   .pipeThrough(decoder)\\\\n     *   .pipeTo(textWritable);\\\\n     * ```\\\\n     * \\\\n     * If the error mode is \\\\\\\"fatal\\\\\\\" and encoding's decoder returns error, both readable and writable will be errored with a TypeError.\\\\n     */\\\\n    readonly writable: WritableStream;\\\\n}\\\\n\\\\n/** This Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence. */\\\\ninterface Headers {\\\\n    append(name: string, value: string): void;\\\\n    delete(name: string): void;\\\\n    get(name: string): string | null;\\\\n    has(name: string): boolean;\\\\n    set(name: string, value: string): void;\\\\n    forEach(callbackfn: (value: string, key: string, parent: Headers) => void, thisArg?: any): void;\\\\n}\\\\n\\\\ndeclare var Headers: {\\\\n    prototype: Headers;\\\\n    new(init?: HeadersInit): Headers;\\\\n};\\\\n\\\\ninterface HkdfCtrParams extends Algorithm {\\\\n    context: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n    hash: string | Algorithm;\\\\n    label: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;\\\\n}\\\\n\\\\ninterface IDBArrayKey extends Array<IDBValidKey> {\\\\n}\\\\n\\\\n/** This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. */\\\\ninterface IDBCursor {\\\\n    /**\\\\n     * Returns the direction (\\\\\\\"next\\\\\\\", \\\\\\\"nextunique\\\\\\\", \\\\\\\"prev\\\\\\\" or \\\\\\\"prevunique\\\\\\\") of the cursor.\\\\n     */\\\\n    readonly direction: IDBCursorDirection;\\\\n    /**\\\\n     * Returns the key of the cursor. Throws a \\\\\\\"InvalidStateError\\\\\\\" DOMException if the cursor is advancing or is finished.\\\\n     */\\\\n    readonly key: IDBValidKey;\\\\n    /**\\\\n     * Returns the effective key of the cursor. Throws a \\\\\\\"InvalidStateError\\\\\\\" DOMException if the cursor is advancing or is finished.\\\\n     */\\\\n    readonly primaryKey: IDBValidKey;\\\\n    /**\\\\n     * Returns the IDBObjectStore or IDBIndex the cursor was opened from.\\\\n     */\\\\n    readonly source: IDBObjectStore | IDBIndex;\\\\n    /**\\\\n     * Advances the cursor through the next count records in range.\\\\n     */\\\\n    advance(count: number): void;\\\\n    /**\\\\n     * Advances the cursor to the next record in range.\\\\n     */\\\\n    continue(key?: IDBValidKey): void;\\\\n    /**\\\\n     * Advances the cursor to the next record in range matching or after key and primaryKey. Throws an \\\\\\\"InvalidAccessError\\\\\\\" DOMException if the source is not an index.\\\\n     */\\\\n    continuePrimaryKey(key: IDBValidKey, primaryKey: IDBValidKey): void;\\\\n    /**\\\\n     * Delete the record pointed at by the cursor with a new value.\\\\n     * \\\\n     * If successful, request's result will be undefined.\\\\n     */\\\\n    delete(): IDBRequest<undefined>;\\\\n    /**\\\\n     * Updated the record pointed at by the cursor with a new value.\\\\n     * \\\\n     * Throws a \\\\\\\"DataError\\\\\\\" DOMException if the effective object store uses in-line keys and the key would have changed.\\\\n     * \\\\n     * If successful, request's result will be the record's key.\\\\n     */\\\\n    update(value: any): IDBRequest<IDBValidKey>;\\\\n}\\\\n\\\\ndeclare var IDBCursor: {\\\\n    prototype: IDBCursor;\\\\n    new(): IDBCursor;\\\\n};\\\\n\\\\n/** This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property. */\\\\ninterface IDBCursorWithValue extends IDBCursor {\\\\n    /**\\\\n     * Returns the cursor's current value.\\\\n     */\\\\n    readonly value: any;\\\\n}\\\\n\\\\ndeclare var IDBCursorWithValue: {\\\\n    prototype: IDBCursorWithValue;\\\\n    new(): IDBCursorWithValue;\\\\n};\\\\n\\\\ninterface IDBDatabaseEventMap {\\\\n    \\\\\\\"abort\\\\\\\": Event;\\\\n    \\\\\\\"close\\\\\\\": Event;\\\\n    \\\\\\\"error\\\\\\\": Event;\\\\n    \\\\\\\"versionchange\\\\\\\": IDBVersionChangeEvent;\\\\n}\\\\n\\\\n/** This IndexedDB API interface provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database. */\\\\ninterface IDBDatabase extends EventTarget {\\\\n    /**\\\\n     * Returns the name of the database.\\\\n     */\\\\n    readonly name: string;\\\\n    /**\\\\n     * Returns a list of the names of object stores in the database.\\\\n     */\\\\n    readonly objectStoreNames: DOMStringList;\\\\n    onabort: ((this: IDBDatabase, ev: Event) => any) | null;\\\\n    onclose: ((this: IDBDatabase, ev: Event) => any) | null;\\\\n    onerror: ((this: IDBDatabase, ev: Event) => any) | null;\\\\n    onversionchange: ((this: IDBDatabase, ev: IDBVersionChangeEvent) => any) | null;\\\\n    /**\\\\n     * Returns the version of the database.\\\\n     */\\\\n    readonly version: number;\\\\n    /**\\\\n     * Closes the connection once all running transactions have finished.\\\\n     */\\\\n    close(): void;\\\\n    /**\\\\n     * Creates a new object store with the given name and options and returns a new IDBObjectStore.\\\\n     * \\\\n     * Throws a \\\\\\\"InvalidStateError\\\\\\\" DOMException if not called within an upgrade transaction.\\\\n     */\\\\n    createObjectStore(name: string, optionalParameters?: IDBObjectStoreParameters): IDBObjectStore;\\\\n    /**\\\\n     * Deletes the object store with the given name.\\\\n     * \\\\n     * Throws a \\\\\\\"InvalidStateError\\\\\\\" DOMException if not called within an upgrade transaction.\\\\n     */\\\\n    deleteObjectStore(name: string): void;\\\\n    /**\\\\n     * Returns a new transaction with the given mode (\\\\\\\"readonly\\\\\\\" or \\\\\\\"readwrite\\\\\\\") and scope which can be a single object store name or an array of names.\\\\n     */\\\\n    transaction(storeNames: string | string[], mode?: IDBTransactionMode): IDBTransaction;\\\\n    addEventListener<K extends keyof IDBDatabaseEventMap>(type: K, listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof IDBDatabaseEventMap>(type: K, listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var IDBDatabase: {\\\\n    prototype: IDBDatabase;\\\\n    new(): IDBDatabase;\\\\n};\\\\n\\\\n/** In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.) */\\\\ninterface IDBFactory {\\\\n    /**\\\\n     * Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if the keys are equal.\\\\n     * \\\\n     * Throws a \\\\\\\"DataError\\\\\\\" DOMException if either input is not a valid key.\\\\n     */\\\\n    cmp(first: any, second: any): number;\\\\n    /**\\\\n     * Attempts to delete the named database. If the database already exists and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close. If the request is successful request's result will be null.\\\\n     */\\\\n    deleteDatabase(name: string): IDBOpenDBRequest;\\\\n    /**\\\\n     * Attempts to open a connection to the named database with the current version, or 1 if it does not already exist. If the request is successful request's result will be the connection.\\\\n     */\\\\n    open(name: string, version?: number): IDBOpenDBRequest;\\\\n}\\\\n\\\\ndeclare var IDBFactory: {\\\\n    prototype: IDBFactory;\\\\n    new(): IDBFactory;\\\\n};\\\\n\\\\n/** IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data. */\\\\ninterface IDBIndex {\\\\n    readonly keyPath: string | string[];\\\\n    readonly multiEntry: boolean;\\\\n    /**\\\\n     * Returns the name of the index.\\\\n     */\\\\n    name: string;\\\\n    /**\\\\n     * Returns the IDBObjectStore the index belongs to.\\\\n     */\\\\n    readonly objectStore: IDBObjectStore;\\\\n    readonly unique: boolean;\\\\n    /**\\\\n     * Retrieves the number of records matching the given key or key range in query.\\\\n     * \\\\n     * If successful, request's result will be the count.\\\\n     */\\\\n    count(key?: IDBValidKey | IDBKeyRange): IDBRequest<number>;\\\\n    /**\\\\n     * Retrieves the value of the first record matching the given key or key range in query.\\\\n     * \\\\n     * If successful, request's result will be the value, or undefined if there was no matching record.\\\\n     */\\\\n    get(key: IDBValidKey | IDBKeyRange): IDBRequest<any | undefined>;\\\\n    /**\\\\n     * Retrieves the values of the records matching the given key or key range in query (up to count if given).\\\\n     * \\\\n     * If successful, request's result will be an Array of the values.\\\\n     */\\\\n    getAll(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<any[]>;\\\\n    /**\\\\n     * Retrieves the keys of records matching the given key or key range in query (up to count if given).\\\\n     * \\\\n     * If successful, request's result will be an Array of the keys.\\\\n     */\\\\n    getAllKeys(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<IDBValidKey[]>;\\\\n    /**\\\\n     * Retrieves the key of the first record matching the given key or key range in query.\\\\n     * \\\\n     * If successful, request's result will be the key, or undefined if there was no matching record.\\\\n     */\\\\n    getKey(key: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>;\\\\n    /**\\\\n     * Opens a cursor over the records matching query, ordered by direction. If query is null, all records in index are matched.\\\\n     * \\\\n     * If successful, request's result will be an IDBCursorWithValue, or null if there were no matching records.\\\\n     */\\\\n    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursorWithValue | null>;\\\\n    /**\\\\n     * Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in index are matched.\\\\n     * \\\\n     * If successful, request's result will be an IDBCursor, or null if there were no matching records.\\\\n     */\\\\n    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursor | null>;\\\\n}\\\\n\\\\ndeclare var IDBIndex: {\\\\n    prototype: IDBIndex;\\\\n    new(): IDBIndex;\\\\n};\\\\n\\\\n/** A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs: */\\\\ninterface IDBKeyRange {\\\\n    /**\\\\n     * Returns lower bound, or undefined if none.\\\\n     */\\\\n    readonly lower: any;\\\\n    /**\\\\n     * Returns true if the lower open flag is set, and false otherwise.\\\\n     */\\\\n    readonly lowerOpen: boolean;\\\\n    /**\\\\n     * Returns upper bound, or undefined if none.\\\\n     */\\\\n    readonly upper: any;\\\\n    /**\\\\n     * Returns true if the upper open flag is set, and false otherwise.\\\\n     */\\\\n    readonly upperOpen: boolean;\\\\n    /**\\\\n     * Returns true if key is included in the range, and false otherwise.\\\\n     */\\\\n    includes(key: any): boolean;\\\\n}\\\\n\\\\ndeclare var IDBKeyRange: {\\\\n    prototype: IDBKeyRange;\\\\n    new(): IDBKeyRange;\\\\n    /**\\\\n     * Returns a new IDBKeyRange spanning from lower to upper. If lowerOpen is true, lower is not included in the range. If upperOpen is true, upper is not included in the range.\\\\n     */\\\\n    bound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): IDBKeyRange;\\\\n    /**\\\\n     * Returns a new IDBKeyRange starting at key with no upper bound. If open is true, key is not included in the range.\\\\n     */\\\\n    lowerBound(lower: any, open?: boolean): IDBKeyRange;\\\\n    /**\\\\n     * Returns a new IDBKeyRange spanning only key.\\\\n     */\\\\n    only(value: any): IDBKeyRange;\\\\n    /**\\\\n     * Returns a new IDBKeyRange with no lower bound and ending at key. If open is true, key is not included in the range.\\\\n     */\\\\n    upperBound(upper: any, open?: boolean): IDBKeyRange;\\\\n};\\\\n\\\\n/** This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.) */\\\\ninterface IDBObjectStore {\\\\n    /**\\\\n     * Returns true if the store has a key generator, and false otherwise.\\\\n     */\\\\n    readonly autoIncrement: boolean;\\\\n    /**\\\\n     * Returns a list of the names of indexes in the store.\\\\n     */\\\\n    readonly indexNames: DOMStringList;\\\\n    /**\\\\n     * Returns the key path of the store, or null if none.\\\\n     */\\\\n    readonly keyPath: string | string[];\\\\n    /**\\\\n     * Returns the name of the store.\\\\n     */\\\\n    name: string;\\\\n    /**\\\\n     * Returns the associated transaction.\\\\n     */\\\\n    readonly transaction: IDBTransaction;\\\\n    /**\\\\n     * Adds or updates a record in store with the given value and key.\\\\n     * \\\\n     * If the store uses in-line keys and key is specified a \\\\\\\"DataError\\\\\\\" DOMException will be thrown.\\\\n     * \\\\n     * If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a \\\\\\\"ConstraintError\\\\\\\" DOMException.\\\\n     * \\\\n     * If successful, request's result will be the record's key.\\\\n     */\\\\n    add(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>;\\\\n    /**\\\\n     * Deletes all records in store.\\\\n     * \\\\n     * If successful, request's result will be undefined.\\\\n     */\\\\n    clear(): IDBRequest<undefined>;\\\\n    /**\\\\n     * Retrieves the number of records matching the given key or key range in query.\\\\n     * \\\\n     * If successful, request's result will be the count.\\\\n     */\\\\n    count(key?: IDBValidKey | IDBKeyRange): IDBRequest<number>;\\\\n    /**\\\\n     * Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a \\\\\\\"ConstraintError\\\\\\\" DOMException.\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if not called within an upgrade transaction.\\\\n     */\\\\n    createIndex(name: string, keyPath: string | string[], options?: IDBIndexParameters): IDBIndex;\\\\n    /**\\\\n     * Deletes records in store with the given key or in the given key range in query.\\\\n     * \\\\n     * If successful, request's result will be undefined.\\\\n     */\\\\n    delete(key: IDBValidKey | IDBKeyRange): IDBRequest<undefined>;\\\\n    /**\\\\n     * Deletes the index in store with the given name.\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if not called within an upgrade transaction.\\\\n     */\\\\n    deleteIndex(name: string): void;\\\\n    /**\\\\n     * Retrieves the value of the first record matching the given key or key range in query.\\\\n     * \\\\n     * If successful, request's result will be the value, or undefined if there was no matching record.\\\\n     */\\\\n    get(query: IDBValidKey | IDBKeyRange): IDBRequest<any | undefined>;\\\\n    /**\\\\n     * Retrieves the values of the records matching the given key or key range in query (up to count if given).\\\\n     * \\\\n     * If successful, request's result will be an Array of the values.\\\\n     */\\\\n    getAll(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<any[]>;\\\\n    /**\\\\n     * Retrieves the keys of records matching the given key or key range in query (up to count if given).\\\\n     * \\\\n     * If successful, request's result will be an Array of the keys.\\\\n     */\\\\n    getAllKeys(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<IDBValidKey[]>;\\\\n    /**\\\\n     * Retrieves the key of the first record matching the given key or key range in query.\\\\n     * \\\\n     * If successful, request's result will be the key, or undefined if there was no matching record.\\\\n     */\\\\n    getKey(query: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>;\\\\n    index(name: string): IDBIndex;\\\\n    /**\\\\n     * Opens a cursor over the records matching query, ordered by direction. If query is null, all records in store are matched.\\\\n     * \\\\n     * If successful, request's result will be an IDBCursorWithValue pointing at the first matching record, or null if there were no matching records.\\\\n     */\\\\n    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursorWithValue | null>;\\\\n    /**\\\\n     * Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in store are matched.\\\\n     * \\\\n     * If successful, request's result will be an IDBCursor pointing at the first matching record, or null if there were no matching records.\\\\n     */\\\\n    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursor | null>;\\\\n    /**\\\\n     * Adds or updates a record in store with the given value and key.\\\\n     * \\\\n     * If the store uses in-line keys and key is specified a \\\\\\\"DataError\\\\\\\" DOMException will be thrown.\\\\n     * \\\\n     * If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a \\\\\\\"ConstraintError\\\\\\\" DOMException.\\\\n     * \\\\n     * If successful, request's result will be the record's key.\\\\n     */\\\\n    put(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>;\\\\n}\\\\n\\\\ndeclare var IDBObjectStore: {\\\\n    prototype: IDBObjectStore;\\\\n    new(): IDBObjectStore;\\\\n};\\\\n\\\\ninterface IDBOpenDBRequestEventMap extends IDBRequestEventMap {\\\\n    \\\\\\\"blocked\\\\\\\": Event;\\\\n    \\\\\\\"upgradeneeded\\\\\\\": IDBVersionChangeEvent;\\\\n}\\\\n\\\\n/** Also inherits methods from its parents IDBRequest and EventTarget. */\\\\ninterface IDBOpenDBRequest extends IDBRequest<IDBDatabase> {\\\\n    onblocked: ((this: IDBOpenDBRequest, ev: Event) => any) | null;\\\\n    onupgradeneeded: ((this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => any) | null;\\\\n    addEventListener<K extends keyof IDBOpenDBRequestEventMap>(type: K, listener: (this: IDBOpenDBRequest, ev: IDBOpenDBRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof IDBOpenDBRequestEventMap>(type: K, listener: (this: IDBOpenDBRequest, ev: IDBOpenDBRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var IDBOpenDBRequest: {\\\\n    prototype: IDBOpenDBRequest;\\\\n    new(): IDBOpenDBRequest;\\\\n};\\\\n\\\\ninterface IDBRequestEventMap {\\\\n    \\\\\\\"error\\\\\\\": Event;\\\\n    \\\\\\\"success\\\\\\\": Event;\\\\n}\\\\n\\\\n/** The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance. */\\\\ninterface IDBRequest<T = any> extends EventTarget {\\\\n    /**\\\\n     * When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a \\\\\\\"InvalidStateError\\\\\\\" DOMException if the request is still pending.\\\\n     */\\\\n    readonly error: DOMException | null;\\\\n    onerror: ((this: IDBRequest<T>, ev: Event) => any) | null;\\\\n    onsuccess: ((this: IDBRequest<T>, ev: Event) => any) | null;\\\\n    /**\\\\n     * Returns \\\\\\\"pending\\\\\\\" until a request is complete, then returns \\\\\\\"done\\\\\\\".\\\\n     */\\\\n    readonly readyState: IDBRequestReadyState;\\\\n    /**\\\\n     * When a request is completed, returns the result, or undefined if the request failed. Throws a \\\\\\\"InvalidStateError\\\\\\\" DOMException if the request is still pending.\\\\n     */\\\\n    readonly result: T;\\\\n    /**\\\\n     * Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request.\\\\n     */\\\\n    readonly source: IDBObjectStore | IDBIndex | IDBCursor;\\\\n    /**\\\\n     * Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise.\\\\n     */\\\\n    readonly transaction: IDBTransaction | null;\\\\n    addEventListener<K extends keyof IDBRequestEventMap>(type: K, listener: (this: IDBRequest<T>, ev: IDBRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof IDBRequestEventMap>(type: K, listener: (this: IDBRequest<T>, ev: IDBRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var IDBRequest: {\\\\n    prototype: IDBRequest;\\\\n    new(): IDBRequest;\\\\n};\\\\n\\\\ninterface IDBTransactionEventMap {\\\\n    \\\\\\\"abort\\\\\\\": Event;\\\\n    \\\\\\\"complete\\\\\\\": Event;\\\\n    \\\\\\\"error\\\\\\\": Event;\\\\n}\\\\n\\\\ninterface IDBTransaction extends EventTarget {\\\\n    /**\\\\n     * Returns the transaction's connection.\\\\n     */\\\\n    readonly db: IDBDatabase;\\\\n    /**\\\\n     * If the transaction was aborted, returns the error (a DOMException) providing the reason.\\\\n     */\\\\n    readonly error: DOMException;\\\\n    /**\\\\n     * Returns the mode the transaction was created with (\\\\\\\"readonly\\\\\\\" or \\\\\\\"readwrite\\\\\\\"), or \\\\\\\"versionchange\\\\\\\" for an upgrade transaction.\\\\n     */\\\\n    readonly mode: IDBTransactionMode;\\\\n    /**\\\\n     * Returns a list of the names of object stores in the transaction's scope. For an upgrade transaction this is all object stores in the database.\\\\n     */\\\\n    readonly objectStoreNames: DOMStringList;\\\\n    onabort: ((this: IDBTransaction, ev: Event) => any) | null;\\\\n    oncomplete: ((this: IDBTransaction, ev: Event) => any) | null;\\\\n    onerror: ((this: IDBTransaction, ev: Event) => any) | null;\\\\n    /**\\\\n     * Aborts the transaction. All pending requests will fail with a \\\\\\\"AbortError\\\\\\\" DOMException and all changes made to the database will be reverted.\\\\n     */\\\\n    abort(): void;\\\\n    /**\\\\n     * Returns an IDBObjectStore in the transaction's scope.\\\\n     */\\\\n    objectStore(name: string): IDBObjectStore;\\\\n    addEventListener<K extends keyof IDBTransactionEventMap>(type: K, listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof IDBTransactionEventMap>(type: K, listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var IDBTransaction: {\\\\n    prototype: IDBTransaction;\\\\n    new(): IDBTransaction;\\\\n};\\\\n\\\\n/** This IndexedDB API interface indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function. */\\\\ninterface IDBVersionChangeEvent extends Event {\\\\n    readonly newVersion: number | null;\\\\n    readonly oldVersion: number;\\\\n}\\\\n\\\\ndeclare var IDBVersionChangeEvent: {\\\\n    prototype: IDBVersionChangeEvent;\\\\n    new(type: string, eventInitDict?: IDBVersionChangeEventInit): IDBVersionChangeEvent;\\\\n};\\\\n\\\\ninterface ImageBitmap {\\\\n    /**\\\\n     * Returns the intrinsic height of the image, in CSS pixels.\\\\n     */\\\\n    readonly height: number;\\\\n    /**\\\\n     * Returns the intrinsic width of the image, in CSS pixels.\\\\n     */\\\\n    readonly width: number;\\\\n    /**\\\\n     * Releases imageBitmap's underlying bitmap data.\\\\n     */\\\\n    close(): void;\\\\n}\\\\n\\\\ndeclare var ImageBitmap: {\\\\n    prototype: ImageBitmap;\\\\n    new(): ImageBitmap;\\\\n};\\\\n\\\\ninterface ImageBitmapOptions {\\\\n    colorSpaceConversion?: \\\\\\\"none\\\\\\\" | \\\\\\\"default\\\\\\\";\\\\n    imageOrientation?: \\\\\\\"none\\\\\\\" | \\\\\\\"flipY\\\\\\\";\\\\n    premultiplyAlpha?: \\\\\\\"none\\\\\\\" | \\\\\\\"premultiply\\\\\\\" | \\\\\\\"default\\\\\\\";\\\\n    resizeHeight?: number;\\\\n    resizeQuality?: \\\\\\\"pixelated\\\\\\\" | \\\\\\\"low\\\\\\\" | \\\\\\\"medium\\\\\\\" | \\\\\\\"high\\\\\\\";\\\\n    resizeWidth?: number;\\\\n}\\\\n\\\\ninterface ImageBitmapRenderingContext {\\\\n    /**\\\\n     * Returns the canvas element that the context is bound to.\\\\n     */\\\\n    readonly canvas: OffscreenCanvas;\\\\n    /**\\\\n     * Transfers the underlying bitmap data from imageBitmap to context, and the bitmap becomes the contents of the canvas element to which context is bound.\\\\n     */\\\\n    transferFromImageBitmap(bitmap: ImageBitmap | null): void;\\\\n}\\\\n\\\\ndeclare var ImageBitmapRenderingContext: {\\\\n    prototype: ImageBitmapRenderingContext;\\\\n    new(): ImageBitmapRenderingContext;\\\\n};\\\\n\\\\n/** The underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData(). */\\\\ninterface ImageData {\\\\n    /**\\\\n     * Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255.\\\\n     */\\\\n    readonly data: Uint8ClampedArray;\\\\n    /**\\\\n     * Returns the actual dimensions of the data in the ImageData object, in pixels.\\\\n     */\\\\n    readonly height: number;\\\\n    /**\\\\n     * Returns the actual dimensions of the data in the ImageData object, in pixels.\\\\n     */\\\\n    readonly width: number;\\\\n}\\\\n\\\\ndeclare var ImageData: {\\\\n    prototype: ImageData;\\\\n    new(width: number, height: number): ImageData;\\\\n    new(array: Uint8ClampedArray, width: number, height: number): ImageData;\\\\n};\\\\n\\\\n/** This Channel Messaging API interface allows us to create a new message channel and send data through it via its two MessagePort properties. */\\\\ninterface MessageChannel {\\\\n    /**\\\\n     * Returns the first MessagePort object.\\\\n     */\\\\n    readonly port1: MessagePort;\\\\n    /**\\\\n     * Returns the second MessagePort object.\\\\n     */\\\\n    readonly port2: MessagePort;\\\\n}\\\\n\\\\ndeclare var MessageChannel: {\\\\n    prototype: MessageChannel;\\\\n    new(): MessageChannel;\\\\n};\\\\n\\\\n/** A message received by a target object. */\\\\ninterface MessageEvent extends Event {\\\\n    /**\\\\n     * Returns the data of the message.\\\\n     */\\\\n    readonly data: any;\\\\n    /**\\\\n     * Returns the last event ID string, for server-sent events.\\\\n     */\\\\n    readonly lastEventId: string;\\\\n    /**\\\\n     * Returns the origin of the message, for server-sent events and cross-document messaging.\\\\n     */\\\\n    readonly origin: string;\\\\n    /**\\\\n     * Returns the MessagePort array sent with the message, for cross-document messaging and channel messaging.\\\\n     */\\\\n    readonly ports: ReadonlyArray<MessagePort>;\\\\n    /**\\\\n     * Returns the WindowProxy of the source window, for cross-document messaging, and the MessagePort being attached, in the connect event fired at SharedWorkerGlobalScope objects.\\\\n     */\\\\n    readonly source: MessageEventSource | null;\\\\n}\\\\n\\\\ndeclare var MessageEvent: {\\\\n    prototype: MessageEvent;\\\\n    new(type: string, eventInitDict?: MessageEventInit): MessageEvent;\\\\n};\\\\n\\\\ninterface MessagePortEventMap {\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n    \\\\\\\"messageerror\\\\\\\": MessageEvent;\\\\n}\\\\n\\\\n/** This Channel Messaging API interface represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other. */\\\\ninterface MessagePort extends EventTarget {\\\\n    onmessage: ((this: MessagePort, ev: MessageEvent) => any) | null;\\\\n    onmessageerror: ((this: MessagePort, ev: MessageEvent) => any) | null;\\\\n    /**\\\\n     * Disconnects the port, so that it is no longer active.\\\\n     */\\\\n    close(): void;\\\\n    /**\\\\n     * Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.\\\\n     * \\\\n     * Throws a \\\\\\\"DataCloneError\\\\\\\" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.\\\\n     */\\\\n    postMessage(message: any, transfer: Transferable[]): void;\\\\n    postMessage(message: any, options?: PostMessageOptions): void;\\\\n    /**\\\\n     * Begins dispatching messages received on the port.\\\\n     */\\\\n    start(): void;\\\\n    addEventListener<K extends keyof MessagePortEventMap>(type: K, listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof MessagePortEventMap>(type: K, listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var MessagePort: {\\\\n    prototype: MessagePort;\\\\n    new(): MessagePort;\\\\n};\\\\n\\\\ninterface NavigationPreloadManager {\\\\n    disable(): Promise<void>;\\\\n    enable(): Promise<void>;\\\\n    getState(): Promise<NavigationPreloadState>;\\\\n    setHeaderValue(value: string): Promise<void>;\\\\n}\\\\n\\\\ndeclare var NavigationPreloadManager: {\\\\n    prototype: NavigationPreloadManager;\\\\n    new(): NavigationPreloadManager;\\\\n};\\\\n\\\\ninterface NavigatorBeacon {\\\\n    sendBeacon(url: string, data?: Blob | Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | FormData | string | null): boolean;\\\\n}\\\\n\\\\ninterface NavigatorConcurrentHardware {\\\\n    readonly hardwareConcurrency: number;\\\\n}\\\\n\\\\ninterface NavigatorID {\\\\n    readonly appCodeName: string;\\\\n    readonly appName: string;\\\\n    readonly appVersion: string;\\\\n    readonly platform: string;\\\\n    readonly product: string;\\\\n    readonly userAgent: string;\\\\n}\\\\n\\\\ninterface NavigatorOnLine {\\\\n    readonly onLine: boolean;\\\\n}\\\\n\\\\ninterface NavigatorStorage {\\\\n    readonly storage: StorageManager;\\\\n}\\\\n\\\\ninterface NotificationEventMap {\\\\n    \\\\\\\"click\\\\\\\": Event;\\\\n    \\\\\\\"close\\\\\\\": Event;\\\\n    \\\\\\\"error\\\\\\\": Event;\\\\n    \\\\\\\"show\\\\\\\": Event;\\\\n}\\\\n\\\\n/** This Notifications API interface is used to configure and display desktop notifications to the user. */\\\\ninterface Notification extends EventTarget {\\\\n    readonly actions: ReadonlyArray<NotificationAction>;\\\\n    readonly badge: string;\\\\n    readonly body: string;\\\\n    readonly data: any;\\\\n    readonly dir: NotificationDirection;\\\\n    readonly icon: string;\\\\n    readonly image: string;\\\\n    readonly lang: string;\\\\n    onclick: ((this: Notification, ev: Event) => any) | null;\\\\n    onclose: ((this: Notification, ev: Event) => any) | null;\\\\n    onerror: ((this: Notification, ev: Event) => any) | null;\\\\n    onshow: ((this: Notification, ev: Event) => any) | null;\\\\n    readonly renotify: boolean;\\\\n    readonly requireInteraction: boolean;\\\\n    readonly silent: boolean;\\\\n    readonly tag: string;\\\\n    readonly timestamp: number;\\\\n    readonly title: string;\\\\n    readonly vibrate: ReadonlyArray<number>;\\\\n    close(): void;\\\\n    addEventListener<K extends keyof NotificationEventMap>(type: K, listener: (this: Notification, ev: NotificationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof NotificationEventMap>(type: K, listener: (this: Notification, ev: NotificationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var Notification: {\\\\n    prototype: Notification;\\\\n    new(title: string, options?: NotificationOptions): Notification;\\\\n    readonly maxActions: number;\\\\n    readonly permission: NotificationPermission;\\\\n};\\\\n\\\\n/** The parameter passed into the onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. */\\\\ninterface NotificationEvent extends ExtendableEvent {\\\\n    readonly action: string;\\\\n    readonly notification: Notification;\\\\n}\\\\n\\\\ndeclare var NotificationEvent: {\\\\n    prototype: NotificationEvent;\\\\n    new(type: string, eventInitDict: NotificationEventInit): NotificationEvent;\\\\n};\\\\n\\\\n/** The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements(). */\\\\ninterface OES_element_index_uint {\\\\n}\\\\n\\\\n/** The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth. */\\\\ninterface OES_standard_derivatives {\\\\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES: GLenum;\\\\n}\\\\n\\\\n/** The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures. */\\\\ninterface OES_texture_float {\\\\n}\\\\n\\\\n/** The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures. */\\\\ninterface OES_texture_float_linear {\\\\n}\\\\n\\\\n/** The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components. */\\\\ninterface OES_texture_half_float {\\\\n    readonly HALF_FLOAT_OES: GLenum;\\\\n}\\\\n\\\\n/** The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures. */\\\\ninterface OES_texture_half_float_linear {\\\\n}\\\\n\\\\ninterface OES_vertex_array_object {\\\\n    bindVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): void;\\\\n    createVertexArrayOES(): WebGLVertexArrayObjectOES | null;\\\\n    deleteVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): void;\\\\n    isVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): GLboolean;\\\\n    readonly VERTEX_ARRAY_BINDING_OES: GLenum;\\\\n}\\\\n\\\\ninterface OffscreenCanvas extends EventTarget {\\\\n    /**\\\\n     * These attributes return the dimensions of the OffscreenCanvas object's bitmap.\\\\n     * \\\\n     * They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).\\\\n     */\\\\n    height: number;\\\\n    /**\\\\n     * These attributes return the dimensions of the OffscreenCanvas object's bitmap.\\\\n     * \\\\n     * They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).\\\\n     */\\\\n    width: number;\\\\n    /**\\\\n     * Returns a promise that will fulfill with a new Blob object representing a file containing the image in the OffscreenCanvas object.\\\\n     * \\\\n     * The argument, if provided, is a dictionary that controls the encoding options of the image file to be created. The type field specifies the file format and has a default value of \\\\\\\"image/png\\\\\\\"; that type is also used if the requested type isn't supported. If the image format supports variable quality (such as \\\\\\\"image/jpeg\\\\\\\"), then the quality field is a number in the range 0.0 to 1.0 inclusive indicating the desired quality level for the resulting image.\\\\n     */\\\\n    convertToBlob(options?: ImageEncodeOptions): Promise<Blob>;\\\\n    /**\\\\n     * Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: \\\\\\\"2d\\\\\\\", \\\\\\\"bitmaprenderer\\\\\\\", \\\\\\\"webgl\\\\\\\", or \\\\\\\"webgl2\\\\\\\". options is handled by that API.\\\\n     * \\\\n     * This specification defines the \\\\\\\"2d\\\\\\\" context below, which is similar but distinct from the \\\\\\\"2d\\\\\\\" context that is created from a canvas element. The WebGL specifications define the \\\\\\\"webgl\\\\\\\" and \\\\\\\"webgl2\\\\\\\" contexts. [WEBGL]\\\\n     * \\\\n     * Returns null if the canvas has already been initialized with another context type (e.g., trying to get a \\\\\\\"2d\\\\\\\" context after getting a \\\\\\\"webgl\\\\\\\" context).\\\\n     */\\\\n    getContext(contextId: \\\\\\\"2d\\\\\\\", options?: CanvasRenderingContext2DSettings): OffscreenCanvasRenderingContext2D | null;\\\\n    getContext(contextId: \\\\\\\"bitmaprenderer\\\\\\\", options?: ImageBitmapRenderingContextSettings): ImageBitmapRenderingContext | null;\\\\n    getContext(contextId: \\\\\\\"webgl\\\\\\\", options?: WebGLContextAttributes): WebGLRenderingContext | null;\\\\n    getContext(contextId: \\\\\\\"webgl2\\\\\\\", options?: WebGLContextAttributes): WebGL2RenderingContext | null;\\\\n    getContext(contextId: OffscreenRenderingContextId, options?: any): OffscreenRenderingContext | null;\\\\n    /**\\\\n     * Returns a newly created ImageBitmap object with the image in the OffscreenCanvas object. The image in the OffscreenCanvas object is replaced with a new blank image.\\\\n     */\\\\n    transferToImageBitmap(): ImageBitmap;\\\\n}\\\\n\\\\ndeclare var OffscreenCanvas: {\\\\n    prototype: OffscreenCanvas;\\\\n    new(width: number, height: number): OffscreenCanvas;\\\\n};\\\\n\\\\ninterface OffscreenCanvasRenderingContext2D extends CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasText, CanvasDrawImage, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath {\\\\n    readonly canvas: OffscreenCanvas;\\\\n    commit(): void;\\\\n}\\\\n\\\\ndeclare var OffscreenCanvasRenderingContext2D: {\\\\n    prototype: OffscreenCanvasRenderingContext2D;\\\\n    new(): OffscreenCanvasRenderingContext2D;\\\\n};\\\\n\\\\n/** This Canvas 2D API interface is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired. */\\\\ninterface Path2D extends CanvasPath {\\\\n    /**\\\\n     * Adds to the path the path given by the argument.\\\\n     */\\\\n    addPath(path: Path2D, transform?: DOMMatrix2DInit): void;\\\\n}\\\\n\\\\ndeclare var Path2D: {\\\\n    prototype: Path2D;\\\\n    new(path?: Path2D | string): Path2D;\\\\n};\\\\n\\\\ninterface PerformanceEventMap {\\\\n    \\\\\\\"resourcetimingbufferfull\\\\\\\": Event;\\\\n}\\\\n\\\\n/** Provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API. */\\\\ninterface Performance extends EventTarget {\\\\n    onresourcetimingbufferfull: ((this: Performance, ev: Event) => any) | null;\\\\n    readonly timeOrigin: number;\\\\n    clearMarks(markName?: string): void;\\\\n    clearMeasures(measureName?: string): void;\\\\n    clearResourceTimings(): void;\\\\n    getEntries(): PerformanceEntryList;\\\\n    getEntriesByName(name: string, type?: string): PerformanceEntryList;\\\\n    getEntriesByType(type: string): PerformanceEntryList;\\\\n    mark(markName: string): void;\\\\n    measure(measureName: string, startMark?: string, endMark?: string): void;\\\\n    now(): number;\\\\n    setResourceTimingBufferSize(maxSize: number): void;\\\\n    toJSON(): any;\\\\n    addEventListener<K extends keyof PerformanceEventMap>(type: K, listener: (this: Performance, ev: PerformanceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof PerformanceEventMap>(type: K, listener: (this: Performance, ev: PerformanceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var Performance: {\\\\n    prototype: Performance;\\\\n    new(): Performance;\\\\n};\\\\n\\\\n/** Encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image). */\\\\ninterface PerformanceEntry {\\\\n    readonly duration: number;\\\\n    readonly entryType: string;\\\\n    readonly name: string;\\\\n    readonly startTime: number;\\\\n    toJSON(): any;\\\\n}\\\\n\\\\ndeclare var PerformanceEntry: {\\\\n    prototype: PerformanceEntry;\\\\n    new(): PerformanceEntry;\\\\n};\\\\n\\\\n/** PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of \\\\\\\"mark\\\\\\\". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline. */\\\\ninterface PerformanceMark extends PerformanceEntry {\\\\n}\\\\n\\\\ndeclare var PerformanceMark: {\\\\n    prototype: PerformanceMark;\\\\n    new(): PerformanceMark;\\\\n};\\\\n\\\\n/** PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of \\\\\\\"measure\\\\\\\". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline. */\\\\ninterface PerformanceMeasure extends PerformanceEntry {\\\\n}\\\\n\\\\ndeclare var PerformanceMeasure: {\\\\n    prototype: PerformanceMeasure;\\\\n    new(): PerformanceMeasure;\\\\n};\\\\n\\\\ninterface PerformanceObserver {\\\\n    disconnect(): void;\\\\n    observe(options?: PerformanceObserverInit): void;\\\\n    takeRecords(): PerformanceEntryList;\\\\n}\\\\n\\\\ndeclare var PerformanceObserver: {\\\\n    prototype: PerformanceObserver;\\\\n    new(callback: PerformanceObserverCallback): PerformanceObserver;\\\\n    readonly supportedEntryTypes: ReadonlyArray<string>;\\\\n};\\\\n\\\\ninterface PerformanceObserverEntryList {\\\\n    getEntries(): PerformanceEntryList;\\\\n    getEntriesByName(name: string, type?: string): PerformanceEntryList;\\\\n    getEntriesByType(type: string): PerformanceEntryList;\\\\n}\\\\n\\\\ndeclare var PerformanceObserverEntryList: {\\\\n    prototype: PerformanceObserverEntryList;\\\\n    new(): PerformanceObserverEntryList;\\\\n};\\\\n\\\\n/** Enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script. */\\\\ninterface PerformanceResourceTiming extends PerformanceEntry {\\\\n    readonly connectEnd: number;\\\\n    readonly connectStart: number;\\\\n    readonly decodedBodySize: number;\\\\n    readonly domainLookupEnd: number;\\\\n    readonly domainLookupStart: number;\\\\n    readonly encodedBodySize: number;\\\\n    readonly fetchStart: number;\\\\n    readonly initiatorType: string;\\\\n    readonly nextHopProtocol: string;\\\\n    readonly redirectEnd: number;\\\\n    readonly redirectStart: number;\\\\n    readonly requestStart: number;\\\\n    readonly responseEnd: number;\\\\n    readonly responseStart: number;\\\\n    readonly secureConnectionStart: number;\\\\n    readonly transferSize: number;\\\\n    readonly workerStart: number;\\\\n    toJSON(): any;\\\\n}\\\\n\\\\ndeclare var PerformanceResourceTiming: {\\\\n    prototype: PerformanceResourceTiming;\\\\n    new(): PerformanceResourceTiming;\\\\n};\\\\n\\\\ninterface PermissionStatusEventMap {\\\\n    \\\\\\\"change\\\\\\\": Event;\\\\n}\\\\n\\\\ninterface PermissionStatus extends EventTarget {\\\\n    onchange: ((this: PermissionStatus, ev: Event) => any) | null;\\\\n    readonly state: PermissionState;\\\\n    addEventListener<K extends keyof PermissionStatusEventMap>(type: K, listener: (this: PermissionStatus, ev: PermissionStatusEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof PermissionStatusEventMap>(type: K, listener: (this: PermissionStatus, ev: PermissionStatusEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var PermissionStatus: {\\\\n    prototype: PermissionStatus;\\\\n    new(): PermissionStatus;\\\\n};\\\\n\\\\ninterface Permissions {\\\\n    query(permissionDesc: PermissionDescriptor | DevicePermissionDescriptor | MidiPermissionDescriptor | PushPermissionDescriptor): Promise<PermissionStatus>;\\\\n}\\\\n\\\\ndeclare var Permissions: {\\\\n    prototype: Permissions;\\\\n    new(): Permissions;\\\\n};\\\\n\\\\n/** Events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>). */\\\\ninterface ProgressEvent<T extends EventTarget = EventTarget> extends Event {\\\\n    readonly lengthComputable: boolean;\\\\n    readonly loaded: number;\\\\n    readonly target: T | null;\\\\n    readonly total: number;\\\\n}\\\\n\\\\ndeclare var ProgressEvent: {\\\\n    prototype: ProgressEvent;\\\\n    new(type: string, eventInitDict?: ProgressEventInit): ProgressEvent;\\\\n};\\\\n\\\\ninterface PromiseRejectionEvent extends Event {\\\\n    readonly promise: Promise<any>;\\\\n    readonly reason: any;\\\\n}\\\\n\\\\ndeclare var PromiseRejectionEvent: {\\\\n    prototype: PromiseRejectionEvent;\\\\n    new(type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent;\\\\n};\\\\n\\\\n/** This Push API interface represents a push message that has been received. This event is sent to the global scope of a ServiceWorker. It contains the information sent from an application server to a PushSubscription. */\\\\ninterface PushEvent extends ExtendableEvent {\\\\n    readonly data: PushMessageData | null;\\\\n}\\\\n\\\\ndeclare var PushEvent: {\\\\n    prototype: PushEvent;\\\\n    new(type: string, eventInitDict?: PushEventInit): PushEvent;\\\\n};\\\\n\\\\n/** This Push API interface provides a way to receive notifications from third-party servers as well as request URLs for push notifications. */\\\\ninterface PushManager {\\\\n    getSubscription(): Promise<PushSubscription | null>;\\\\n    permissionState(options?: PushSubscriptionOptionsInit): Promise<PushPermissionState>;\\\\n    subscribe(options?: PushSubscriptionOptionsInit): Promise<PushSubscription>;\\\\n}\\\\n\\\\ndeclare var PushManager: {\\\\n    prototype: PushManager;\\\\n    new(): PushManager;\\\\n    readonly supportedContentEncodings: ReadonlyArray<string>;\\\\n};\\\\n\\\\n/** This Push API interface provides methods which let you retrieve the push data sent by a server in various formats. */\\\\ninterface PushMessageData {\\\\n    arrayBuffer(): ArrayBuffer;\\\\n    blob(): Blob;\\\\n    json(): any;\\\\n    text(): string;\\\\n}\\\\n\\\\ndeclare var PushMessageData: {\\\\n    prototype: PushMessageData;\\\\n    new(): PushMessageData;\\\\n};\\\\n\\\\n/** This Push API interface provides a subcription's URL endpoint and allows unsubscription from a push service. */\\\\ninterface PushSubscription {\\\\n    readonly endpoint: string;\\\\n    readonly expirationTime: number | null;\\\\n    readonly options: PushSubscriptionOptions;\\\\n    getKey(name: PushEncryptionKeyName): ArrayBuffer | null;\\\\n    toJSON(): PushSubscriptionJSON;\\\\n    unsubscribe(): Promise<boolean>;\\\\n}\\\\n\\\\ndeclare var PushSubscription: {\\\\n    prototype: PushSubscription;\\\\n    new(): PushSubscription;\\\\n};\\\\n\\\\ninterface PushSubscriptionChangeEvent extends ExtendableEvent {\\\\n    readonly newSubscription: PushSubscription | null;\\\\n    readonly oldSubscription: PushSubscription | null;\\\\n}\\\\n\\\\ndeclare var PushSubscriptionChangeEvent: {\\\\n    prototype: PushSubscriptionChangeEvent;\\\\n    new(type: string, eventInitDict?: PushSubscriptionChangeInit): PushSubscriptionChangeEvent;\\\\n};\\\\n\\\\ninterface PushSubscriptionOptions {\\\\n    readonly applicationServerKey: ArrayBuffer | null;\\\\n    readonly userVisibleOnly: boolean;\\\\n}\\\\n\\\\ndeclare var PushSubscriptionOptions: {\\\\n    prototype: PushSubscriptionOptions;\\\\n    new(): PushSubscriptionOptions;\\\\n};\\\\n\\\\ninterface ReadableByteStreamController {\\\\n    readonly byobRequest: ReadableStreamBYOBRequest | undefined;\\\\n    readonly desiredSize: number | null;\\\\n    close(): void;\\\\n    enqueue(chunk: ArrayBufferView): void;\\\\n    error(error?: any): void;\\\\n}\\\\n\\\\n/** This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object. */\\\\ninterface ReadableStream<R = any> {\\\\n    readonly locked: boolean;\\\\n    cancel(reason?: any): Promise<void>;\\\\n    getReader(options: { mode: \\\\\\\"byob\\\\\\\" }): ReadableStreamBYOBReader;\\\\n    getReader(): ReadableStreamDefaultReader<R>;\\\\n    pipeThrough<T>({ writable, readable }: { writable: WritableStream<R>, readable: ReadableStream<T> }, options?: PipeOptions): ReadableStream<T>;\\\\n    pipeTo(dest: WritableStream<R>, options?: PipeOptions): Promise<void>;\\\\n    tee(): [ReadableStream<R>, ReadableStream<R>];\\\\n}\\\\n\\\\ndeclare var ReadableStream: {\\\\n    prototype: ReadableStream;\\\\n    new(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number, size?: undefined }): ReadableStream<Uint8Array>;\\\\n    new<R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>;\\\\n};\\\\n\\\\ninterface ReadableStreamBYOBReader {\\\\n    readonly closed: Promise<void>;\\\\n    cancel(reason?: any): Promise<void>;\\\\n    read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamReadResult<T>>;\\\\n    releaseLock(): void;\\\\n}\\\\n\\\\ninterface ReadableStreamBYOBRequest {\\\\n    readonly view: ArrayBufferView;\\\\n    respond(bytesWritten: number): void;\\\\n    respondWithNewView(view: ArrayBufferView): void;\\\\n}\\\\n\\\\ninterface ReadableStreamDefaultController<R = any> {\\\\n    readonly desiredSize: number | null;\\\\n    close(): void;\\\\n    enqueue(chunk: R): void;\\\\n    error(error?: any): void;\\\\n}\\\\n\\\\ninterface ReadableStreamDefaultReader<R = any> {\\\\n    readonly closed: Promise<void>;\\\\n    cancel(reason?: any): Promise<void>;\\\\n    read(): Promise<ReadableStreamReadResult<R>>;\\\\n    releaseLock(): void;\\\\n}\\\\n\\\\ninterface ReadableStreamReadResult<T> {\\\\n    done: boolean;\\\\n    value: T;\\\\n}\\\\n\\\\ninterface ReadableStreamReader<R = any> {\\\\n    cancel(): Promise<void>;\\\\n    read(): Promise<ReadableStreamReadResult<R>>;\\\\n    releaseLock(): void;\\\\n}\\\\n\\\\ndeclare var ReadableStreamReader: {\\\\n    prototype: ReadableStreamReader;\\\\n    new(): ReadableStreamReader;\\\\n};\\\\n\\\\n/** This Fetch API interface represents a resource request. */\\\\ninterface Request extends Body {\\\\n    /**\\\\n     * Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\\\\n     */\\\\n    readonly cache: RequestCache;\\\\n    /**\\\\n     * Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\\\\n     */\\\\n    readonly credentials: RequestCredentials;\\\\n    /**\\\\n     * Returns the kind of resource requested by request, e.g., \\\\\\\"document\\\\\\\" or \\\\\\\"script\\\\\\\".\\\\n     */\\\\n    readonly destination: RequestDestination;\\\\n    /**\\\\n     * Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \\\\\\\"Host\\\\\\\" header.\\\\n     */\\\\n    readonly headers: Headers;\\\\n    /**\\\\n     * Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]\\\\n     */\\\\n    readonly integrity: string;\\\\n    /**\\\\n     * Returns a boolean indicating whether or not request is for a history navigation (a.k.a. back-foward navigation).\\\\n     */\\\\n    readonly isHistoryNavigation: boolean;\\\\n    /**\\\\n     * Returns a boolean indicating whether or not request is for a reload navigation.\\\\n     */\\\\n    readonly isReloadNavigation: boolean;\\\\n    /**\\\\n     * Returns a boolean indicating whether or not request can outlive the global in which it was created.\\\\n     */\\\\n    readonly keepalive: boolean;\\\\n    /**\\\\n     * Returns request's HTTP method, which is \\\\\\\"GET\\\\\\\" by default.\\\\n     */\\\\n    readonly method: string;\\\\n    /**\\\\n     * Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\\\\n     */\\\\n    readonly mode: RequestMode;\\\\n    /**\\\\n     * Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\\\\n     */\\\\n    readonly redirect: RequestRedirect;\\\\n    /**\\\\n     * Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \\\\\\\"about:client\\\\\\\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\\\\n     */\\\\n    readonly referrer: string;\\\\n    /**\\\\n     * Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\\\\n     */\\\\n    readonly referrerPolicy: ReferrerPolicy;\\\\n    /**\\\\n     * Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\\\\n     */\\\\n    readonly signal: AbortSignal;\\\\n    /**\\\\n     * Returns the URL of request as a string.\\\\n     */\\\\n    readonly url: string;\\\\n    clone(): Request;\\\\n}\\\\n\\\\ndeclare var Request: {\\\\n    prototype: Request;\\\\n    new(input: RequestInfo, init?: RequestInit): Request;\\\\n};\\\\n\\\\n/** This Fetch API interface represents the response to a request. */\\\\ninterface Response extends Body {\\\\n    readonly headers: Headers;\\\\n    readonly ok: boolean;\\\\n    readonly redirected: boolean;\\\\n    readonly status: number;\\\\n    readonly statusText: string;\\\\n    readonly trailer: Promise<Headers>;\\\\n    readonly type: ResponseType;\\\\n    readonly url: string;\\\\n    clone(): Response;\\\\n}\\\\n\\\\ndeclare var Response: {\\\\n    prototype: Response;\\\\n    new(body?: BodyInit | null, init?: ResponseInit): Response;\\\\n    error(): Response;\\\\n    redirect(url: string, status?: number): Response;\\\\n};\\\\n\\\\ninterface ServiceWorkerEventMap extends AbstractWorkerEventMap {\\\\n    \\\\\\\"statechange\\\\\\\": Event;\\\\n}\\\\n\\\\n/** This ServiceWorker API interface provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object. */\\\\ninterface ServiceWorker extends EventTarget, AbstractWorker {\\\\n    onstatechange: ((this: ServiceWorker, ev: Event) => any) | null;\\\\n    readonly scriptURL: string;\\\\n    readonly state: ServiceWorkerState;\\\\n    postMessage(message: any, transfer: Transferable[]): void;\\\\n    postMessage(message: any, options?: PostMessageOptions): void;\\\\n    addEventListener<K extends keyof ServiceWorkerEventMap>(type: K, listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof ServiceWorkerEventMap>(type: K, listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var ServiceWorker: {\\\\n    prototype: ServiceWorker;\\\\n    new(): ServiceWorker;\\\\n};\\\\n\\\\ninterface ServiceWorkerContainerEventMap {\\\\n    \\\\\\\"controllerchange\\\\\\\": Event;\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n    \\\\\\\"messageerror\\\\\\\": MessageEvent;\\\\n}\\\\n\\\\n/** The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations. */\\\\ninterface ServiceWorkerContainer extends EventTarget {\\\\n    readonly controller: ServiceWorker | null;\\\\n    oncontrollerchange: ((this: ServiceWorkerContainer, ev: Event) => any) | null;\\\\n    onmessage: ((this: ServiceWorkerContainer, ev: MessageEvent) => any) | null;\\\\n    onmessageerror: ((this: ServiceWorkerContainer, ev: MessageEvent) => any) | null;\\\\n    readonly ready: Promise<ServiceWorkerRegistration>;\\\\n    getRegistration(clientURL?: string): Promise<ServiceWorkerRegistration | undefined>;\\\\n    getRegistrations(): Promise<ReadonlyArray<ServiceWorkerRegistration>>;\\\\n    register(scriptURL: string, options?: RegistrationOptions): Promise<ServiceWorkerRegistration>;\\\\n    startMessages(): void;\\\\n    addEventListener<K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var ServiceWorkerContainer: {\\\\n    prototype: ServiceWorkerContainer;\\\\n    new(): ServiceWorkerContainer;\\\\n};\\\\n\\\\ninterface ServiceWorkerGlobalScopeEventMap extends WorkerGlobalScopeEventMap {\\\\n    \\\\\\\"activate\\\\\\\": ExtendableEvent;\\\\n    \\\\\\\"fetch\\\\\\\": FetchEvent;\\\\n    \\\\\\\"install\\\\\\\": ExtendableEvent;\\\\n    \\\\\\\"message\\\\\\\": ExtendableMessageEvent;\\\\n    \\\\\\\"messageerror\\\\\\\": MessageEvent;\\\\n    \\\\\\\"notificationclick\\\\\\\": NotificationEvent;\\\\n    \\\\\\\"notificationclose\\\\\\\": NotificationEvent;\\\\n    \\\\\\\"push\\\\\\\": PushEvent;\\\\n    \\\\\\\"pushsubscriptionchange\\\\\\\": PushSubscriptionChangeEvent;\\\\n    \\\\\\\"sync\\\\\\\": SyncEvent;\\\\n}\\\\n\\\\n/** This ServiceWorker API interface represents the global execution context of a service worker. */\\\\ninterface ServiceWorkerGlobalScope extends WorkerGlobalScope {\\\\n    readonly clients: Clients;\\\\n    onactivate: ((this: ServiceWorkerGlobalScope, ev: ExtendableEvent) => any) | null;\\\\n    onfetch: ((this: ServiceWorkerGlobalScope, ev: FetchEvent) => any) | null;\\\\n    oninstall: ((this: ServiceWorkerGlobalScope, ev: ExtendableEvent) => any) | null;\\\\n    onmessage: ((this: ServiceWorkerGlobalScope, ev: ExtendableMessageEvent) => any) | null;\\\\n    onmessageerror: ((this: ServiceWorkerGlobalScope, ev: MessageEvent) => any) | null;\\\\n    onnotificationclick: ((this: ServiceWorkerGlobalScope, ev: NotificationEvent) => any) | null;\\\\n    onnotificationclose: ((this: ServiceWorkerGlobalScope, ev: NotificationEvent) => any) | null;\\\\n    onpush: ((this: ServiceWorkerGlobalScope, ev: PushEvent) => any) | null;\\\\n    onpushsubscriptionchange: ((this: ServiceWorkerGlobalScope, ev: PushSubscriptionChangeEvent) => any) | null;\\\\n    onsync: ((this: ServiceWorkerGlobalScope, ev: SyncEvent) => any) | null;\\\\n    readonly registration: ServiceWorkerRegistration;\\\\n    skipWaiting(): Promise<void>;\\\\n    addEventListener<K extends keyof ServiceWorkerGlobalScopeEventMap>(type: K, listener: (this: ServiceWorkerGlobalScope, ev: ServiceWorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof ServiceWorkerGlobalScopeEventMap>(type: K, listener: (this: ServiceWorkerGlobalScope, ev: ServiceWorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var ServiceWorkerGlobalScope: {\\\\n    prototype: ServiceWorkerGlobalScope;\\\\n    new(): ServiceWorkerGlobalScope;\\\\n};\\\\n\\\\ninterface ServiceWorkerRegistrationEventMap {\\\\n    \\\\\\\"updatefound\\\\\\\": Event;\\\\n}\\\\n\\\\n/** This ServiceWorker API interface represents the service worker registration. You register a service worker to control one or more pages that share the same origin. */\\\\ninterface ServiceWorkerRegistration extends EventTarget {\\\\n    readonly active: ServiceWorker | null;\\\\n    readonly installing: ServiceWorker | null;\\\\n    readonly navigationPreload: NavigationPreloadManager;\\\\n    onupdatefound: ((this: ServiceWorkerRegistration, ev: Event) => any) | null;\\\\n    readonly pushManager: PushManager;\\\\n    readonly scope: string;\\\\n    readonly sync: SyncManager;\\\\n    readonly updateViaCache: ServiceWorkerUpdateViaCache;\\\\n    readonly waiting: ServiceWorker | null;\\\\n    getNotifications(filter?: GetNotificationOptions): Promise<Notification[]>;\\\\n    showNotification(title: string, options?: NotificationOptions): Promise<void>;\\\\n    unregister(): Promise<boolean>;\\\\n    update(): Promise<void>;\\\\n    addEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type: K, listener: (this: ServiceWorkerRegistration, ev: ServiceWorkerRegistrationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type: K, listener: (this: ServiceWorkerRegistration, ev: ServiceWorkerRegistrationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var ServiceWorkerRegistration: {\\\\n    prototype: ServiceWorkerRegistration;\\\\n    new(): ServiceWorkerRegistration;\\\\n};\\\\n\\\\ninterface StorageManager {\\\\n    estimate(): Promise<StorageEstimate>;\\\\n    persisted(): Promise<boolean>;\\\\n}\\\\n\\\\ndeclare var StorageManager: {\\\\n    prototype: StorageManager;\\\\n    new(): StorageManager;\\\\n};\\\\n\\\\n/** This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto). */\\\\ninterface SubtleCrypto {\\\\n    decrypt(algorithm: string | RsaOaepParams | AesCtrParams | AesCbcParams | AesCmacParams | AesGcmParams | AesCfbParams, key: CryptoKey, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>;\\\\n    deriveBits(algorithm: string | EcdhKeyDeriveParams | DhKeyDeriveParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, baseKey: CryptoKey, length: number): PromiseLike<ArrayBuffer>;\\\\n    deriveKey(algorithm: string | EcdhKeyDeriveParams | DhKeyDeriveParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: string | AesDerivedKeyParams | HmacImportParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\\\\n    digest(algorithm: string | Algorithm, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>;\\\\n    encrypt(algorithm: string | RsaOaepParams | AesCtrParams | AesCbcParams | AesCmacParams | AesGcmParams | AesCfbParams, key: CryptoKey, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>;\\\\n    exportKey(format: \\\\\\\"jwk\\\\\\\", key: CryptoKey): PromiseLike<JsonWebKey>;\\\\n    exportKey(format: \\\\\\\"raw\\\\\\\" | \\\\\\\"pkcs8\\\\\\\" | \\\\\\\"spki\\\\\\\", key: CryptoKey): PromiseLike<ArrayBuffer>;\\\\n    exportKey(format: string, key: CryptoKey): PromiseLike<JsonWebKey | ArrayBuffer>;\\\\n    generateKey(algorithm: string, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair | CryptoKey>;\\\\n    generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams | DhKeyGenParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair>;\\\\n    generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\\\\n    importKey(format: \\\\\\\"jwk\\\\\\\", keyData: JsonWebKey, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams | AesKeyAlgorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\\\\n    importKey(format: \\\\\\\"raw\\\\\\\" | \\\\\\\"pkcs8\\\\\\\" | \\\\\\\"spki\\\\\\\", keyData: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams | AesKeyAlgorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\\\\n    importKey(format: string, keyData: JsonWebKey | Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams | AesKeyAlgorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\\\\n    sign(algorithm: string | RsaPssParams | EcdsaParams | AesCmacParams, key: CryptoKey, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>;\\\\n    unwrapKey(format: string, wrappedKey: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, unwrappingKey: CryptoKey, unwrapAlgorithm: string | Algorithm, unwrappedKeyAlgorithm: string | Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\\\\n    verify(algorithm: string | RsaPssParams | EcdsaParams | AesCmacParams, key: CryptoKey, signature: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<boolean>;\\\\n    wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: string | Algorithm): PromiseLike<ArrayBuffer>;\\\\n}\\\\n\\\\ndeclare var SubtleCrypto: {\\\\n    prototype: SubtleCrypto;\\\\n    new(): SubtleCrypto;\\\\n};\\\\n\\\\n/** A sync action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.  */\\\\ninterface SyncEvent extends ExtendableEvent {\\\\n    readonly lastChance: boolean;\\\\n    readonly tag: string;\\\\n}\\\\n\\\\ndeclare var SyncEvent: {\\\\n    prototype: SyncEvent;\\\\n    new(type: string, init: SyncEventInit): SyncEvent;\\\\n};\\\\n\\\\n/** This ServiceWorker API interface provides an interface for registering and listing sync registrations. */\\\\ninterface SyncManager {\\\\n    getTags(): Promise<string[]>;\\\\n    register(tag: string): Promise<void>;\\\\n}\\\\n\\\\ndeclare var SyncManager: {\\\\n    prototype: SyncManager;\\\\n    new(): SyncManager;\\\\n};\\\\n\\\\n/** A decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, etc. A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays. */\\\\ninterface TextDecoder extends TextDecoderCommon {\\\\n    /**\\\\n     * Returns the result of running encoding's decoder. The method can be invoked zero or more times with options's stream set to true, and then once without options's stream (or set to false), to process a fragmented stream. If the invocation without options's stream (or set to false) has no input, it's clearest to omit both arguments.\\\\n     * \\\\n     * ```\\\\n     * var string = \\\\\\\"\\\\\\\", decoder = new TextDecoder(encoding), buffer;\\\\n     * while(buffer = next_chunk()) {\\\\n     *   string += decoder.decode(buffer, {stream:true});\\\\n     * }\\\\n     * string += decoder.decode(); // end-of-stream\\\\n     * ```\\\\n     * \\\\n     * If the error mode is \\\\\\\"fatal\\\\\\\" and encoding's decoder returns error, throws a TypeError.\\\\n     */\\\\n    decode(input?: BufferSource, options?: TextDecodeOptions): string;\\\\n}\\\\n\\\\ndeclare var TextDecoder: {\\\\n    prototype: TextDecoder;\\\\n    new(label?: string, options?: TextDecoderOptions): TextDecoder;\\\\n};\\\\n\\\\ninterface TextDecoderCommon {\\\\n    /**\\\\n     * Returns encoding's name, lowercased.\\\\n     */\\\\n    readonly encoding: string;\\\\n    /**\\\\n     * Returns true if error mode is \\\\\\\"fatal\\\\\\\", and false otherwise.\\\\n     */\\\\n    readonly fatal: boolean;\\\\n    /**\\\\n     * Returns true if ignore BOM flag is set, and false otherwise.\\\\n     */\\\\n    readonly ignoreBOM: boolean;\\\\n}\\\\n\\\\ninterface TextDecoderStream extends TextDecoderCommon, GenericTransformStream {\\\\n}\\\\n\\\\ndeclare var TextDecoderStream: {\\\\n    prototype: TextDecoderStream;\\\\n    new(label?: string, options?: TextDecoderOptions): TextDecoderStream;\\\\n};\\\\n\\\\n/** TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays. */\\\\ninterface TextEncoder extends TextEncoderCommon {\\\\n    /**\\\\n     * Returns the result of running UTF-8's encoder.\\\\n     */\\\\n    encode(input?: string): Uint8Array;\\\\n    /**\\\\n     * Runs the UTF-8 encoder on source, stores the result of that operation into destination, and returns the progress made as a dictionary whereby read is the number of converted code units of source and written is the number of bytes modified in destination.\\\\n     */\\\\n    encodeInto(source: string, destination: Uint8Array): TextEncoderEncodeIntoResult;\\\\n}\\\\n\\\\ndeclare var TextEncoder: {\\\\n    prototype: TextEncoder;\\\\n    new(): TextEncoder;\\\\n};\\\\n\\\\ninterface TextEncoderCommon {\\\\n    /**\\\\n     * Returns \\\\\\\"utf-8\\\\\\\".\\\\n     */\\\\n    readonly encoding: string;\\\\n}\\\\n\\\\ninterface TextEncoderStream extends TextEncoderCommon, GenericTransformStream {\\\\n}\\\\n\\\\ndeclare var TextEncoderStream: {\\\\n    prototype: TextEncoderStream;\\\\n    new(): TextEncoderStream;\\\\n};\\\\n\\\\n/** The dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method. */\\\\ninterface TextMetrics {\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly actualBoundingBoxAscent: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly actualBoundingBoxDescent: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly actualBoundingBoxLeft: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly actualBoundingBoxRight: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly alphabeticBaseline: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly emHeightAscent: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly emHeightDescent: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly fontBoundingBoxAscent: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly fontBoundingBoxDescent: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly hangingBaseline: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly ideographicBaseline: number;\\\\n    /**\\\\n     * Returns the measurement described below.\\\\n     */\\\\n    readonly width: number;\\\\n}\\\\n\\\\ndeclare var TextMetrics: {\\\\n    prototype: TextMetrics;\\\\n    new(): TextMetrics;\\\\n};\\\\n\\\\ninterface TransformStream<I = any, O = any> {\\\\n    readonly readable: ReadableStream<O>;\\\\n    readonly writable: WritableStream<I>;\\\\n}\\\\n\\\\ndeclare var TransformStream: {\\\\n    prototype: TransformStream;\\\\n    new<I = any, O = any>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>;\\\\n};\\\\n\\\\ninterface TransformStreamDefaultController<O = any> {\\\\n    readonly desiredSize: number | null;\\\\n    enqueue(chunk: O): void;\\\\n    error(reason?: any): void;\\\\n    terminate(): void;\\\\n}\\\\n\\\\n/** The URL interface represents an object providing static methods used for creating object URLs. */\\\\ninterface URL {\\\\n    hash: string;\\\\n    host: string;\\\\n    hostname: string;\\\\n    href: string;\\\\n    readonly origin: string;\\\\n    password: string;\\\\n    pathname: string;\\\\n    port: string;\\\\n    protocol: string;\\\\n    search: string;\\\\n    readonly searchParams: URLSearchParams;\\\\n    username: string;\\\\n    toJSON(): string;\\\\n}\\\\n\\\\ndeclare var URL: {\\\\n    prototype: URL;\\\\n    new(url: string, base?: string | URL): URL;\\\\n    createObjectURL(object: any): string;\\\\n    revokeObjectURL(url: string): void;\\\\n};\\\\n\\\\ninterface URLSearchParams {\\\\n    /**\\\\n     * Appends a specified key/value pair as a new search parameter.\\\\n     */\\\\n    append(name: string, value: string): void;\\\\n    /**\\\\n     * Deletes the given search parameter, and its associated value, from the list of all search parameters.\\\\n     */\\\\n    delete(name: string): void;\\\\n    /**\\\\n     * Returns the first value associated to the given search parameter.\\\\n     */\\\\n    get(name: string): string | null;\\\\n    /**\\\\n     * Returns all the values association with a given search parameter.\\\\n     */\\\\n    getAll(name: string): string[];\\\\n    /**\\\\n     * Returns a Boolean indicating if such a search parameter exists.\\\\n     */\\\\n    has(name: string): boolean;\\\\n    /**\\\\n     * Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.\\\\n     */\\\\n    set(name: string, value: string): void;\\\\n    sort(): void;\\\\n    forEach(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any): void;\\\\n}\\\\n\\\\ndeclare var URLSearchParams: {\\\\n    prototype: URLSearchParams;\\\\n    new(init?: string[][] | Record<string, string> | string | URLSearchParams): URLSearchParams;\\\\n};\\\\n\\\\ninterface WEBGL_color_buffer_float {\\\\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: GLenum;\\\\n    readonly RGBA32F_EXT: GLenum;\\\\n    readonly UNSIGNED_NORMALIZED_EXT: GLenum;\\\\n}\\\\n\\\\ninterface WEBGL_compressed_texture_astc {\\\\n    getSupportedProfiles(): string[];\\\\n    readonly COMPRESSED_RGBA_ASTC_10x10_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_10x5_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_10x6_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_10x8_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_12x10_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_12x12_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_4x4_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_5x4_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_5x5_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_6x5_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_6x6_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_8x5_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_8x6_KHR: GLenum;\\\\n    readonly COMPRESSED_RGBA_ASTC_8x8_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: GLenum;\\\\n    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: GLenum;\\\\n}\\\\n\\\\n/** The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats. */\\\\ninterface WEBGL_compressed_texture_s3tc {\\\\n    readonly COMPRESSED_RGBA_S3TC_DXT1_EXT: GLenum;\\\\n    readonly COMPRESSED_RGBA_S3TC_DXT3_EXT: GLenum;\\\\n    readonly COMPRESSED_RGBA_S3TC_DXT5_EXT: GLenum;\\\\n    readonly COMPRESSED_RGB_S3TC_DXT1_EXT: GLenum;\\\\n}\\\\n\\\\ninterface WEBGL_compressed_texture_s3tc_srgb {\\\\n    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: GLenum;\\\\n    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: GLenum;\\\\n    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: GLenum;\\\\n    readonly COMPRESSED_SRGB_S3TC_DXT1_EXT: GLenum;\\\\n}\\\\n\\\\n/** The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes. */\\\\ninterface WEBGL_debug_renderer_info {\\\\n    readonly UNMASKED_RENDERER_WEBGL: GLenum;\\\\n    readonly UNMASKED_VENDOR_WEBGL: GLenum;\\\\n}\\\\n\\\\ninterface WEBGL_debug_shaders {\\\\n    getTranslatedShaderSource(shader: WebGLShader): string;\\\\n}\\\\n\\\\n/** The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures. */\\\\ninterface WEBGL_depth_texture {\\\\n    readonly UNSIGNED_INT_24_8_WEBGL: GLenum;\\\\n}\\\\n\\\\ninterface WEBGL_draw_buffers {\\\\n    drawBuffersWEBGL(buffers: GLenum[]): void;\\\\n    readonly COLOR_ATTACHMENT0_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT10_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT11_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT12_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT13_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT14_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT15_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT1_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT2_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT3_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT4_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT5_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT6_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT7_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT8_WEBGL: GLenum;\\\\n    readonly COLOR_ATTACHMENT9_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER0_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER10_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER11_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER12_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER13_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER14_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER15_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER1_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER2_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER3_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER4_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER5_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER6_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER7_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER8_WEBGL: GLenum;\\\\n    readonly DRAW_BUFFER9_WEBGL: GLenum;\\\\n    readonly MAX_COLOR_ATTACHMENTS_WEBGL: GLenum;\\\\n    readonly MAX_DRAW_BUFFERS_WEBGL: GLenum;\\\\n}\\\\n\\\\ninterface WEBGL_lose_context {\\\\n    loseContext(): void;\\\\n    restoreContext(): void;\\\\n}\\\\n\\\\ninterface WebGL2RenderingContext extends WebGLRenderingContextBase, WebGL2RenderingContextBase, WebGL2RenderingContextOverloads {\\\\n}\\\\n\\\\ndeclare var WebGL2RenderingContext: {\\\\n    prototype: WebGL2RenderingContext;\\\\n    new(): WebGL2RenderingContext;\\\\n    readonly ACTIVE_ATTRIBUTES: GLenum;\\\\n    readonly ACTIVE_TEXTURE: GLenum;\\\\n    readonly ACTIVE_UNIFORMS: GLenum;\\\\n    readonly ALIASED_LINE_WIDTH_RANGE: GLenum;\\\\n    readonly ALIASED_POINT_SIZE_RANGE: GLenum;\\\\n    readonly ALPHA: GLenum;\\\\n    readonly ALPHA_BITS: GLenum;\\\\n    readonly ALWAYS: GLenum;\\\\n    readonly ARRAY_BUFFER: GLenum;\\\\n    readonly ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly ATTACHED_SHADERS: GLenum;\\\\n    readonly BACK: GLenum;\\\\n    readonly BLEND: GLenum;\\\\n    readonly BLEND_COLOR: GLenum;\\\\n    readonly BLEND_DST_ALPHA: GLenum;\\\\n    readonly BLEND_DST_RGB: GLenum;\\\\n    readonly BLEND_EQUATION: GLenum;\\\\n    readonly BLEND_EQUATION_ALPHA: GLenum;\\\\n    readonly BLEND_EQUATION_RGB: GLenum;\\\\n    readonly BLEND_SRC_ALPHA: GLenum;\\\\n    readonly BLEND_SRC_RGB: GLenum;\\\\n    readonly BLUE_BITS: GLenum;\\\\n    readonly BOOL: GLenum;\\\\n    readonly BOOL_VEC2: GLenum;\\\\n    readonly BOOL_VEC3: GLenum;\\\\n    readonly BOOL_VEC4: GLenum;\\\\n    readonly BROWSER_DEFAULT_WEBGL: GLenum;\\\\n    readonly BUFFER_SIZE: GLenum;\\\\n    readonly BUFFER_USAGE: GLenum;\\\\n    readonly BYTE: GLenum;\\\\n    readonly CCW: GLenum;\\\\n    readonly CLAMP_TO_EDGE: GLenum;\\\\n    readonly COLOR_ATTACHMENT0: GLenum;\\\\n    readonly COLOR_BUFFER_BIT: GLenum;\\\\n    readonly COLOR_CLEAR_VALUE: GLenum;\\\\n    readonly COLOR_WRITEMASK: GLenum;\\\\n    readonly COMPILE_STATUS: GLenum;\\\\n    readonly COMPRESSED_TEXTURE_FORMATS: GLenum;\\\\n    readonly CONSTANT_ALPHA: GLenum;\\\\n    readonly CONSTANT_COLOR: GLenum;\\\\n    readonly CONTEXT_LOST_WEBGL: GLenum;\\\\n    readonly CULL_FACE: GLenum;\\\\n    readonly CULL_FACE_MODE: GLenum;\\\\n    readonly CURRENT_PROGRAM: GLenum;\\\\n    readonly CURRENT_VERTEX_ATTRIB: GLenum;\\\\n    readonly CW: GLenum;\\\\n    readonly DECR: GLenum;\\\\n    readonly DECR_WRAP: GLenum;\\\\n    readonly DELETE_STATUS: GLenum;\\\\n    readonly DEPTH_ATTACHMENT: GLenum;\\\\n    readonly DEPTH_BITS: GLenum;\\\\n    readonly DEPTH_BUFFER_BIT: GLenum;\\\\n    readonly DEPTH_CLEAR_VALUE: GLenum;\\\\n    readonly DEPTH_COMPONENT: GLenum;\\\\n    readonly DEPTH_COMPONENT16: GLenum;\\\\n    readonly DEPTH_FUNC: GLenum;\\\\n    readonly DEPTH_RANGE: GLenum;\\\\n    readonly DEPTH_STENCIL: GLenum;\\\\n    readonly DEPTH_STENCIL_ATTACHMENT: GLenum;\\\\n    readonly DEPTH_TEST: GLenum;\\\\n    readonly DEPTH_WRITEMASK: GLenum;\\\\n    readonly DITHER: GLenum;\\\\n    readonly DONT_CARE: GLenum;\\\\n    readonly DST_ALPHA: GLenum;\\\\n    readonly DST_COLOR: GLenum;\\\\n    readonly DYNAMIC_DRAW: GLenum;\\\\n    readonly ELEMENT_ARRAY_BUFFER: GLenum;\\\\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly EQUAL: GLenum;\\\\n    readonly FASTEST: GLenum;\\\\n    readonly FLOAT: GLenum;\\\\n    readonly FLOAT_MAT2: GLenum;\\\\n    readonly FLOAT_MAT3: GLenum;\\\\n    readonly FLOAT_MAT4: GLenum;\\\\n    readonly FLOAT_VEC2: GLenum;\\\\n    readonly FLOAT_VEC3: GLenum;\\\\n    readonly FLOAT_VEC4: GLenum;\\\\n    readonly FRAGMENT_SHADER: GLenum;\\\\n    readonly FRAMEBUFFER: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;\\\\n    readonly FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly FRAMEBUFFER_COMPLETE: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;\\\\n    readonly FRAMEBUFFER_UNSUPPORTED: GLenum;\\\\n    readonly FRONT: GLenum;\\\\n    readonly FRONT_AND_BACK: GLenum;\\\\n    readonly FRONT_FACE: GLenum;\\\\n    readonly FUNC_ADD: GLenum;\\\\n    readonly FUNC_REVERSE_SUBTRACT: GLenum;\\\\n    readonly FUNC_SUBTRACT: GLenum;\\\\n    readonly GENERATE_MIPMAP_HINT: GLenum;\\\\n    readonly GEQUAL: GLenum;\\\\n    readonly GREATER: GLenum;\\\\n    readonly GREEN_BITS: GLenum;\\\\n    readonly HIGH_FLOAT: GLenum;\\\\n    readonly HIGH_INT: GLenum;\\\\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;\\\\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: GLenum;\\\\n    readonly INCR: GLenum;\\\\n    readonly INCR_WRAP: GLenum;\\\\n    readonly INT: GLenum;\\\\n    readonly INT_VEC2: GLenum;\\\\n    readonly INT_VEC3: GLenum;\\\\n    readonly INT_VEC4: GLenum;\\\\n    readonly INVALID_ENUM: GLenum;\\\\n    readonly INVALID_FRAMEBUFFER_OPERATION: GLenum;\\\\n    readonly INVALID_OPERATION: GLenum;\\\\n    readonly INVALID_VALUE: GLenum;\\\\n    readonly INVERT: GLenum;\\\\n    readonly KEEP: GLenum;\\\\n    readonly LEQUAL: GLenum;\\\\n    readonly LESS: GLenum;\\\\n    readonly LINEAR: GLenum;\\\\n    readonly LINEAR_MIPMAP_LINEAR: GLenum;\\\\n    readonly LINEAR_MIPMAP_NEAREST: GLenum;\\\\n    readonly LINES: GLenum;\\\\n    readonly LINE_LOOP: GLenum;\\\\n    readonly LINE_STRIP: GLenum;\\\\n    readonly LINE_WIDTH: GLenum;\\\\n    readonly LINK_STATUS: GLenum;\\\\n    readonly LOW_FLOAT: GLenum;\\\\n    readonly LOW_INT: GLenum;\\\\n    readonly LUMINANCE: GLenum;\\\\n    readonly LUMINANCE_ALPHA: GLenum;\\\\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;\\\\n    readonly MAX_RENDERBUFFER_SIZE: GLenum;\\\\n    readonly MAX_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_VARYING_VECTORS: GLenum;\\\\n    readonly MAX_VERTEX_ATTRIBS: GLenum;\\\\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_VECTORS: GLenum;\\\\n    readonly MAX_VIEWPORT_DIMS: GLenum;\\\\n    readonly MEDIUM_FLOAT: GLenum;\\\\n    readonly MEDIUM_INT: GLenum;\\\\n    readonly MIRRORED_REPEAT: GLenum;\\\\n    readonly NEAREST: GLenum;\\\\n    readonly NEAREST_MIPMAP_LINEAR: GLenum;\\\\n    readonly NEAREST_MIPMAP_NEAREST: GLenum;\\\\n    readonly NEVER: GLenum;\\\\n    readonly NICEST: GLenum;\\\\n    readonly NONE: GLenum;\\\\n    readonly NOTEQUAL: GLenum;\\\\n    readonly NO_ERROR: GLenum;\\\\n    readonly ONE: GLenum;\\\\n    readonly ONE_MINUS_CONSTANT_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_CONSTANT_COLOR: GLenum;\\\\n    readonly ONE_MINUS_DST_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_DST_COLOR: GLenum;\\\\n    readonly ONE_MINUS_SRC_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_SRC_COLOR: GLenum;\\\\n    readonly OUT_OF_MEMORY: GLenum;\\\\n    readonly PACK_ALIGNMENT: GLenum;\\\\n    readonly POINTS: GLenum;\\\\n    readonly POLYGON_OFFSET_FACTOR: GLenum;\\\\n    readonly POLYGON_OFFSET_FILL: GLenum;\\\\n    readonly POLYGON_OFFSET_UNITS: GLenum;\\\\n    readonly RED_BITS: GLenum;\\\\n    readonly RENDERBUFFER: GLenum;\\\\n    readonly RENDERBUFFER_ALPHA_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_BINDING: GLenum;\\\\n    readonly RENDERBUFFER_BLUE_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_DEPTH_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_GREEN_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_HEIGHT: GLenum;\\\\n    readonly RENDERBUFFER_INTERNAL_FORMAT: GLenum;\\\\n    readonly RENDERBUFFER_RED_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_STENCIL_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_WIDTH: GLenum;\\\\n    readonly RENDERER: GLenum;\\\\n    readonly REPEAT: GLenum;\\\\n    readonly REPLACE: GLenum;\\\\n    readonly RGB: GLenum;\\\\n    readonly RGB565: GLenum;\\\\n    readonly RGB5_A1: GLenum;\\\\n    readonly RGBA: GLenum;\\\\n    readonly RGBA4: GLenum;\\\\n    readonly SAMPLER_2D: GLenum;\\\\n    readonly SAMPLER_CUBE: GLenum;\\\\n    readonly SAMPLES: GLenum;\\\\n    readonly SAMPLE_ALPHA_TO_COVERAGE: GLenum;\\\\n    readonly SAMPLE_BUFFERS: GLenum;\\\\n    readonly SAMPLE_COVERAGE: GLenum;\\\\n    readonly SAMPLE_COVERAGE_INVERT: GLenum;\\\\n    readonly SAMPLE_COVERAGE_VALUE: GLenum;\\\\n    readonly SCISSOR_BOX: GLenum;\\\\n    readonly SCISSOR_TEST: GLenum;\\\\n    readonly SHADER_TYPE: GLenum;\\\\n    readonly SHADING_LANGUAGE_VERSION: GLenum;\\\\n    readonly SHORT: GLenum;\\\\n    readonly SRC_ALPHA: GLenum;\\\\n    readonly SRC_ALPHA_SATURATE: GLenum;\\\\n    readonly SRC_COLOR: GLenum;\\\\n    readonly STATIC_DRAW: GLenum;\\\\n    readonly STENCIL_ATTACHMENT: GLenum;\\\\n    readonly STENCIL_BACK_FAIL: GLenum;\\\\n    readonly STENCIL_BACK_FUNC: GLenum;\\\\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;\\\\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: GLenum;\\\\n    readonly STENCIL_BACK_REF: GLenum;\\\\n    readonly STENCIL_BACK_VALUE_MASK: GLenum;\\\\n    readonly STENCIL_BACK_WRITEMASK: GLenum;\\\\n    readonly STENCIL_BITS: GLenum;\\\\n    readonly STENCIL_BUFFER_BIT: GLenum;\\\\n    readonly STENCIL_CLEAR_VALUE: GLenum;\\\\n    readonly STENCIL_FAIL: GLenum;\\\\n    readonly STENCIL_FUNC: GLenum;\\\\n    readonly STENCIL_INDEX8: GLenum;\\\\n    readonly STENCIL_PASS_DEPTH_FAIL: GLenum;\\\\n    readonly STENCIL_PASS_DEPTH_PASS: GLenum;\\\\n    readonly STENCIL_REF: GLenum;\\\\n    readonly STENCIL_TEST: GLenum;\\\\n    readonly STENCIL_VALUE_MASK: GLenum;\\\\n    readonly STENCIL_WRITEMASK: GLenum;\\\\n    readonly STREAM_DRAW: GLenum;\\\\n    readonly SUBPIXEL_BITS: GLenum;\\\\n    readonly TEXTURE: GLenum;\\\\n    readonly TEXTURE0: GLenum;\\\\n    readonly TEXTURE1: GLenum;\\\\n    readonly TEXTURE10: GLenum;\\\\n    readonly TEXTURE11: GLenum;\\\\n    readonly TEXTURE12: GLenum;\\\\n    readonly TEXTURE13: GLenum;\\\\n    readonly TEXTURE14: GLenum;\\\\n    readonly TEXTURE15: GLenum;\\\\n    readonly TEXTURE16: GLenum;\\\\n    readonly TEXTURE17: GLenum;\\\\n    readonly TEXTURE18: GLenum;\\\\n    readonly TEXTURE19: GLenum;\\\\n    readonly TEXTURE2: GLenum;\\\\n    readonly TEXTURE20: GLenum;\\\\n    readonly TEXTURE21: GLenum;\\\\n    readonly TEXTURE22: GLenum;\\\\n    readonly TEXTURE23: GLenum;\\\\n    readonly TEXTURE24: GLenum;\\\\n    readonly TEXTURE25: GLenum;\\\\n    readonly TEXTURE26: GLenum;\\\\n    readonly TEXTURE27: GLenum;\\\\n    readonly TEXTURE28: GLenum;\\\\n    readonly TEXTURE29: GLenum;\\\\n    readonly TEXTURE3: GLenum;\\\\n    readonly TEXTURE30: GLenum;\\\\n    readonly TEXTURE31: GLenum;\\\\n    readonly TEXTURE4: GLenum;\\\\n    readonly TEXTURE5: GLenum;\\\\n    readonly TEXTURE6: GLenum;\\\\n    readonly TEXTURE7: GLenum;\\\\n    readonly TEXTURE8: GLenum;\\\\n    readonly TEXTURE9: GLenum;\\\\n    readonly TEXTURE_2D: GLenum;\\\\n    readonly TEXTURE_BINDING_2D: GLenum;\\\\n    readonly TEXTURE_BINDING_CUBE_MAP: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;\\\\n    readonly TEXTURE_MAG_FILTER: GLenum;\\\\n    readonly TEXTURE_MIN_FILTER: GLenum;\\\\n    readonly TEXTURE_WRAP_S: GLenum;\\\\n    readonly TEXTURE_WRAP_T: GLenum;\\\\n    readonly TRIANGLES: GLenum;\\\\n    readonly TRIANGLE_FAN: GLenum;\\\\n    readonly TRIANGLE_STRIP: GLenum;\\\\n    readonly UNPACK_ALIGNMENT: GLenum;\\\\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;\\\\n    readonly UNPACK_FLIP_Y_WEBGL: GLenum;\\\\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;\\\\n    readonly UNSIGNED_BYTE: GLenum;\\\\n    readonly UNSIGNED_INT: GLenum;\\\\n    readonly UNSIGNED_SHORT: GLenum;\\\\n    readonly UNSIGNED_SHORT_4_4_4_4: GLenum;\\\\n    readonly UNSIGNED_SHORT_5_5_5_1: GLenum;\\\\n    readonly UNSIGNED_SHORT_5_6_5: GLenum;\\\\n    readonly VALIDATE_STATUS: GLenum;\\\\n    readonly VENDOR: GLenum;\\\\n    readonly VERSION: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: GLenum;\\\\n    readonly VERTEX_SHADER: GLenum;\\\\n    readonly VIEWPORT: GLenum;\\\\n    readonly ZERO: GLenum;\\\\n    readonly ACTIVE_UNIFORM_BLOCKS: GLenum;\\\\n    readonly ALREADY_SIGNALED: GLenum;\\\\n    readonly ANY_SAMPLES_PASSED: GLenum;\\\\n    readonly ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum;\\\\n    readonly COLOR: GLenum;\\\\n    readonly COLOR_ATTACHMENT1: GLenum;\\\\n    readonly COLOR_ATTACHMENT10: GLenum;\\\\n    readonly COLOR_ATTACHMENT11: GLenum;\\\\n    readonly COLOR_ATTACHMENT12: GLenum;\\\\n    readonly COLOR_ATTACHMENT13: GLenum;\\\\n    readonly COLOR_ATTACHMENT14: GLenum;\\\\n    readonly COLOR_ATTACHMENT15: GLenum;\\\\n    readonly COLOR_ATTACHMENT2: GLenum;\\\\n    readonly COLOR_ATTACHMENT3: GLenum;\\\\n    readonly COLOR_ATTACHMENT4: GLenum;\\\\n    readonly COLOR_ATTACHMENT5: GLenum;\\\\n    readonly COLOR_ATTACHMENT6: GLenum;\\\\n    readonly COLOR_ATTACHMENT7: GLenum;\\\\n    readonly COLOR_ATTACHMENT8: GLenum;\\\\n    readonly COLOR_ATTACHMENT9: GLenum;\\\\n    readonly COMPARE_REF_TO_TEXTURE: GLenum;\\\\n    readonly CONDITION_SATISFIED: GLenum;\\\\n    readonly COPY_READ_BUFFER: GLenum;\\\\n    readonly COPY_READ_BUFFER_BINDING: GLenum;\\\\n    readonly COPY_WRITE_BUFFER: GLenum;\\\\n    readonly COPY_WRITE_BUFFER_BINDING: GLenum;\\\\n    readonly CURRENT_QUERY: GLenum;\\\\n    readonly DEPTH: GLenum;\\\\n    readonly DEPTH24_STENCIL8: GLenum;\\\\n    readonly DEPTH32F_STENCIL8: GLenum;\\\\n    readonly DEPTH_COMPONENT24: GLenum;\\\\n    readonly DEPTH_COMPONENT32F: GLenum;\\\\n    readonly DRAW_BUFFER0: GLenum;\\\\n    readonly DRAW_BUFFER1: GLenum;\\\\n    readonly DRAW_BUFFER10: GLenum;\\\\n    readonly DRAW_BUFFER11: GLenum;\\\\n    readonly DRAW_BUFFER12: GLenum;\\\\n    readonly DRAW_BUFFER13: GLenum;\\\\n    readonly DRAW_BUFFER14: GLenum;\\\\n    readonly DRAW_BUFFER15: GLenum;\\\\n    readonly DRAW_BUFFER2: GLenum;\\\\n    readonly DRAW_BUFFER3: GLenum;\\\\n    readonly DRAW_BUFFER4: GLenum;\\\\n    readonly DRAW_BUFFER5: GLenum;\\\\n    readonly DRAW_BUFFER6: GLenum;\\\\n    readonly DRAW_BUFFER7: GLenum;\\\\n    readonly DRAW_BUFFER8: GLenum;\\\\n    readonly DRAW_BUFFER9: GLenum;\\\\n    readonly DRAW_FRAMEBUFFER: GLenum;\\\\n    readonly DRAW_FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly DYNAMIC_COPY: GLenum;\\\\n    readonly DYNAMIC_READ: GLenum;\\\\n    readonly FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum;\\\\n    readonly FLOAT_MAT2x3: GLenum;\\\\n    readonly FLOAT_MAT2x4: GLenum;\\\\n    readonly FLOAT_MAT3x2: GLenum;\\\\n    readonly FLOAT_MAT3x4: GLenum;\\\\n    readonly FLOAT_MAT4x2: GLenum;\\\\n    readonly FLOAT_MAT4x3: GLenum;\\\\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum;\\\\n    readonly FRAMEBUFFER_DEFAULT: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum;\\\\n    readonly HALF_FLOAT: GLenum;\\\\n    readonly INTERLEAVED_ATTRIBS: GLenum;\\\\n    readonly INT_2_10_10_10_REV: GLenum;\\\\n    readonly INT_SAMPLER_2D: GLenum;\\\\n    readonly INT_SAMPLER_2D_ARRAY: GLenum;\\\\n    readonly INT_SAMPLER_3D: GLenum;\\\\n    readonly INT_SAMPLER_CUBE: GLenum;\\\\n    readonly INVALID_INDEX: GLenum;\\\\n    readonly MAX: GLenum;\\\\n    readonly MAX_3D_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_ARRAY_TEXTURE_LAYERS: GLenum;\\\\n    readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: GLenum;\\\\n    readonly MAX_COLOR_ATTACHMENTS: GLenum;\\\\n    readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MAX_COMBINED_UNIFORM_BLOCKS: GLenum;\\\\n    readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MAX_DRAW_BUFFERS: GLenum;\\\\n    readonly MAX_ELEMENTS_INDICES: GLenum;\\\\n    readonly MAX_ELEMENTS_VERTICES: GLenum;\\\\n    readonly MAX_ELEMENT_INDEX: GLenum;\\\\n    readonly MAX_FRAGMENT_INPUT_COMPONENTS: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MAX_PROGRAM_TEXEL_OFFSET: GLenum;\\\\n    readonly MAX_SAMPLES: GLenum;\\\\n    readonly MAX_SERVER_WAIT_TIMEOUT: GLenum;\\\\n    readonly MAX_TEXTURE_LOD_BIAS: GLenum;\\\\n    readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum;\\\\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum;\\\\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum;\\\\n    readonly MAX_UNIFORM_BLOCK_SIZE: GLenum;\\\\n    readonly MAX_UNIFORM_BUFFER_BINDINGS: GLenum;\\\\n    readonly MAX_VARYING_COMPONENTS: GLenum;\\\\n    readonly MAX_VERTEX_OUTPUT_COMPONENTS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_BLOCKS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MIN: GLenum;\\\\n    readonly MIN_PROGRAM_TEXEL_OFFSET: GLenum;\\\\n    readonly OBJECT_TYPE: GLenum;\\\\n    readonly PACK_ROW_LENGTH: GLenum;\\\\n    readonly PACK_SKIP_PIXELS: GLenum;\\\\n    readonly PACK_SKIP_ROWS: GLenum;\\\\n    readonly PIXEL_PACK_BUFFER: GLenum;\\\\n    readonly PIXEL_PACK_BUFFER_BINDING: GLenum;\\\\n    readonly PIXEL_UNPACK_BUFFER: GLenum;\\\\n    readonly PIXEL_UNPACK_BUFFER_BINDING: GLenum;\\\\n    readonly QUERY_RESULT: GLenum;\\\\n    readonly QUERY_RESULT_AVAILABLE: GLenum;\\\\n    readonly R11F_G11F_B10F: GLenum;\\\\n    readonly R16F: GLenum;\\\\n    readonly R16I: GLenum;\\\\n    readonly R16UI: GLenum;\\\\n    readonly R32F: GLenum;\\\\n    readonly R32I: GLenum;\\\\n    readonly R32UI: GLenum;\\\\n    readonly R8: GLenum;\\\\n    readonly R8I: GLenum;\\\\n    readonly R8UI: GLenum;\\\\n    readonly R8_SNORM: GLenum;\\\\n    readonly RASTERIZER_DISCARD: GLenum;\\\\n    readonly READ_BUFFER: GLenum;\\\\n    readonly READ_FRAMEBUFFER: GLenum;\\\\n    readonly READ_FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly RED: GLenum;\\\\n    readonly RED_INTEGER: GLenum;\\\\n    readonly RENDERBUFFER_SAMPLES: GLenum;\\\\n    readonly RG: GLenum;\\\\n    readonly RG16F: GLenum;\\\\n    readonly RG16I: GLenum;\\\\n    readonly RG16UI: GLenum;\\\\n    readonly RG32F: GLenum;\\\\n    readonly RG32I: GLenum;\\\\n    readonly RG32UI: GLenum;\\\\n    readonly RG8: GLenum;\\\\n    readonly RG8I: GLenum;\\\\n    readonly RG8UI: GLenum;\\\\n    readonly RG8_SNORM: GLenum;\\\\n    readonly RGB10_A2: GLenum;\\\\n    readonly RGB10_A2UI: GLenum;\\\\n    readonly RGB16F: GLenum;\\\\n    readonly RGB16I: GLenum;\\\\n    readonly RGB16UI: GLenum;\\\\n    readonly RGB32F: GLenum;\\\\n    readonly RGB32I: GLenum;\\\\n    readonly RGB32UI: GLenum;\\\\n    readonly RGB8: GLenum;\\\\n    readonly RGB8I: GLenum;\\\\n    readonly RGB8UI: GLenum;\\\\n    readonly RGB8_SNORM: GLenum;\\\\n    readonly RGB9_E5: GLenum;\\\\n    readonly RGBA16F: GLenum;\\\\n    readonly RGBA16I: GLenum;\\\\n    readonly RGBA16UI: GLenum;\\\\n    readonly RGBA32F: GLenum;\\\\n    readonly RGBA32I: GLenum;\\\\n    readonly RGBA32UI: GLenum;\\\\n    readonly RGBA8: GLenum;\\\\n    readonly RGBA8I: GLenum;\\\\n    readonly RGBA8UI: GLenum;\\\\n    readonly RGBA8_SNORM: GLenum;\\\\n    readonly RGBA_INTEGER: GLenum;\\\\n    readonly RGB_INTEGER: GLenum;\\\\n    readonly RG_INTEGER: GLenum;\\\\n    readonly SAMPLER_2D_ARRAY: GLenum;\\\\n    readonly SAMPLER_2D_ARRAY_SHADOW: GLenum;\\\\n    readonly SAMPLER_2D_SHADOW: GLenum;\\\\n    readonly SAMPLER_3D: GLenum;\\\\n    readonly SAMPLER_BINDING: GLenum;\\\\n    readonly SAMPLER_CUBE_SHADOW: GLenum;\\\\n    readonly SEPARATE_ATTRIBS: GLenum;\\\\n    readonly SIGNALED: GLenum;\\\\n    readonly SIGNED_NORMALIZED: GLenum;\\\\n    readonly SRGB: GLenum;\\\\n    readonly SRGB8: GLenum;\\\\n    readonly SRGB8_ALPHA8: GLenum;\\\\n    readonly STATIC_COPY: GLenum;\\\\n    readonly STATIC_READ: GLenum;\\\\n    readonly STENCIL: GLenum;\\\\n    readonly STREAM_COPY: GLenum;\\\\n    readonly STREAM_READ: GLenum;\\\\n    readonly SYNC_CONDITION: GLenum;\\\\n    readonly SYNC_FENCE: GLenum;\\\\n    readonly SYNC_FLAGS: GLenum;\\\\n    readonly SYNC_FLUSH_COMMANDS_BIT: GLenum;\\\\n    readonly SYNC_GPU_COMMANDS_COMPLETE: GLenum;\\\\n    readonly SYNC_STATUS: GLenum;\\\\n    readonly TEXTURE_2D_ARRAY: GLenum;\\\\n    readonly TEXTURE_3D: GLenum;\\\\n    readonly TEXTURE_BASE_LEVEL: GLenum;\\\\n    readonly TEXTURE_BINDING_2D_ARRAY: GLenum;\\\\n    readonly TEXTURE_BINDING_3D: GLenum;\\\\n    readonly TEXTURE_COMPARE_FUNC: GLenum;\\\\n    readonly TEXTURE_COMPARE_MODE: GLenum;\\\\n    readonly TEXTURE_IMMUTABLE_FORMAT: GLenum;\\\\n    readonly TEXTURE_IMMUTABLE_LEVELS: GLenum;\\\\n    readonly TEXTURE_MAX_LEVEL: GLenum;\\\\n    readonly TEXTURE_MAX_LOD: GLenum;\\\\n    readonly TEXTURE_MIN_LOD: GLenum;\\\\n    readonly TEXTURE_WRAP_R: GLenum;\\\\n    readonly TIMEOUT_EXPIRED: GLenum;\\\\n    readonly TIMEOUT_IGNORED: GLint64;\\\\n    readonly TRANSFORM_FEEDBACK: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_ACTIVE: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BINDING: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_START: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_PAUSED: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_VARYINGS: GLenum;\\\\n    readonly UNIFORM_ARRAY_STRIDE: GLenum;\\\\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum;\\\\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum;\\\\n    readonly UNIFORM_BLOCK_BINDING: GLenum;\\\\n    readonly UNIFORM_BLOCK_DATA_SIZE: GLenum;\\\\n    readonly UNIFORM_BLOCK_INDEX: GLenum;\\\\n    readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum;\\\\n    readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum;\\\\n    readonly UNIFORM_BUFFER: GLenum;\\\\n    readonly UNIFORM_BUFFER_BINDING: GLenum;\\\\n    readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum;\\\\n    readonly UNIFORM_BUFFER_SIZE: GLenum;\\\\n    readonly UNIFORM_BUFFER_START: GLenum;\\\\n    readonly UNIFORM_IS_ROW_MAJOR: GLenum;\\\\n    readonly UNIFORM_MATRIX_STRIDE: GLenum;\\\\n    readonly UNIFORM_OFFSET: GLenum;\\\\n    readonly UNIFORM_SIZE: GLenum;\\\\n    readonly UNIFORM_TYPE: GLenum;\\\\n    readonly UNPACK_IMAGE_HEIGHT: GLenum;\\\\n    readonly UNPACK_ROW_LENGTH: GLenum;\\\\n    readonly UNPACK_SKIP_IMAGES: GLenum;\\\\n    readonly UNPACK_SKIP_PIXELS: GLenum;\\\\n    readonly UNPACK_SKIP_ROWS: GLenum;\\\\n    readonly UNSIGNALED: GLenum;\\\\n    readonly UNSIGNED_INT_10F_11F_11F_REV: GLenum;\\\\n    readonly UNSIGNED_INT_24_8: GLenum;\\\\n    readonly UNSIGNED_INT_2_10_10_10_REV: GLenum;\\\\n    readonly UNSIGNED_INT_5_9_9_9_REV: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_2D: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_3D: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_CUBE: GLenum;\\\\n    readonly UNSIGNED_INT_VEC2: GLenum;\\\\n    readonly UNSIGNED_INT_VEC3: GLenum;\\\\n    readonly UNSIGNED_INT_VEC4: GLenum;\\\\n    readonly UNSIGNED_NORMALIZED: GLenum;\\\\n    readonly VERTEX_ARRAY_BINDING: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_INTEGER: GLenum;\\\\n    readonly WAIT_FAILED: GLenum;\\\\n};\\\\n\\\\ninterface WebGL2RenderingContextBase {\\\\n    beginQuery(target: GLenum, query: WebGLQuery): void;\\\\n    beginTransformFeedback(primitiveMode: GLenum): void;\\\\n    bindBufferBase(target: GLenum, index: GLuint, buffer: WebGLBuffer | null): void;\\\\n    bindBufferRange(target: GLenum, index: GLuint, buffer: WebGLBuffer | null, offset: GLintptr, size: GLsizeiptr): void;\\\\n    bindSampler(unit: GLuint, sampler: WebGLSampler | null): void;\\\\n    bindTransformFeedback(target: GLenum, tf: WebGLTransformFeedback | null): void;\\\\n    bindVertexArray(array: WebGLVertexArrayObject | null): void;\\\\n    blitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void;\\\\n    clearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void;\\\\n    clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Float32List, srcOffset?: GLuint): void;\\\\n    clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Int32List, srcOffset?: GLuint): void;\\\\n    clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Uint32List, srcOffset?: GLuint): void;\\\\n    clientWaitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLuint64): GLenum;\\\\n    compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): void;\\\\n    compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\\\\n    compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): void;\\\\n    compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\\\\n    copyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void;\\\\n    copyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\\\\n    createQuery(): WebGLQuery | null;\\\\n    createSampler(): WebGLSampler | null;\\\\n    createTransformFeedback(): WebGLTransformFeedback | null;\\\\n    createVertexArray(): WebGLVertexArrayObject | null;\\\\n    deleteQuery(query: WebGLQuery | null): void;\\\\n    deleteSampler(sampler: WebGLSampler | null): void;\\\\n    deleteSync(sync: WebGLSync | null): void;\\\\n    deleteTransformFeedback(tf: WebGLTransformFeedback | null): void;\\\\n    deleteVertexArray(vertexArray: WebGLVertexArrayObject | null): void;\\\\n    drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei): void;\\\\n    drawBuffers(buffers: GLenum[]): void;\\\\n    drawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei): void;\\\\n    drawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, offset: GLintptr): void;\\\\n    endQuery(target: GLenum): void;\\\\n    endTransformFeedback(): void;\\\\n    fenceSync(condition: GLenum, flags: GLbitfield): WebGLSync | null;\\\\n    framebufferTextureLayer(target: GLenum, attachment: GLenum, texture: WebGLTexture | null, level: GLint, layer: GLint): void;\\\\n    getActiveUniformBlockName(program: WebGLProgram, uniformBlockIndex: GLuint): string | null;\\\\n    getActiveUniformBlockParameter(program: WebGLProgram, uniformBlockIndex: GLuint, pname: GLenum): any;\\\\n    getActiveUniforms(program: WebGLProgram, uniformIndices: GLuint[], pname: GLenum): any;\\\\n    getBufferSubData(target: GLenum, srcByteOffset: GLintptr, dstBuffer: ArrayBufferView, dstOffset?: GLuint, length?: GLuint): void;\\\\n    getFragDataLocation(program: WebGLProgram, name: string): GLint;\\\\n    getIndexedParameter(target: GLenum, index: GLuint): any;\\\\n    getInternalformatParameter(target: GLenum, internalformat: GLenum, pname: GLenum): any;\\\\n    getQuery(target: GLenum, pname: GLenum): WebGLQuery | null;\\\\n    getQueryParameter(query: WebGLQuery, pname: GLenum): any;\\\\n    getSamplerParameter(sampler: WebGLSampler, pname: GLenum): any;\\\\n    getSyncParameter(sync: WebGLSync, pname: GLenum): any;\\\\n    getTransformFeedbackVarying(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;\\\\n    getUniformBlockIndex(program: WebGLProgram, uniformBlockName: string): GLuint;\\\\n    getUniformIndices(program: WebGLProgram, uniformNames: string[]): GLuint[] | null;\\\\n    invalidateFramebuffer(target: GLenum, attachments: GLenum[]): void;\\\\n    invalidateSubFramebuffer(target: GLenum, attachments: GLenum[], x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\\\\n    isQuery(query: WebGLQuery | null): GLboolean;\\\\n    isSampler(sampler: WebGLSampler | null): GLboolean;\\\\n    isSync(sync: WebGLSync | null): GLboolean;\\\\n    isTransformFeedback(tf: WebGLTransformFeedback | null): GLboolean;\\\\n    isVertexArray(vertexArray: WebGLVertexArrayObject | null): GLboolean;\\\\n    pauseTransformFeedback(): void;\\\\n    readBuffer(src: GLenum): void;\\\\n    renderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;\\\\n    resumeTransformFeedback(): void;\\\\n    samplerParameterf(sampler: WebGLSampler, pname: GLenum, param: GLfloat): void;\\\\n    samplerParameteri(sampler: WebGLSampler, pname: GLenum, param: GLint): void;\\\\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\\\\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView | null): void;\\\\n    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;\\\\n    texStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;\\\\n    texStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void;\\\\n    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\\\\n    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView | null, srcOffset?: GLuint): void;\\\\n    transformFeedbackVaryings(program: WebGLProgram, varyings: string[], bufferMode: GLenum): void;\\\\n    uniform1ui(location: WebGLUniformLocation | null, v0: GLuint): void;\\\\n    uniform1uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform2ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint): void;\\\\n    uniform2uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform3ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint, v2: GLuint): void;\\\\n    uniform3uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform4ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void;\\\\n    uniform4uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformBlockBinding(program: WebGLProgram, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint): void;\\\\n    uniformMatrix2x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix2x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix3x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix3x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix4x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix4x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    vertexAttribDivisor(index: GLuint, divisor: GLuint): void;\\\\n    vertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void;\\\\n    vertexAttribI4iv(index: GLuint, values: Int32List): void;\\\\n    vertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void;\\\\n    vertexAttribI4uiv(index: GLuint, values: Uint32List): void;\\\\n    vertexAttribIPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;\\\\n    waitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLint64): void;\\\\n    readonly ACTIVE_UNIFORM_BLOCKS: GLenum;\\\\n    readonly ALREADY_SIGNALED: GLenum;\\\\n    readonly ANY_SAMPLES_PASSED: GLenum;\\\\n    readonly ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum;\\\\n    readonly COLOR: GLenum;\\\\n    readonly COLOR_ATTACHMENT1: GLenum;\\\\n    readonly COLOR_ATTACHMENT10: GLenum;\\\\n    readonly COLOR_ATTACHMENT11: GLenum;\\\\n    readonly COLOR_ATTACHMENT12: GLenum;\\\\n    readonly COLOR_ATTACHMENT13: GLenum;\\\\n    readonly COLOR_ATTACHMENT14: GLenum;\\\\n    readonly COLOR_ATTACHMENT15: GLenum;\\\\n    readonly COLOR_ATTACHMENT2: GLenum;\\\\n    readonly COLOR_ATTACHMENT3: GLenum;\\\\n    readonly COLOR_ATTACHMENT4: GLenum;\\\\n    readonly COLOR_ATTACHMENT5: GLenum;\\\\n    readonly COLOR_ATTACHMENT6: GLenum;\\\\n    readonly COLOR_ATTACHMENT7: GLenum;\\\\n    readonly COLOR_ATTACHMENT8: GLenum;\\\\n    readonly COLOR_ATTACHMENT9: GLenum;\\\\n    readonly COMPARE_REF_TO_TEXTURE: GLenum;\\\\n    readonly CONDITION_SATISFIED: GLenum;\\\\n    readonly COPY_READ_BUFFER: GLenum;\\\\n    readonly COPY_READ_BUFFER_BINDING: GLenum;\\\\n    readonly COPY_WRITE_BUFFER: GLenum;\\\\n    readonly COPY_WRITE_BUFFER_BINDING: GLenum;\\\\n    readonly CURRENT_QUERY: GLenum;\\\\n    readonly DEPTH: GLenum;\\\\n    readonly DEPTH24_STENCIL8: GLenum;\\\\n    readonly DEPTH32F_STENCIL8: GLenum;\\\\n    readonly DEPTH_COMPONENT24: GLenum;\\\\n    readonly DEPTH_COMPONENT32F: GLenum;\\\\n    readonly DRAW_BUFFER0: GLenum;\\\\n    readonly DRAW_BUFFER1: GLenum;\\\\n    readonly DRAW_BUFFER10: GLenum;\\\\n    readonly DRAW_BUFFER11: GLenum;\\\\n    readonly DRAW_BUFFER12: GLenum;\\\\n    readonly DRAW_BUFFER13: GLenum;\\\\n    readonly DRAW_BUFFER14: GLenum;\\\\n    readonly DRAW_BUFFER15: GLenum;\\\\n    readonly DRAW_BUFFER2: GLenum;\\\\n    readonly DRAW_BUFFER3: GLenum;\\\\n    readonly DRAW_BUFFER4: GLenum;\\\\n    readonly DRAW_BUFFER5: GLenum;\\\\n    readonly DRAW_BUFFER6: GLenum;\\\\n    readonly DRAW_BUFFER7: GLenum;\\\\n    readonly DRAW_BUFFER8: GLenum;\\\\n    readonly DRAW_BUFFER9: GLenum;\\\\n    readonly DRAW_FRAMEBUFFER: GLenum;\\\\n    readonly DRAW_FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly DYNAMIC_COPY: GLenum;\\\\n    readonly DYNAMIC_READ: GLenum;\\\\n    readonly FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum;\\\\n    readonly FLOAT_MAT2x3: GLenum;\\\\n    readonly FLOAT_MAT2x4: GLenum;\\\\n    readonly FLOAT_MAT3x2: GLenum;\\\\n    readonly FLOAT_MAT3x4: GLenum;\\\\n    readonly FLOAT_MAT4x2: GLenum;\\\\n    readonly FLOAT_MAT4x3: GLenum;\\\\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum;\\\\n    readonly FRAMEBUFFER_DEFAULT: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum;\\\\n    readonly HALF_FLOAT: GLenum;\\\\n    readonly INTERLEAVED_ATTRIBS: GLenum;\\\\n    readonly INT_2_10_10_10_REV: GLenum;\\\\n    readonly INT_SAMPLER_2D: GLenum;\\\\n    readonly INT_SAMPLER_2D_ARRAY: GLenum;\\\\n    readonly INT_SAMPLER_3D: GLenum;\\\\n    readonly INT_SAMPLER_CUBE: GLenum;\\\\n    readonly INVALID_INDEX: GLenum;\\\\n    readonly MAX: GLenum;\\\\n    readonly MAX_3D_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_ARRAY_TEXTURE_LAYERS: GLenum;\\\\n    readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: GLenum;\\\\n    readonly MAX_COLOR_ATTACHMENTS: GLenum;\\\\n    readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MAX_COMBINED_UNIFORM_BLOCKS: GLenum;\\\\n    readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MAX_DRAW_BUFFERS: GLenum;\\\\n    readonly MAX_ELEMENTS_INDICES: GLenum;\\\\n    readonly MAX_ELEMENTS_VERTICES: GLenum;\\\\n    readonly MAX_ELEMENT_INDEX: GLenum;\\\\n    readonly MAX_FRAGMENT_INPUT_COMPONENTS: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MAX_PROGRAM_TEXEL_OFFSET: GLenum;\\\\n    readonly MAX_SAMPLES: GLenum;\\\\n    readonly MAX_SERVER_WAIT_TIMEOUT: GLenum;\\\\n    readonly MAX_TEXTURE_LOD_BIAS: GLenum;\\\\n    readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum;\\\\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum;\\\\n    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum;\\\\n    readonly MAX_UNIFORM_BLOCK_SIZE: GLenum;\\\\n    readonly MAX_UNIFORM_BUFFER_BINDINGS: GLenum;\\\\n    readonly MAX_VARYING_COMPONENTS: GLenum;\\\\n    readonly MAX_VERTEX_OUTPUT_COMPONENTS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_BLOCKS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_COMPONENTS: GLenum;\\\\n    readonly MIN: GLenum;\\\\n    readonly MIN_PROGRAM_TEXEL_OFFSET: GLenum;\\\\n    readonly OBJECT_TYPE: GLenum;\\\\n    readonly PACK_ROW_LENGTH: GLenum;\\\\n    readonly PACK_SKIP_PIXELS: GLenum;\\\\n    readonly PACK_SKIP_ROWS: GLenum;\\\\n    readonly PIXEL_PACK_BUFFER: GLenum;\\\\n    readonly PIXEL_PACK_BUFFER_BINDING: GLenum;\\\\n    readonly PIXEL_UNPACK_BUFFER: GLenum;\\\\n    readonly PIXEL_UNPACK_BUFFER_BINDING: GLenum;\\\\n    readonly QUERY_RESULT: GLenum;\\\\n    readonly QUERY_RESULT_AVAILABLE: GLenum;\\\\n    readonly R11F_G11F_B10F: GLenum;\\\\n    readonly R16F: GLenum;\\\\n    readonly R16I: GLenum;\\\\n    readonly R16UI: GLenum;\\\\n    readonly R32F: GLenum;\\\\n    readonly R32I: GLenum;\\\\n    readonly R32UI: GLenum;\\\\n    readonly R8: GLenum;\\\\n    readonly R8I: GLenum;\\\\n    readonly R8UI: GLenum;\\\\n    readonly R8_SNORM: GLenum;\\\\n    readonly RASTERIZER_DISCARD: GLenum;\\\\n    readonly READ_BUFFER: GLenum;\\\\n    readonly READ_FRAMEBUFFER: GLenum;\\\\n    readonly READ_FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly RED: GLenum;\\\\n    readonly RED_INTEGER: GLenum;\\\\n    readonly RENDERBUFFER_SAMPLES: GLenum;\\\\n    readonly RG: GLenum;\\\\n    readonly RG16F: GLenum;\\\\n    readonly RG16I: GLenum;\\\\n    readonly RG16UI: GLenum;\\\\n    readonly RG32F: GLenum;\\\\n    readonly RG32I: GLenum;\\\\n    readonly RG32UI: GLenum;\\\\n    readonly RG8: GLenum;\\\\n    readonly RG8I: GLenum;\\\\n    readonly RG8UI: GLenum;\\\\n    readonly RG8_SNORM: GLenum;\\\\n    readonly RGB10_A2: GLenum;\\\\n    readonly RGB10_A2UI: GLenum;\\\\n    readonly RGB16F: GLenum;\\\\n    readonly RGB16I: GLenum;\\\\n    readonly RGB16UI: GLenum;\\\\n    readonly RGB32F: GLenum;\\\\n    readonly RGB32I: GLenum;\\\\n    readonly RGB32UI: GLenum;\\\\n    readonly RGB8: GLenum;\\\\n    readonly RGB8I: GLenum;\\\\n    readonly RGB8UI: GLenum;\\\\n    readonly RGB8_SNORM: GLenum;\\\\n    readonly RGB9_E5: GLenum;\\\\n    readonly RGBA16F: GLenum;\\\\n    readonly RGBA16I: GLenum;\\\\n    readonly RGBA16UI: GLenum;\\\\n    readonly RGBA32F: GLenum;\\\\n    readonly RGBA32I: GLenum;\\\\n    readonly RGBA32UI: GLenum;\\\\n    readonly RGBA8: GLenum;\\\\n    readonly RGBA8I: GLenum;\\\\n    readonly RGBA8UI: GLenum;\\\\n    readonly RGBA8_SNORM: GLenum;\\\\n    readonly RGBA_INTEGER: GLenum;\\\\n    readonly RGB_INTEGER: GLenum;\\\\n    readonly RG_INTEGER: GLenum;\\\\n    readonly SAMPLER_2D_ARRAY: GLenum;\\\\n    readonly SAMPLER_2D_ARRAY_SHADOW: GLenum;\\\\n    readonly SAMPLER_2D_SHADOW: GLenum;\\\\n    readonly SAMPLER_3D: GLenum;\\\\n    readonly SAMPLER_BINDING: GLenum;\\\\n    readonly SAMPLER_CUBE_SHADOW: GLenum;\\\\n    readonly SEPARATE_ATTRIBS: GLenum;\\\\n    readonly SIGNALED: GLenum;\\\\n    readonly SIGNED_NORMALIZED: GLenum;\\\\n    readonly SRGB: GLenum;\\\\n    readonly SRGB8: GLenum;\\\\n    readonly SRGB8_ALPHA8: GLenum;\\\\n    readonly STATIC_COPY: GLenum;\\\\n    readonly STATIC_READ: GLenum;\\\\n    readonly STENCIL: GLenum;\\\\n    readonly STREAM_COPY: GLenum;\\\\n    readonly STREAM_READ: GLenum;\\\\n    readonly SYNC_CONDITION: GLenum;\\\\n    readonly SYNC_FENCE: GLenum;\\\\n    readonly SYNC_FLAGS: GLenum;\\\\n    readonly SYNC_FLUSH_COMMANDS_BIT: GLenum;\\\\n    readonly SYNC_GPU_COMMANDS_COMPLETE: GLenum;\\\\n    readonly SYNC_STATUS: GLenum;\\\\n    readonly TEXTURE_2D_ARRAY: GLenum;\\\\n    readonly TEXTURE_3D: GLenum;\\\\n    readonly TEXTURE_BASE_LEVEL: GLenum;\\\\n    readonly TEXTURE_BINDING_2D_ARRAY: GLenum;\\\\n    readonly TEXTURE_BINDING_3D: GLenum;\\\\n    readonly TEXTURE_COMPARE_FUNC: GLenum;\\\\n    readonly TEXTURE_COMPARE_MODE: GLenum;\\\\n    readonly TEXTURE_IMMUTABLE_FORMAT: GLenum;\\\\n    readonly TEXTURE_IMMUTABLE_LEVELS: GLenum;\\\\n    readonly TEXTURE_MAX_LEVEL: GLenum;\\\\n    readonly TEXTURE_MAX_LOD: GLenum;\\\\n    readonly TEXTURE_MIN_LOD: GLenum;\\\\n    readonly TEXTURE_WRAP_R: GLenum;\\\\n    readonly TIMEOUT_EXPIRED: GLenum;\\\\n    readonly TIMEOUT_IGNORED: GLint64;\\\\n    readonly TRANSFORM_FEEDBACK: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_ACTIVE: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BINDING: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_BUFFER_START: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_PAUSED: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum;\\\\n    readonly TRANSFORM_FEEDBACK_VARYINGS: GLenum;\\\\n    readonly UNIFORM_ARRAY_STRIDE: GLenum;\\\\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum;\\\\n    readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum;\\\\n    readonly UNIFORM_BLOCK_BINDING: GLenum;\\\\n    readonly UNIFORM_BLOCK_DATA_SIZE: GLenum;\\\\n    readonly UNIFORM_BLOCK_INDEX: GLenum;\\\\n    readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum;\\\\n    readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum;\\\\n    readonly UNIFORM_BUFFER: GLenum;\\\\n    readonly UNIFORM_BUFFER_BINDING: GLenum;\\\\n    readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum;\\\\n    readonly UNIFORM_BUFFER_SIZE: GLenum;\\\\n    readonly UNIFORM_BUFFER_START: GLenum;\\\\n    readonly UNIFORM_IS_ROW_MAJOR: GLenum;\\\\n    readonly UNIFORM_MATRIX_STRIDE: GLenum;\\\\n    readonly UNIFORM_OFFSET: GLenum;\\\\n    readonly UNIFORM_SIZE: GLenum;\\\\n    readonly UNIFORM_TYPE: GLenum;\\\\n    readonly UNPACK_IMAGE_HEIGHT: GLenum;\\\\n    readonly UNPACK_ROW_LENGTH: GLenum;\\\\n    readonly UNPACK_SKIP_IMAGES: GLenum;\\\\n    readonly UNPACK_SKIP_PIXELS: GLenum;\\\\n    readonly UNPACK_SKIP_ROWS: GLenum;\\\\n    readonly UNSIGNALED: GLenum;\\\\n    readonly UNSIGNED_INT_10F_11F_11F_REV: GLenum;\\\\n    readonly UNSIGNED_INT_24_8: GLenum;\\\\n    readonly UNSIGNED_INT_2_10_10_10_REV: GLenum;\\\\n    readonly UNSIGNED_INT_5_9_9_9_REV: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_2D: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_3D: GLenum;\\\\n    readonly UNSIGNED_INT_SAMPLER_CUBE: GLenum;\\\\n    readonly UNSIGNED_INT_VEC2: GLenum;\\\\n    readonly UNSIGNED_INT_VEC3: GLenum;\\\\n    readonly UNSIGNED_INT_VEC4: GLenum;\\\\n    readonly UNSIGNED_NORMALIZED: GLenum;\\\\n    readonly VERTEX_ARRAY_BINDING: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_INTEGER: GLenum;\\\\n    readonly WAIT_FAILED: GLenum;\\\\n}\\\\n\\\\ninterface WebGL2RenderingContextOverloads {\\\\n    bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;\\\\n    bufferData(target: GLenum, srcData: BufferSource | null, usage: GLenum): void;\\\\n    bufferData(target: GLenum, srcData: ArrayBufferView, usage: GLenum, srcOffset: GLuint, length?: GLuint): void;\\\\n    bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: BufferSource): void;\\\\n    bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: ArrayBufferView, srcOffset: GLuint, length?: GLuint): void;\\\\n    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): void;\\\\n    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\\\\n    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): void;\\\\n    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;\\\\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView | null): void;\\\\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, offset: GLintptr): void;\\\\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView, dstOffset: GLuint): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;\\\\n    uniform1fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform1iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform2fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform2iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform3fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform3iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform4fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniform4iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;\\\\n}\\\\n\\\\n/** Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods. */\\\\ninterface WebGLActiveInfo {\\\\n    readonly name: string;\\\\n    readonly size: GLint;\\\\n    readonly type: GLenum;\\\\n}\\\\n\\\\ndeclare var WebGLActiveInfo: {\\\\n    prototype: WebGLActiveInfo;\\\\n    new(): WebGLActiveInfo;\\\\n};\\\\n\\\\n/** Part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors. */\\\\ninterface WebGLBuffer extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLBuffer: {\\\\n    prototype: WebGLBuffer;\\\\n    new(): WebGLBuffer;\\\\n};\\\\n\\\\n/** The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context. */\\\\ninterface WebGLContextEvent extends Event {\\\\n    readonly statusMessage: string;\\\\n}\\\\n\\\\ndeclare var WebGLContextEvent: {\\\\n    prototype: WebGLContextEvent;\\\\n    new(type: string, eventInit?: WebGLContextEventInit): WebGLContextEvent;\\\\n};\\\\n\\\\n/** Part of the WebGL API and represents a collection of buffers that serve as a rendering destination. */\\\\ninterface WebGLFramebuffer extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLFramebuffer: {\\\\n    prototype: WebGLFramebuffer;\\\\n    new(): WebGLFramebuffer;\\\\n};\\\\n\\\\ninterface WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLObject: {\\\\n    prototype: WebGLObject;\\\\n    new(): WebGLObject;\\\\n};\\\\n\\\\n/** The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL). */\\\\ninterface WebGLProgram extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLProgram: {\\\\n    prototype: WebGLProgram;\\\\n    new(): WebGLProgram;\\\\n};\\\\n\\\\ninterface WebGLQuery extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLQuery: {\\\\n    prototype: WebGLQuery;\\\\n    new(): WebGLQuery;\\\\n};\\\\n\\\\n/** Part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation. */\\\\ninterface WebGLRenderbuffer extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLRenderbuffer: {\\\\n    prototype: WebGLRenderbuffer;\\\\n    new(): WebGLRenderbuffer;\\\\n};\\\\n\\\\n/** Provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element. */\\\\ninterface WebGLRenderingContext extends WebGLRenderingContextBase, WebGLRenderingContextOverloads {\\\\n}\\\\n\\\\ndeclare var WebGLRenderingContext: {\\\\n    prototype: WebGLRenderingContext;\\\\n    new(): WebGLRenderingContext;\\\\n    readonly ACTIVE_ATTRIBUTES: GLenum;\\\\n    readonly ACTIVE_TEXTURE: GLenum;\\\\n    readonly ACTIVE_UNIFORMS: GLenum;\\\\n    readonly ALIASED_LINE_WIDTH_RANGE: GLenum;\\\\n    readonly ALIASED_POINT_SIZE_RANGE: GLenum;\\\\n    readonly ALPHA: GLenum;\\\\n    readonly ALPHA_BITS: GLenum;\\\\n    readonly ALWAYS: GLenum;\\\\n    readonly ARRAY_BUFFER: GLenum;\\\\n    readonly ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly ATTACHED_SHADERS: GLenum;\\\\n    readonly BACK: GLenum;\\\\n    readonly BLEND: GLenum;\\\\n    readonly BLEND_COLOR: GLenum;\\\\n    readonly BLEND_DST_ALPHA: GLenum;\\\\n    readonly BLEND_DST_RGB: GLenum;\\\\n    readonly BLEND_EQUATION: GLenum;\\\\n    readonly BLEND_EQUATION_ALPHA: GLenum;\\\\n    readonly BLEND_EQUATION_RGB: GLenum;\\\\n    readonly BLEND_SRC_ALPHA: GLenum;\\\\n    readonly BLEND_SRC_RGB: GLenum;\\\\n    readonly BLUE_BITS: GLenum;\\\\n    readonly BOOL: GLenum;\\\\n    readonly BOOL_VEC2: GLenum;\\\\n    readonly BOOL_VEC3: GLenum;\\\\n    readonly BOOL_VEC4: GLenum;\\\\n    readonly BROWSER_DEFAULT_WEBGL: GLenum;\\\\n    readonly BUFFER_SIZE: GLenum;\\\\n    readonly BUFFER_USAGE: GLenum;\\\\n    readonly BYTE: GLenum;\\\\n    readonly CCW: GLenum;\\\\n    readonly CLAMP_TO_EDGE: GLenum;\\\\n    readonly COLOR_ATTACHMENT0: GLenum;\\\\n    readonly COLOR_BUFFER_BIT: GLenum;\\\\n    readonly COLOR_CLEAR_VALUE: GLenum;\\\\n    readonly COLOR_WRITEMASK: GLenum;\\\\n    readonly COMPILE_STATUS: GLenum;\\\\n    readonly COMPRESSED_TEXTURE_FORMATS: GLenum;\\\\n    readonly CONSTANT_ALPHA: GLenum;\\\\n    readonly CONSTANT_COLOR: GLenum;\\\\n    readonly CONTEXT_LOST_WEBGL: GLenum;\\\\n    readonly CULL_FACE: GLenum;\\\\n    readonly CULL_FACE_MODE: GLenum;\\\\n    readonly CURRENT_PROGRAM: GLenum;\\\\n    readonly CURRENT_VERTEX_ATTRIB: GLenum;\\\\n    readonly CW: GLenum;\\\\n    readonly DECR: GLenum;\\\\n    readonly DECR_WRAP: GLenum;\\\\n    readonly DELETE_STATUS: GLenum;\\\\n    readonly DEPTH_ATTACHMENT: GLenum;\\\\n    readonly DEPTH_BITS: GLenum;\\\\n    readonly DEPTH_BUFFER_BIT: GLenum;\\\\n    readonly DEPTH_CLEAR_VALUE: GLenum;\\\\n    readonly DEPTH_COMPONENT: GLenum;\\\\n    readonly DEPTH_COMPONENT16: GLenum;\\\\n    readonly DEPTH_FUNC: GLenum;\\\\n    readonly DEPTH_RANGE: GLenum;\\\\n    readonly DEPTH_STENCIL: GLenum;\\\\n    readonly DEPTH_STENCIL_ATTACHMENT: GLenum;\\\\n    readonly DEPTH_TEST: GLenum;\\\\n    readonly DEPTH_WRITEMASK: GLenum;\\\\n    readonly DITHER: GLenum;\\\\n    readonly DONT_CARE: GLenum;\\\\n    readonly DST_ALPHA: GLenum;\\\\n    readonly DST_COLOR: GLenum;\\\\n    readonly DYNAMIC_DRAW: GLenum;\\\\n    readonly ELEMENT_ARRAY_BUFFER: GLenum;\\\\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly EQUAL: GLenum;\\\\n    readonly FASTEST: GLenum;\\\\n    readonly FLOAT: GLenum;\\\\n    readonly FLOAT_MAT2: GLenum;\\\\n    readonly FLOAT_MAT3: GLenum;\\\\n    readonly FLOAT_MAT4: GLenum;\\\\n    readonly FLOAT_VEC2: GLenum;\\\\n    readonly FLOAT_VEC3: GLenum;\\\\n    readonly FLOAT_VEC4: GLenum;\\\\n    readonly FRAGMENT_SHADER: GLenum;\\\\n    readonly FRAMEBUFFER: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;\\\\n    readonly FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly FRAMEBUFFER_COMPLETE: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;\\\\n    readonly FRAMEBUFFER_UNSUPPORTED: GLenum;\\\\n    readonly FRONT: GLenum;\\\\n    readonly FRONT_AND_BACK: GLenum;\\\\n    readonly FRONT_FACE: GLenum;\\\\n    readonly FUNC_ADD: GLenum;\\\\n    readonly FUNC_REVERSE_SUBTRACT: GLenum;\\\\n    readonly FUNC_SUBTRACT: GLenum;\\\\n    readonly GENERATE_MIPMAP_HINT: GLenum;\\\\n    readonly GEQUAL: GLenum;\\\\n    readonly GREATER: GLenum;\\\\n    readonly GREEN_BITS: GLenum;\\\\n    readonly HIGH_FLOAT: GLenum;\\\\n    readonly HIGH_INT: GLenum;\\\\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;\\\\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: GLenum;\\\\n    readonly INCR: GLenum;\\\\n    readonly INCR_WRAP: GLenum;\\\\n    readonly INT: GLenum;\\\\n    readonly INT_VEC2: GLenum;\\\\n    readonly INT_VEC3: GLenum;\\\\n    readonly INT_VEC4: GLenum;\\\\n    readonly INVALID_ENUM: GLenum;\\\\n    readonly INVALID_FRAMEBUFFER_OPERATION: GLenum;\\\\n    readonly INVALID_OPERATION: GLenum;\\\\n    readonly INVALID_VALUE: GLenum;\\\\n    readonly INVERT: GLenum;\\\\n    readonly KEEP: GLenum;\\\\n    readonly LEQUAL: GLenum;\\\\n    readonly LESS: GLenum;\\\\n    readonly LINEAR: GLenum;\\\\n    readonly LINEAR_MIPMAP_LINEAR: GLenum;\\\\n    readonly LINEAR_MIPMAP_NEAREST: GLenum;\\\\n    readonly LINES: GLenum;\\\\n    readonly LINE_LOOP: GLenum;\\\\n    readonly LINE_STRIP: GLenum;\\\\n    readonly LINE_WIDTH: GLenum;\\\\n    readonly LINK_STATUS: GLenum;\\\\n    readonly LOW_FLOAT: GLenum;\\\\n    readonly LOW_INT: GLenum;\\\\n    readonly LUMINANCE: GLenum;\\\\n    readonly LUMINANCE_ALPHA: GLenum;\\\\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;\\\\n    readonly MAX_RENDERBUFFER_SIZE: GLenum;\\\\n    readonly MAX_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_VARYING_VECTORS: GLenum;\\\\n    readonly MAX_VERTEX_ATTRIBS: GLenum;\\\\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_VECTORS: GLenum;\\\\n    readonly MAX_VIEWPORT_DIMS: GLenum;\\\\n    readonly MEDIUM_FLOAT: GLenum;\\\\n    readonly MEDIUM_INT: GLenum;\\\\n    readonly MIRRORED_REPEAT: GLenum;\\\\n    readonly NEAREST: GLenum;\\\\n    readonly NEAREST_MIPMAP_LINEAR: GLenum;\\\\n    readonly NEAREST_MIPMAP_NEAREST: GLenum;\\\\n    readonly NEVER: GLenum;\\\\n    readonly NICEST: GLenum;\\\\n    readonly NONE: GLenum;\\\\n    readonly NOTEQUAL: GLenum;\\\\n    readonly NO_ERROR: GLenum;\\\\n    readonly ONE: GLenum;\\\\n    readonly ONE_MINUS_CONSTANT_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_CONSTANT_COLOR: GLenum;\\\\n    readonly ONE_MINUS_DST_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_DST_COLOR: GLenum;\\\\n    readonly ONE_MINUS_SRC_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_SRC_COLOR: GLenum;\\\\n    readonly OUT_OF_MEMORY: GLenum;\\\\n    readonly PACK_ALIGNMENT: GLenum;\\\\n    readonly POINTS: GLenum;\\\\n    readonly POLYGON_OFFSET_FACTOR: GLenum;\\\\n    readonly POLYGON_OFFSET_FILL: GLenum;\\\\n    readonly POLYGON_OFFSET_UNITS: GLenum;\\\\n    readonly RED_BITS: GLenum;\\\\n    readonly RENDERBUFFER: GLenum;\\\\n    readonly RENDERBUFFER_ALPHA_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_BINDING: GLenum;\\\\n    readonly RENDERBUFFER_BLUE_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_DEPTH_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_GREEN_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_HEIGHT: GLenum;\\\\n    readonly RENDERBUFFER_INTERNAL_FORMAT: GLenum;\\\\n    readonly RENDERBUFFER_RED_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_STENCIL_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_WIDTH: GLenum;\\\\n    readonly RENDERER: GLenum;\\\\n    readonly REPEAT: GLenum;\\\\n    readonly REPLACE: GLenum;\\\\n    readonly RGB: GLenum;\\\\n    readonly RGB565: GLenum;\\\\n    readonly RGB5_A1: GLenum;\\\\n    readonly RGBA: GLenum;\\\\n    readonly RGBA4: GLenum;\\\\n    readonly SAMPLER_2D: GLenum;\\\\n    readonly SAMPLER_CUBE: GLenum;\\\\n    readonly SAMPLES: GLenum;\\\\n    readonly SAMPLE_ALPHA_TO_COVERAGE: GLenum;\\\\n    readonly SAMPLE_BUFFERS: GLenum;\\\\n    readonly SAMPLE_COVERAGE: GLenum;\\\\n    readonly SAMPLE_COVERAGE_INVERT: GLenum;\\\\n    readonly SAMPLE_COVERAGE_VALUE: GLenum;\\\\n    readonly SCISSOR_BOX: GLenum;\\\\n    readonly SCISSOR_TEST: GLenum;\\\\n    readonly SHADER_TYPE: GLenum;\\\\n    readonly SHADING_LANGUAGE_VERSION: GLenum;\\\\n    readonly SHORT: GLenum;\\\\n    readonly SRC_ALPHA: GLenum;\\\\n    readonly SRC_ALPHA_SATURATE: GLenum;\\\\n    readonly SRC_COLOR: GLenum;\\\\n    readonly STATIC_DRAW: GLenum;\\\\n    readonly STENCIL_ATTACHMENT: GLenum;\\\\n    readonly STENCIL_BACK_FAIL: GLenum;\\\\n    readonly STENCIL_BACK_FUNC: GLenum;\\\\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;\\\\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: GLenum;\\\\n    readonly STENCIL_BACK_REF: GLenum;\\\\n    readonly STENCIL_BACK_VALUE_MASK: GLenum;\\\\n    readonly STENCIL_BACK_WRITEMASK: GLenum;\\\\n    readonly STENCIL_BITS: GLenum;\\\\n    readonly STENCIL_BUFFER_BIT: GLenum;\\\\n    readonly STENCIL_CLEAR_VALUE: GLenum;\\\\n    readonly STENCIL_FAIL: GLenum;\\\\n    readonly STENCIL_FUNC: GLenum;\\\\n    readonly STENCIL_INDEX8: GLenum;\\\\n    readonly STENCIL_PASS_DEPTH_FAIL: GLenum;\\\\n    readonly STENCIL_PASS_DEPTH_PASS: GLenum;\\\\n    readonly STENCIL_REF: GLenum;\\\\n    readonly STENCIL_TEST: GLenum;\\\\n    readonly STENCIL_VALUE_MASK: GLenum;\\\\n    readonly STENCIL_WRITEMASK: GLenum;\\\\n    readonly STREAM_DRAW: GLenum;\\\\n    readonly SUBPIXEL_BITS: GLenum;\\\\n    readonly TEXTURE: GLenum;\\\\n    readonly TEXTURE0: GLenum;\\\\n    readonly TEXTURE1: GLenum;\\\\n    readonly TEXTURE10: GLenum;\\\\n    readonly TEXTURE11: GLenum;\\\\n    readonly TEXTURE12: GLenum;\\\\n    readonly TEXTURE13: GLenum;\\\\n    readonly TEXTURE14: GLenum;\\\\n    readonly TEXTURE15: GLenum;\\\\n    readonly TEXTURE16: GLenum;\\\\n    readonly TEXTURE17: GLenum;\\\\n    readonly TEXTURE18: GLenum;\\\\n    readonly TEXTURE19: GLenum;\\\\n    readonly TEXTURE2: GLenum;\\\\n    readonly TEXTURE20: GLenum;\\\\n    readonly TEXTURE21: GLenum;\\\\n    readonly TEXTURE22: GLenum;\\\\n    readonly TEXTURE23: GLenum;\\\\n    readonly TEXTURE24: GLenum;\\\\n    readonly TEXTURE25: GLenum;\\\\n    readonly TEXTURE26: GLenum;\\\\n    readonly TEXTURE27: GLenum;\\\\n    readonly TEXTURE28: GLenum;\\\\n    readonly TEXTURE29: GLenum;\\\\n    readonly TEXTURE3: GLenum;\\\\n    readonly TEXTURE30: GLenum;\\\\n    readonly TEXTURE31: GLenum;\\\\n    readonly TEXTURE4: GLenum;\\\\n    readonly TEXTURE5: GLenum;\\\\n    readonly TEXTURE6: GLenum;\\\\n    readonly TEXTURE7: GLenum;\\\\n    readonly TEXTURE8: GLenum;\\\\n    readonly TEXTURE9: GLenum;\\\\n    readonly TEXTURE_2D: GLenum;\\\\n    readonly TEXTURE_BINDING_2D: GLenum;\\\\n    readonly TEXTURE_BINDING_CUBE_MAP: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;\\\\n    readonly TEXTURE_MAG_FILTER: GLenum;\\\\n    readonly TEXTURE_MIN_FILTER: GLenum;\\\\n    readonly TEXTURE_WRAP_S: GLenum;\\\\n    readonly TEXTURE_WRAP_T: GLenum;\\\\n    readonly TRIANGLES: GLenum;\\\\n    readonly TRIANGLE_FAN: GLenum;\\\\n    readonly TRIANGLE_STRIP: GLenum;\\\\n    readonly UNPACK_ALIGNMENT: GLenum;\\\\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;\\\\n    readonly UNPACK_FLIP_Y_WEBGL: GLenum;\\\\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;\\\\n    readonly UNSIGNED_BYTE: GLenum;\\\\n    readonly UNSIGNED_INT: GLenum;\\\\n    readonly UNSIGNED_SHORT: GLenum;\\\\n    readonly UNSIGNED_SHORT_4_4_4_4: GLenum;\\\\n    readonly UNSIGNED_SHORT_5_5_5_1: GLenum;\\\\n    readonly UNSIGNED_SHORT_5_6_5: GLenum;\\\\n    readonly VALIDATE_STATUS: GLenum;\\\\n    readonly VENDOR: GLenum;\\\\n    readonly VERSION: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: GLenum;\\\\n    readonly VERTEX_SHADER: GLenum;\\\\n    readonly VIEWPORT: GLenum;\\\\n    readonly ZERO: GLenum;\\\\n};\\\\n\\\\ninterface WebGLRenderingContextBase {\\\\n    readonly canvas: OffscreenCanvas;\\\\n    readonly drawingBufferHeight: GLsizei;\\\\n    readonly drawingBufferWidth: GLsizei;\\\\n    activeTexture(texture: GLenum): void;\\\\n    attachShader(program: WebGLProgram, shader: WebGLShader): void;\\\\n    bindAttribLocation(program: WebGLProgram, index: GLuint, name: string): void;\\\\n    bindBuffer(target: GLenum, buffer: WebGLBuffer | null): void;\\\\n    bindFramebuffer(target: GLenum, framebuffer: WebGLFramebuffer | null): void;\\\\n    bindRenderbuffer(target: GLenum, renderbuffer: WebGLRenderbuffer | null): void;\\\\n    bindTexture(target: GLenum, texture: WebGLTexture | null): void;\\\\n    blendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): void;\\\\n    blendEquation(mode: GLenum): void;\\\\n    blendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum): void;\\\\n    blendFunc(sfactor: GLenum, dfactor: GLenum): void;\\\\n    blendFuncSeparate(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void;\\\\n    checkFramebufferStatus(target: GLenum): GLenum;\\\\n    clear(mask: GLbitfield): void;\\\\n    clearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): void;\\\\n    clearDepth(depth: GLclampf): void;\\\\n    clearStencil(s: GLint): void;\\\\n    colorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean): void;\\\\n    compileShader(shader: WebGLShader): void;\\\\n    copyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void;\\\\n    copyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\\\\n    createBuffer(): WebGLBuffer | null;\\\\n    createFramebuffer(): WebGLFramebuffer | null;\\\\n    createProgram(): WebGLProgram | null;\\\\n    createRenderbuffer(): WebGLRenderbuffer | null;\\\\n    createShader(type: GLenum): WebGLShader | null;\\\\n    createTexture(): WebGLTexture | null;\\\\n    cullFace(mode: GLenum): void;\\\\n    deleteBuffer(buffer: WebGLBuffer | null): void;\\\\n    deleteFramebuffer(framebuffer: WebGLFramebuffer | null): void;\\\\n    deleteProgram(program: WebGLProgram | null): void;\\\\n    deleteRenderbuffer(renderbuffer: WebGLRenderbuffer | null): void;\\\\n    deleteShader(shader: WebGLShader | null): void;\\\\n    deleteTexture(texture: WebGLTexture | null): void;\\\\n    depthFunc(func: GLenum): void;\\\\n    depthMask(flag: GLboolean): void;\\\\n    depthRange(zNear: GLclampf, zFar: GLclampf): void;\\\\n    detachShader(program: WebGLProgram, shader: WebGLShader): void;\\\\n    disable(cap: GLenum): void;\\\\n    disableVertexAttribArray(index: GLuint): void;\\\\n    drawArrays(mode: GLenum, first: GLint, count: GLsizei): void;\\\\n    drawElements(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr): void;\\\\n    enable(cap: GLenum): void;\\\\n    enableVertexAttribArray(index: GLuint): void;\\\\n    finish(): void;\\\\n    flush(): void;\\\\n    framebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: WebGLRenderbuffer | null): void;\\\\n    framebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: WebGLTexture | null, level: GLint): void;\\\\n    frontFace(mode: GLenum): void;\\\\n    generateMipmap(target: GLenum): void;\\\\n    getActiveAttrib(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;\\\\n    getActiveUniform(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;\\\\n    getAttachedShaders(program: WebGLProgram): WebGLShader[] | null;\\\\n    getAttribLocation(program: WebGLProgram, name: string): GLint;\\\\n    getBufferParameter(target: GLenum, pname: GLenum): any;\\\\n    getContextAttributes(): WebGLContextAttributes | null;\\\\n    getError(): GLenum;\\\\n    getExtension(extensionName: \\\\\\\"EXT_blend_minmax\\\\\\\"): EXT_blend_minmax | null;\\\\n    getExtension(extensionName: \\\\\\\"EXT_texture_filter_anisotropic\\\\\\\"): EXT_texture_filter_anisotropic | null;\\\\n    getExtension(extensionName: \\\\\\\"EXT_frag_depth\\\\\\\"): EXT_frag_depth | null;\\\\n    getExtension(extensionName: \\\\\\\"EXT_shader_texture_lod\\\\\\\"): EXT_shader_texture_lod | null;\\\\n    getExtension(extensionName: \\\\\\\"EXT_sRGB\\\\\\\"): EXT_sRGB | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_vertex_array_object\\\\\\\"): OES_vertex_array_object | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_color_buffer_float\\\\\\\"): WEBGL_color_buffer_float | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_compressed_texture_astc\\\\\\\"): WEBGL_compressed_texture_astc | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_compressed_texture_s3tc_srgb\\\\\\\"): WEBGL_compressed_texture_s3tc_srgb | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_debug_shaders\\\\\\\"): WEBGL_debug_shaders | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_draw_buffers\\\\\\\"): WEBGL_draw_buffers | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_lose_context\\\\\\\"): WEBGL_lose_context | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_depth_texture\\\\\\\"): WEBGL_depth_texture | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_debug_renderer_info\\\\\\\"): WEBGL_debug_renderer_info | null;\\\\n    getExtension(extensionName: \\\\\\\"WEBGL_compressed_texture_s3tc\\\\\\\"): WEBGL_compressed_texture_s3tc | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_texture_half_float_linear\\\\\\\"): OES_texture_half_float_linear | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_texture_half_float\\\\\\\"): OES_texture_half_float | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_texture_float_linear\\\\\\\"): OES_texture_float_linear | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_texture_float\\\\\\\"): OES_texture_float | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_standard_derivatives\\\\\\\"): OES_standard_derivatives | null;\\\\n    getExtension(extensionName: \\\\\\\"OES_element_index_uint\\\\\\\"): OES_element_index_uint | null;\\\\n    getExtension(extensionName: \\\\\\\"ANGLE_instanced_arrays\\\\\\\"): ANGLE_instanced_arrays | null;\\\\n    getExtension(extensionName: string): any;\\\\n    getFramebufferAttachmentParameter(target: GLenum, attachment: GLenum, pname: GLenum): any;\\\\n    getParameter(pname: GLenum): any;\\\\n    getProgramInfoLog(program: WebGLProgram): string | null;\\\\n    getProgramParameter(program: WebGLProgram, pname: GLenum): any;\\\\n    getRenderbufferParameter(target: GLenum, pname: GLenum): any;\\\\n    getShaderInfoLog(shader: WebGLShader): string | null;\\\\n    getShaderParameter(shader: WebGLShader, pname: GLenum): any;\\\\n    getShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum): WebGLShaderPrecisionFormat | null;\\\\n    getShaderSource(shader: WebGLShader): string | null;\\\\n    getSupportedExtensions(): string[] | null;\\\\n    getTexParameter(target: GLenum, pname: GLenum): any;\\\\n    getUniform(program: WebGLProgram, location: WebGLUniformLocation): any;\\\\n    getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation | null;\\\\n    getVertexAttrib(index: GLuint, pname: GLenum): any;\\\\n    getVertexAttribOffset(index: GLuint, pname: GLenum): GLintptr;\\\\n    hint(target: GLenum, mode: GLenum): void;\\\\n    isBuffer(buffer: WebGLBuffer | null): GLboolean;\\\\n    isContextLost(): boolean;\\\\n    isEnabled(cap: GLenum): GLboolean;\\\\n    isFramebuffer(framebuffer: WebGLFramebuffer | null): GLboolean;\\\\n    isProgram(program: WebGLProgram | null): GLboolean;\\\\n    isRenderbuffer(renderbuffer: WebGLRenderbuffer | null): GLboolean;\\\\n    isShader(shader: WebGLShader | null): GLboolean;\\\\n    isTexture(texture: WebGLTexture | null): GLboolean;\\\\n    lineWidth(width: GLfloat): void;\\\\n    linkProgram(program: WebGLProgram): void;\\\\n    pixelStorei(pname: GLenum, param: GLint | GLboolean): void;\\\\n    polygonOffset(factor: GLfloat, units: GLfloat): void;\\\\n    renderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void;\\\\n    sampleCoverage(value: GLclampf, invert: GLboolean): void;\\\\n    scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\\\\n    shaderSource(shader: WebGLShader, source: string): void;\\\\n    stencilFunc(func: GLenum, ref: GLint, mask: GLuint): void;\\\\n    stencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint): void;\\\\n    stencilMask(mask: GLuint): void;\\\\n    stencilMaskSeparate(face: GLenum, mask: GLuint): void;\\\\n    stencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum): void;\\\\n    stencilOpSeparate(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum): void;\\\\n    texParameterf(target: GLenum, pname: GLenum, param: GLfloat): void;\\\\n    texParameteri(target: GLenum, pname: GLenum, param: GLint): void;\\\\n    uniform1f(location: WebGLUniformLocation | null, x: GLfloat): void;\\\\n    uniform1i(location: WebGLUniformLocation | null, x: GLint): void;\\\\n    uniform2f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat): void;\\\\n    uniform2i(location: WebGLUniformLocation | null, x: GLint, y: GLint): void;\\\\n    uniform3f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat, z: GLfloat): void;\\\\n    uniform3i(location: WebGLUniformLocation | null, x: GLint, y: GLint, z: GLint): void;\\\\n    uniform4f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;\\\\n    uniform4i(location: WebGLUniformLocation | null, x: GLint, y: GLint, z: GLint, w: GLint): void;\\\\n    useProgram(program: WebGLProgram | null): void;\\\\n    validateProgram(program: WebGLProgram): void;\\\\n    vertexAttrib1f(index: GLuint, x: GLfloat): void;\\\\n    vertexAttrib1fv(index: GLuint, values: Float32List): void;\\\\n    vertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat): void;\\\\n    vertexAttrib2fv(index: GLuint, values: Float32List): void;\\\\n    vertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void;\\\\n    vertexAttrib3fv(index: GLuint, values: Float32List): void;\\\\n    vertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;\\\\n    vertexAttrib4fv(index: GLuint, values: Float32List): void;\\\\n    vertexAttribPointer(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr): void;\\\\n    viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;\\\\n    readonly ACTIVE_ATTRIBUTES: GLenum;\\\\n    readonly ACTIVE_TEXTURE: GLenum;\\\\n    readonly ACTIVE_UNIFORMS: GLenum;\\\\n    readonly ALIASED_LINE_WIDTH_RANGE: GLenum;\\\\n    readonly ALIASED_POINT_SIZE_RANGE: GLenum;\\\\n    readonly ALPHA: GLenum;\\\\n    readonly ALPHA_BITS: GLenum;\\\\n    readonly ALWAYS: GLenum;\\\\n    readonly ARRAY_BUFFER: GLenum;\\\\n    readonly ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly ATTACHED_SHADERS: GLenum;\\\\n    readonly BACK: GLenum;\\\\n    readonly BLEND: GLenum;\\\\n    readonly BLEND_COLOR: GLenum;\\\\n    readonly BLEND_DST_ALPHA: GLenum;\\\\n    readonly BLEND_DST_RGB: GLenum;\\\\n    readonly BLEND_EQUATION: GLenum;\\\\n    readonly BLEND_EQUATION_ALPHA: GLenum;\\\\n    readonly BLEND_EQUATION_RGB: GLenum;\\\\n    readonly BLEND_SRC_ALPHA: GLenum;\\\\n    readonly BLEND_SRC_RGB: GLenum;\\\\n    readonly BLUE_BITS: GLenum;\\\\n    readonly BOOL: GLenum;\\\\n    readonly BOOL_VEC2: GLenum;\\\\n    readonly BOOL_VEC3: GLenum;\\\\n    readonly BOOL_VEC4: GLenum;\\\\n    readonly BROWSER_DEFAULT_WEBGL: GLenum;\\\\n    readonly BUFFER_SIZE: GLenum;\\\\n    readonly BUFFER_USAGE: GLenum;\\\\n    readonly BYTE: GLenum;\\\\n    readonly CCW: GLenum;\\\\n    readonly CLAMP_TO_EDGE: GLenum;\\\\n    readonly COLOR_ATTACHMENT0: GLenum;\\\\n    readonly COLOR_BUFFER_BIT: GLenum;\\\\n    readonly COLOR_CLEAR_VALUE: GLenum;\\\\n    readonly COLOR_WRITEMASK: GLenum;\\\\n    readonly COMPILE_STATUS: GLenum;\\\\n    readonly COMPRESSED_TEXTURE_FORMATS: GLenum;\\\\n    readonly CONSTANT_ALPHA: GLenum;\\\\n    readonly CONSTANT_COLOR: GLenum;\\\\n    readonly CONTEXT_LOST_WEBGL: GLenum;\\\\n    readonly CULL_FACE: GLenum;\\\\n    readonly CULL_FACE_MODE: GLenum;\\\\n    readonly CURRENT_PROGRAM: GLenum;\\\\n    readonly CURRENT_VERTEX_ATTRIB: GLenum;\\\\n    readonly CW: GLenum;\\\\n    readonly DECR: GLenum;\\\\n    readonly DECR_WRAP: GLenum;\\\\n    readonly DELETE_STATUS: GLenum;\\\\n    readonly DEPTH_ATTACHMENT: GLenum;\\\\n    readonly DEPTH_BITS: GLenum;\\\\n    readonly DEPTH_BUFFER_BIT: GLenum;\\\\n    readonly DEPTH_CLEAR_VALUE: GLenum;\\\\n    readonly DEPTH_COMPONENT: GLenum;\\\\n    readonly DEPTH_COMPONENT16: GLenum;\\\\n    readonly DEPTH_FUNC: GLenum;\\\\n    readonly DEPTH_RANGE: GLenum;\\\\n    readonly DEPTH_STENCIL: GLenum;\\\\n    readonly DEPTH_STENCIL_ATTACHMENT: GLenum;\\\\n    readonly DEPTH_TEST: GLenum;\\\\n    readonly DEPTH_WRITEMASK: GLenum;\\\\n    readonly DITHER: GLenum;\\\\n    readonly DONT_CARE: GLenum;\\\\n    readonly DST_ALPHA: GLenum;\\\\n    readonly DST_COLOR: GLenum;\\\\n    readonly DYNAMIC_DRAW: GLenum;\\\\n    readonly ELEMENT_ARRAY_BUFFER: GLenum;\\\\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly EQUAL: GLenum;\\\\n    readonly FASTEST: GLenum;\\\\n    readonly FLOAT: GLenum;\\\\n    readonly FLOAT_MAT2: GLenum;\\\\n    readonly FLOAT_MAT3: GLenum;\\\\n    readonly FLOAT_MAT4: GLenum;\\\\n    readonly FLOAT_VEC2: GLenum;\\\\n    readonly FLOAT_VEC3: GLenum;\\\\n    readonly FLOAT_VEC4: GLenum;\\\\n    readonly FRAGMENT_SHADER: GLenum;\\\\n    readonly FRAMEBUFFER: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;\\\\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;\\\\n    readonly FRAMEBUFFER_BINDING: GLenum;\\\\n    readonly FRAMEBUFFER_COMPLETE: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;\\\\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;\\\\n    readonly FRAMEBUFFER_UNSUPPORTED: GLenum;\\\\n    readonly FRONT: GLenum;\\\\n    readonly FRONT_AND_BACK: GLenum;\\\\n    readonly FRONT_FACE: GLenum;\\\\n    readonly FUNC_ADD: GLenum;\\\\n    readonly FUNC_REVERSE_SUBTRACT: GLenum;\\\\n    readonly FUNC_SUBTRACT: GLenum;\\\\n    readonly GENERATE_MIPMAP_HINT: GLenum;\\\\n    readonly GEQUAL: GLenum;\\\\n    readonly GREATER: GLenum;\\\\n    readonly GREEN_BITS: GLenum;\\\\n    readonly HIGH_FLOAT: GLenum;\\\\n    readonly HIGH_INT: GLenum;\\\\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;\\\\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: GLenum;\\\\n    readonly INCR: GLenum;\\\\n    readonly INCR_WRAP: GLenum;\\\\n    readonly INT: GLenum;\\\\n    readonly INT_VEC2: GLenum;\\\\n    readonly INT_VEC3: GLenum;\\\\n    readonly INT_VEC4: GLenum;\\\\n    readonly INVALID_ENUM: GLenum;\\\\n    readonly INVALID_FRAMEBUFFER_OPERATION: GLenum;\\\\n    readonly INVALID_OPERATION: GLenum;\\\\n    readonly INVALID_VALUE: GLenum;\\\\n    readonly INVERT: GLenum;\\\\n    readonly KEEP: GLenum;\\\\n    readonly LEQUAL: GLenum;\\\\n    readonly LESS: GLenum;\\\\n    readonly LINEAR: GLenum;\\\\n    readonly LINEAR_MIPMAP_LINEAR: GLenum;\\\\n    readonly LINEAR_MIPMAP_NEAREST: GLenum;\\\\n    readonly LINES: GLenum;\\\\n    readonly LINE_LOOP: GLenum;\\\\n    readonly LINE_STRIP: GLenum;\\\\n    readonly LINE_WIDTH: GLenum;\\\\n    readonly LINK_STATUS: GLenum;\\\\n    readonly LOW_FLOAT: GLenum;\\\\n    readonly LOW_INT: GLenum;\\\\n    readonly LUMINANCE: GLenum;\\\\n    readonly LUMINANCE_ALPHA: GLenum;\\\\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;\\\\n    readonly MAX_RENDERBUFFER_SIZE: GLenum;\\\\n    readonly MAX_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_TEXTURE_SIZE: GLenum;\\\\n    readonly MAX_VARYING_VECTORS: GLenum;\\\\n    readonly MAX_VERTEX_ATTRIBS: GLenum;\\\\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;\\\\n    readonly MAX_VERTEX_UNIFORM_VECTORS: GLenum;\\\\n    readonly MAX_VIEWPORT_DIMS: GLenum;\\\\n    readonly MEDIUM_FLOAT: GLenum;\\\\n    readonly MEDIUM_INT: GLenum;\\\\n    readonly MIRRORED_REPEAT: GLenum;\\\\n    readonly NEAREST: GLenum;\\\\n    readonly NEAREST_MIPMAP_LINEAR: GLenum;\\\\n    readonly NEAREST_MIPMAP_NEAREST: GLenum;\\\\n    readonly NEVER: GLenum;\\\\n    readonly NICEST: GLenum;\\\\n    readonly NONE: GLenum;\\\\n    readonly NOTEQUAL: GLenum;\\\\n    readonly NO_ERROR: GLenum;\\\\n    readonly ONE: GLenum;\\\\n    readonly ONE_MINUS_CONSTANT_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_CONSTANT_COLOR: GLenum;\\\\n    readonly ONE_MINUS_DST_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_DST_COLOR: GLenum;\\\\n    readonly ONE_MINUS_SRC_ALPHA: GLenum;\\\\n    readonly ONE_MINUS_SRC_COLOR: GLenum;\\\\n    readonly OUT_OF_MEMORY: GLenum;\\\\n    readonly PACK_ALIGNMENT: GLenum;\\\\n    readonly POINTS: GLenum;\\\\n    readonly POLYGON_OFFSET_FACTOR: GLenum;\\\\n    readonly POLYGON_OFFSET_FILL: GLenum;\\\\n    readonly POLYGON_OFFSET_UNITS: GLenum;\\\\n    readonly RED_BITS: GLenum;\\\\n    readonly RENDERBUFFER: GLenum;\\\\n    readonly RENDERBUFFER_ALPHA_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_BINDING: GLenum;\\\\n    readonly RENDERBUFFER_BLUE_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_DEPTH_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_GREEN_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_HEIGHT: GLenum;\\\\n    readonly RENDERBUFFER_INTERNAL_FORMAT: GLenum;\\\\n    readonly RENDERBUFFER_RED_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_STENCIL_SIZE: GLenum;\\\\n    readonly RENDERBUFFER_WIDTH: GLenum;\\\\n    readonly RENDERER: GLenum;\\\\n    readonly REPEAT: GLenum;\\\\n    readonly REPLACE: GLenum;\\\\n    readonly RGB: GLenum;\\\\n    readonly RGB565: GLenum;\\\\n    readonly RGB5_A1: GLenum;\\\\n    readonly RGBA: GLenum;\\\\n    readonly RGBA4: GLenum;\\\\n    readonly SAMPLER_2D: GLenum;\\\\n    readonly SAMPLER_CUBE: GLenum;\\\\n    readonly SAMPLES: GLenum;\\\\n    readonly SAMPLE_ALPHA_TO_COVERAGE: GLenum;\\\\n    readonly SAMPLE_BUFFERS: GLenum;\\\\n    readonly SAMPLE_COVERAGE: GLenum;\\\\n    readonly SAMPLE_COVERAGE_INVERT: GLenum;\\\\n    readonly SAMPLE_COVERAGE_VALUE: GLenum;\\\\n    readonly SCISSOR_BOX: GLenum;\\\\n    readonly SCISSOR_TEST: GLenum;\\\\n    readonly SHADER_TYPE: GLenum;\\\\n    readonly SHADING_LANGUAGE_VERSION: GLenum;\\\\n    readonly SHORT: GLenum;\\\\n    readonly SRC_ALPHA: GLenum;\\\\n    readonly SRC_ALPHA_SATURATE: GLenum;\\\\n    readonly SRC_COLOR: GLenum;\\\\n    readonly STATIC_DRAW: GLenum;\\\\n    readonly STENCIL_ATTACHMENT: GLenum;\\\\n    readonly STENCIL_BACK_FAIL: GLenum;\\\\n    readonly STENCIL_BACK_FUNC: GLenum;\\\\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;\\\\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: GLenum;\\\\n    readonly STENCIL_BACK_REF: GLenum;\\\\n    readonly STENCIL_BACK_VALUE_MASK: GLenum;\\\\n    readonly STENCIL_BACK_WRITEMASK: GLenum;\\\\n    readonly STENCIL_BITS: GLenum;\\\\n    readonly STENCIL_BUFFER_BIT: GLenum;\\\\n    readonly STENCIL_CLEAR_VALUE: GLenum;\\\\n    readonly STENCIL_FAIL: GLenum;\\\\n    readonly STENCIL_FUNC: GLenum;\\\\n    readonly STENCIL_INDEX8: GLenum;\\\\n    readonly STENCIL_PASS_DEPTH_FAIL: GLenum;\\\\n    readonly STENCIL_PASS_DEPTH_PASS: GLenum;\\\\n    readonly STENCIL_REF: GLenum;\\\\n    readonly STENCIL_TEST: GLenum;\\\\n    readonly STENCIL_VALUE_MASK: GLenum;\\\\n    readonly STENCIL_WRITEMASK: GLenum;\\\\n    readonly STREAM_DRAW: GLenum;\\\\n    readonly SUBPIXEL_BITS: GLenum;\\\\n    readonly TEXTURE: GLenum;\\\\n    readonly TEXTURE0: GLenum;\\\\n    readonly TEXTURE1: GLenum;\\\\n    readonly TEXTURE10: GLenum;\\\\n    readonly TEXTURE11: GLenum;\\\\n    readonly TEXTURE12: GLenum;\\\\n    readonly TEXTURE13: GLenum;\\\\n    readonly TEXTURE14: GLenum;\\\\n    readonly TEXTURE15: GLenum;\\\\n    readonly TEXTURE16: GLenum;\\\\n    readonly TEXTURE17: GLenum;\\\\n    readonly TEXTURE18: GLenum;\\\\n    readonly TEXTURE19: GLenum;\\\\n    readonly TEXTURE2: GLenum;\\\\n    readonly TEXTURE20: GLenum;\\\\n    readonly TEXTURE21: GLenum;\\\\n    readonly TEXTURE22: GLenum;\\\\n    readonly TEXTURE23: GLenum;\\\\n    readonly TEXTURE24: GLenum;\\\\n    readonly TEXTURE25: GLenum;\\\\n    readonly TEXTURE26: GLenum;\\\\n    readonly TEXTURE27: GLenum;\\\\n    readonly TEXTURE28: GLenum;\\\\n    readonly TEXTURE29: GLenum;\\\\n    readonly TEXTURE3: GLenum;\\\\n    readonly TEXTURE30: GLenum;\\\\n    readonly TEXTURE31: GLenum;\\\\n    readonly TEXTURE4: GLenum;\\\\n    readonly TEXTURE5: GLenum;\\\\n    readonly TEXTURE6: GLenum;\\\\n    readonly TEXTURE7: GLenum;\\\\n    readonly TEXTURE8: GLenum;\\\\n    readonly TEXTURE9: GLenum;\\\\n    readonly TEXTURE_2D: GLenum;\\\\n    readonly TEXTURE_BINDING_2D: GLenum;\\\\n    readonly TEXTURE_BINDING_CUBE_MAP: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;\\\\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;\\\\n    readonly TEXTURE_MAG_FILTER: GLenum;\\\\n    readonly TEXTURE_MIN_FILTER: GLenum;\\\\n    readonly TEXTURE_WRAP_S: GLenum;\\\\n    readonly TEXTURE_WRAP_T: GLenum;\\\\n    readonly TRIANGLES: GLenum;\\\\n    readonly TRIANGLE_FAN: GLenum;\\\\n    readonly TRIANGLE_STRIP: GLenum;\\\\n    readonly UNPACK_ALIGNMENT: GLenum;\\\\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;\\\\n    readonly UNPACK_FLIP_Y_WEBGL: GLenum;\\\\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;\\\\n    readonly UNSIGNED_BYTE: GLenum;\\\\n    readonly UNSIGNED_INT: GLenum;\\\\n    readonly UNSIGNED_SHORT: GLenum;\\\\n    readonly UNSIGNED_SHORT_4_4_4_4: GLenum;\\\\n    readonly UNSIGNED_SHORT_5_5_5_1: GLenum;\\\\n    readonly UNSIGNED_SHORT_5_6_5: GLenum;\\\\n    readonly VALIDATE_STATUS: GLenum;\\\\n    readonly VENDOR: GLenum;\\\\n    readonly VERSION: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;\\\\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: GLenum;\\\\n    readonly VERTEX_SHADER: GLenum;\\\\n    readonly VIEWPORT: GLenum;\\\\n    readonly ZERO: GLenum;\\\\n}\\\\n\\\\ninterface WebGLRenderingContextOverloads {\\\\n    bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;\\\\n    bufferData(target: GLenum, data: BufferSource | null, usage: GLenum): void;\\\\n    bufferSubData(target: GLenum, offset: GLintptr, data: BufferSource): void;\\\\n    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, data: ArrayBufferView): void;\\\\n    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, data: ArrayBufferView): void;\\\\n    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\\\\n    texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;\\\\n    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;\\\\n    uniform1fv(location: WebGLUniformLocation | null, v: Float32List): void;\\\\n    uniform1iv(location: WebGLUniformLocation | null, v: Int32List): void;\\\\n    uniform2fv(location: WebGLUniformLocation | null, v: Float32List): void;\\\\n    uniform2iv(location: WebGLUniformLocation | null, v: Int32List): void;\\\\n    uniform3fv(location: WebGLUniformLocation | null, v: Float32List): void;\\\\n    uniform3iv(location: WebGLUniformLocation | null, v: Int32List): void;\\\\n    uniform4fv(location: WebGLUniformLocation | null, v: Float32List): void;\\\\n    uniform4iv(location: WebGLUniformLocation | null, v: Int32List): void;\\\\n    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;\\\\n    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;\\\\n    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;\\\\n}\\\\n\\\\ninterface WebGLSampler extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLSampler: {\\\\n    prototype: WebGLSampler;\\\\n    new(): WebGLSampler;\\\\n};\\\\n\\\\n/** The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders. */\\\\ninterface WebGLShader extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLShader: {\\\\n    prototype: WebGLShader;\\\\n    new(): WebGLShader;\\\\n};\\\\n\\\\n/** Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method. */\\\\ninterface WebGLShaderPrecisionFormat {\\\\n    readonly precision: GLint;\\\\n    readonly rangeMax: GLint;\\\\n    readonly rangeMin: GLint;\\\\n}\\\\n\\\\ndeclare var WebGLShaderPrecisionFormat: {\\\\n    prototype: WebGLShaderPrecisionFormat;\\\\n    new(): WebGLShaderPrecisionFormat;\\\\n};\\\\n\\\\ninterface WebGLSync extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLSync: {\\\\n    prototype: WebGLSync;\\\\n    new(): WebGLSync;\\\\n};\\\\n\\\\n/** Part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations. */\\\\ninterface WebGLTexture extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLTexture: {\\\\n    prototype: WebGLTexture;\\\\n    new(): WebGLTexture;\\\\n};\\\\n\\\\ninterface WebGLTransformFeedback extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLTransformFeedback: {\\\\n    prototype: WebGLTransformFeedback;\\\\n    new(): WebGLTransformFeedback;\\\\n};\\\\n\\\\n/** Part of the WebGL API and represents the location of a uniform variable in a shader program. */\\\\ninterface WebGLUniformLocation {\\\\n}\\\\n\\\\ndeclare var WebGLUniformLocation: {\\\\n    prototype: WebGLUniformLocation;\\\\n    new(): WebGLUniformLocation;\\\\n};\\\\n\\\\ninterface WebGLVertexArrayObject extends WebGLObject {\\\\n}\\\\n\\\\ndeclare var WebGLVertexArrayObject: {\\\\n    prototype: WebGLVertexArrayObject;\\\\n    new(): WebGLVertexArrayObject;\\\\n};\\\\n\\\\ninterface WebGLVertexArrayObjectOES extends WebGLObject {\\\\n}\\\\n\\\\ninterface WebSocketEventMap {\\\\n    \\\\\\\"close\\\\\\\": CloseEvent;\\\\n    \\\\\\\"error\\\\\\\": Event;\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n    \\\\\\\"open\\\\\\\": Event;\\\\n}\\\\n\\\\n/** Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection. */\\\\ninterface WebSocket extends EventTarget {\\\\n    binaryType: BinaryType;\\\\n    readonly bufferedAmount: number;\\\\n    readonly extensions: string;\\\\n    onclose: ((this: WebSocket, ev: CloseEvent) => any) | null;\\\\n    onerror: ((this: WebSocket, ev: Event) => any) | null;\\\\n    onmessage: ((this: WebSocket, ev: MessageEvent) => any) | null;\\\\n    onopen: ((this: WebSocket, ev: Event) => any) | null;\\\\n    readonly protocol: string;\\\\n    readonly readyState: number;\\\\n    readonly url: string;\\\\n    close(code?: number, reason?: string): void;\\\\n    send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;\\\\n    readonly CLOSED: number;\\\\n    readonly CLOSING: number;\\\\n    readonly CONNECTING: number;\\\\n    readonly OPEN: number;\\\\n    addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var WebSocket: {\\\\n    prototype: WebSocket;\\\\n    new(url: string, protocols?: string | string[]): WebSocket;\\\\n    readonly CLOSED: number;\\\\n    readonly CLOSING: number;\\\\n    readonly CONNECTING: number;\\\\n    readonly OPEN: number;\\\\n};\\\\n\\\\ninterface WindowBase64 {\\\\n    atob(encodedString: string): string;\\\\n    btoa(rawString: string): string;\\\\n}\\\\n\\\\n/** This ServiceWorker API interface represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources. */\\\\ninterface WindowClient extends Client {\\\\n    readonly ancestorOrigins: ReadonlyArray<string>;\\\\n    readonly focused: boolean;\\\\n    readonly visibilityState: VisibilityState;\\\\n    focus(): Promise<WindowClient>;\\\\n    navigate(url: string): Promise<WindowClient | null>;\\\\n}\\\\n\\\\ndeclare var WindowClient: {\\\\n    prototype: WindowClient;\\\\n    new(): WindowClient;\\\\n};\\\\n\\\\ninterface WindowConsole {\\\\n    readonly console: Console;\\\\n}\\\\n\\\\ninterface WindowOrWorkerGlobalScope {\\\\n    readonly caches: CacheStorage;\\\\n    readonly crypto: Crypto;\\\\n    readonly indexedDB: IDBFactory;\\\\n    readonly origin: string;\\\\n    readonly performance: Performance;\\\\n    atob(data: string): string;\\\\n    btoa(data: string): string;\\\\n    clearInterval(handle?: number): void;\\\\n    clearTimeout(handle?: number): void;\\\\n    createImageBitmap(image: ImageBitmapSource): Promise<ImageBitmap>;\\\\n    createImageBitmap(image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number): Promise<ImageBitmap>;\\\\n    fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;\\\\n    queueMicrotask(callback: Function): void;\\\\n    setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\\\\n    setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\\\\n}\\\\n\\\\ninterface WorkerEventMap extends AbstractWorkerEventMap {\\\\n    \\\\\\\"message\\\\\\\": MessageEvent;\\\\n}\\\\n\\\\n/** This Web Workers API interface represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread. */\\\\ninterface Worker extends EventTarget, AbstractWorker {\\\\n    onmessage: ((this: Worker, ev: MessageEvent) => any) | null;\\\\n    postMessage(message: any, transfer: Transferable[]): void;\\\\n    postMessage(message: any, options?: PostMessageOptions): void;\\\\n    terminate(): void;\\\\n    addEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var Worker: {\\\\n    prototype: Worker;\\\\n    new(stringUrl: string | URL, options?: WorkerOptions): Worker;\\\\n};\\\\n\\\\ninterface WorkerGlobalScopeEventMap {\\\\n    \\\\\\\"error\\\\\\\": ErrorEvent;\\\\n}\\\\n\\\\n/** This Web Workers API interface is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop. */\\\\ninterface WorkerGlobalScope extends EventTarget, WorkerUtils, WindowConsole, WindowOrWorkerGlobalScope {\\\\n    readonly caches: CacheStorage;\\\\n    readonly isSecureContext: boolean;\\\\n    readonly location: WorkerLocation;\\\\n    onerror: ((this: WorkerGlobalScope, ev: ErrorEvent) => any) | null;\\\\n    readonly performance: Performance;\\\\n    readonly self: WorkerGlobalScope & typeof globalThis;\\\\n    msWriteProfilerMark(profilerMarkName: string): void;\\\\n    addEventListener<K extends keyof WorkerGlobalScopeEventMap>(type: K, listener: (this: WorkerGlobalScope, ev: WorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof WorkerGlobalScopeEventMap>(type: K, listener: (this: WorkerGlobalScope, ev: WorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var WorkerGlobalScope: {\\\\n    prototype: WorkerGlobalScope;\\\\n    new(): WorkerGlobalScope;\\\\n};\\\\n\\\\n/** The absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location. */\\\\ninterface WorkerLocation {\\\\n    readonly hash: string;\\\\n    readonly host: string;\\\\n    readonly hostname: string;\\\\n    readonly href: string;\\\\n    readonly origin: string;\\\\n    readonly pathname: string;\\\\n    readonly port: string;\\\\n    readonly protocol: string;\\\\n    readonly search: string;\\\\n    toString(): string;\\\\n}\\\\n\\\\ndeclare var WorkerLocation: {\\\\n    prototype: WorkerLocation;\\\\n    new(): WorkerLocation;\\\\n};\\\\n\\\\n/** A subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator. */\\\\ninterface WorkerNavigator extends NavigatorID, NavigatorOnLine, NavigatorBeacon, NavigatorConcurrentHardware, NavigatorStorage {\\\\n    readonly permissions: Permissions;\\\\n    readonly serviceWorker: ServiceWorkerContainer;\\\\n}\\\\n\\\\ndeclare var WorkerNavigator: {\\\\n    prototype: WorkerNavigator;\\\\n    new(): WorkerNavigator;\\\\n};\\\\n\\\\ninterface WorkerUtils extends WindowBase64 {\\\\n    readonly indexedDB: IDBFactory;\\\\n    readonly msIndexedDB: IDBFactory;\\\\n    readonly navigator: WorkerNavigator;\\\\n    importScripts(...urls: string[]): void;\\\\n}\\\\n\\\\n/** This Streams API interface provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing. */\\\\ninterface WritableStream<W = any> {\\\\n    readonly locked: boolean;\\\\n    abort(reason?: any): Promise<void>;\\\\n    getWriter(): WritableStreamDefaultWriter<W>;\\\\n}\\\\n\\\\ndeclare var WritableStream: {\\\\n    prototype: WritableStream;\\\\n    new<W = any>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>;\\\\n};\\\\n\\\\n/** This Streams API interface represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate. */\\\\ninterface WritableStreamDefaultController {\\\\n    error(error?: any): void;\\\\n}\\\\n\\\\n/** This Streams API interface is the object returned by WritableStream.getWriter() and once created locks the < writer to the WritableStream ensuring that no other streams can write to the underlying sink. */\\\\ninterface WritableStreamDefaultWriter<W = any> {\\\\n    readonly closed: Promise<void>;\\\\n    readonly desiredSize: number | null;\\\\n    readonly ready: Promise<void>;\\\\n    abort(reason?: any): Promise<void>;\\\\n    close(): Promise<void>;\\\\n    releaseLock(): void;\\\\n    write(chunk: W): Promise<void>;\\\\n}\\\\n\\\\ninterface XMLHttpRequestEventMap extends XMLHttpRequestEventTargetEventMap {\\\\n    \\\\\\\"readystatechange\\\\\\\": Event;\\\\n}\\\\n\\\\n/** Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing. */\\\\ninterface XMLHttpRequest extends XMLHttpRequestEventTarget {\\\\n    onreadystatechange: ((this: XMLHttpRequest, ev: Event) => any) | null;\\\\n    /**\\\\n     * Returns client's state.\\\\n     */\\\\n    readonly readyState: number;\\\\n    /**\\\\n     * Returns the response's body.\\\\n     */\\\\n    readonly response: any;\\\\n    /**\\\\n     * Returns the text response.\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if responseType is not the empty string or \\\\\\\"text\\\\\\\".\\\\n     */\\\\n    readonly responseText: string;\\\\n    /**\\\\n     * Returns the response type.\\\\n     * \\\\n     * Can be set to change the response type. Values are: the empty string (default), \\\\\\\"arraybuffer\\\\\\\", \\\\\\\"blob\\\\\\\", \\\\\\\"document\\\\\\\", \\\\\\\"json\\\\\\\", and \\\\\\\"text\\\\\\\".\\\\n     * \\\\n     * When set: setting to \\\\\\\"document\\\\\\\" is ignored if current global object is not a Window object.\\\\n     * \\\\n     * When set: throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if state is loading or done.\\\\n     * \\\\n     * When set: throws an \\\\\\\"InvalidAccessError\\\\\\\" DOMException if the synchronous flag is set and current global object is a Window object.\\\\n     */\\\\n    responseType: XMLHttpRequestResponseType;\\\\n    readonly responseURL: string;\\\\n    readonly status: number;\\\\n    readonly statusText: string;\\\\n    /**\\\\n     * Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the request has not yet completed, and the synchronous flag is unset, a timeout event will then be dispatched, or a \\\\\\\"TimeoutError\\\\\\\" DOMException will be thrown otherwise (for the send() method).\\\\n     * \\\\n     * When set: throws an \\\\\\\"InvalidAccessError\\\\\\\" DOMException if the synchronous flag is set and current global object is a Window object.\\\\n     */\\\\n    timeout: number;\\\\n    /**\\\\n     * Returns the associated XMLHttpRequestUpload object. It can be used to gather transmission information when data is transferred to a server.\\\\n     */\\\\n    readonly upload: XMLHttpRequestUpload;\\\\n    /**\\\\n     * True when credentials are to be included in a cross-origin request. False when they are to be excluded in a cross-origin request and when cookies are to be ignored in its response. Initially false.\\\\n     * \\\\n     * When set: throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if state is not unsent or opened, or if the send() flag is set.\\\\n     */\\\\n    withCredentials: boolean;\\\\n    /**\\\\n     * Cancels any network activity.\\\\n     */\\\\n    abort(): void;\\\\n    getAllResponseHeaders(): string;\\\\n    getResponseHeader(name: string): string | null;\\\\n    /**\\\\n     * Sets the request method, request URL, and synchronous flag.\\\\n     * \\\\n     * Throws a \\\\\\\"SyntaxError\\\\\\\" DOMException if either method is not a valid HTTP method or url cannot be parsed.\\\\n     * \\\\n     * Throws a \\\\\\\"SecurityError\\\\\\\" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidAccessError\\\\\\\" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.\\\\n     */\\\\n    open(method: string, url: string): void;\\\\n    open(method: string, url: string, async: boolean, username?: string | null, password?: string | null): void;\\\\n    /**\\\\n     * Acts as if the `Content-Type` header value for response is mime. (It does not actually change the header though.)\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if state is loading or done.\\\\n     */\\\\n    overrideMimeType(mime: string): void;\\\\n    /**\\\\n     * Initiates the request. The body argument provides the request body, if any, and is ignored if the request method is GET or HEAD.\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if either state is not opened or the send() flag is set.\\\\n     */\\\\n    send(body?: BodyInit | null): void;\\\\n    /**\\\\n     * Combines a header in author request headers.\\\\n     * \\\\n     * Throws an \\\\\\\"InvalidStateError\\\\\\\" DOMException if either state is not opened or the send() flag is set.\\\\n     * \\\\n     * Throws a \\\\\\\"SyntaxError\\\\\\\" DOMException if name is not a header name or if value is not a header value.\\\\n     */\\\\n    setRequestHeader(name: string, value: string): void;\\\\n    readonly DONE: number;\\\\n    readonly HEADERS_RECEIVED: number;\\\\n    readonly LOADING: number;\\\\n    readonly OPENED: number;\\\\n    readonly UNSENT: number;\\\\n    addEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var XMLHttpRequest: {\\\\n    prototype: XMLHttpRequest;\\\\n    new(): XMLHttpRequest;\\\\n    readonly DONE: number;\\\\n    readonly HEADERS_RECEIVED: number;\\\\n    readonly LOADING: number;\\\\n    readonly OPENED: number;\\\\n    readonly UNSENT: number;\\\\n};\\\\n\\\\ninterface XMLHttpRequestEventTargetEventMap {\\\\n    \\\\\\\"abort\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n    \\\\\\\"error\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n    \\\\\\\"load\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n    \\\\\\\"loadend\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n    \\\\\\\"loadstart\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n    \\\\\\\"progress\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n    \\\\\\\"timeout\\\\\\\": ProgressEvent<XMLHttpRequestEventTarget>;\\\\n}\\\\n\\\\ninterface XMLHttpRequestEventTarget extends EventTarget {\\\\n    onabort: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    onerror: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    onload: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    onloadend: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    onloadstart: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    onprogress: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    ontimeout: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\\\\n    addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestEventTarget, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestEventTarget, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var XMLHttpRequestEventTarget: {\\\\n    prototype: XMLHttpRequestEventTarget;\\\\n    new(): XMLHttpRequestEventTarget;\\\\n};\\\\n\\\\ninterface XMLHttpRequestUpload extends XMLHttpRequestEventTarget {\\\\n    addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\n    removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\n}\\\\n\\\\ndeclare var XMLHttpRequestUpload: {\\\\n    prototype: XMLHttpRequestUpload;\\\\n    new(): XMLHttpRequestUpload;\\\\n};\\\\n\\\\ndeclare type EventListenerOrEventListenerObject = EventListener | EventListenerObject;\\\\n\\\\ndeclare namespace WebAssembly {\\\\n    interface Global {\\\\n        value: any;\\\\n        valueOf(): any;\\\\n    }\\\\n    \\\\n    var Global: {\\\\n        prototype: Global;\\\\n        new(descriptor: GlobalDescriptor, value?: any): Global;\\\\n    };\\\\n    \\\\n    interface Instance {\\\\n        readonly exports: any;\\\\n    }\\\\n    \\\\n    var Instance: {\\\\n        prototype: Instance;\\\\n        new(module: Module, importObject?: any): Instance;\\\\n    };\\\\n    \\\\n    interface Memory {\\\\n        readonly buffer: ArrayBuffer;\\\\n        grow(delta: number): number;\\\\n    }\\\\n    \\\\n    var Memory: {\\\\n        prototype: Memory;\\\\n        new(descriptor: MemoryDescriptor): Memory;\\\\n    };\\\\n    \\\\n    interface Module {\\\\n    }\\\\n    \\\\n    var Module: {\\\\n        prototype: Module;\\\\n        new(bytes: BufferSource): Module;\\\\n        customSections(module: Module, sectionName: string): ArrayBuffer[];\\\\n        exports(module: Module): ModuleExportDescriptor[];\\\\n        imports(module: Module): ModuleImportDescriptor[];\\\\n    };\\\\n    \\\\n    interface Table {\\\\n        readonly length: number;\\\\n        get(index: number): Function | null;\\\\n        grow(delta: number): number;\\\\n        set(index: number, value: Function | null): void;\\\\n    }\\\\n    \\\\n    var Table: {\\\\n        prototype: Table;\\\\n        new(descriptor: TableDescriptor): Table;\\\\n    };\\\\n    \\\\n    interface GlobalDescriptor {\\\\n        mutable?: boolean;\\\\n        value: string;\\\\n    }\\\\n    \\\\n    interface MemoryDescriptor {\\\\n        initial: number;\\\\n        maximum?: number;\\\\n    }\\\\n    \\\\n    interface ModuleExportDescriptor {\\\\n        kind: ImportExportKind;\\\\n        name: string;\\\\n    }\\\\n    \\\\n    interface ModuleImportDescriptor {\\\\n        kind: ImportExportKind;\\\\n        module: string;\\\\n        name: string;\\\\n    }\\\\n    \\\\n    interface TableDescriptor {\\\\n        element: TableKind;\\\\n        initial: number;\\\\n        maximum?: number;\\\\n    }\\\\n    \\\\n    interface WebAssemblyInstantiatedSource {\\\\n        instance: Instance;\\\\n        module: Module;\\\\n    }\\\\n    \\\\n    type ImportExportKind = \\\\\\\"function\\\\\\\" | \\\\\\\"table\\\\\\\" | \\\\\\\"memory\\\\\\\" | \\\\\\\"global\\\\\\\";\\\\n    type TableKind = \\\\\\\"anyfunc\\\\\\\";\\\\n    function compile(bytes: BufferSource): Promise<Module>;\\\\n    function instantiate(bytes: BufferSource, importObject?: any): Promise<WebAssemblyInstantiatedSource>;\\\\n    function instantiate(moduleObject: Module, importObject?: any): Promise<Instance>;\\\\n    function validate(bytes: BufferSource): boolean;\\\\n}\\\\n\\\\ninterface EventHandlerNonNull {\\\\n    (event: Event): any;\\\\n}\\\\n\\\\ninterface FrameRequestCallback {\\\\n    (time: number): void;\\\\n}\\\\n\\\\ninterface PerformanceObserverCallback {\\\\n    (entries: PerformanceObserverEntryList, observer: PerformanceObserver): void;\\\\n}\\\\n\\\\ninterface QueuingStrategySizeCallback<T = any> {\\\\n    (chunk: T): number;\\\\n}\\\\n\\\\ninterface ReadableByteStreamControllerCallback {\\\\n    (controller: ReadableByteStreamController): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface ReadableStreamDefaultControllerCallback<R> {\\\\n    (controller: ReadableStreamDefaultController<R>): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface ReadableStreamErrorCallback {\\\\n    (reason: any): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface TransformStreamDefaultControllerCallback<O> {\\\\n    (controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface TransformStreamDefaultControllerTransformCallback<I, O> {\\\\n    (chunk: I, controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface WritableStreamDefaultControllerCloseCallback {\\\\n    (): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface WritableStreamDefaultControllerStartCallback {\\\\n    (controller: WritableStreamDefaultController): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface WritableStreamDefaultControllerWriteCallback<W> {\\\\n    (chunk: W, controller: WritableStreamDefaultController): void | PromiseLike<void>;\\\\n}\\\\n\\\\ninterface WritableStreamErrorCallback {\\\\n    (reason: any): void | PromiseLike<void>;\\\\n}\\\\n\\\\ndeclare var onmessage: ((this: DedicatedWorkerGlobalScope, ev: MessageEvent) => any) | null;\\\\ndeclare function close(): void;\\\\ndeclare function postMessage(message: any, transfer: Transferable[]): void;\\\\ndeclare function postMessage(message: any, options?: PostMessageOptions): void;\\\\n/**\\\\n * Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.\\\\n */\\\\ndeclare function dispatchEvent(event: Event): boolean;\\\\ndeclare var caches: CacheStorage;\\\\ndeclare var isSecureContext: boolean;\\\\ndeclare var location: WorkerLocation;\\\\ndeclare var onerror: ((this: DedicatedWorkerGlobalScope, ev: ErrorEvent) => any) | null;\\\\ndeclare var performance: Performance;\\\\ndeclare var self: WorkerGlobalScope & typeof globalThis;\\\\ndeclare function msWriteProfilerMark(profilerMarkName: string): void;\\\\n/**\\\\n * Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.\\\\n */\\\\ndeclare function dispatchEvent(event: Event): boolean;\\\\ndeclare var indexedDB: IDBFactory;\\\\ndeclare var msIndexedDB: IDBFactory;\\\\ndeclare var navigator: WorkerNavigator;\\\\ndeclare function importScripts(...urls: string[]): void;\\\\ndeclare function atob(encodedString: string): string;\\\\ndeclare function btoa(rawString: string): string;\\\\ndeclare var console: Console;\\\\ndeclare var caches: CacheStorage;\\\\ndeclare var crypto: Crypto;\\\\ndeclare var indexedDB: IDBFactory;\\\\ndeclare var origin: string;\\\\ndeclare var performance: Performance;\\\\ndeclare function atob(data: string): string;\\\\ndeclare function btoa(data: string): string;\\\\ndeclare function clearInterval(handle?: number): void;\\\\ndeclare function clearTimeout(handle?: number): void;\\\\ndeclare function createImageBitmap(image: ImageBitmapSource): Promise<ImageBitmap>;\\\\ndeclare function createImageBitmap(image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number): Promise<ImageBitmap>;\\\\ndeclare function fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;\\\\ndeclare function queueMicrotask(callback: Function): void;\\\\ndeclare function setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\\\\ndeclare function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\\\\ndeclare function cancelAnimationFrame(handle: number): void;\\\\ndeclare function requestAnimationFrame(callback: FrameRequestCallback): number;\\\\ndeclare function addEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type: K, listener: (this: DedicatedWorkerGlobalScope, ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\\\\ndeclare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\\\\ndeclare function removeEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type: K, listener: (this: DedicatedWorkerGlobalScope, ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\\\\ndeclare function removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\\\\ntype HeadersInit = Headers | string[][] | Record<string, string>;\\\\ntype BodyInit = Blob | BufferSource | FormData | URLSearchParams | ReadableStream<Uint8Array> | string;\\\\ntype RequestInfo = Request | string;\\\\ntype BlobPart = BufferSource | Blob | string;\\\\ntype DOMHighResTimeStamp = number;\\\\ntype CanvasImageSource = ImageBitmap | OffscreenCanvas;\\\\ntype OffscreenRenderingContext = OffscreenCanvasRenderingContext2D | ImageBitmapRenderingContext | WebGLRenderingContext | WebGL2RenderingContext;\\\\ntype MessageEventSource = MessagePort | ServiceWorker;\\\\ntype ImageBitmapSource = CanvasImageSource | Blob | ImageData;\\\\ntype TimerHandler = string | Function;\\\\ntype PerformanceEntryList = PerformanceEntry[];\\\\ntype PushMessageDataInit = BufferSource | string;\\\\ntype VibratePattern = number | number[];\\\\ntype AlgorithmIdentifier = string | Algorithm;\\\\ntype HashAlgorithmIdentifier = AlgorithmIdentifier;\\\\ntype BigInteger = Uint8Array;\\\\ntype NamedCurve = string;\\\\ntype GLenum = number;\\\\ntype GLboolean = boolean;\\\\ntype GLbitfield = number;\\\\ntype GLint = number;\\\\ntype GLsizei = number;\\\\ntype GLintptr = number;\\\\ntype GLsizeiptr = number;\\\\ntype GLuint = number;\\\\ntype GLfloat = number;\\\\ntype GLclampf = number;\\\\ntype TexImageSource = ImageBitmap | ImageData | OffscreenCanvas;\\\\ntype Float32List = Float32Array | GLfloat[];\\\\ntype Int32List = Int32Array | GLint[];\\\\ntype GLint64 = number;\\\\ntype GLuint64 = number;\\\\ntype Uint32List = Uint32Array | GLuint[];\\\\ntype BufferSource = ArrayBufferView | ArrayBuffer;\\\\ntype DOMTimeStamp = number;\\\\ntype FormDataEntryValue = File | string;\\\\ntype IDBValidKey = number | string | Date | BufferSource | IDBArrayKey;\\\\ntype Transferable = ArrayBuffer | MessagePort | ImageBitmap;\\\\ntype BinaryType = \\\\\\\"blob\\\\\\\" | \\\\\\\"arraybuffer\\\\\\\";\\\\ntype CanvasDirection = \\\\\\\"ltr\\\\\\\" | \\\\\\\"rtl\\\\\\\" | \\\\\\\"inherit\\\\\\\";\\\\ntype CanvasFillRule = \\\\\\\"nonzero\\\\\\\" | \\\\\\\"evenodd\\\\\\\";\\\\ntype CanvasLineCap = \\\\\\\"butt\\\\\\\" | \\\\\\\"round\\\\\\\" | \\\\\\\"square\\\\\\\";\\\\ntype CanvasLineJoin = \\\\\\\"round\\\\\\\" | \\\\\\\"bevel\\\\\\\" | \\\\\\\"miter\\\\\\\";\\\\ntype CanvasTextAlign = \\\\\\\"start\\\\\\\" | \\\\\\\"end\\\\\\\" | \\\\\\\"left\\\\\\\" | \\\\\\\"right\\\\\\\" | \\\\\\\"center\\\\\\\";\\\\ntype CanvasTextBaseline = \\\\\\\"top\\\\\\\" | \\\\\\\"hanging\\\\\\\" | \\\\\\\"middle\\\\\\\" | \\\\\\\"alphabetic\\\\\\\" | \\\\\\\"ideographic\\\\\\\" | \\\\\\\"bottom\\\\\\\";\\\\ntype ClientTypes = \\\\\\\"window\\\\\\\" | \\\\\\\"worker\\\\\\\" | \\\\\\\"sharedworker\\\\\\\" | \\\\\\\"all\\\\\\\";\\\\ntype EndingType = \\\\\\\"transparent\\\\\\\" | \\\\\\\"native\\\\\\\";\\\\ntype FrameType = \\\\\\\"auxiliary\\\\\\\" | \\\\\\\"top-level\\\\\\\" | \\\\\\\"nested\\\\\\\" | \\\\\\\"none\\\\\\\";\\\\ntype IDBCursorDirection = \\\\\\\"next\\\\\\\" | \\\\\\\"nextunique\\\\\\\" | \\\\\\\"prev\\\\\\\" | \\\\\\\"prevunique\\\\\\\";\\\\ntype IDBRequestReadyState = \\\\\\\"pending\\\\\\\" | \\\\\\\"done\\\\\\\";\\\\ntype IDBTransactionMode = \\\\\\\"readonly\\\\\\\" | \\\\\\\"readwrite\\\\\\\" | \\\\\\\"versionchange\\\\\\\";\\\\ntype ImageSmoothingQuality = \\\\\\\"low\\\\\\\" | \\\\\\\"medium\\\\\\\" | \\\\\\\"high\\\\\\\";\\\\ntype KeyFormat = \\\\\\\"raw\\\\\\\" | \\\\\\\"spki\\\\\\\" | \\\\\\\"pkcs8\\\\\\\" | \\\\\\\"jwk\\\\\\\";\\\\ntype KeyType = \\\\\\\"public\\\\\\\" | \\\\\\\"private\\\\\\\" | \\\\\\\"secret\\\\\\\";\\\\ntype KeyUsage = \\\\\\\"encrypt\\\\\\\" | \\\\\\\"decrypt\\\\\\\" | \\\\\\\"sign\\\\\\\" | \\\\\\\"verify\\\\\\\" | \\\\\\\"deriveKey\\\\\\\" | \\\\\\\"deriveBits\\\\\\\" | \\\\\\\"wrapKey\\\\\\\" | \\\\\\\"unwrapKey\\\\\\\";\\\\ntype NotificationDirection = \\\\\\\"auto\\\\\\\" | \\\\\\\"ltr\\\\\\\" | \\\\\\\"rtl\\\\\\\";\\\\ntype NotificationPermission = \\\\\\\"default\\\\\\\" | \\\\\\\"denied\\\\\\\" | \\\\\\\"granted\\\\\\\";\\\\ntype OffscreenRenderingContextId = \\\\\\\"2d\\\\\\\" | \\\\\\\"bitmaprenderer\\\\\\\" | \\\\\\\"webgl\\\\\\\" | \\\\\\\"webgl2\\\\\\\";\\\\ntype PermissionName = \\\\\\\"geolocation\\\\\\\" | \\\\\\\"notifications\\\\\\\" | \\\\\\\"push\\\\\\\" | \\\\\\\"midi\\\\\\\" | \\\\\\\"camera\\\\\\\" | \\\\\\\"microphone\\\\\\\" | \\\\\\\"speaker\\\\\\\" | \\\\\\\"device-info\\\\\\\" | \\\\\\\"background-sync\\\\\\\" | \\\\\\\"bluetooth\\\\\\\" | \\\\\\\"persistent-storage\\\\\\\" | \\\\\\\"ambient-light-sensor\\\\\\\" | \\\\\\\"accelerometer\\\\\\\" | \\\\\\\"gyroscope\\\\\\\" | \\\\\\\"magnetometer\\\\\\\" | \\\\\\\"clipboard\\\\\\\";\\\\ntype PermissionState = \\\\\\\"granted\\\\\\\" | \\\\\\\"denied\\\\\\\" | \\\\\\\"prompt\\\\\\\";\\\\ntype PushEncryptionKeyName = \\\\\\\"p256dh\\\\\\\" | \\\\\\\"auth\\\\\\\";\\\\ntype PushPermissionState = \\\\\\\"denied\\\\\\\" | \\\\\\\"granted\\\\\\\" | \\\\\\\"prompt\\\\\\\";\\\\ntype ReferrerPolicy = \\\\\\\"\\\\\\\" | \\\\\\\"no-referrer\\\\\\\" | \\\\\\\"no-referrer-when-downgrade\\\\\\\" | \\\\\\\"same-origin\\\\\\\" | \\\\\\\"origin\\\\\\\" | \\\\\\\"strict-origin\\\\\\\" | \\\\\\\"origin-when-cross-origin\\\\\\\" | \\\\\\\"strict-origin-when-cross-origin\\\\\\\" | \\\\\\\"unsafe-url\\\\\\\";\\\\ntype RequestCache = \\\\\\\"default\\\\\\\" | \\\\\\\"no-store\\\\\\\" | \\\\\\\"reload\\\\\\\" | \\\\\\\"no-cache\\\\\\\" | \\\\\\\"force-cache\\\\\\\" | \\\\\\\"only-if-cached\\\\\\\";\\\\ntype RequestCredentials = \\\\\\\"omit\\\\\\\" | \\\\\\\"same-origin\\\\\\\" | \\\\\\\"include\\\\\\\";\\\\ntype RequestDestination = \\\\\\\"\\\\\\\" | \\\\\\\"audio\\\\\\\" | \\\\\\\"audioworklet\\\\\\\" | \\\\\\\"document\\\\\\\" | \\\\\\\"embed\\\\\\\" | \\\\\\\"font\\\\\\\" | \\\\\\\"image\\\\\\\" | \\\\\\\"manifest\\\\\\\" | \\\\\\\"object\\\\\\\" | \\\\\\\"paintworklet\\\\\\\" | \\\\\\\"report\\\\\\\" | \\\\\\\"script\\\\\\\" | \\\\\\\"sharedworker\\\\\\\" | \\\\\\\"style\\\\\\\" | \\\\\\\"track\\\\\\\" | \\\\\\\"video\\\\\\\" | \\\\\\\"worker\\\\\\\" | \\\\\\\"xslt\\\\\\\";\\\\ntype RequestMode = \\\\\\\"navigate\\\\\\\" | \\\\\\\"same-origin\\\\\\\" | \\\\\\\"no-cors\\\\\\\" | \\\\\\\"cors\\\\\\\";\\\\ntype RequestRedirect = \\\\\\\"follow\\\\\\\" | \\\\\\\"error\\\\\\\" | \\\\\\\"manual\\\\\\\";\\\\ntype ResponseType = \\\\\\\"basic\\\\\\\" | \\\\\\\"cors\\\\\\\" | \\\\\\\"default\\\\\\\" | \\\\\\\"error\\\\\\\" | \\\\\\\"opaque\\\\\\\" | \\\\\\\"opaqueredirect\\\\\\\";\\\\ntype ServiceWorkerState = \\\\\\\"installing\\\\\\\" | \\\\\\\"installed\\\\\\\" | \\\\\\\"activating\\\\\\\" | \\\\\\\"activated\\\\\\\" | \\\\\\\"redundant\\\\\\\";\\\\ntype ServiceWorkerUpdateViaCache = \\\\\\\"imports\\\\\\\" | \\\\\\\"all\\\\\\\" | \\\\\\\"none\\\\\\\";\\\\ntype VisibilityState = \\\\\\\"hidden\\\\\\\" | \\\\\\\"visible\\\\\\\" | \\\\\\\"prerender\\\\\\\";\\\\ntype WebGLPowerPreference = \\\\\\\"default\\\\\\\" | \\\\\\\"low-power\\\\\\\" | \\\\\\\"high-performance\\\\\\\";\\\\ntype WorkerType = \\\\\\\"classic\\\\\\\" | \\\\\\\"module\\\\\\\";\\\\ntype XMLHttpRequestResponseType = \\\\\\\"\\\\\\\" | \\\\\\\"arraybuffer\\\\\\\" | \\\\\\\"blob\\\\\\\" | \\\\\\\"document\\\\\\\" | \\\\\\\"json\\\\\\\" | \\\\\\\"text\\\\\\\";\\\\n\\\"},{\\\"path\\\":\\\"/types/common/emptybuffer.d.ts\\\",\\\"content\\\":\\\"declare class Buffer{\\\\n}\\\"},{\\\"path\\\":\\\"/types/pages/$w.d.ts\\\",\\\"content\\\":\\\"declare type IntersectionArrayAndBase<T, P> = {\\\\n    [K in keyof T]: K extends P ? T[K] : T[K] & T[K][];\\\\n};\\\\n\\\\ndeclare type TypeNameToSdkType = {\\\\r\\\\n    AccountNavBar: $w.AccountNavBar;\\\\r\\\\n    Anchor: $w.Anchor;\\\\r\\\\n    Box: $w.Box;\\\\r\\\\n    Button: $w.Button;\\\\r\\\\n    Checkbox: $w.Checkbox;\\\\r\\\\n    CheckboxGroup: $w.CheckboxGroup;\\\\r\\\\n    Column: $w.Column;\\\\r\\\\n    ColumnStrip: $w.ColumnStrip;\\\\r\\\\n    Container: $w.Container;\\\\r\\\\n    DatePicker: $w.DatePicker;\\\\r\\\\n    Document: $w.Document;\\\\r\\\\n    Dropdown: $w.Dropdown;\\\\r\\\\n    Footer: $w.Footer;\\\\r\\\\n    Gallery: $w.Gallery;\\\\r\\\\n    GoogleMap: $w.GoogleMap;\\\\r\\\\n    Header: $w.Header;\\\\r\\\\n    HtmlComponent: $w.HtmlComponent;\\\\r\\\\n    IFrame: $w.IFrame;\\\\r\\\\n    Image: $w.Image;\\\\r\\\\n    MediaBox: $w.MediaBox;\\\\r\\\\n    MenuContainer: $w.MenuContainer;\\\\r\\\\n    Page: $w.Page;\\\\r\\\\n    QuickActionBar: $w.QuickActionBar;\\\\r\\\\n    RadioButtonGroup: $w.RadioButtonGroup;\\\\r\\\\n    Repeater: $w.Repeater;\\\\r\\\\n    Slide: $w.Slide;\\\\r\\\\n    Slideshow: $w.Slideshow;\\\\r\\\\n    Table: $w.Table;\\\\r\\\\n    Text: $w.Text;\\\\r\\\\n    TextBox: $w.TextBox;\\\\r\\\\n    TextInput: $w.TextInput;\\\\r\\\\n    UploadButton: $w.UploadButton;\\\\r\\\\n    VectorImage: $w.VectorImage;\\\\r\\\\n    VerticalMenu: $w.VerticalMenu;\\\\r\\\\n    Video: $w.Video;\\\\r\\\\n    AddressInput: $w.AddressInput;\\\\r\\\\n    AudioPlayer: $w.AudioPlayer;\\\\r\\\\n    Captcha: $w.Captcha;\\\\r\\\\n    Pagination: $w.Pagination;\\\\r\\\\n    ProgressBar: $w.ProgressBar;\\\\r\\\\n    RatingsDisplay: $w.RatingsDisplay;\\\\r\\\\n    RatingsInput: $w.RatingsInput;\\\\r\\\\n    RichTextBox: $w.RichTextBox;\\\\r\\\\n    Slider: $w.Slider;\\\\r\\\\n    Switch: $w.Switch;\\\\r\\\\n    TimePicker: $w.TimePicker;\\\\r\\\\n    VideoPlayer: $w.VideoPlayer;\\\\r\\\\n};\\\\r\\\\n\\\\r\\\\ndeclare type WixElementSelector = PageElementsMap & IntersectionArrayAndBase<TypeNameToSdkType, 'Document'>;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Selects and returns elements from a page.\\\\r\\\\n */\\\\r\\\\ndeclare function $w<T extends keyof WixElementSelector>(selector: T): WixElementSelector[T];\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The `$w` namespace contains everything you need in order to work\\\\r\\\\n *  with your site's components. It contains all of the UI elements, nodes, and\\\\r\\\\n *  events that make up your site. It also includes the [`$w()`]($w.html#w),\\\\r\\\\n *  [`onReady()`]($w.html#onReady), and [`at()`]($w.html#at) functions.\\\\r\\\\n * \\\\r\\\\n *  The APIs in `$w` can only be used in front-end code.\\\\r\\\\n * \\\\r\\\\n *  You do not need to import `$w`.\\\\r\\\\n */\\\\r\\\\ndeclare namespace $w {\\\\r\\\\n    /**\\\\r\\\\n     * Gets a selector function for a specific context.\\\\r\\\\n     */\\\\r\\\\n    function at(context: $w.Event.EventContext): $w.$w;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the function that runs when all the page elements have finished loading.\\\\r\\\\n     */\\\\r\\\\n    function onReady(initFunction: $w.ReadyHandler): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Selects and returns elements from a page.\\\\r\\\\n     */\\\\r\\\\n    type $w = <T extends keyof WixElementSelector>(selector: T)=>WixElementSelector[T];\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/types/common/declaration.d.ts\\\",\\\"content\\\":\\\"/**\\\\r\\\\n * The wix-location module contains functionality for getting information\\\\r\\\\n *  about the URL of the current page and for navigating to other pages.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-location' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the base URL of the current page.\\\\r\\\\n     */\\\\r\\\\n    const baseUrl: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the path of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    const path: string[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the prefix of a dynamic page's or router page's URL.\\\\r\\\\n     */\\\\r\\\\n    const prefix: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the protocol of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    const protocol: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets an object that represents the query segment of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    const query: any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets an object used to manage the query segment of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    const queryParams: wix_location.QueryParams;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the full URL of the current page.\\\\r\\\\n     */\\\\r\\\\n    const url: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds an event handler that runs when an application page's URL changes.\\\\r\\\\n     */\\\\r\\\\n    function onChange(handler: wix_location.LocationChangeHandler): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Directs the browser to navigate to the specified URL.\\\\r\\\\n     */\\\\r\\\\n    function to(url: string): void;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-site module contains functionality for obtaining information about your site and its pages.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-site' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets a code representing the site's currency.\\\\r\\\\n     */\\\\r\\\\n    const currency: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets information about the current page or lightbox.\\\\r\\\\n     */\\\\r\\\\n    const currentPage: wix_site.StructurePage | wix_site.StructureLightbox;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets a code representing the site's language.\\\\r\\\\n     */\\\\r\\\\n    const language: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the site's regional settings.\\\\r\\\\n     */\\\\r\\\\n    const regionalSettings: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the site revision ID.\\\\r\\\\n     */\\\\r\\\\n    const revision: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the site's timezone.\\\\r\\\\n     */\\\\r\\\\n    const timezone: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns information about the site's pages, prefixes, and lightboxes.\\\\r\\\\n     */\\\\r\\\\n    function getSiteStructure(): wix_site.SiteStructure;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Optimizes resource fetching of pages and lightboxes in the site so they will load faster.\\\\r\\\\n     */\\\\r\\\\n    function prefetchPageResources(prefetchItems: wix_site.PrefetchItems): wix_site.PrefetchResult;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the sitemap for a router or dynamic page prefix.\\\\r\\\\n     */\\\\r\\\\n    function routerSitemap(routerPrefix: string): Promise<wix_router.WixRouterSitemapEntry[]>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-storage module contains functionality for the persistent\\\\r\\\\n *  storage of key/value data in the site visitor's browser.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-storage' {\\\\r\\\\n    /**\\\\r\\\\n     * Used for local storage of data.\\\\r\\\\n     */\\\\r\\\\n    const local: wix_storage.Storage;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Used for memory storage of data.\\\\r\\\\n     */\\\\r\\\\n    const memory: wix_storage.Storage;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Used for session storage of data.\\\\r\\\\n     */\\\\r\\\\n    const session: wix_storage.Storage;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-window module contains functionality that pertains to the\\\\r\\\\n *  current browser window.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-window' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the locale of the site visitor's browser.\\\\r\\\\n     */\\\\r\\\\n    const browserLocale: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets what kind of device is being used to view the page.\\\\r\\\\n     */\\\\r\\\\n    const formFactor: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the locale of the current environment.\\\\r\\\\n     */\\\\r\\\\n    const locale: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the HTTP referrer header field.\\\\r\\\\n     */\\\\r\\\\n    const referrer: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets which mode the site is currently being viewed in.\\\\r\\\\n     */\\\\r\\\\n    const viewMode: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Copies text to the site visitor's clipboard.\\\\r\\\\n     */\\\\r\\\\n    function copyToClipboard(toCopy: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns information about the window.\\\\r\\\\n     */\\\\r\\\\n    function getBoundingRect(): Promise<wix_window.WindowSizeInfo>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the current geolocation of the user.\\\\r\\\\n     */\\\\r\\\\n    function getCurrentGeolocation(): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns the data that a router passed to the page in its response.\\\\r\\\\n     */\\\\r\\\\n    function getRouterData(): any;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Opens a lightbox and optionally passes it the given data.\\\\r\\\\n     */\\\\r\\\\n    function openLightbox(name: string, data?: any): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Opens a modal window that displays the specified web page.\\\\r\\\\n     */\\\\r\\\\n    function openModal(url: string, options: wix_window.OpenModalOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a message to the page's parent.\\\\r\\\\n     */\\\\r\\\\n    function postMessage(message: any, target?: string): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Scrolls the page by a given number of pixels.\\\\r\\\\n     */\\\\r\\\\n    function scrollBy(x: number, y: number): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Scrolls the page to a specific location.\\\\r\\\\n     */\\\\r\\\\n    function scrollTo(x: number, y: number, options?: wix_window.ScrollToOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a tracking event to external analytics tools.\\\\r\\\\n     */\\\\r\\\\n    function trackEvent(eventName: string, parameters: wix_window.trackingParameters.AddPaymentInfoEvent | wix_window.trackingParameters.AddProductImpressionEvent | wix_window.trackingParameters.AddToCartEvent | wix_window.trackingParameters.ClickProductEvent | wix_window.trackingParameters.CustomEvent | wix_window.trackingParameters.InitiateCheckoutEvent | wix_window.trackingParameters.PurchaseEvent | wix_window.trackingParameters.RemoveFromCartEvent | wix_window.trackingParameters.ViewContentEvent): void;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-captcha-backend module contains functionality for working with the reCAPTCHA element from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-captcha-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Authorizes the CAPTCHA token.\\\\r\\\\n     */\\\\r\\\\n    function authorize(token: string): Promise<wix_captcha_backend.SuccessReport>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-chat-backend module contains functionality for working with the Wix Chat application from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-chat-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Sends a chat message from the backend.\\\\r\\\\n     */\\\\r\\\\n    function sendMessage(messageInfo: wix_chat_backend.MessageInfo): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * HTTP functions are used to expose an API of your site's functionality.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-http-functions' {\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 400 (Bad Request) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function badRequest(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 201 (Created) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function created(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP DELETE method.\\\\r\\\\n     */\\\\r\\\\n    /* Illegal function name 'delete' can't be used here\\\\r\\\\n    function delete(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n    */\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 403 (Forbidden) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function forbidden(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP GET method.\\\\r\\\\n     */\\\\r\\\\n    function get(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 404 (Not Found) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function notFound(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 200 (OK) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function ok(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP OPTIONS method.\\\\r\\\\n     */\\\\r\\\\n    function options(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP POST method.\\\\r\\\\n     */\\\\r\\\\n    function post(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with the HTTP PUT method.\\\\r\\\\n     */\\\\r\\\\n    function put(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response populated with the information from the options parameter.\\\\r\\\\n     *  The `response()` function creates a custom response built with the\\\\r\\\\n     *  information passed to the `options` parameter in a [`WixHttpFunctionResponseOptions`](#WixHttpFunctionResponseOptions)\\\\r\\\\n     *  object.\\\\r\\\\n     * \\\\r\\\\n     *  Use the `response()` function to create a response to return from an HTTP\\\\r\\\\n     *  function.\\\\r\\\\n     */\\\\r\\\\n    function response(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with status code 500 (Internal Server Error) and the information from the options parameter.\\\\r\\\\n     */\\\\r\\\\n    function serverError(options: wix_http_functions.WixHttpFunctionResponseOptions): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A function that responds to requests made with any HTTP method.\\\\r\\\\n     */\\\\r\\\\n    function use(request: wix_http_functions.WixHttpFunctionRequest): wix_http_functions.WixHttpFunctionResponse;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-crm-backend module contains functionality for working with\\\\r\\\\n *  [your site's contacts](https://support.wix.com/en/article/about-your-contact-list)\\\\r\\\\n *  from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-crm-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new contact or updates an existing contact.\\\\r\\\\n     */\\\\r\\\\n    function createContact(contactInfo: wix_crm_backend.ContactInfo): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Deletes an existing contact.\\\\r\\\\n     */\\\\r\\\\n    function deleteContact(contactId: string, options: wix_crm_backend.DeleteOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a Triggered Email to a contact.\\\\r\\\\n     */\\\\r\\\\n    function emailContact(emailId: string, toContact: string, options?: wix_users.TriggeredEmailOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets an existing contact by ID.\\\\r\\\\n     */\\\\r\\\\n    function getContactById(contactId: string): Promise<wix_crm_backend.ContactInfo>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates an existing contact.\\\\r\\\\n     */\\\\r\\\\n    function updateContact(contactId: string, contactInfo: wix_crm_backend.ContactInfo): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-data module contains functionality for working with data in collections.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-data' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates an aggregation.\\\\r\\\\n     */\\\\r\\\\n    function aggregate(collectionName: string): wix_data.WixDataAggregate;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds a number of items to a collection.\\\\r\\\\n     */\\\\r\\\\n    function bulkInsert(collectionName: string, items: any[], options?: wix_data.WixDataOptions): Promise<wix_data.WixDataBulkResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes a number of items from a collection.\\\\r\\\\n     */\\\\r\\\\n    function bulkRemove(collectionName: string, itemIds: string[], options?: wix_data.WixDataOptions): Promise<wix_data.WixDataBulkResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Inserts or updates a number of items in a collection.\\\\r\\\\n     */\\\\r\\\\n    function bulkSave(collectionName: string, items: any[], options?: wix_data.WixDataOptions): Promise<wix_data.WixDataBulkResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates a number of items in a collection.\\\\r\\\\n     */\\\\r\\\\n    function bulkUpdate(collectionName: string, items: any[], options?: wix_data.WixDataOptions): Promise<wix_data.WixDataBulkResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a filter to be used with the dataset `setFilter()` function.\\\\r\\\\n     */\\\\r\\\\n    function filter(): wix_data.WixDataFilter;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Retrieves an item from a collection.\\\\r\\\\n     */\\\\r\\\\n    function get(collectionName: string, itemId: string, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds an item to a collection.\\\\r\\\\n     */\\\\r\\\\n    function insert(collectionName: string, item: any, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Inserts a reference in the specified property.\\\\r\\\\n     */\\\\r\\\\n    function insertReference(collectionName: string, propertyName: string, referringItem: any | string, referencedItem: any | string | any[] | string[], options?: wix_data.WixDataOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Checks if a reference to the referenced item exists in the specified\\\\r\\\\n     *   property of the referring item.\\\\r\\\\n     */\\\\r\\\\n    function isReferenced(collectionName: string, propertyName: string, referringItem: any | string, referencedItem: any | string): Promise<boolean>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a query.\\\\r\\\\n     */\\\\r\\\\n    function query(collectionName: string): wix_data.WixDataQuery;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the full items referenced in the specified property.\\\\r\\\\n     */\\\\r\\\\n    function queryReferenced(collectionName: string, item: any | string, propertyName: string, options: wix_data.WixDataQueryReferencedOptions): Promise<wix_data.WixDataQueryReferencedResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes an item from a collection.\\\\r\\\\n     */\\\\r\\\\n    function remove(collectionName: string, itemId: string, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes a reference from the specified property.\\\\r\\\\n     */\\\\r\\\\n    function removeReference(collectionName: string, propertyName: string, referringItem: any | string, referencedItem: any | string | any[] | string[], options?: wix_data.WixDataOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Replaces current references with references in the specified property.\\\\r\\\\n     */\\\\r\\\\n    function replaceReferences(collectionName: string, propertyName: string, referringItem: any | string, referencedItem: any | string | any[] | string[], options?: wix_data.WixDataOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Inserts or updates an item in a collection.\\\\r\\\\n     */\\\\r\\\\n    function save(collectionName: string, item: any, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a sort to be used with the dataset `setSort()` function.\\\\r\\\\n     */\\\\r\\\\n    function sort(): wix_data.WixDataSort;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes all items from a collection.\\\\r\\\\n     */\\\\r\\\\n    function truncate(collectionName: string, options?: wix_data.WixDataOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates an item in a collection.\\\\r\\\\n     */\\\\r\\\\n    function update(collectionName: string, item: any, options?: wix_data.WixDataOptions): Promise<any>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * An implementation of the standard [Javascript Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API)\\\\r\\\\n *  which can be used in public and backend code for fetching resources\\\\r\\\\n *  from [3rd party services](https://support.wix.com/en/article/accessing-3rd-party-services)\\\\r\\\\n *  using HTTPS.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-fetch' {\\\\r\\\\n    /**\\\\r\\\\n     * Retrieves the specified resource from the network using HTTPS.\\\\r\\\\n     */\\\\r\\\\n    function fetch(url: string, options?: wix_fetch.WixFetchRequest): Promise<wix_fetch.WixFetchResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Retrieves the specified JSON resource from the network using HTTPS.\\\\r\\\\n     */\\\\r\\\\n    function getJSON(url: string, options?: wix_fetch.WixFetchRequest): Promise<any>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-pay-backend module contains functionality for working with\\\\r\\\\n *  payments from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-pay-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new payment.\\\\r\\\\n     */\\\\r\\\\n    function createPayment(paymentInfo: wix_pay_backend.PaymentInfo): Promise<wix_pay_backend.Payment>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * This module contains the APIs for code routers and data binding router hooks.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-router' {\\\\r\\\\n    /**\\\\r\\\\n     * Registers a hook that is called after a router.\\\\r\\\\n     */\\\\r\\\\n    function afterRouter(request: wix_router.WixRouterRequest, response: wix_router.WixRouterResponse): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a hook that is called after a sitemap is created.\\\\r\\\\n     */\\\\r\\\\n    function afterSitemap(request: wix_router.WixRouterSitemapRequest, sitemapEntries: wix_router.WixRouterSitemapEntry[]): Promise<wix_router.WixRouterSitemapEntry[]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a hook that is called before a router.\\\\r\\\\n     */\\\\r\\\\n    function beforeRouter(request: wix_router.WixRouterRequest): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a hook that is called after a route is resolved by the data binding router, but before the wix-data query is executed.\\\\r\\\\n     */\\\\r\\\\n    function customizeQuery(request: wix_router.WixRouterRequest, route: string, query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with a status code 403 (Forbidden) and instructs the router to show a 403 page.\\\\r\\\\n     */\\\\r\\\\n    function forbidden(message?: string): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response that instructs the router to continue.\\\\r\\\\n     */\\\\r\\\\n    function next(): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with a status code 404 (Not Found) and instructs the router to show a 404 page.\\\\r\\\\n     */\\\\r\\\\n    function notFound(message?: string): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with a status code 200 (OK) and instructs the router to show the selected page.\\\\r\\\\n     */\\\\r\\\\n    function ok(Page: string | string[], routerReturnedData?: any, head?: wix_router.WixRouterResponse.HeadOptions): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with a status code of 301 (Moved Permanently) or 302 (Found) and instructs the router to redirect to the given URL.\\\\r\\\\n     */\\\\r\\\\n    function redirect(url: string, statusCode?: string): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function containing routing logic for a given URL prefix.\\\\r\\\\n     */\\\\r\\\\n    function router(request: wix_router.WixRouterRequest): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Returns a response with the specified HTTP status code with an optional message.\\\\r\\\\n     */\\\\r\\\\n    function sendStatus(statusCode: string, message?: string): Promise<wix_router.WixRouterResponse>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function containing sitemap logic for a given URL prefix.\\\\r\\\\n     */\\\\r\\\\n    function sitemap(request: wix_router.WixRouterSitemapRequest): Promise<wix_router.WixRouterSitemapEntry[]>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-site-backend module contains functionality for working with\\\\r\\\\n *  your site and its pages from backend code.\\\\r\\\\n * \\\\r\\\\n *  To use the backend site API, import `wixSiteBackend` from the `wix-site-backend` module:\\\\r\\\\n * \\\\r\\\\n *    ```javascript\\\\r\\\\n *    import wixSiteBackend from 'wix-site-backend';\\\\r\\\\n *    ```\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-site-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Invalidates the cache for a site.\\\\r\\\\n     */\\\\r\\\\n    function invalidateCache(): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-stores-backend module contains functionality for working with your\\\\r\\\\n *  site's store from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-stores-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Adds media items by ID to a product.\\\\r\\\\n     */\\\\r\\\\n    function addProductMedia(productId: string, media: wix_stores_backend.Media[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds media items by ID to product options.\\\\r\\\\n     */\\\\r\\\\n    function addProductMediaToChoices(productId: string, mediaChoices: wix_stores_backend.MediaChoices[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Adds products by ID to a product collection.\\\\r\\\\n     */\\\\r\\\\n    function addProductsToCollection(collectionId: string, productIds: string[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new product.\\\\r\\\\n     */\\\\r\\\\n    function createProduct(productInfo: wix_stores_backend.ProductInfo): Promise<wix_stores_backend.Product>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Deletes an existing product.\\\\r\\\\n     */\\\\r\\\\n    function deleteProduct(productId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Deletes all options for an existing product.\\\\r\\\\n     */\\\\r\\\\n    function deleteProductOptions(productId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the current site visitor's shopping cart.\\\\r\\\\n     */\\\\r\\\\n    function getAbandonedCart(cartId: string): Promise<wix_stores_backend.AbandonedCart>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the current site visitor's shopping cart.\\\\r\\\\n     */\\\\r\\\\n    function getCurrentCart(): Promise<wix_stores_backend.Cart>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the availability of a product based on the specified option choices.\\\\r\\\\n     */\\\\r\\\\n    function getProductOptionsAvailability(productId: string, choices: wix_stores_backend.ProductChoices): Promise<wix_stores_backend.ProductOptionsAvailability>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets a product's available variants based on the specified option choices.\\\\r\\\\n     */\\\\r\\\\n    function getProductVariants(productId: string, options: wix_stores_backend.ProductVariantOptions): Promise<wix_stores_backend.Variants>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes media items by ID from a product.\\\\r\\\\n     */\\\\r\\\\n    function removeProductMedia(productId: string, mediaIds: wix_stores_backend.Media[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes media items by ID from a product's options.\\\\r\\\\n     */\\\\r\\\\n    function removeProductMediaFromChoices(productId: string, mediaChoices: wix_stores_backend.MediaChoices[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Removes products by ID from a product collection.\\\\r\\\\n     */\\\\r\\\\n    function removeProductsFromCollection(collectionId: string, productIds?: string[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Resets the data (such as the price and the weight) of all variants for a given product to their default values.\\\\r\\\\n     */\\\\r\\\\n    function resetVariantData(productId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates an existing product by ID.\\\\r\\\\n     */\\\\r\\\\n    function updateProductFields(productId: string, productInfo: wix_stores_backend.ProductInfo): Promise<wix_stores_backend.Product>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates the data (such as the price and the weight) of an existing product variant in the store.\\\\r\\\\n     */\\\\r\\\\n    function updateVariantData(productId: string, variantInfo: wix_stores_backend.ProductVariantInfo[]): Promise<wix_stores_backend.ProductVariants>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-users-backend module contains functionality for working with your\\\\r\\\\n *  site's users from backend code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-users-backend' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the current user viewing the site.\\\\r\\\\n     */\\\\r\\\\n    const currentUser: wix_users.User;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Approve a member whose status is `\\\\\\\"Pending\\\\\\\"` using an email address.\\\\r\\\\n     */\\\\r\\\\n    function approveByEmail(email: string): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Approve a member whose status is `\\\\\\\"Pending\\\\\\\"` using an approval token.\\\\r\\\\n     */\\\\r\\\\n    function approveByToken(token: string): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Blocks a member from logging into the site.\\\\r\\\\n     */\\\\r\\\\n    function blockByEmail(email: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Deletes an existing user.\\\\r\\\\n     */\\\\r\\\\n    function deleteUser(userId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a Triggered Email to the specified site member.\\\\r\\\\n     */\\\\r\\\\n    function emailUser(emailId: string, toUser: string, options?: wix_users.TriggeredEmailOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Create a session token for a member authenticated by a 3rd party.\\\\r\\\\n     */\\\\r\\\\n    function generateSessionToken(email: string): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets an existing user by ID.\\\\r\\\\n     */\\\\r\\\\n    function getUser(userId: string): Promise<wix_users_backend.UserInfo>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Logs a user in based on email and password.\\\\r\\\\n     */\\\\r\\\\n    function login(email: string, password: string): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a new site member.\\\\r\\\\n     */\\\\r\\\\n    function register(email: string, password: string, options?: wix_users.RegistrationOptions): Promise<wix_users_backend.RegistrationResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Updates an existing user by ID.\\\\r\\\\n     */\\\\r\\\\n    function updateUserFields(userId: string, userInfo: wix_users_backend.UserInfo): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-bookings module contains functionality for working with\\\\r\\\\n *  bookings from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-bookings' {\\\\r\\\\n    /**\\\\r\\\\n     * Books a service and processes payment for the service.\\\\r\\\\n     */\\\\r\\\\n    function checkoutBooking(bookingInfo: wix_bookings.BookingInfo, options?: wix_bookings.PaymentOptions): Promise<wix_bookings.BookingResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the valid checkout options for a service's slot.\\\\r\\\\n     */\\\\r\\\\n    function getCheckoutOptions(slotId: string): Promise<wix_bookings.CheckoutOption[]>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the available slots for a specific service.\\\\r\\\\n     */\\\\r\\\\n    function getServiceAvailability(serviceId: string, options?: wix_bookings.AvailabilityOptions): Promise<wix_bookings.ServiceAvailability>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-crm module contains functionality for working with\\\\r\\\\n *  [your site's contacts](https://support.wix.com/en/article/about-your-contact-list)\\\\r\\\\n *  from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-crm' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new contact or updates an existing contact.\\\\r\\\\n     */\\\\r\\\\n    function createContact(contactInfo: wix_crm.ContactInfo): Promise<string>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a Triggered Email to the contact.\\\\r\\\\n     */\\\\r\\\\n    function emailContact(emailId: string, toContact: string, options?: wix_users.TriggeredEmailOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-events module contains functionality for working with\\\\r\\\\n *  Wix Events from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-events' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a new RSVP form for the specified event.\\\\r\\\\n     */\\\\r\\\\n    function createEventRsvpForm(eventId: string): wix_events.RsvpForm;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-paid-plans module contains functionality for working with\\\\r\\\\n *  paid plans from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-paid-plans' {\\\\r\\\\n    /**\\\\r\\\\n     * Cancels a specific order (subscription) of a plan.\\\\r\\\\n     */\\\\r\\\\n    function cancelOrder(orderId: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Orders a paid plan.\\\\r\\\\n     */\\\\r\\\\n    function orderPlan(planId: string): Promise<wix_paid_plans.OrderResult>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Orders and purchases a paid plan.\\\\r\\\\n     */\\\\r\\\\n    function purchasePlan(planId: string): Promise<wix_paid_plans.PurchaseResult>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-pay module contains functionality for working with\\\\r\\\\n *  payments from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-pay' {\\\\r\\\\n    /**\\\\r\\\\n     * Starts a payment.\\\\r\\\\n     */\\\\r\\\\n    function startPayment(paymentId: string, options?: wix_pay.PaymentOptions): Promise<wix_pay.PaymentResult>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-search module contains functionality for searching a site.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-search' {\\\\r\\\\n    /**\\\\r\\\\n     * Creates a search.\\\\r\\\\n     */\\\\r\\\\n    function search(phrase?: string): wix_search.WixSearchBuilder;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-seo module contains functionality for working with\\\\r\\\\n *  your site's SEO from\\\\r\\\\n *  client-side code.\\\\r\\\\n * \\\\r\\\\n *  Because you want the SEO data you set to be read by search engines, you should\\\\r\\\\n *  always set such data in the [`onReady()`]($w.html#onReady) event handler.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-seo' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the page's SEO-related link tags.\\\\r\\\\n     */\\\\r\\\\n    const links: wix_seo.Link[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the page's SEO-related meta tags.\\\\r\\\\n     */\\\\r\\\\n    const metaTags: wix_seo.MetaTag[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the page's structured data.\\\\r\\\\n     */\\\\r\\\\n    const structuredData: any[];\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets the page's title.\\\\r\\\\n     */\\\\r\\\\n    const title: string;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the page's SEO-related link tags.\\\\r\\\\n     */\\\\r\\\\n    function setLinks(links: wix_seo.Link[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the page's SEO-related meta tags.\\\\r\\\\n     */\\\\r\\\\n    function setMetaTags(The: wix_seo.MetaTag[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the page's structured data.\\\\r\\\\n     */\\\\r\\\\n    function setStructuredData(structuredData: any[]): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the page's title.\\\\r\\\\n     */\\\\r\\\\n    function setTitle(): Promise<void>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-stores module contains functionality for working with your\\\\r\\\\n *  site's store from from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-stores' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the availability of a product based on the specified option choices.\\\\r\\\\n     */\\\\r\\\\n    function getProductOptionsAvailability(productId: string, choices: wix_stores.ProductChoices): Promise<wix_stores.ProductOptionsAvailability>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Gets a product's available variants based on the specified option choices.\\\\r\\\\n     */\\\\r\\\\n    function getProductVariants(productId: string, options: wix_stores.ProductVariantOptions): Promise<wix_stores.VariantList>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * The wix-users module contains functionality for working with your\\\\r\\\\n *  site's users from client-side code.\\\\r\\\\n */\\\\r\\\\ndeclare module 'wix-users' {\\\\r\\\\n    /**\\\\r\\\\n     * Gets the current user viewing the site.\\\\r\\\\n     */\\\\r\\\\n    const currentUser: wix_users.User;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Logs the current user into the site using the given session token.\\\\r\\\\n     */\\\\r\\\\n    function applySessionToken(sessionToken: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sends a Triggered Email to the currently logged-in site member.\\\\r\\\\n     */\\\\r\\\\n    function emailUser(emailId: string, toUser: string, options?: wix_users.TriggeredEmailOptions): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Logs a user in based on email and password.\\\\r\\\\n     */\\\\r\\\\n    function login(email: string, password: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Logs the current user out of the site.\\\\r\\\\n     */\\\\r\\\\n    function logout(): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sets the function that runs when a user logs in.\\\\r\\\\n     */\\\\r\\\\n    function onLogin(handler: wix_users.LoginHandler): void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Prompts the current site visitor with a password reset.\\\\r\\\\n     */\\\\r\\\\n    function promptForgotPassword(language?: string): Promise<void>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Prompts the current site visitor to log in as a site member.\\\\r\\\\n     */\\\\r\\\\n    function promptLogin(options: wix_users.LoginOptions): Promise<wix_users.User>;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Registers a new site member.\\\\r\\\\n     */\\\\r\\\\n    function register(email: string, password: string, options?: wix_users.RegistrationOptions): Promise<wix_users.RegistrationResult>;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace $w {\\\\r\\\\n    /**\\\\r\\\\n     * An element for sending and receiving chat messages.\\\\r\\\\n     */\\\\r\\\\n    interface Chatbox extends $w.Element, $w.HiddenMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an element appears on all pages or only on the current page.\\\\r\\\\n         */\\\\r\\\\n        readonly global: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the chatbox is visible or hidden.\\\\r\\\\n         */\\\\r\\\\n        readonly hidden: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is actually visible.\\\\r\\\\n         */\\\\r\\\\n        readonly isVisible: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the chatbox is maximized.\\\\r\\\\n         */\\\\r\\\\n        readonly maximized: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Note: This standard element property is not relevant for Chatbox.\\\\r\\\\n         */\\\\r\\\\n        readonly parent: $w.Node;\\\\r\\\\n        /**\\\\r\\\\n         * Expands the chatbox and focuses it on the specified chat channel.\\\\r\\\\n         */\\\\r\\\\n        focusChannel(channelInfo: $w.Chatbox.ChannelInfo): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a chatbox channel.\\\\r\\\\n         */\\\\r\\\\n        getChannel(channelInfo: $w.Chatbox.ChannelInfo): Promise<$w.Chatbox.Channel>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of available chat channels for a site visitor.\\\\r\\\\n         */\\\\r\\\\n        getChannelList(): Promise<$w.Chatbox.Channel[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Expands the chatbox and sets its [`maximized`](#maximized) property to `true`.\\\\r\\\\n         */\\\\r\\\\n        maximize(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Collapses the chatbox and sets its [`maximized`](#maximized) property to `false`.\\\\r\\\\n         */\\\\r\\\\n        minimize(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when the chatbox is maximized.\\\\r\\\\n         */\\\\r\\\\n        onMaximize(): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a site visitor receives a chat message.\\\\r\\\\n         */\\\\r\\\\n        onMessageReceived(message: $w.Chatbox.Message): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a site visitor sends a chat message.\\\\r\\\\n         */\\\\r\\\\n        onMessageSent(message: $w.Chatbox.Message): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when the chatbox is minimized.\\\\r\\\\n         */\\\\r\\\\n        onMinimize(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Note: This standard element event is not relevant for Chatbox.\\\\r\\\\n         */\\\\r\\\\n        onViewportEnter(handler: $w.EventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Note: This standard element event is not relevant for Chatbox.\\\\r\\\\n         */\\\\r\\\\n        onViewportLeave(handler: $w.EventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Note: This standard element function is not relevant for Chatbox.\\\\r\\\\n         */\\\\r\\\\n        scrollTo(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Sends a chat message from a site visitor.\\\\r\\\\n         */\\\\r\\\\n        sendMessage(messageInfo: $w.Chatbox.MessageInfo): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Chatbox {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a chat channel.\\\\r\\\\n         */\\\\r\\\\n        type Channel = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the channel.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Display information associated with the channel.\\\\r\\\\n             */\\\\r\\\\n            displayData: $w.Chatbox.DisplayData;\\\\r\\\\n            /**\\\\r\\\\n             * An array of messages sent over the channel. Currently only the last message is included.\\\\r\\\\n             */\\\\r\\\\n            messages: $w.Chatbox.Message[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about a chat channel.\\\\r\\\\n         */\\\\r\\\\n        type ChannelInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of a chat channel.\\\\r\\\\n             */\\\\r\\\\n            channelId?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of chat channel.\\\\r\\\\n             *  One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Focused\\\\\\\"`: Currently focused channel.\\\\r\\\\n             *  + `\\\\\\\"Business\\\\\\\"`: Business channel.\\\\r\\\\n             */\\\\r\\\\n            type?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing display information associated with a [`Channel`](#channel).\\\\r\\\\n         */\\\\r\\\\n        type DisplayData = {\\\\r\\\\n            /**\\\\r\\\\n             * The image associated with the channel.\\\\r\\\\n             *  One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + For private social channels, the image associated with the site member's account. If there is no image associated with the account, defaults to the avatar image.\\\\r\\\\n             *  + For group social channels, the image associated with the chat group.\\\\r\\\\n             *  + For business channels, `image` is not currently supported.\\\\r\\\\n             */\\\\r\\\\n            image: string;\\\\r\\\\n            /**\\\\r\\\\n             * For social channels, the member's name or chat group name. For business channels, the site's [display name](wix-site-backend.generalInfo.html#getSiteDisplayName).\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Only supported for business channels. Initials of the site's business.\\\\r\\\\n             */\\\\r\\\\n            initials: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about a chat message.\\\\r\\\\n         */\\\\r\\\\n        type Message = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the channel on which the message was sent.\\\\r\\\\n             */\\\\r\\\\n            channelId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of message. Currently only `TEXT` is supported.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * First 250 characters of the chat message. Currently only text is included in the summary.\\\\r\\\\n             */\\\\r\\\\n            summary: string;\\\\r\\\\n            /**\\\\r\\\\n             * The sender's member ID. For a message sent from the site's business, the site owner's member ID.\\\\r\\\\n             */\\\\r\\\\n            participantId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time the message was sent.\\\\r\\\\n             */\\\\r\\\\n            createdAt: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Content of the message.\\\\r\\\\n             */\\\\r\\\\n            payload: $w.Chatbox.MessagePayload;\\\\r\\\\n            /**\\\\r\\\\n             * An object representing additional contextual message information included in a chat message. Only relevant for messages sent using the backend [`sendMessage()`](wix-chat-backend.html#sendMessage) function. Site visitors do not see metadata.\\\\r\\\\n             */\\\\r\\\\n            metadata?: any;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a chat message to be sent.\\\\r\\\\n         */\\\\r\\\\n        type MessageInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * The text to be sent in the message.\\\\r\\\\n             */\\\\r\\\\n            messageText: string;\\\\r\\\\n            /**\\\\r\\\\n             * The ID of the channel over which the message is sent. If empty, message is sent to the site's business.\\\\r\\\\n             */\\\\r\\\\n            channelId?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * The content of a chat message.\\\\r\\\\n         */\\\\r\\\\n        type MessagePayload = {\\\\r\\\\n            /**\\\\r\\\\n             * Text of the chat message.\\\\r\\\\n             */\\\\r\\\\n            text: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A post page for a specific blog post.\\\\r\\\\n     */\\\\r\\\\n    interface PostPage extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the all the information associated with the current blog post.\\\\r\\\\n         */\\\\r\\\\n        getPost(): Promise<$w.PostPage.BlogPost>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace PostPage {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a blog post on a post page.\\\\r\\\\n         */\\\\r\\\\n        type BlogPost = {\\\\r\\\\n            /**\\\\r\\\\n             * Post ID.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Post title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Text of the post.\\\\r\\\\n             */\\\\r\\\\n            plainContent: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the post was originally published.\\\\r\\\\n             */\\\\r\\\\n            publishedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Number of times the post was viewed.\\\\r\\\\n             */\\\\r\\\\n            viewCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of likes the post received.\\\\r\\\\n             */\\\\r\\\\n            likeCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of comments the post received.\\\\r\\\\n             */\\\\r\\\\n            commentCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Date the post was most recently published.\\\\r\\\\n             */\\\\r\\\\n            lastPublishedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the cover image is displayed in the post.\\\\r\\\\n             */\\\\r\\\\n            coverImageDisplayed: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Estimated time in minutes required to read the post.\\\\r\\\\n             */\\\\r\\\\n            timeToRead: number;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the post was pinned to the top of the blog feed.\\\\r\\\\n             */\\\\r\\\\n            pinned: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the post is set as featured in the post settings. Featured posts appear in custom blog feeds.\\\\r\\\\n             */\\\\r\\\\n            featured: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * List of all hashtags in the post.\\\\r\\\\n             */\\\\r\\\\n            hashtags: string[];\\\\r\\\\n            /**\\\\r\\\\n             * The post's cover [image]($w.Image.html#src).\\\\r\\\\n             */\\\\r\\\\n            coverImage: string;\\\\r\\\\n            /**\\\\r\\\\n             * Relative URL of the post page on your published site.\\\\r\\\\n             */\\\\r\\\\n            postPageUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * A few lines of text that appear in the blog feed. Defined in Post Settings or default of first 160 characters of the post.\\\\r\\\\n             */\\\\r\\\\n            excerpt: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The menu in a user profile.\\\\r\\\\n     */\\\\r\\\\n    interface AccountNavBar extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Anchors\\\\r\\\\n     *  are invisible position markers which you can place anywhere on your site.\\\\r\\\\n     *  They are a useful way to direct users to important sections.\\\\r\\\\n     */\\\\r\\\\n    interface Anchor extends $w.Node, $w.ViewportMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the name of an anchor.\\\\r\\\\n         */\\\\r\\\\n        readonly name: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for background images in certain elements.\\\\r\\\\n     */\\\\r\\\\n    interface Background {\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the element's background.\\\\r\\\\n         */\\\\r\\\\n        readonly background: $w.Background.BackgroundOptions;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Background {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `background` property that contains the background options.\\\\r\\\\n         */\\\\r\\\\n        type BackgroundOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * The file location of the background image or video.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Container boxes\\\\r\\\\n     *  are used to structure your site. You can attach\\\\r\\\\n     *  any element to a container box and move the box around, which is a useful\\\\r\\\\n     *  way to to keep elements together. Some actions performed on a box affect the\\\\r\\\\n     *  elements it contains. For example, [hiding](#hide) a box also effectively\\\\r\\\\n     *  hides all the elements in the box, although the values of the\\\\r\\\\n     *  [hidden](#hidden) properties of the elements contained in the box do not change.\\\\r\\\\n     */\\\\r\\\\n    interface Box extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin, $w.ContainableMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the box's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A text button or an icon button.\\\\r\\\\n     */\\\\r\\\\n    interface Button extends $w.Element, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.LinkableMixin, $w.ClickableMixin, $w.StyleMixin, $w.LabelMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the label of a text button.\\\\r\\\\n         */\\\\r\\\\n        label: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the button's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Checkboxes are used for a single binary choice.\\\\r\\\\n     */\\\\r\\\\n    interface Checkbox extends $w.FormElement, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin, $w.CheckedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a checkbox is checked.\\\\r\\\\n         */\\\\r\\\\n        checked: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Determines if a checkbox is required to be checked.\\\\r\\\\n         */\\\\r\\\\n        required: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the checkbox's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a checkbox's value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Checkbox groups are used for selecting any number of the given\\\\r\\\\n     *  options. Checkbox groups consist of a list of [options](#Option). Each\\\\r\\\\n     *  [option](#Option) contains a label, which is what the user sees, and a\\\\r\\\\n     *  value, which is what is used in code and stored in your collections.\\\\r\\\\n     */\\\\r\\\\n    interface CheckboxGroup extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the options of a checkbox group.\\\\r\\\\n         */\\\\r\\\\n        options: $w.CheckboxGroup.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the indices of the selected options.\\\\r\\\\n         */\\\\r\\\\n        selectedIndices: number[];\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the checkbox group's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the selected options.\\\\r\\\\n         */\\\\r\\\\n        value: string[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace CheckboxGroup {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `options` property that contains the attributes of checkbox item.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * The value of the checkbox option. This is what you use in code and is what is stored in your collections.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * The label of the checkbox option. This is what a user sees.\\\\r\\\\n             */\\\\r\\\\n            label?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface CheckedMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether the element is checked or not.\\\\r\\\\n         */\\\\r\\\\n        checked: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface ClickableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element is clicked.\\\\r\\\\n         */\\\\r\\\\n        onClick(handler: $w.MouseEventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element is double-clicked.\\\\r\\\\n         */\\\\r\\\\n        onDblClick(handler: $w.MouseEventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be collapsed.\\\\r\\\\n     * \\\\r\\\\n     *  To learn about the behavior of a collapsed element,\\\\r\\\\n     *  see the [`collapsed`](#collapsed) property.\\\\r\\\\n     */\\\\r\\\\n    interface CollapsedMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is collapsed or expanded.\\\\r\\\\n         */\\\\r\\\\n        readonly collapsed: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Collapses the element and sets its `collapsed` property to `true`.\\\\r\\\\n         */\\\\r\\\\n        collapse(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Expands the element and sets its `collapsed` property to `false`.\\\\r\\\\n         */\\\\r\\\\n        expand(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A `Column` is a component part of a `ColumnStrip`.\\\\r\\\\n     */\\\\r\\\\n    interface Column extends $w.Element, $w.HiddenCollapsedMixin, $w.Background, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A `ColumnStrip` is a strip of `Column` elements.\\\\r\\\\n     */\\\\r\\\\n    interface ColumnStrip extends $w.Element, $w.Background, $w.HiddenCollapsedMixin, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the column strip's background, such as its image or video source.\\\\r\\\\n         */\\\\r\\\\n        readonly background: $w.Document.BackgroundOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of all the columns contained in the column strip.\\\\r\\\\n         */\\\\r\\\\n        readonly columns: $w.Column[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can contain other elements.\\\\r\\\\n     *  Some elements, such as pages, headers, footers, and boxes, can contain\\\\r\\\\n     *  other elements. This occurs when you drag an element onto a container\\\\r\\\\n     *  element and attach it.\\\\r\\\\n     *  These attached elements are considered the parent element's children. Some\\\\r\\\\n     *  actions performed on the parent, such as [`hiding`]($w.HiddenMixin.html#hide),\\\\r\\\\n     *  affect the element's children as well.\\\\r\\\\n     */\\\\r\\\\n    interface ContainableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Gets an array of the elements that are contained within the element.\\\\r\\\\n         */\\\\r\\\\n        readonly children: $w.Element[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A container for Repeater items.\\\\r\\\\n     */\\\\r\\\\n    interface Container extends $w.Element, $w.HiddenCollapsedMixin, $w.Background, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A `DatePicker` is used for entering dates. It lets users populate a\\\\r\\\\n     *  date field by picking a date using a calendar popup.\\\\r\\\\n     */\\\\r\\\\n    interface DatePicker extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.ReadOnlyMixin, $w.ClickableMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the dates that a user cannot select.\\\\r\\\\n         */\\\\r\\\\n        disabledDates: Date[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the days of the week that a user cannot select.\\\\r\\\\n         */\\\\r\\\\n        disabledDaysOfWeek: number[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the latest date that a user can select.\\\\r\\\\n         */\\\\r\\\\n        maxDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the earliest date that a user can select.\\\\r\\\\n         */\\\\r\\\\n        minDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the date picker.\\\\r\\\\n         */\\\\r\\\\n        value: Date;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface DisabledMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is enabled or disabled.\\\\r\\\\n         */\\\\r\\\\n        readonly enabled: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Disables the element and sets its `enabled` property to `false`.\\\\r\\\\n         */\\\\r\\\\n        disable(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Enables the element and sets its `enabled` property to `true`.\\\\r\\\\n         */\\\\r\\\\n        enable(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A complete web page, which consists of a Header, Page, and Footer.\\\\r\\\\n     */\\\\r\\\\n    interface Document {\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the document's background, such as its image or video source.\\\\r\\\\n         */\\\\r\\\\n        readonly background: $w.Document.BackgroundOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the document's Header, Page, and Footer.\\\\r\\\\n         */\\\\r\\\\n        readonly children: $w.Node[];\\\\r\\\\n        /**\\\\r\\\\n         * Gets the document's type.\\\\r\\\\n         */\\\\r\\\\n        readonly type: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Document {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `background` property that contains the background options.\\\\r\\\\n         */\\\\r\\\\n        type BackgroundOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * The file location of the background image.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Dropdowns are used for selecting one of a number of options.\\\\r\\\\n     *  They are especially useful when there are too many options to display using\\\\r\\\\n     *  [radio buttons]($w.RadioButtonGroup.html). Dropdowns consist of a list\\\\r\\\\n     *  of [options](#Option). Each [option](#Option) contains a label, which is\\\\r\\\\n     *  what the user sees, and a value, which is what is used in code and stored in\\\\r\\\\n     *  you collections.\\\\r\\\\n     */\\\\r\\\\n    interface Dropdown extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the options in a dropdown.\\\\r\\\\n         */\\\\r\\\\n        options: $w.Dropdown.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the dropdown's placeholder text.\\\\r\\\\n         */\\\\r\\\\n        placeholder: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the index of the selected option.\\\\r\\\\n         */\\\\r\\\\n        selectedIndex: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the dropdown's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an element's value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Dropdown {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `options` property that contains the attributes of a dropdown list item.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * The value of the dropdown option. This is what you use in code and is what is stored in your collections.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * The label of the dropdown option. This is what a user sees.\\\\r\\\\n             */\\\\r\\\\n            label?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Use effect options to customize an effect when showing or hiding an element.\\\\r\\\\n     */\\\\r\\\\n    interface EffectOptions {\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace EffectOptions {\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"arc\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type ArcEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"bounce\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type BounceEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n            intensity: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"fade\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FadeEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"flip\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FlipEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"float\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FloatEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"fly\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FlyEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"fold\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type FoldEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"glide\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type GlideEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            angle: number;\\\\r\\\\n            distance: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"puff\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type PuffEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"roll\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type RollEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"slide\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type SlideEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"spin\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type SpinEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n            cycles: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"turn\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type TurnEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n            direction: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used to customize the `\\\\\\\"zoom\\\\\\\"` effect.\\\\r\\\\n         */\\\\r\\\\n        type ZoomEffectOptions = {\\\\r\\\\n            duration: number;\\\\r\\\\n            delay: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides basic functionality for elements.\\\\r\\\\n     */\\\\r\\\\n    interface Element extends $w.Node, $w.ViewportMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an element is currently in the DOM structure.\\\\r\\\\n         */\\\\r\\\\n        readonly rendered: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the mouse pointer is moved\\\\r\\\\n         *  onto the element.\\\\r\\\\n         */\\\\r\\\\n        onMouseIn(handler: $w.MouseEventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the mouse pointer is moved\\\\r\\\\n         *  off of the element.\\\\r\\\\n         */\\\\r\\\\n        onMouseOut(handler: $w.MouseEventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Events are fired when certain actions occur to elements.\\\\r\\\\n     */\\\\r\\\\n    interface Event {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the context of the event on a repeated element.\\\\r\\\\n         */\\\\r\\\\n        readonly context: $w.Event.EventContext;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the element that the event was fired on.\\\\r\\\\n         */\\\\r\\\\n        readonly target: $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the type of event that was fired.\\\\r\\\\n         */\\\\r\\\\n        readonly type: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Event {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about the context in which an event was fired.\\\\r\\\\n         */\\\\r\\\\n        type EventContext = {\\\\r\\\\n            /**\\\\r\\\\n             * `\\\\\\\"GLOBAL_SCOPE\\\\\\\"` for events fired outside\\\\r\\\\n             *  of repeaters, or `\\\\\\\"COMPONENT_SCOPE\\\\\\\"` for events fired from repeaters.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the repeater item where the\\\\r\\\\n             *  event was fired from.\\\\r\\\\n             */\\\\r\\\\n            itemId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can set and lose focus.\\\\r\\\\n     * \\\\r\\\\n     *  The element on the page that is currently active is the element in focus.\\\\r\\\\n     *  Only one element on the page can have focus at any given moment.\\\\r\\\\n     *  Typically, an element exhibits a visual cue, such as a subtle outline,\\\\r\\\\n     *  indicating that it is in focus. The element in focus receives keystroke\\\\r\\\\n     *  events if the user causes any.\\\\r\\\\n     * \\\\r\\\\n     *  An element receives focus and loses focus (blurs) through user actions,\\\\r\\\\n     *  such as clicking and tabbing, or programmatically, using the\\\\r\\\\n     *  [focus( )](#focus) and [blur( )](#blur) functions.\\\\r\\\\n     */\\\\r\\\\n    interface FocusMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Removes focus from the element.\\\\r\\\\n         */\\\\r\\\\n        blur(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Places focus on the element.\\\\r\\\\n         */\\\\r\\\\n        focus(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element loses focus.\\\\r\\\\n         */\\\\r\\\\n        onBlur(handler: $w.EventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element receives focus.\\\\r\\\\n         */\\\\r\\\\n        onFocus(handler: $w.EventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The footer is the area of your site that appears at the bottom and\\\\r\\\\n     *  throughout all of your pages.\\\\r\\\\n     */\\\\r\\\\n    interface Footer extends $w.Element, $w.ClickableMixin, $w.ContainableMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the footer's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality related to user input elements.\\\\r\\\\n     */\\\\r\\\\n    interface FormElement extends $w.Element, $w.ValidatableMixin, $w.ValueMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A gallery for displaying multiple items.\\\\r\\\\n     */\\\\r\\\\n    interface Gallery extends $w.Element, $w.HiddenCollapsedMixin, $w.PlayableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the action that occurs when an item in the gallery is clicked.\\\\r\\\\n         */\\\\r\\\\n        clickAction: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the index of the gallery's current item.\\\\r\\\\n         */\\\\r\\\\n        readonly currentIndex: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the current item.\\\\r\\\\n         */\\\\r\\\\n        readonly currentItem: $w.Gallery.ImageItem | $w.Gallery.VideoItem;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the gallery's capabilities.\\\\r\\\\n         */\\\\r\\\\n        readonly galleryCapabilities: $w.Gallery.GalleryCapabilities;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the items in a gallery.\\\\r\\\\n         */\\\\r\\\\n        items: $w.Gallery.ImageItem[] | $w.Gallery.VideoItem[];\\\\r\\\\n        /**\\\\r\\\\n         * Determines if a gallery's navigation arrows are shown.\\\\r\\\\n         */\\\\r\\\\n        showNavigationButtons: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a gallery's current item changes.\\\\r\\\\n         */\\\\r\\\\n        onCurrentItemChanged(handler: $w.GalleryItemChangedEventHandler): $w.Gallery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an item in a gallery is\\\\r\\\\n         *  clicked.\\\\r\\\\n         */\\\\r\\\\n        onItemClicked(handler: $w.GalleryItemClickedEventHandler): $w.Gallery;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Gallery {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `galleryCapabilities` property that contains the capabilities of a gallery.\\\\r\\\\n         */\\\\r\\\\n        type GalleryCapabilities = {\\\\r\\\\n            /**\\\\r\\\\n             * Indicates if the gallery supports play operations.\\\\r\\\\n             */\\\\r\\\\n            isPlayable: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates if the gallery supports the notion of a current item.\\\\r\\\\n             */\\\\r\\\\n            hasCurrentItem: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates if the gallery supports navigation buttons.\\\\r\\\\n             */\\\\r\\\\n            hasNavigationButtons: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the Gallery properties `items` and `currentItem` to represent a single gallery image.\\\\r\\\\n         */\\\\r\\\\n        type ImageItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Item type. Value is `\\\\\\\"image\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Item slug.\\\\r\\\\n             */\\\\r\\\\n            slug: string;\\\\r\\\\n            /**\\\\r\\\\n             * Image source URL.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n            /**\\\\r\\\\n             * Image description. Descriptions over 100 characters are truncated.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Image title.\\\\r\\\\n             */\\\\r\\\\n            title?: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the image's clickable link. See [here]($w.LinkableMixin.html#link) for more information about links.\\\\r\\\\n             */\\\\r\\\\n            link?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the Gallery properties `items` and `currentItem` to represent a single gallery video.\\\\r\\\\n         */\\\\r\\\\n        type VideoItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Item type. Value is `\\\\\\\"video\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Item slug.\\\\r\\\\n             */\\\\r\\\\n            slug: string;\\\\r\\\\n            /**\\\\r\\\\n             * Video source URL.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n            /**\\\\r\\\\n             * Video description. Descriptions over 100 characters are truncated.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Video title.\\\\r\\\\n             */\\\\r\\\\n            title?: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the video's clickable link. See [here]($w.LinkableMixin.html#link) for more information about links.\\\\r\\\\n             */\\\\r\\\\n            link?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Video thumbnail URL.\\\\r\\\\n             */\\\\r\\\\n            thumbnail?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a gallery moves to a new image.\\\\r\\\\n     */\\\\r\\\\n    interface GalleryItemChangedEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the gallery item.\\\\r\\\\n         */\\\\r\\\\n        readonly item: $w.Gallery.ImageItem | $w.Gallery.VideoItem;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the gallery item's index.\\\\r\\\\n         */\\\\r\\\\n        readonly itemIndex: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when an image in a gallery is clicked.\\\\r\\\\n     */\\\\r\\\\n    interface GalleryItemClickedEvent extends $w.GalleryItemChangedEvent, $w.Event{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A [Google Map element](https://www.wix.com/support/html5/article/adding-google-maps)\\\\r\\\\n     *  that allows you to display a given location.\\\\r\\\\n     */\\\\r\\\\n    interface GoogleMap extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the location information of a map's marked location.\\\\r\\\\n         */\\\\r\\\\n        location: $w.GoogleMap.MapLocation;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace GoogleMap {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `location` property that\\\\r\\\\n         *  contains the attributes of a marked map location.\\\\r\\\\n         */\\\\r\\\\n        type MapLocation = {\\\\r\\\\n            /**\\\\r\\\\n             * The latitude of the location. Must be between -90 and 90.\\\\r\\\\n             */\\\\r\\\\n            latitude: number;\\\\r\\\\n            /**\\\\r\\\\n             * The longitude of the location. Must be between -180 and 180.\\\\r\\\\n             */\\\\r\\\\n            longitude: number;\\\\r\\\\n            /**\\\\r\\\\n             * The description of the location.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The header is the area of your site that appears at the top and\\\\r\\\\n     *  throughout all of your pages.\\\\r\\\\n     */\\\\r\\\\n    interface Header extends $w.Element, $w.ClickableMixin, $w.ContainableMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the header's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for all elements that can be hidden or collapsed.\\\\r\\\\n     */\\\\r\\\\n    interface HiddenCollapsedElement extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for all elements that can be hidden or collapsed.\\\\r\\\\n     */\\\\r\\\\n    interface HiddenCollapsedMixin extends $w.HiddenMixin, $w.CollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be hidden.\\\\r\\\\n     * \\\\r\\\\n     *  To learn about the behavior of a hidden element,\\\\r\\\\n     *  see the [`hidden`](#hidden) property.\\\\r\\\\n     */\\\\r\\\\n    interface HiddenMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is visible or hidden.\\\\r\\\\n         */\\\\r\\\\n        readonly hidden: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is actually visible.\\\\r\\\\n         */\\\\r\\\\n        readonly isVisible: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Hides the element and sets its `hidden` property\\\\r\\\\n         *  to `true`, using an effect if specified.\\\\r\\\\n         */\\\\r\\\\n        hide(effectName?: string, effectOptions?: $w.EffectOptions.ArcEffectOptions | $w.EffectOptions.BounceEffectOptions | $w.EffectOptions.FadeEffectOptions | $w.EffectOptions.FlipEffectOptions | $w.EffectOptions.FloatEffectOptions | $w.EffectOptions.FlyEffectOptions | $w.EffectOptions.FoldEffectOptions | $w.EffectOptions.GlideEffectOptions | $w.EffectOptions.PuffEffectOptions | $w.EffectOptions.RollEffectOptions | $w.EffectOptions.SlideEffectOptions | $w.EffectOptions.SpinEffectOptions | $w.EffectOptions.TurnEffectOptions | $w.EffectOptions.ZoomEffectOptions): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Shows the element and sets its `hidden` property\\\\r\\\\n         *  to `false`, using an effect if specified.\\\\r\\\\n         */\\\\r\\\\n        show(effectName?: string, effectOptions?: $w.EffectOptions.ArcEffectOptions | $w.EffectOptions.BounceEffectOptions | $w.EffectOptions.FadeEffectOptions | $w.EffectOptions.FlipEffectOptions | $w.EffectOptions.FloatEffectOptions | $w.EffectOptions.FlyEffectOptions | $w.EffectOptions.FoldEffectOptions | $w.EffectOptions.GlideEffectOptions | $w.EffectOptions.PuffEffectOptions | $w.EffectOptions.RollEffectOptions | $w.EffectOptions.SlideEffectOptions | $w.EffectOptions.SpinEffectOptions | $w.EffectOptions.TurnEffectOptions | $w.EffectOptions.ZoomEffectOptions): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A container for internal or external HTML code. Messages can be sent\\\\r\\\\n     *  from your page code to the code in an HTML component and from the HTML\\\\r\\\\n     *  component to your page code using the [`postMessage()`](#postMessage) and\\\\r\\\\n     *  [`onMessage()`](#onMessage) functions. To learn more about what code an HTML\\\\r\\\\n     *  component can hold, see here.\\\\r\\\\n     * \\\\r\\\\n     *  For an overview of working with an HTML Component using code, see Working with the HTML Element.\\\\r\\\\n     */\\\\r\\\\n    interface HtmlComponent extends $w.IFrame{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether the HTML Component displays scrollbars.\\\\r\\\\n         */\\\\r\\\\n        scrolling: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the URL of the HTML Component's code.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Allows the HTML Component to be put into full screen mode.\\\\r\\\\n         */\\\\r\\\\n        allowFullScreen(): $w.HtmlComponent;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the HTML Component\\\\r\\\\n         *  sends a message.\\\\r\\\\n         */\\\\r\\\\n        onMessage(handler: $w.HtmlComponentMessageEventHandler): $w.HtmlComponent;\\\\r\\\\n        /**\\\\r\\\\n         * Sends a message to the HTML Component.\\\\r\\\\n         */\\\\r\\\\n        postMessage(message: string | number | boolean | any | any[]): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when the code in an HtmlComponent sends a message.\\\\r\\\\n     */\\\\r\\\\n    interface HtmlComponentMessageEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the event data.\\\\r\\\\n         */\\\\r\\\\n        readonly data: $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for iframe-based elements, such as `HtmlComponent`.\\\\r\\\\n     */\\\\r\\\\n    interface IFrame extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a user hovers over a star on a ratings input component.\\\\r\\\\n     */\\\\r\\\\n    interface IconMouseInEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the display label that corresponds to the icon that the mouse entered.\\\\r\\\\n         */\\\\r\\\\n        readonly label: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the value (1-5) that corresponds to the icon that the mouse entered.\\\\r\\\\n         */\\\\r\\\\n        readonly value: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Images are images stored in the Media Manager\\\\r\\\\n     *  or retrieved from an external web location.\\\\r\\\\n     * \\\\r\\\\n     *  The URL formats for images are:\\\\r\\\\n     * \\\\r\\\\n     *  + Images from the Media Manager: `wix:image://v1//#originWidth=&originHeight=[&watermark=]`\\\\r\\\\n     *  + Images from the web: `http(s)://`\\\\r\\\\n     */\\\\r\\\\n    interface Image extends $w.Element, $w.HiddenCollapsedMixin, $w.LinkableMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an image's alt text.\\\\r\\\\n         */\\\\r\\\\n        alt: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the action that occurs when an image is clicked.\\\\r\\\\n         */\\\\r\\\\n        clickAction: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets how an image is placed inside an image element.\\\\r\\\\n         */\\\\r\\\\n        fitMode: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the file location of the image.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an image's tooltip.\\\\r\\\\n         */\\\\r\\\\n        tooltip: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when the keyboard is pressed.\\\\r\\\\n     */\\\\r\\\\n    interface KeyboardEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the Option key on a Mac or Alt key on a PC was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly altKey: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the Control (Ctrl) key was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly ctrlKey: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a string representation of the key that was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly key: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the ⌘ Command key on a Mac or ⊞ Windows key on a PC\\\\r\\\\n         *  was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly metaKey: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the Shift key was pressed.\\\\r\\\\n         */\\\\r\\\\n        readonly shiftKey: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface LabelMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the label of an element.\\\\r\\\\n         */\\\\r\\\\n        label: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can acts as links.\\\\r\\\\n     */\\\\r\\\\n    interface LinkableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the element's link.\\\\r\\\\n         */\\\\r\\\\n        link: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the target of the element's link.\\\\r\\\\n         */\\\\r\\\\n        target: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A container for media items.\\\\r\\\\n     */\\\\r\\\\n    interface MediaBox extends $w.Element, $w.HiddenCollapsedMixin, $w.Background{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A menu container is a container that holds the elements in a\\\\r\\\\n     *  mobile menu. You can add and remove elements to the container to customize\\\\r\\\\n     *  your site's mobile menu. The menu only appears in the mobile version of your\\\\r\\\\n     *  site.\\\\r\\\\n     */\\\\r\\\\n    interface MenuContainer extends $w.Element{\\\\r\\\\n        /**\\\\r\\\\n         * Closes a mobile menu.\\\\r\\\\n         */\\\\r\\\\n        close(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Opens a mobile menu.\\\\r\\\\n         */\\\\r\\\\n        open(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when the mouse is clicked.\\\\r\\\\n     */\\\\r\\\\n    interface MouseEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  left edge of the browser's viewable area.\\\\r\\\\n         */\\\\r\\\\n        readonly clientX: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  top edge of the browser's viewable area.\\\\r\\\\n         */\\\\r\\\\n        readonly clientY: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  left edge of the element that triggered this event.\\\\r\\\\n         */\\\\r\\\\n        readonly offsetX: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  top edge of the element that triggered this event.\\\\r\\\\n         */\\\\r\\\\n        readonly offsetY: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  left edge of the page.\\\\r\\\\n         */\\\\r\\\\n        readonly pageX: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  top edge of the page.\\\\r\\\\n         */\\\\r\\\\n        readonly pageY: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  left edge of the screen or screens.\\\\r\\\\n         */\\\\r\\\\n        readonly screenX: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the distance in pixels between the mouse pointer and the\\\\r\\\\n         *  top edge of the screen or screens.\\\\r\\\\n         */\\\\r\\\\n        readonly screenY: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Multi-state boxes are containers for states.\\\\r\\\\n     */\\\\r\\\\n    interface MultiStateBox extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the multi-state box's current state.\\\\r\\\\n         */\\\\r\\\\n        readonly currentState: $w.State;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of all the states contained in the multi-state box.\\\\r\\\\n         */\\\\r\\\\n        readonly states: $w.State[];\\\\r\\\\n        /**\\\\r\\\\n         * Change the multi-state box's current state to a specific state.\\\\r\\\\n         */\\\\r\\\\n        changeState(stateReference: string | $w.State): Promise<$w.State>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the multi-state box moves to a new state.\\\\r\\\\n         */\\\\r\\\\n        onChange(eventHandler: $w.EventHandler): $w.MultiStateBox;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides basic functionality for all Wix objects, including objects\\\\r\\\\n     *  that are not [elements]($w.Element.html).\\\\r\\\\n     */\\\\r\\\\n    interface Node {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an element appears on all pages or only on the current page.\\\\r\\\\n         */\\\\r\\\\n        readonly global: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the element's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the element's parent element.\\\\r\\\\n         */\\\\r\\\\n        readonly parent: $w.Node;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the element's type.\\\\r\\\\n         */\\\\r\\\\n        readonly type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Scrolls the page to the element using an animation.\\\\r\\\\n         */\\\\r\\\\n        scrollTo(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A page is a web page that can contain other elements.\\\\r\\\\n     */\\\\r\\\\n    interface Page extends $w.Element, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the page's SEO description.\\\\r\\\\n         */\\\\r\\\\n        readonly description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the page's keywords.\\\\r\\\\n         */\\\\r\\\\n        readonly keywords: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Gets the page's title.\\\\r\\\\n         */\\\\r\\\\n        readonly title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the page is included in the site's menu.\\\\r\\\\n         */\\\\r\\\\n        readonly visibleInMenu: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be played.\\\\r\\\\n     */\\\\r\\\\n    interface PlayableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the element is currently playing.\\\\r\\\\n         */\\\\r\\\\n        readonly isPlaying: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Moves to the next item.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<$w.Element>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is paused.\\\\r\\\\n         */\\\\r\\\\n        onPause(handler: $w.EventHandler): $w.Gallery & $w.Slideshow;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is started or restarted.\\\\r\\\\n         */\\\\r\\\\n        onPlay(handler: $w.EventHandler): $w.Gallery & $w.Slideshow;\\\\r\\\\n        /**\\\\r\\\\n         * Pauses playback.\\\\r\\\\n         */\\\\r\\\\n        pause(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Begins or resumes playback.\\\\r\\\\n         */\\\\r\\\\n        play(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Moves to the previous image or slide.\\\\r\\\\n         */\\\\r\\\\n        previous(): Promise<$w.Element>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A [quick action bar](https://support.wix.com/en/article/adding-and-setting-up-the-quick-action-bar-on-your-mobile-site)\\\\r\\\\n     *  helps your visitors contact you instantly from their mobile devices. You can\\\\r\\\\n     *  choose which actions appear on it and customize the design to match your site.\\\\r\\\\n     */\\\\r\\\\n    interface QuickActionBar extends $w.HiddenCollapsedMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a quick action bar's alignment.\\\\r\\\\n         */\\\\r\\\\n        alignment: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a quick action bar's color scheme.\\\\r\\\\n         */\\\\r\\\\n        colorScheme: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a quick action bar's color scheme is inverted.\\\\r\\\\n         */\\\\r\\\\n        invertColorScheme: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a quick action bar's labels are shown.\\\\r\\\\n         */\\\\r\\\\n        showLabels: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an item in a quick action bar is\\\\r\\\\n         *  clicked.\\\\r\\\\n         */\\\\r\\\\n        onItemClicked(handler: $w.QuickActionBarItemClickedEventHandler): $w.QuickActionBar;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a quick action bar item is clicked.\\\\r\\\\n     */\\\\r\\\\n    interface QuickActionBarItemClickedEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the gallery item.\\\\r\\\\n         */\\\\r\\\\n        readonly item: $w.QuickActionBarItemClickedEvent.QuickActionBarItem;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the quick action bar item's index.\\\\r\\\\n         */\\\\r\\\\n        readonly itemIndex: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace QuickActionBarItemClickedEvent {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a quick action bar item.\\\\r\\\\n         */\\\\r\\\\n        type QuickActionBarItem = {\\\\r\\\\n            /**\\\\r\\\\n             * The quick action bar item type.\\\\r\\\\n             */\\\\r\\\\n            itemType: string;\\\\r\\\\n            /**\\\\r\\\\n             * The quick action bar item label.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n            /**\\\\r\\\\n             * The quick action bar item link.\\\\r\\\\n             */\\\\r\\\\n            link: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Radio button groups are used for selecting one of a number of\\\\r\\\\n     *  options. Radio button groups consist of a list of [options](#Option). Each\\\\r\\\\n     *  [option](#Option) contains a label, which is what the user sees, and a\\\\r\\\\n     *  value, which is what is used in code and stored in you collections.\\\\r\\\\n     */\\\\r\\\\n    interface RadioButtonGroup extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the options in a radio button group.\\\\r\\\\n         */\\\\r\\\\n        options: $w.RadioButtonGroup.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the index of the selected option.\\\\r\\\\n         */\\\\r\\\\n        selectedIndex: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the radio button group's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the selected option.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace RadioButtonGroup {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `options` property that contains the attributes of a radio button item.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * The value of the radio button option. This is what you use in code and is what is stored in your collections.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * The label of the radio button option. This is what a user sees.\\\\r\\\\n             */\\\\r\\\\n            label?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for input elements which support readonly mode.\\\\r\\\\n     */\\\\r\\\\n    interface ReadOnlyMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets if a user can modify the value of the input element.\\\\r\\\\n         */\\\\r\\\\n        readOnly: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A repeating layout.\\\\r\\\\n     */\\\\r\\\\n    interface Repeater extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the repeater data.\\\\r\\\\n         */\\\\r\\\\n        data: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Runs a function for each repeated item.\\\\r\\\\n         */\\\\r\\\\n        forEachItem(callback: $w.ForItemCallback): void;\\\\r\\\\n        /**\\\\r\\\\n         * Runs a function for each repeated item with the given IDs.\\\\r\\\\n         */\\\\r\\\\n        forItems(itemIds: string[], callback: $w.ForItemCallback): void;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the function that runs when a new repeated item is created.\\\\r\\\\n         */\\\\r\\\\n        onItemReady(handler: $w.ItemReadyEventHandler): $w.Repeater;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the function that runs when a repeated item is removed.\\\\r\\\\n         */\\\\r\\\\n        onItemRemoved(handler: $w.ItemRemovedEventHandler): $w.Repeater;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for input elements can be required to have a value.\\\\r\\\\n     */\\\\r\\\\n    interface RequiredMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether an input element is required to have a value.\\\\r\\\\n         */\\\\r\\\\n        required: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A `Slide` from a `Slideshow` that can contain other elements.\\\\r\\\\n     */\\\\r\\\\n    interface Slide extends $w.Element, $w.Background, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the slide's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the name of the slide.\\\\r\\\\n         */\\\\r\\\\n        readonly name: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Slideshows are playable containers for slides.\\\\r\\\\n     */\\\\r\\\\n    interface Slideshow extends $w.Element, $w.HiddenCollapsedMixin, $w.PlayableMixin, $w.ClickableMixin, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the index of the slideshow's current slide.\\\\r\\\\n         */\\\\r\\\\n        readonly currentIndex: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the slideshow's current slide.\\\\r\\\\n         */\\\\r\\\\n        readonly currentSlide: $w.Slide;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a slideshow's navigation buttons are shown.\\\\r\\\\n         */\\\\r\\\\n        showNavigationButtons: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Set or returns whether a slideshow's slide buttons are shown.\\\\r\\\\n         */\\\\r\\\\n        showSlideButtons: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of all the slides contained in the slideshow.\\\\r\\\\n         */\\\\r\\\\n        readonly slides: $w.Slide[];\\\\r\\\\n        /**\\\\r\\\\n         * Change the slideshow's current slide to a specific slide or index.\\\\r\\\\n         */\\\\r\\\\n        changeSlide(slideReference: number | $w.Slide): Promise<$w.Slide>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the slideshow moves to a new slide.\\\\r\\\\n         */\\\\r\\\\n        onChange(eventHandler: $w.EventHandler): $w.Slideshow;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Note: This feature is not yet available to all users.\\\\r\\\\n     */\\\\r\\\\n    interface State extends $w.Element, $w.Background, $w.ContainableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the state's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an element's styles.\\\\r\\\\n     * \\\\r\\\\n     * Elements that expose a style property can be styled programmatically.\\\\r\\\\n     * You cannot programmatically style elements that do not expose a style property.\\\\r\\\\n     * \\\\r\\\\n     * The following elements expose the style property:\\\\r\\\\n     * \\\\r\\\\n     *  + [`Box`]($w.Box.html)\\\\r\\\\n     *  + [`Button`]($w.Button.html)\\\\r\\\\n     *  + [`Checkbox`]($w.Checkbox.html)\\\\r\\\\n     *  + [`CheckboxGroup`]($w.CheckboxGroup.html)\\\\r\\\\n     *  + [`Dropdown`]($w.Dropdown.html)\\\\r\\\\n     *  + [`Footer`]($w.Footer.html)\\\\r\\\\n     *  + [`Header`]($w.Header.html)\\\\r\\\\n     *  + [`ProgressBar`]($w.ProgressBar.html)\\\\r\\\\n     *  + [`QuickActionBar`]($w.QuickActionBar.html)\\\\r\\\\n     *  + [`RadioButtonGroup`]($w.RadioButtonGroup.html)\\\\r\\\\n     *  + [`TextBox`]($w.TextBox.html)\\\\r\\\\n     *  + [`TextInput`]($w.TextInput.html)\\\\r\\\\n     *  + [`UploadButton`]($w.UploadButton.html)\\\\r\\\\n     */\\\\r\\\\n    interface Style {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the background color of an element.\\\\r\\\\n         */\\\\r\\\\n        backgroundColor: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the border color of an element.\\\\r\\\\n         */\\\\r\\\\n        borderColor: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the border radius of an element.\\\\r\\\\n         */\\\\r\\\\n        borderRadius: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the border width of an element.\\\\r\\\\n         */\\\\r\\\\n        borderWidth: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the text color of an element.\\\\r\\\\n         */\\\\r\\\\n        color: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the foreground color of an element.\\\\r\\\\n         */\\\\r\\\\n        foregroundColor: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be styled.\\\\r\\\\n     */\\\\r\\\\n    interface StyleMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the element's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A table for displaying data.\\\\r\\\\n     */\\\\r\\\\n    interface Table extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the defining properties of the columns in a table.\\\\r\\\\n         */\\\\r\\\\n        columns: $w.Table.Column[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets the function that is called when a new page of table data is to be displayed.\\\\r\\\\n         */\\\\r\\\\n        dataFetcher: Function;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the table's pagination options.\\\\r\\\\n         */\\\\r\\\\n        pagination: $w.Table.PaginationOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the table's row data.\\\\r\\\\n         */\\\\r\\\\n        rows: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a table cell is selected.\\\\r\\\\n         */\\\\r\\\\n        onCellSelect(eventHandler: $w.TableCellEventHandler): $w.Table;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the table's data is changed.\\\\r\\\\n         */\\\\r\\\\n        onDataChange(eventHandler: $w.EventHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a table row is selected.\\\\r\\\\n         */\\\\r\\\\n        onRowSelect(eventHandler: $w.TableRowEventHandler): $w.Table;\\\\r\\\\n        /**\\\\r\\\\n         * Fetches the most current data and updates the table.\\\\r\\\\n         */\\\\r\\\\n        refresh(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Selects a table row by index.\\\\r\\\\n         */\\\\r\\\\n        selectRow(index: number): void;\\\\r\\\\n        /**\\\\r\\\\n         * Updates a the row data of a single row at the specified index.\\\\r\\\\n         */\\\\r\\\\n        updateRow(index: number, rowData: any): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Table {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `columns` property that\\\\r\\\\n         *  contains the properties that define a table column. Table columns do not\\\\r\\\\n         *  store any data.\\\\r\\\\n         */\\\\r\\\\n        type Column = {\\\\r\\\\n            /**\\\\r\\\\n             * The column ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * The location of the data displayed\\\\r\\\\n             *  in the column.\\\\r\\\\n             * \\\\r\\\\n             *  When the table is populated by a connection to a dataset, the `dataPath`\\\\r\\\\n             *  value is a field key from the collection that the dataset is connected to.\\\\r\\\\n             * \\\\r\\\\n             *  When the table is populated by using the [`rows`](#rows) or\\\\r\\\\n             *  [`dataFetcher`](#dataFetcher) properties, the `dataPath` value is one of the\\\\r\\\\n             *  property keys from the table's row objects.\\\\r\\\\n             */\\\\r\\\\n            dataPath: string;\\\\r\\\\n            /**\\\\r\\\\n             * The column header label.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n            /**\\\\r\\\\n             * The type of data in this column: `\\\\\\\"number\\\\\\\"`, `\\\\\\\"string\\\\\\\"`, `\\\\\\\"date\\\\\\\"`, `\\\\\\\"image\\\\\\\"`, `\\\\\\\"bool\\\\\\\"`, or `\\\\\\\"richText\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * The pixel width of the column.\\\\r\\\\n             */\\\\r\\\\n            width?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the column is visible.\\\\r\\\\n             */\\\\r\\\\n            visible?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * The location of the links used when\\\\r\\\\n             *  the items in the column are clicked.\\\\r\\\\n             * \\\\r\\\\n             *  When the table is populated by a connection to a dataset, the `linkPath`\\\\r\\\\n             *  value is a field key from the collection that the dataset is connected to.\\\\r\\\\n             *  The collection field can be a [regular field](https://support.wix.com/en/article/about-database-collections#regular-fields)\\\\r\\\\n             *  that contains URLs or a [calculated field](https://support.wix.com/en/article/about-database-collections#calculated-fields)\\\\r\\\\n             *  that contains relative links to dynamic pages.\\\\r\\\\n             * \\\\r\\\\n             *  When the table is populated by using the [`rows`](#rows) or\\\\r\\\\n             *  [`dataFetcher`](#dataFetcher) properties, the `linkPath` value is one of the\\\\r\\\\n             *  property keys from the table's rows objects.\\\\r\\\\n             *  The property values associated with that key contain URLs or relative links.\\\\r\\\\n             */\\\\r\\\\n            linkPath?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `pagination` property that\\\\r\\\\n         * contains the pagination options which determine if and how the table\\\\r\\\\n         * is paginated.\\\\r\\\\n         */\\\\r\\\\n        type PaginationOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * The type of pagination to use: `\\\\\\\"normal\\\\\\\"`, `\\\\\\\"pagination\\\\\\\"`, or `\\\\\\\"virtual\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * The number of rows per page.\\\\r\\\\n             */\\\\r\\\\n            rowsPerPage: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a table cell is selected.\\\\r\\\\n     */\\\\r\\\\n    interface TableCellEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the column ID of the selected cell.\\\\r\\\\n         */\\\\r\\\\n        readonly cellColumnId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the data from the selected cell.\\\\r\\\\n         */\\\\r\\\\n        readonly cellData: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the row index of the selected cell.\\\\r\\\\n         */\\\\r\\\\n        readonly cellRowIndex: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Event that is fired when a table row is selected.\\\\r\\\\n     */\\\\r\\\\n    interface TableRowEvent extends $w.Event{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the data for the selected row.\\\\r\\\\n         */\\\\r\\\\n        readonly rowData: any;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the index of the selected row.\\\\r\\\\n         */\\\\r\\\\n        readonly rowIndex: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for text elements.\\\\r\\\\n     */\\\\r\\\\n    interface Text extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the contents of a text element using standard HTML.\\\\r\\\\n         */\\\\r\\\\n        html: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the plain-text contents of a text element.\\\\r\\\\n         */\\\\r\\\\n        text: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An input element for capturing large amounts of text.\\\\r\\\\n     */\\\\r\\\\n    interface TextBox extends $w.FormElement, $w.DisabledMixin, $w.TextInputMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ReadOnlyMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the text box's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a text input's value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n        /**\\\\r\\\\n         * Determines if the text contains line breaks when its value is read.\\\\r\\\\n         */\\\\r\\\\n        wrap: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An input element for capturing small amounts of text.\\\\r\\\\n     */\\\\r\\\\n    interface TextInput extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.TextInputMixin, $w.FocusMixin, $w.ReadOnlyMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the input type of an Input element.\\\\r\\\\n         */\\\\r\\\\n        inputType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the maximum value for a text input element whose\\\\r\\\\n         *  type is set to **Number**.\\\\r\\\\n         */\\\\r\\\\n        max: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the minimum value for a text input element whose\\\\r\\\\n         *  type is set to **Number**.\\\\r\\\\n         */\\\\r\\\\n        min: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the text input's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a text input's value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that accept text as input.\\\\r\\\\n     */\\\\r\\\\n    interface TextInputMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the maximum number of characters that can be entered.\\\\r\\\\n         */\\\\r\\\\n        maxLength: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the element's placeholder text.\\\\r\\\\n         */\\\\r\\\\n        placeholder: string;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the cursor is inside the\\\\r\\\\n         *  input element and a key is pressed.\\\\r\\\\n         */\\\\r\\\\n        onKeyPress(eventHandler: $w.KeyboardEventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An upload button enables users to upload files to your site.\\\\r\\\\n     */\\\\r\\\\n    interface UploadButton extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.FocusMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the label on the upload button.\\\\r\\\\n         */\\\\r\\\\n        buttonLabel: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the type of file that a user can upload.\\\\r\\\\n         */\\\\r\\\\n        fileType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the upload button's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Returns a list of files that are pending upload.\\\\r\\\\n         */\\\\r\\\\n        value: $w.UploadButton.File[];\\\\r\\\\n        /**\\\\r\\\\n         * Clears the files that are pending upload.\\\\r\\\\n         */\\\\r\\\\n        reset(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Uploads the files that the user has chosen.\\\\r\\\\n         */\\\\r\\\\n        startUpload(): Promise<$w.UploadButton.UploadedFile>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace UploadButton {\\\\r\\\\n        /**\\\\r\\\\n         * The object used by the `value` property that represents\\\\r\\\\n         *  files ready for upload.\\\\r\\\\n         */\\\\r\\\\n        type File = {\\\\r\\\\n            /**\\\\r\\\\n             * The file's name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * The file's size in bytes.\\\\r\\\\n             */\\\\r\\\\n            size: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * The object returned by the `startUpload()` function's\\\\r\\\\n         *  Promise when an upload fails.\\\\r\\\\n         */\\\\r\\\\n        type UploadError = {\\\\r\\\\n            /**\\\\r\\\\n             * Numeric The error's code.\\\\r\\\\n             */\\\\r\\\\n            errorCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * The error's description.\\\\r\\\\n             */\\\\r\\\\n            errorDescription: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * The object returned by the `startUpload()` function's\\\\r\\\\n         *  Promise that contains the URL of the successfully uploaded file.\\\\r\\\\n         */\\\\r\\\\n        type UploadedFile = {\\\\r\\\\n            /**\\\\r\\\\n             * The Wix URL of the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            url: string;\\\\r\\\\n            /**\\\\r\\\\n             * The Wix media ID of the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            mediaId: string;\\\\r\\\\n            /**\\\\r\\\\n             * The title of the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * The width of an uploaded image file.\\\\r\\\\n             */\\\\r\\\\n            width: number;\\\\r\\\\n            /**\\\\r\\\\n             * The height of an uploaded image file.\\\\r\\\\n             */\\\\r\\\\n            height: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be validated.\\\\r\\\\n     * \\\\r\\\\n     * Certain input elements contain properties that are used in basic form\\\\r\\\\n     * validation, such as [`required`]($w.RequiredMixin.html#required) and\\\\r\\\\n     * [`maxlength`]($w.TextInputMixin.html#maxlength). More complex validation\\\\r\\\\n     * logic is achieved using the properties and functions below.\\\\r\\\\n     * \\\\r\\\\n     * Basic validation of elements against the constraints set in the Editor or\\\\r\\\\n     * programmatically is always peformed, regardless of any custom validation.\\\\r\\\\n     * \\\\r\\\\n     * However, sometimes more complex validation is needed, including validations\\\\r\\\\n     * that depend on more than one element. This is typically achieved by adding\\\\r\\\\n     * custom validation logic in an event handler that you set using the input\\\\r\\\\n     * element's [`onCustomValidation()`](#onCustomValidation) function. Within that\\\\r\\\\n     * handler, you call the `reject()` function to indicate that the element is\\\\r\\\\n     * invalid. The element's validity is checked when the value of the element\\\\r\\\\n     * changes either by user interaction or programmatically.\\\\r\\\\n     * \\\\r\\\\n     * Note that validations other than **required**, including custom validations,\\\\r\\\\n     * are not run on input elements when they don't have a value.\\\\r\\\\n     */\\\\r\\\\n    interface ValidatableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an input element's value is valid.\\\\r\\\\n         */\\\\r\\\\n        readonly valid: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a message indicating why the element is invalid, or an\\\\r\\\\n         *  empty string if the message is valid.\\\\r\\\\n         */\\\\r\\\\n        readonly validationMessage: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a ValidityState object that contains\\\\r\\\\n         *  detailed information about the validity states of the element.\\\\r\\\\n         */\\\\r\\\\n        readonly validity: $w.ValidatableMixin.ValidityState;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the element's validation is checked.\\\\r\\\\n         */\\\\r\\\\n        onCustomValidation(validator: $w.Validator): void;\\\\r\\\\n        /**\\\\r\\\\n         * Resets the element's visual validity indication.\\\\r\\\\n         */\\\\r\\\\n        resetValidityIndication(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the element's visual validity indication based on its current validity state.\\\\r\\\\n         */\\\\r\\\\n        updateValidityIndication(): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace ValidatableMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Contains detailed information about the validity states of an element.\\\\r\\\\n         */\\\\r\\\\n        type ValidityState = {\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's custom\\\\r\\\\n             *  validity message has been set to a non-empty string.\\\\r\\\\n             */\\\\r\\\\n            customError: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element meets all\\\\r\\\\n             *  constraint validations.\\\\r\\\\n             */\\\\r\\\\n            valid: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's\\\\r\\\\n             *  [`required`]($w.RequiredElement.html#required) property is `true`, but\\\\r\\\\n             *  it does not contain a value.\\\\r\\\\n             */\\\\r\\\\n            valueMissing: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's value\\\\r\\\\n             *  does not match its type when the type is email or url.\\\\r\\\\n             */\\\\r\\\\n            typeMismatch: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's\\\\r\\\\n             *  value does not match its pattern validation.\\\\r\\\\n             */\\\\r\\\\n            patternMismatch: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the length of the\\\\r\\\\n             *  element's value exceeds its [`maxlength`]($w.TextInputElement.html#maxlength)\\\\r\\\\n             *  property.\\\\r\\\\n             */\\\\r\\\\n            tooLong: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the length of the\\\\r\\\\n             *  element's value is smaller than its minlength.\\\\r\\\\n             */\\\\r\\\\n            tooShort: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's\\\\r\\\\n             *  value is less than the its [`min`]($w.TextInput.html#min) property.\\\\r\\\\n             */\\\\r\\\\n            rangeUnderflow: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's\\\\r\\\\n             *  value is more than the its [`max`]($w.TextInput.html#max) property.\\\\r\\\\n             */\\\\r\\\\n            rangeOverflow: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element is\\\\r\\\\n             *  an upload button that is required and a file has been selected but not\\\\r\\\\n             *  uploaded.\\\\r\\\\n             */\\\\r\\\\n            fileNotUploaded: boolean;\\\\r\\\\n            stepMismatch: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * `true` if the element's value\\\\r\\\\n             *  cannot be converted to a value\\\\r\\\\n             */\\\\r\\\\n            badInput: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface ValueMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an element's value.\\\\r\\\\n         */\\\\r\\\\n        value: any;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an input element's value\\\\r\\\\n         *  is changed.\\\\r\\\\n         */\\\\r\\\\n        onChange(handler: $w.EventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Vector images are digital illustrations based on geometric shapes.\\\\r\\\\n     *  They maintain their high quality when resized.\\\\r\\\\n     */\\\\r\\\\n    interface VectorImage extends $w.Element, $w.HiddenCollapsedMixin, $w.LinkableMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the file location of the vector image.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A vertical site menu.\\\\r\\\\n     */\\\\r\\\\n    interface VerticalMenu extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element that displays a video.\\\\r\\\\n     */\\\\r\\\\n    interface Video extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the URL of the video.\\\\r\\\\n         */\\\\r\\\\n        videoUrl: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for elements that can be scrolled into and out\\\\r\\\\n     *  of view.\\\\r\\\\n     */\\\\r\\\\n    interface ViewportMixin {\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an element is displayed\\\\r\\\\n         *  in the viewable part of the current window.\\\\r\\\\n         */\\\\r\\\\n        onViewportEnter(handler: $w.EventHandler): $w.Element;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an element is no longer\\\\r\\\\n         *  displayed in the viewable part of the current window.\\\\r\\\\n         */\\\\r\\\\n        onViewportLeave(handler: $w.EventHandler): $w.Element;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    type EventHandler = (event: $w.Event, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    type ForItemCallback = ($item: $w.$w, itemData: any, index: number)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when a gallery moves to a new image.\\\\r\\\\n     */\\\\r\\\\n    type GalleryItemChangedEventHandler = (event: $w.GalleryItemChangedEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when an image in a gallery is clicked.\\\\r\\\\n     */\\\\r\\\\n    type GalleryItemClickedEventHandler = (event: $w.GalleryItemClickedEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when google map / marker is clicked.\\\\r\\\\n     */\\\\r\\\\n    type GoogleMapClickEvent = (event: $w.GoogleMapClickEvent)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when the code in an HtmlComponent sends a message.\\\\r\\\\n     */\\\\r\\\\n    type HtmlComponentMessageEventHandler = (event: $w.HtmlComponentMessageEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    type HtmlElementEventHandler = (event: $w.HtmlComponentMessageEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when a user hovers over a star on the rating component.\\\\r\\\\n     */\\\\r\\\\n    type IconMouseInEventHandler = (event: $w.IconMouseInEvent)=>void;\\\\r\\\\n\\\\r\\\\n    type ItemReadyEventHandler = ($item: $w.$w, itemData: any, index: number)=>void;\\\\r\\\\n\\\\r\\\\n    type ItemRemovedEventHandler = (itemData: any)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when the keyboard is pressed.\\\\r\\\\n     */\\\\r\\\\n    type KeyboardEventHandler = (event: $w.KeyboardEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when the mouse is clicked.\\\\r\\\\n     */\\\\r\\\\n    type MouseEventHandler = (event: $w.MouseEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when an item in a quick action bar is clicked.\\\\r\\\\n     */\\\\r\\\\n    type QuickActionBarItemClickedEventHandler = (event: $w.QuickActionBarItemClickedEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function that runs when all page elements have finished loading.\\\\r\\\\n     */\\\\r\\\\n    type ReadyHandler = ()=>Promise<void> | void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when a table cell is selected.\\\\r\\\\n     */\\\\r\\\\n    type TableCellEventHandler = (event: $w.TableCellEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles events fired when a table row is selected.\\\\r\\\\n     */\\\\r\\\\n    type TableRowEventHandler = (event: $w.TableRowEvent, $w: $w.$w)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function that runs when custom validation is checked.\\\\r\\\\n     */\\\\r\\\\n    type Validator = (value: string | $w.UploadButton.File[] | boolean, reject: Function)=>void;\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Note: This feature is not yet available to all users.\\\\r\\\\n     * \\\\r\\\\n     * \\\\r\\\\n     * `AddressInput` is used for entering addresses. It lets users type\\\\r\\\\n     * an address, and suggests exact locations using Google Maps services.\\\\r\\\\n     */\\\\r\\\\n    interface AddressInput extends $w.FormElement, $w.DisabledMixin, $w.RequiredMixin, $w.ReadOnlyMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the filter of the address input.\\\\r\\\\n         */\\\\r\\\\n        filter: $w.AddressInput.AddressFilter;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the placeholder of the address input.\\\\r\\\\n         */\\\\r\\\\n        placeholder: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the address input.\\\\r\\\\n         */\\\\r\\\\n        value: $w.AddressInput.Address;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace AddressInput {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a physical address.\\\\r\\\\n         */\\\\r\\\\n        type Address = {\\\\r\\\\n            /**\\\\r\\\\n             * Address in human-readable format. The formatted address is displayed in the address input element.\\\\r\\\\n             */\\\\r\\\\n            formatted: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address coordinates.\\\\r\\\\n             */\\\\r\\\\n            location?: $w.AddressInput.AddressLocation;\\\\r\\\\n            /**\\\\r\\\\n             * Address street name and number.\\\\r\\\\n             */\\\\r\\\\n            streetAddress?: $w.AddressInput.StreetAddress;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address subdivision of a country, such as a state or province.\\\\r\\\\n             */\\\\r\\\\n            subdivision?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address postal code.\\\\r\\\\n             */\\\\r\\\\n            postalCode?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing a filter for filtering address suggestions\\\\r\\\\n         * in an address input. Suggestions are restricted to addresses within\\\\r\\\\n         * the specified country.\\\\r\\\\n         */\\\\r\\\\n        type AddressFilter = {\\\\r\\\\n            /**\\\\r\\\\n             * ISO_3166 country code.\\\\r\\\\n             */\\\\r\\\\n            country?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing the coordinates of an address.\\\\r\\\\n         */\\\\r\\\\n        type AddressLocation = {\\\\r\\\\n            /**\\\\r\\\\n             * Address latitude.\\\\r\\\\n             */\\\\r\\\\n            latitude: number;\\\\r\\\\n            /**\\\\r\\\\n             * Address longitude.\\\\r\\\\n             */\\\\r\\\\n            longitude: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing the street name and number of an address.\\\\r\\\\n         */\\\\r\\\\n        type StreetAddress = {\\\\r\\\\n            /**\\\\r\\\\n             * Street name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Street number.\\\\r\\\\n             */\\\\r\\\\n            number?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element for playing audio files.\\\\r\\\\n     */\\\\r\\\\n    interface AudioPlayer extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the name of the artist displayed in an audio player.\\\\r\\\\n         */\\\\r\\\\n        artistName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the cover image displayed in an audio player.\\\\r\\\\n         */\\\\r\\\\n        coverImage: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the current play time from the beginning of the audio track, in seconds.\\\\r\\\\n         */\\\\r\\\\n        readonly currentTime: number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the total play time of the audio track, in seconds.\\\\r\\\\n         */\\\\r\\\\n        readonly duration: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the volume is currently muted.\\\\r\\\\n         */\\\\r\\\\n        readonly isMuted: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if an audio track is currently playing.\\\\r\\\\n         */\\\\r\\\\n        readonly isPlaying: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the file location of the audio file.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the track name displayed in an audio player.\\\\r\\\\n         */\\\\r\\\\n        trackName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets an audio player's volume.\\\\r\\\\n         */\\\\r\\\\n        volume: number;\\\\r\\\\n        /**\\\\r\\\\n         * Mutes audio volume.\\\\r\\\\n         */\\\\r\\\\n        mute(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback has ended.\\\\r\\\\n         */\\\\r\\\\n        onEnded(handler: $w.EventHandler): $w.AudioPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is paused.\\\\r\\\\n         */\\\\r\\\\n        onPause(handler: $w.EventHandler): $w.AudioPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is started or restarted.\\\\r\\\\n         */\\\\r\\\\n        onPlay(handler: $w.EventHandler): $w.AudioPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback progresses.\\\\r\\\\n         */\\\\r\\\\n        onProgress(handler: $w.EventHandler): $w.AudioPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Pauses playback.\\\\r\\\\n         */\\\\r\\\\n        pause(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Begins or resumes playback.\\\\r\\\\n         */\\\\r\\\\n        play(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves playback to the specified time, in seconds.\\\\r\\\\n         */\\\\r\\\\n        seek(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Stops playback.\\\\r\\\\n         */\\\\r\\\\n        stop(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Toggles playback.\\\\r\\\\n         */\\\\r\\\\n        togglePlay(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Unmutes audio volume.\\\\r\\\\n         */\\\\r\\\\n        unmute(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The reCAPTCHA element allows you to present a challenge-response test to site visitors to determine whether they are human or a bot.\\\\r\\\\n     */\\\\r\\\\n    interface Captcha extends $w.Element, $w.FocusMixin, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the reCAPTCHA token.\\\\r\\\\n         */\\\\r\\\\n        readonly token: string;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a connection error occurs while completing the CAPTCHA challenge.\\\\r\\\\n         */\\\\r\\\\n        onError(handler: $w.Captcha.ErrorHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the CAPTCHA token expires.\\\\r\\\\n         */\\\\r\\\\n        onTimeout(handler: $w.Captcha.TimeoutHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the CAPTCHA challenge is successfully completed.\\\\r\\\\n         */\\\\r\\\\n        onVerified(handler: $w.Captcha.VerifiedHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Resets the reCAPTCHA element.\\\\r\\\\n         */\\\\r\\\\n        reset(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Captcha {\\\\r\\\\n        /**\\\\r\\\\n         * An error event handler.\\\\r\\\\n         */\\\\r\\\\n        type ErrorHandler = ()=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A timeout event handler.\\\\r\\\\n         */\\\\r\\\\n        type TimeoutHandler = ()=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A verification event handler.\\\\r\\\\n         */\\\\r\\\\n        type VerifiedHandler = ()=>Promise<void>;\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * This feature is not yet available to all users.\\\\r\\\\n     */\\\\r\\\\n    interface CustomElement extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the SEO markup to be rendered for search engine bots.\\\\r\\\\n         */\\\\r\\\\n        seoMarkup: string;\\\\r\\\\n        /**\\\\r\\\\n         * Registers a callback function in Corvid for an event triggered from the custom element.\\\\r\\\\n         */\\\\r\\\\n        on(eventName: string, callBackFunction: Function): void;\\\\r\\\\n        /**\\\\r\\\\n         * Sets an HTML attribute on the custom element's DOM node.\\\\r\\\\n         */\\\\r\\\\n        setAttribute(key: string, value: string): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element for working with paging.\\\\r\\\\n     */\\\\r\\\\n    interface Pagination extends $w.Element, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.ClickableMixin, $w.ViewportMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the current page.\\\\r\\\\n         */\\\\r\\\\n        currentPage: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the total number of pages shown in a pagination bar.\\\\r\\\\n         */\\\\r\\\\n        totalPages: number;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the pagination bar\\\\r\\\\n         *  is changed.\\\\r\\\\n         */\\\\r\\\\n        onChange(handler: $w.EventHandler): $w.Pagination;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element for displaying the status of an ongoing process.\\\\r\\\\n     */\\\\r\\\\n    interface ProgressBar extends $w.Element, $w.HiddenCollapsedMixin, $w.StyleMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the progress bar's styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a progress bar's target value.\\\\r\\\\n         */\\\\r\\\\n        readonly targetValue: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a progress bar's value.\\\\r\\\\n         */\\\\r\\\\n        readonly value: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A ratings display element allows you to display a value to your users\\\\r\\\\n     *  using icons.\\\\r\\\\n     */\\\\r\\\\n    interface RatingsDisplay extends $w.Element, $w.HiddenCollapsedMixin, $w.ClickableMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the displayed number of ratings.\\\\r\\\\n         */\\\\r\\\\n        numRatings: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the displayed rating.\\\\r\\\\n         */\\\\r\\\\n        rating: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A ratings input element allows you to capture a value from your users\\\\r\\\\n     *  using icons.\\\\r\\\\n     */\\\\r\\\\n    interface RatingsInput extends $w.FormElement, $w.DisabledMixin, $w.RequiredMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ClickableMixin, $w.ViewportMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the rating value.\\\\r\\\\n         */\\\\r\\\\n        value: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the function that runs when a user's mouse enters one of the rating icons.\\\\r\\\\n         */\\\\r\\\\n        onIconMouseIn(handler: $w.IconMouseInEventHandler): $w.RatingsInput;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * RichTextBox is a rich text input as form element\\\\r\\\\n     */\\\\r\\\\n    interface RichTextBox extends $w.FormElement, $w.DisabledMixin, $w.TextInputMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ReadOnlyMixin, $w.ClickableMixin, $w.RequiredMixin{\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Note: This feature is not yet available to all users.\\\\r\\\\n     */\\\\r\\\\n    interface SelectionTags extends $w.FormElement, $w.HiddenCollapsedMixin, $w.DisabledMixin, $w.ClickableMixin, $w.StyleMixin, $w.RequiredMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a list of items which will be rendered as tags.\\\\r\\\\n         */\\\\r\\\\n        options: $w.SelectionTags.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the indices of the selected options.\\\\r\\\\n         */\\\\r\\\\n        selectedIndices: number[];\\\\r\\\\n        /**\\\\r\\\\n         * Gets an object containing information about the selection tags' styles.\\\\r\\\\n         */\\\\r\\\\n        readonly style: $w.Style;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the values of the selected options.\\\\r\\\\n         */\\\\r\\\\n        value: string[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace SelectionTags {\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the [`options`](#options) property that contains the attributes of the selection tag item.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * The value of the selection tag option. This is what you use in code and is what is stored in your collections.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * The label of the selection tag option. This is what a site visitor sees.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Sliders allow users to select a number from a given range.\\\\r\\\\n     */\\\\r\\\\n    interface Slider extends $w.Element, $w.ValueMixin, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.FocusMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the slider's maximum value.\\\\r\\\\n         */\\\\r\\\\n        max: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the slider's minimum value.\\\\r\\\\n         */\\\\r\\\\n        min: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a slider's step value.\\\\r\\\\n         */\\\\r\\\\n        step: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a slider's step type.\\\\r\\\\n         */\\\\r\\\\n        stepType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the value of the slider.\\\\r\\\\n         */\\\\r\\\\n        readonly value: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Switches are used for a single binary choice.\\\\r\\\\n     */\\\\r\\\\n    interface Switch extends $w.Element, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.FocusMixin, $w.ClickableMixin, $w.ValueMixin, $w.CheckedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether a switch is on or off.\\\\r\\\\n         */\\\\r\\\\n        checked: boolean;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An input element for capturing the time of day.\\\\r\\\\n     */\\\\r\\\\n    interface TimePicker extends $w.FocusMixin, $w.DisabledMixin, $w.HiddenCollapsedMixin, $w.RequiredMixin, $w.ReadOnlyMixin, $w.FormElement{\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the number of minutes the time picker steps.\\\\r\\\\n         */\\\\r\\\\n        readonly step: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets whether the time picker uses 12-hour or 24-hour format.\\\\r\\\\n         */\\\\r\\\\n        readonly useAmPmFormat: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets a time picker's value.\\\\r\\\\n         */\\\\r\\\\n        readonly value: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An element for presenting videos.\\\\r\\\\n     */\\\\r\\\\n    interface VideoPlayer extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the current play time from the beginning of the current video, in seconds.\\\\r\\\\n         */\\\\r\\\\n        readonly currentTime: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the description of a video.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the total play time of the current video, in seconds.\\\\r\\\\n         */\\\\r\\\\n        readonly duration: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the volume is currently muted.\\\\r\\\\n         */\\\\r\\\\n        readonly isMuted: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if a video is currently playing.\\\\r\\\\n         */\\\\r\\\\n        readonly isPlaying: boolean;\\\\r\\\\n        poster: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the file location of the current video.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the title displayed in a video player.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the video player volume.\\\\r\\\\n         */\\\\r\\\\n        volume: number;\\\\r\\\\n        /**\\\\r\\\\n         * Mutes video volume.\\\\r\\\\n         */\\\\r\\\\n        mute(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback has ended.\\\\r\\\\n         */\\\\r\\\\n        onEnded(handler: $w.EventHandler): $w.VideoPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is paused.\\\\r\\\\n         */\\\\r\\\\n        onPause(handler: $w.EventHandler): $w.VideoPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback is started or restarted.\\\\r\\\\n         */\\\\r\\\\n        onPlay(handler: $w.EventHandler): $w.VideoPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when playback progresses.\\\\r\\\\n         */\\\\r\\\\n        onProgress(handler: $w.EventHandler): $w.VideoPlayer;\\\\r\\\\n        /**\\\\r\\\\n         * Pauses playback.\\\\r\\\\n         */\\\\r\\\\n        pause(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Begins or resumes playback.\\\\r\\\\n         */\\\\r\\\\n        play(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves playback to the specified time, in seconds.\\\\r\\\\n         */\\\\r\\\\n        seek(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Pauses playback.\\\\r\\\\n         */\\\\r\\\\n        stop(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Toggles playback.\\\\r\\\\n         */\\\\r\\\\n        togglePlay(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Unmutes video volume.\\\\r\\\\n         */\\\\r\\\\n        unmute(): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An icon that leads users to the shopping cart.\\\\r\\\\n     */\\\\r\\\\n    interface CartIcon extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Adds multiple products to the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        addProductsToCart(products: $w.CartIcon.AddToCartItem[]): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a product to the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        addToCart(productID: string, quantity?: number, options?: $w.CartIcon.AddToCartOptions): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace CartIcon {\\\\r\\\\n        /**\\\\r\\\\n         * An object used to pass a custom text field when adding a product to\\\\r\\\\n         *  the shopping cart with options.\\\\r\\\\n         */\\\\r\\\\n        type AddToCartCustomTextField = {\\\\r\\\\n            /**\\\\r\\\\n             * Custom text field title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Custom text field value.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when adding multiple products to the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        type AddToCartItem = {\\\\r\\\\n            /**\\\\r\\\\n             * The ID of the product to add to the cart.\\\\r\\\\n             */\\\\r\\\\n            productID: string;\\\\r\\\\n            /**\\\\r\\\\n             * Custom custom\\\\r\\\\n             *  text fields to use when adding the product to the cart.\\\\r\\\\n             */\\\\r\\\\n            options?: $w.CartIcon.AddToCartOptions;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when adding a product to the shopping cart with options.\\\\r\\\\n         */\\\\r\\\\n        type AddToCartOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Product options to use when adding the\\\\r\\\\n             *  product to the cart. The object contains key:value pairs where the key is the\\\\r\\\\n             *  option name and the value is the chosen option value.\\\\r\\\\n             */\\\\r\\\\n            choices: any;\\\\r\\\\n            /**\\\\r\\\\n             * Custom custom\\\\r\\\\n             *  text fields to use when adding the product to the cart.\\\\r\\\\n             */\\\\r\\\\n            customTextField: $w.CartIcon.AddToCartCustomTextField;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A store page for a specific product.\\\\r\\\\n     */\\\\r\\\\n    interface ProductPage extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the values entered in the product's custom text fields.\\\\r\\\\n         */\\\\r\\\\n        getCustomTextFieldsValues(): $w.ProductPage.Product;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the all the information associated with the current product.\\\\r\\\\n         */\\\\r\\\\n        getProduct(): Promise<$w.ProductPage.Product>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace ProductPage {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a media item.\\\\r\\\\n         */\\\\r\\\\n        type MediaItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Media item ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item description. Descriptions over 100 characters are truncated.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item type. Can be \\\\\\\"image\\\\\\\" or \\\\\\\"video.\\\\\\\"\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item source URL.\\\\r\\\\n             */\\\\r\\\\n            src: string;\\\\r\\\\n            /**\\\\r\\\\n             * Thumbnail URL for videos only.\\\\r\\\\n             */\\\\r\\\\n            thumbnail?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product in a store.\\\\r\\\\n         */\\\\r\\\\n        type Product = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * Main product media item (image or video thumbnail) URL.\\\\r\\\\n             */\\\\r\\\\n            mainMedia: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of product media items.\\\\r\\\\n             */\\\\r\\\\n            mediaItems: $w.ProductPage.MediaItem;\\\\r\\\\n            /**\\\\r\\\\n             * Product stock keeping unit value. Must be unique.\\\\r\\\\n             */\\\\r\\\\n            sku: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of product ribbons.\\\\r\\\\n             */\\\\r\\\\n            ribbons: $w.ProductPage.ProductRibbon[];\\\\r\\\\n            /**\\\\r\\\\n             * Product currency.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price. \\\\r\\\\n             *  The price must be greater than its discount.\\\\r\\\\n             *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted product price.\\\\r\\\\n             */\\\\r\\\\n            discountedPrice: number;\\\\r\\\\n            /**\\\\r\\\\n             * Product price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted product price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedDiscountedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product discount.\\\\r\\\\n             */\\\\r\\\\n            discount: $w.ProductPage.ProductDiscount;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether inventory is tracked for the product.\\\\r\\\\n             */\\\\r\\\\n            trackInventory: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the product is in stock.\\\\r\\\\n             */\\\\r\\\\n            inStock: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Number of units currently in stock.\\\\r\\\\n             */\\\\r\\\\n            quantityInStock: number;\\\\r\\\\n            /**\\\\r\\\\n             * Additional product information sections.\\\\r\\\\n             */\\\\r\\\\n            additionalInfoSections: $w.ProductPage.ProductAdditionalInfoSection[];\\\\r\\\\n            /**\\\\r\\\\n             * All the available options for a store product.\\\\r\\\\n             */\\\\r\\\\n            productOptions: $w.ProductPage.ProductOptions;\\\\r\\\\n            /**\\\\r\\\\n             * Product page relative URL.\\\\r\\\\n             */\\\\r\\\\n            productPageUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether product variants are managed. Can be set to true only if the product has options. Once set to true, `manageVariants` can only be reset to false only if no variants exist. Use [`getProductVariants()`](https://www.wix.com/corvid/reference/wix-stores.html#getProductVariants) to check if variants exist. You cannot set `manageVariants` to true if more than 300 variants are defined.\\\\r\\\\n             */\\\\r\\\\n            manageVariants: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Product type. Either `\\\\\\\"physical\\\\\\\"` or `\\\\\\\"digital\\\\\\\"`. When creating a product using the API, currently only `\\\\\\\"physical\\\\\\\"` is supported.\\\\r\\\\n             */\\\\r\\\\n            productType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product slug.\\\\r\\\\n             */\\\\r\\\\n            slug: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product weight.\\\\r\\\\n             */\\\\r\\\\n            weight: number;\\\\r\\\\n            /**\\\\r\\\\n             * Product variants.\\\\r\\\\n             */\\\\r\\\\n            variants: $w.ProductPage.ProductVariants;\\\\r\\\\n            /**\\\\r\\\\n             * Date product was last updated.\\\\r\\\\n             */\\\\r\\\\n            _updatedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * ID for the inventory item.\\\\r\\\\n             */\\\\r\\\\n            inventoryItemId: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of product customization fields.\\\\r\\\\n             */\\\\r\\\\n            customTextFields: $w.ProductPage.ProductCustomTextFields[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an additional info section for a store product.\\\\r\\\\n         */\\\\r\\\\n        type ProductAdditionalInfoSection = {\\\\r\\\\n            /**\\\\r\\\\n             * Section title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Section description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product variant's option choices.\\\\r\\\\n         */\\\\r\\\\n        type ProductChoices = {\\\\r\\\\n            /**\\\\r\\\\n             * Value of the choice. This key name is dependent on the\\\\r\\\\n             *  product option. For example, if a product has a size option, this\\\\r\\\\n             *  key value will be something like `\\\\\\\"Size\\\\\\\"` and its value will be something like\\\\r\\\\n             *  `\\\\\\\"Large\\\\\\\"`.\\\\r\\\\n             *  \\\\r\\\\n             *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n             */\\\\r\\\\n            optionKey: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a custom text field for a store product.\\\\r\\\\n         */\\\\r\\\\n        type ProductCustomTextFields = {\\\\r\\\\n            /**\\\\r\\\\n             * Product customization field title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Maximum length of product customization field in characters.\\\\r\\\\n             */\\\\r\\\\n            maxLength: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product discount.\\\\r\\\\n         */\\\\r\\\\n        type ProductDiscount = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount type. Required.\\\\r\\\\n             * \\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             * \\\\r\\\\n             * \\\\r\\\\n             *  - `\\\\\\\"AMOUNT\\\\\\\"`\\\\r\\\\n             *  - `\\\\\\\"PERCENT\\\\\\\"`\\\\r\\\\n             *  - `\\\\\\\"NONE\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discount value. The discount value cannot be greater than the price of the product or the variant.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an option for a store product.\\\\r\\\\n         */\\\\r\\\\n        type ProductOption = {\\\\r\\\\n            /**\\\\r\\\\n             * Option type. Either `\\\\\\\"color\\\\\\\"` or `\\\\\\\"drop_down\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            optionType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Option name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Option choices.\\\\r\\\\n             */\\\\r\\\\n            choices: $w.ProductPage.ProductOptionsChoice[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing all the available options for a store product, such as \\\\\\\"Size\\\\\\\" and \\\\\\\"Color.\\\\\\\"\\\\r\\\\n         */\\\\r\\\\n        type ProductOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the option. This key name\\\\r\\\\n             *  is dependent on the options added to the product. For example, if a product has a size \\\\r\\\\n             *  option, this key will be something like `\\\\\\\"Size\\\\\\\"`.\\\\r\\\\n             *  \\\\r\\\\n             *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n             */\\\\r\\\\n            optionKey: $w.ProductPage.ProductOption;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an option's choice for a store product, such as choice \\\\\\\"Small\\\\\\\" for the option \\\\\\\"Size.\\\\\\\"\\\\r\\\\n         */\\\\r\\\\n        type ProductOptionsChoice = {\\\\r\\\\n            /**\\\\r\\\\n             * Choice value.\\\\r\\\\n             */\\\\r\\\\n            value: number;\\\\r\\\\n            /**\\\\r\\\\n             * Choice description.\\\\r\\\\n             */\\\\r\\\\n            description: number;\\\\r\\\\n            /**\\\\r\\\\n             * Choice media.\\\\r\\\\n             */\\\\r\\\\n            media: $w.ProductPage.ProductOptionsChoiceMedia;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the product with this choice is in stock.\\\\r\\\\n             */\\\\r\\\\n            inStock: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the product with this option is visible.\\\\r\\\\n             */\\\\r\\\\n            visible: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the choice media.\\\\r\\\\n         */\\\\r\\\\n        type ProductOptionsChoiceMedia = {\\\\r\\\\n            /**\\\\r\\\\n             * Main choice media item (image or video thumbnail) URL.\\\\r\\\\n             */\\\\r\\\\n            mainMedia: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of choice media items.\\\\r\\\\n             */\\\\r\\\\n            mediaItems: $w.ProductPage.MediaItem;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a ribbon for a store product.\\\\r\\\\n         */\\\\r\\\\n        type ProductRibbon = {\\\\r\\\\n            /**\\\\r\\\\n             * Ribbon text.\\\\r\\\\n             */\\\\r\\\\n            text: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product's variant information used when creating or updating variants.\\\\r\\\\n         */\\\\r\\\\n        type ProductVariantInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Variant currency.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant price. The variant price must be greater than its discount. If the variant price has been updated, changes to the product price do not affect the variant price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted variant price.\\\\r\\\\n             */\\\\r\\\\n            discountedPrice: number;\\\\r\\\\n            /**\\\\r\\\\n             * Formatted variant price.\\\\r\\\\n             */\\\\r\\\\n            formattedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted variant price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedDiscountedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant weight.\\\\r\\\\n             */\\\\r\\\\n            weight: number;\\\\r\\\\n            /**\\\\r\\\\n             * Variant stock keeping unit number.\\\\r\\\\n             */\\\\r\\\\n            sku: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the variant is visible in the store.\\\\r\\\\n             */\\\\r\\\\n            visible: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product's variant item.\\\\r\\\\n         */\\\\r\\\\n        type ProductVariantItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique product variant ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product variant option choices.\\\\r\\\\n             */\\\\r\\\\n            choices: $w.ProductPage.ProductChoices;\\\\r\\\\n            /**\\\\r\\\\n             * Product variant information.\\\\r\\\\n             */\\\\r\\\\n            variant: $w.ProductPage.ProductVariantInfo[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product's variants.\\\\r\\\\n         */\\\\r\\\\n        type ProductVariants = {\\\\r\\\\n            /**\\\\r\\\\n             * Variant items.\\\\r\\\\n             */\\\\r\\\\n            items: $w.ProductPage.ProductVariantItem[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A thank you page displayed when an order is created.\\\\r\\\\n     */\\\\r\\\\n    interface ThankYouPage extends $w.Element, $w.HiddenCollapsedMixin{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the order associated with the current page.\\\\r\\\\n         */\\\\r\\\\n        getOrder(): Promise<$w.ThankYouPage.Order>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace ThankYouPage {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains address information.\\\\r\\\\n         */\\\\r\\\\n        type Address = {\\\\r\\\\n            /**\\\\r\\\\n             * Address address line.\\\\r\\\\n             */\\\\r\\\\n            addressLine: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address subdivision.\\\\r\\\\n             */\\\\r\\\\n            subdivision: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address postal code.\\\\r\\\\n             */\\\\r\\\\n            postalCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address in human readable format.\\\\r\\\\n             */\\\\r\\\\n            formatted: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's billing info.\\\\r\\\\n         */\\\\r\\\\n        type BillingInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone: string;\\\\r\\\\n            /**\\\\r\\\\n             * Company name.\\\\r\\\\n             */\\\\r\\\\n            company: string;\\\\r\\\\n            /**\\\\r\\\\n             * Company name.\\\\r\\\\n             */\\\\r\\\\n            vatId: $w.ThankYouPage.VatId;\\\\r\\\\n            /**\\\\r\\\\n             * Billing address.\\\\r\\\\n             */\\\\r\\\\n            address: $w.ThankYouPage.Address;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about a buyer.\\\\r\\\\n         */\\\\r\\\\n        type BuyerInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's unique ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's first name.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's last name.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's identity.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"ADMIN\\\\\\\"`: Buyer is the site owner.\\\\r\\\\n             *  + `\\\\\\\"MEMBER\\\\\\\"`: Buyer is a logged-in site member.\\\\r\\\\n             *  + `\\\\\\\"VISITOR\\\\\\\"`: Buyer is not logged in.\\\\r\\\\n             *  + `\\\\\\\"CONTACT\\\\\\\"`: A contact has been created for the buyer.\\\\r\\\\n             */\\\\r\\\\n            identityType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer's phone number.\\\\r\\\\n             */\\\\r\\\\n            phone: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a custom text field.\\\\r\\\\n         */\\\\r\\\\n        type CustomTextField = {\\\\r\\\\n            /**\\\\r\\\\n             * Field title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Field value.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a line item in a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        type LineItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the line item.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Notes about the line item.\\\\r\\\\n             */\\\\r\\\\n            notes: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item price.\\\\r\\\\n             */\\\\r\\\\n            price: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item product ID.\\\\r\\\\n             */\\\\r\\\\n            productId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item stock keeping unit.\\\\r\\\\n             */\\\\r\\\\n            sku: string;\\\\r\\\\n            /**\\\\r\\\\n             * Total price charged to the customer for all line items after any applicable discounts.\\\\r\\\\n             */\\\\r\\\\n            totalPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item weight.\\\\r\\\\n             */\\\\r\\\\n            weight: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of the line item.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"DIGITAL\\\\\\\"`: Digital item.\\\\r\\\\n             *  + `\\\\\\\"PHYSICAL\\\\\\\"`: Physical item.\\\\r\\\\n             *  + `\\\\\\\"CUSTOM_AMOUNT_ITEM\\\\\\\"`: Item with a custom price.\\\\r\\\\n             *  + `\\\\\\\"UNSPECIFIED\\\\\\\"`: Type can't be classified due to an error.\\\\r\\\\n             */\\\\r\\\\n            lineItemType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item options.\\\\r\\\\n             */\\\\r\\\\n            options: $w.ThankYouPage.Option[];\\\\r\\\\n            /**\\\\r\\\\n             * Media item.\\\\r\\\\n             */\\\\r\\\\n            mediaItem: $w.ThankYouPage.MediaItem;\\\\r\\\\n            /**\\\\r\\\\n             * Custom text.\\\\r\\\\n             */\\\\r\\\\n            customTextFields: $w.ThankYouPage.CustomTextField[];\\\\r\\\\n            /**\\\\r\\\\n             * Line item index.\\\\r\\\\n             */\\\\r\\\\n            index: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a media item.\\\\r\\\\n         */\\\\r\\\\n        type MediaItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Type of the media item.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"IMAGE\\\\\\\"`: Image item.\\\\r\\\\n             *  + `\\\\\\\"UNSPECIFIED_MEDIA_TYPE_ITEM\\\\\\\"`: Media item type can't be classified due to an error.\\\\r\\\\n             */\\\\r\\\\n            mediaType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item URL.\\\\r\\\\n             */\\\\r\\\\n            url: string;\\\\r\\\\n            /**\\\\r\\\\n             * Media item height.\\\\r\\\\n             */\\\\r\\\\n            height: number;\\\\r\\\\n            /**\\\\r\\\\n             * Media item width.\\\\r\\\\n             */\\\\r\\\\n            width: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a line item option.\\\\r\\\\n         */\\\\r\\\\n        type Option = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the product option.\\\\r\\\\n             */\\\\r\\\\n            option: string;\\\\r\\\\n            /**\\\\r\\\\n             * Selected option.\\\\r\\\\n             */\\\\r\\\\n            selection: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order.\\\\r\\\\n         */\\\\r\\\\n        type Order = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique order identifier.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the order was created.\\\\r\\\\n             */\\\\r\\\\n            _dateCreated: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Running order number.\\\\r\\\\n             */\\\\r\\\\n            number: number;\\\\r\\\\n            /**\\\\r\\\\n             * Order currency.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Billing information.\\\\r\\\\n             */\\\\r\\\\n            billingInfo: $w.ThankYouPage.BillingInfo;\\\\r\\\\n            /**\\\\r\\\\n             * Buyer information.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: $w.ThankYouPage.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * Order items.\\\\r\\\\n             */\\\\r\\\\n            lineItems: $w.ThankYouPage.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Order totals.\\\\r\\\\n             */\\\\r\\\\n            totals: $w.ThankYouPage.Totals;\\\\r\\\\n            /**\\\\r\\\\n             * The unit in which the order's weight is\\\\r\\\\n             *  measured. Either `\\\\\\\"KG\\\\\\\"` or `\\\\\\\"LB\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            weightUnit: string;\\\\r\\\\n            /**\\\\r\\\\n             * Shipping information.\\\\r\\\\n             */\\\\r\\\\n            shippingInfo: $w.ThankYouPage.ShippingInfo;\\\\r\\\\n            /**\\\\r\\\\n             * A note added by the buyer.\\\\r\\\\n             */\\\\r\\\\n            buyerNote: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's shipping details.\\\\r\\\\n         */\\\\r\\\\n        type PickupDetails = {\\\\r\\\\n            /**\\\\r\\\\n             * Pickup instructions.\\\\r\\\\n             */\\\\r\\\\n            pickupInstructions: string;\\\\r\\\\n            /**\\\\r\\\\n             * Pickup address.\\\\r\\\\n             */\\\\r\\\\n            pickupAddress: $w.ThankYouPage.Address;\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's shipping details.\\\\r\\\\n         */\\\\r\\\\n        type ShipmentDetails = {\\\\r\\\\n            /**\\\\r\\\\n             * Shipping address.\\\\r\\\\n             */\\\\r\\\\n            address: $w.ThankYouPage.Address;\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's shipping info.\\\\r\\\\n         */\\\\r\\\\n        type ShippingInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Delivery option information.\\\\r\\\\n             */\\\\r\\\\n            deliveryOption: string;\\\\r\\\\n            /**\\\\r\\\\n             * Estimated delivery time.\\\\r\\\\n             */\\\\r\\\\n            estimatedDeliveryTime: string;\\\\r\\\\n            shipmentDetails: $w.ThankYouPage.ShipmentDetails;\\\\r\\\\n            pickupDetails: $w.ThankYouPage.PickupDetails;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an order's totals.\\\\r\\\\n         */\\\\r\\\\n        type Totals = {\\\\r\\\\n            /**\\\\r\\\\n             * The subtotal of all the order's line items, excluding tax.\\\\r\\\\n             */\\\\r\\\\n            subtotal: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total shipping price, including tax.\\\\r\\\\n             */\\\\r\\\\n            shipping: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total amount of tax.\\\\r\\\\n             */\\\\r\\\\n            tax: string;\\\\r\\\\n            /**\\\\r\\\\n             * The total calculated discount amount.\\\\r\\\\n             */\\\\r\\\\n            discount: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total price.\\\\r\\\\n             */\\\\r\\\\n            total: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total weight of the order's items.\\\\r\\\\n             */\\\\r\\\\n            weight: number;\\\\r\\\\n            /**\\\\r\\\\n             * The total quantity of the the order's line items.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains VAT information.\\\\r\\\\n         */\\\\r\\\\n        type VatId = {\\\\r\\\\n            /**\\\\r\\\\n             * VAT number.\\\\r\\\\n             */\\\\r\\\\n            number: string;\\\\r\\\\n            /**\\\\r\\\\n             * VAT type. Either `\\\\\\\"CFP\\\\\\\"` or `\\\\\\\"CPNJ\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    type dataset = wix_dataset.Dataset;\\\\r\\\\n\\\\r\\\\n    type router_dataset = wix_dataset.DynamicDataset;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_dataset {\\\\r\\\\n    /**\\\\r\\\\n     * A [dataset](wix-dataset.html) connects page elements to a set of items in a data collection.\\\\r\\\\n     */\\\\r\\\\n    interface Dataset {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the current item.\\\\r\\\\n         */\\\\r\\\\n        getCurrentItem(): any;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the current item's index.\\\\r\\\\n         */\\\\r\\\\n        getCurrentItemIndex(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the index of the dataset's current page.\\\\r\\\\n         */\\\\r\\\\n        getCurrentPageIndex(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the selected items.\\\\r\\\\n         */\\\\r\\\\n        getItems(fromIndex: number, numberOfItems: number): Promise<wix_dataset.Dataset.GetItemsResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the dataset's page size.\\\\r\\\\n         */\\\\r\\\\n        getPageSize(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of items in the dataset that match its filter criteria.\\\\r\\\\n         */\\\\r\\\\n        getTotalCount(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the number of pages in the dataset.\\\\r\\\\n         */\\\\r\\\\n        getTotalPageCount(): number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if there is a next item.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if there is a next page of data.\\\\r\\\\n         */\\\\r\\\\n        hasNextPage(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if there is a previous item.\\\\r\\\\n         */\\\\r\\\\n        hasPrevious(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if there is a previous page of data.\\\\r\\\\n         */\\\\r\\\\n        hasPreviousPage(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Loads the next page of data in addition to the current data.\\\\r\\\\n         */\\\\r\\\\n        loadMore(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Loads the specified page.\\\\r\\\\n         */\\\\r\\\\n        loadPage(pageIndex: number): Promise<any[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Create a new blank item.\\\\r\\\\n         */\\\\r\\\\n        new(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Saves the current item and moves to the next item.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<any>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves to the next page of data.\\\\r\\\\n         */\\\\r\\\\n        nextPage(): Promise<any[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs just after a save.\\\\r\\\\n         */\\\\r\\\\n        onAfterSave(handler: wix_dataset.Dataset.AfterSaveHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs just before a save.\\\\r\\\\n         */\\\\r\\\\n        onBeforeSave(handler: wix_dataset.Dataset.BeforeSaveHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the current index changes.\\\\r\\\\n         */\\\\r\\\\n        onCurrentIndexChanged(handler: wix_dataset.Dataset.CurrentIndexChangedHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when an error occurs.\\\\r\\\\n         */\\\\r\\\\n        onError(handler: wix_dataset.Dataset.ErrorHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when a value of the current item changes.\\\\r\\\\n         */\\\\r\\\\n        onItemValuesChanged(handler: wix_dataset.Dataset.ItemValuesChangedHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an event handler that runs when the dataset is ready.\\\\r\\\\n         */\\\\r\\\\n        onReady(handler: wix_dataset.Dataset.ReadyHandler): void;\\\\r\\\\n        /**\\\\r\\\\n         * Saves the current item and moves to the previous item.\\\\r\\\\n         */\\\\r\\\\n        previous(): Promise<any>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves to the previous page of data.\\\\r\\\\n         */\\\\r\\\\n        previousPage(): Promise<any[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Refetches the contents of the dataset from the collection.\\\\r\\\\n         */\\\\r\\\\n        refresh(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Removes the current item.\\\\r\\\\n         */\\\\r\\\\n        remove(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Reverts the current item to its saved value.\\\\r\\\\n         */\\\\r\\\\n        revert(): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Saves the current item.\\\\r\\\\n         */\\\\r\\\\n        save(): Promise<any>;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the current item by index.\\\\r\\\\n         */\\\\r\\\\n        setCurrentItemIndex(index: number): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the value of a field in the current item.\\\\r\\\\n         */\\\\r\\\\n        setFieldValue(fieldKey: string, value: any): void;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the values of a set of fields in the current item.\\\\r\\\\n         */\\\\r\\\\n        setFieldValues(fieldValues: any): void;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the dataset filter.\\\\r\\\\n         */\\\\r\\\\n        setFilter(filter: wix_data.WixDataFilter): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the dataset's page size.\\\\r\\\\n         */\\\\r\\\\n        setPageSize(pageSize: number): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the dataset sort order.\\\\r\\\\n         */\\\\r\\\\n        setSort(sort: wix_data.WixDataSort): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Dataset {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a dataset error.\\\\r\\\\n         */\\\\r\\\\n        type DatasetError = {\\\\r\\\\n            /**\\\\r\\\\n             * Error code.\\\\r\\\\n             */\\\\r\\\\n            code: string;\\\\r\\\\n            /**\\\\r\\\\n             * Error message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used by the `getItems()` function that contains the items retrieved and the total number of items in the dataset that match its filter criteria\\\\r\\\\n         */\\\\r\\\\n        type GetItemsResult = {\\\\r\\\\n            /**\\\\r\\\\n             * List of items objects where key:value pairs are the field keys and field values of the retrieved items, including all hidden fields.\\\\r\\\\n             */\\\\r\\\\n            items: any[];\\\\r\\\\n            /**\\\\r\\\\n             * The number of items in the dataset that match its filter criteria.\\\\r\\\\n             */\\\\r\\\\n            totalCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * The index in the dataset of the first item in the items property.\\\\r\\\\n             */\\\\r\\\\n            offset: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An after save event handler.\\\\r\\\\n         */\\\\r\\\\n        type AfterSaveHandler = (itemBeforeSave: any, itemAfterSave: any)=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A before save event handler.\\\\r\\\\n         */\\\\r\\\\n        type BeforeSaveHandler = ()=>Promise<boolean>;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A current item index change event handler.\\\\r\\\\n         */\\\\r\\\\n        type CurrentIndexChangedHandler = (index: number)=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An error event handler.\\\\r\\\\n         */\\\\r\\\\n        type ErrorHandler = (operation: string, error: wix_dataset.Dataset.DatasetError)=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A current item value change event handler.\\\\r\\\\n         */\\\\r\\\\n        type ItemValuesChangedHandler = (itemBeforeChange: any, updatedItem: any)=>void;\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * A dataset ready event handler.\\\\r\\\\n         */\\\\r\\\\n        type ReadyHandler = ()=>void;\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * A [dataset](wix-dataset.html) connects page elements on a dynamic page to a set of items in a data collection.\\\\r\\\\n     */\\\\r\\\\n    interface DynamicDataset extends wix_dataset.Dataset{\\\\r\\\\n        /**\\\\r\\\\n         * Gets the next dynamic page URL.\\\\r\\\\n         */\\\\r\\\\n        getNextDynamicPage(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the previous dynamic page URL.\\\\r\\\\n         */\\\\r\\\\n        getPreviousDynamicPage(): Promise<string>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace site_monitoring {\\\\r\\\\n    /**\\\\r\\\\n     * A single record of a Wix site event in JSON format.\\\\r\\\\n     */\\\\r\\\\n    interface LogEntry {\\\\r\\\\n        /**\\\\r\\\\n         * Unique identifier for the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly insertId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payload of the log entry in JSON format.\\\\r\\\\n         */\\\\r\\\\n        readonly jsonPayload: site_monitoring.LogEntry.LogEntryJsonPayload;\\\\r\\\\n        /**\\\\r\\\\n         * Additional information about the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly labels: site_monitoring.LogEntry.LogEntryLabels;\\\\r\\\\n        /**\\\\r\\\\n         * Additional information about a potentially long-running operation associated with the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly operation: site_monitoring.LogEntry.LogEntryOperation;\\\\r\\\\n        /**\\\\r\\\\n         * Time the log entry was received by site monitoring.\\\\r\\\\n         */\\\\r\\\\n        readonly receiveTimestamp: string;\\\\r\\\\n        /**\\\\r\\\\n         * Severity of the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly severity: string;\\\\r\\\\n        /**\\\\r\\\\n         * Source code location information associated with the log entry.\\\\r\\\\n         */\\\\r\\\\n        readonly sourceLocation: site_monitoring.LogEntry.LogEntrySourceLocation;\\\\r\\\\n        /**\\\\r\\\\n         * Time the site event occurred.\\\\r\\\\n         */\\\\r\\\\n        readonly timestamp: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace LogEntry {\\\\r\\\\n        /**\\\\r\\\\n         * Payload of the log entry in JSON format.\\\\r\\\\n         */\\\\r\\\\n        type LogEntryJsonPayload = {\\\\r\\\\n            /**\\\\r\\\\n             * Payload message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * Additional information about the log entry.\\\\r\\\\n         */\\\\r\\\\n        type LogEntryLabels = {\\\\r\\\\n            /**\\\\r\\\\n             * [`baseUrl`](wix-location.html#baseUrl) of the site with which the log entry is associated.\\\\r\\\\n             */\\\\r\\\\n            siteUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of Wix application with which the log entry is associated, such as Stores or Bookings. The generic namespace `Corvid` represents site code not associated with a specific Wix application. Currently only the `Corvid` namespace is supported.\\\\r\\\\n             */\\\\r\\\\n            namespace: string;\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier for the site. Does not change even if the site name or other site attributes change.\\\\r\\\\n             */\\\\r\\\\n            tenantId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates the viewing mode from which the log entry originates.\\\\r\\\\n             *  One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Preview\\\\\\\"`: Preview mode.\\\\r\\\\n             *  + `\\\\\\\"Site\\\\\\\"`: Published site mode.\\\\r\\\\n             */\\\\r\\\\n            viewMode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier for a specific site [`revision`](wix-site.html#revision). You can use the `revision` property together with the Release Manager to monitor and debug new revisions of your site.\\\\r\\\\n             */\\\\r\\\\n            revision: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * Additional information about a potentially long-running operation associated with the log entry.\\\\r\\\\n         */\\\\r\\\\n        type LogEntryOperation = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier useful for linking together all log entries associated with a specific operation.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Context of the operation, such as a URL path for page code or a web module function name.\\\\r\\\\n             */\\\\r\\\\n            producer: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * Source code location information associated with the log entry. Currently only applicable for backend log entries with the `Corvid` namespace.\\\\r\\\\n         */\\\\r\\\\n        type LogEntrySourceLocation = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the source file.\\\\r\\\\n             */\\\\r\\\\n            file: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line within the source file. 1-based. 0 indicates no line number available.\\\\r\\\\n             */\\\\r\\\\n            line: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_location {\\\\r\\\\n    /**\\\\r\\\\n     * An object used to manage the query segment of the current page's URL.\\\\r\\\\n     */\\\\r\\\\n    interface QueryParams {\\\\r\\\\n        /**\\\\r\\\\n         * Adds query parameters to the current page's URL.\\\\r\\\\n         */\\\\r\\\\n        add(toAdd: any): void;\\\\r\\\\n        /**\\\\r\\\\n         * Removes query parameters from the current page's URL.\\\\r\\\\n         */\\\\r\\\\n        remove(toRemove: string[]): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object containing information about a location.\\\\r\\\\n     */\\\\r\\\\n    type Location = {\\\\r\\\\n        /**\\\\r\\\\n         * Location path.\\\\r\\\\n         */\\\\r\\\\n        path: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Handles location change events.\\\\r\\\\n     */\\\\r\\\\n    type LocationChangeHandler = (event: wix_location.Location)=>void;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_site {\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about which pages and lightboxes to\\\\r\\\\n     *  prefetch resources for.\\\\r\\\\n     */\\\\r\\\\n    type PrefetchItems = {\\\\r\\\\n        /**\\\\r\\\\n         * The relative or absolute URLs of the pages in your site\\\\r\\\\n         *  to prefetch resources for.\\\\r\\\\n         */\\\\r\\\\n        pages: string[];\\\\r\\\\n        /**\\\\r\\\\n         * The names of the lightboxes in your site to prefetch \\\\r\\\\n         *  resources for.\\\\r\\\\n         */\\\\r\\\\n        lightboxes: string[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that is returned from a prefetch request.\\\\r\\\\n     */\\\\r\\\\n    type PrefetchResult = {\\\\r\\\\n        /**\\\\r\\\\n         * A success or failure message.\\\\r\\\\n         */\\\\r\\\\n        message: string;\\\\r\\\\n        /**\\\\r\\\\n         * The errors that occurred.\\\\r\\\\n         */\\\\r\\\\n        errors: wix_site.PrefetchResultError;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that is returned when a resource prefetch is unsuccessful.\\\\r\\\\n     */\\\\r\\\\n    type PrefetchResultError = {\\\\r\\\\n        /**\\\\r\\\\n         * The names of the pages for which prefetch failed.\\\\r\\\\n         */\\\\r\\\\n        pages: string[];\\\\r\\\\n        /**\\\\r\\\\n         * The names of the lightbox for which prefetch failed.\\\\r\\\\n         */\\\\r\\\\n        lightboxes: string[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the site's prefixes.\\\\r\\\\n     */\\\\r\\\\n    type Prefix = {\\\\r\\\\n        /**\\\\r\\\\n         * The name of the prefix.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * The type of the prefix: `\\\\\\\"dynamicPages\\\\\\\"`, `\\\\\\\"router\\\\\\\"`, or `\\\\\\\"app\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * The prefix.\\\\r\\\\n         */\\\\r\\\\n        prefix: string;\\\\r\\\\n        /**\\\\r\\\\n         * If the prefix is an app's prefix, the `applicationId` property is the app's ID.\\\\r\\\\n         */\\\\r\\\\n        applicationId?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the site's pages, prefixes, and lightboxes.\\\\r\\\\n     */\\\\r\\\\n    type SiteStructure = {\\\\r\\\\n        /**\\\\r\\\\n         * The pages of the site.\\\\r\\\\n         */\\\\r\\\\n        pages: wix_site.StructurePage[];\\\\r\\\\n        /**\\\\r\\\\n         * The prefixes of the site's routers and dynamic pages.\\\\r\\\\n         */\\\\r\\\\n        prefixes: wix_site.Prefix[];\\\\r\\\\n        /**\\\\r\\\\n         * The site's lightboxes.\\\\r\\\\n         */\\\\r\\\\n        lightboxes: wix_site.StructureLightbox[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a lightbox on the site.\\\\r\\\\n     */\\\\r\\\\n    type StructureLightbox = {\\\\r\\\\n        /**\\\\r\\\\n         * The name of the lightbox.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a page on the site.\\\\r\\\\n     */\\\\r\\\\n    type StructurePage = {\\\\r\\\\n        /**\\\\r\\\\n         * The name of the page.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * The type of the page: `\\\\\\\"static\\\\\\\"` or `\\\\\\\"template\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * The URL of the page. If the page is a `static` page the `url` property is the page's SEO URL.\\\\r\\\\n         */\\\\r\\\\n        url?: string;\\\\r\\\\n        /**\\\\r\\\\n         * If the page is an app page, the `applicationId` property is the app's ID.\\\\r\\\\n         */\\\\r\\\\n        applicationId?: string;\\\\r\\\\n        /**\\\\r\\\\n         * If the page is a router or dynamic page, the `prefix` property is the page's prefix.\\\\r\\\\n         */\\\\r\\\\n        prefix?: string;\\\\r\\\\n        /**\\\\r\\\\n         * If the page is the Home page, `isHomePage` is `true`. Otherwise, it does not exist.\\\\r\\\\n         */\\\\r\\\\n        isHomePage?: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_storage {\\\\r\\\\n    /**\\\\r\\\\n     * Used for storing local, session, or memory key/value data in the visitor's browser.\\\\r\\\\n     */\\\\r\\\\n    interface Storage {\\\\r\\\\n        /**\\\\r\\\\n         * Removes **all** items from local, session, or memory storage.\\\\r\\\\n         */\\\\r\\\\n        clear(): void;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an item from local, session, or memory storage.\\\\r\\\\n         */\\\\r\\\\n        getItem(key: string): string;\\\\r\\\\n        /**\\\\r\\\\n         * Removes an item from local, session, or memory storage.\\\\r\\\\n         */\\\\r\\\\n        removeItem(key: string): void;\\\\r\\\\n        /**\\\\r\\\\n         * Stores an item in local, session, or memory storage.\\\\r\\\\n         */\\\\r\\\\n        setItem(key: string, value: string): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_window {\\\\r\\\\n    /**\\\\r\\\\n     * A lightbox pops up on your site to grab your visitor's attention.\\\\r\\\\n     */\\\\r\\\\n    interface lightbox {\\\\r\\\\n        /**\\\\r\\\\n         * Closes the lightbox.\\\\r\\\\n         */\\\\r\\\\n        close(data?: any): void;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the data object that was passed to a lightbox.\\\\r\\\\n         */\\\\r\\\\n        getContext(): any;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The Multilingual API is used when working with the languages in a multilingual site.\\\\r\\\\n     */\\\\r\\\\n    interface multilingual {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the site's current display language.\\\\r\\\\n         */\\\\r\\\\n        readonly currentLanguage: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets whether the site has been set up to be shown in multiple languages.\\\\r\\\\n         */\\\\r\\\\n        readonly isEnabled: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Gets information about the site's languages.\\\\r\\\\n         */\\\\r\\\\n        readonly siteLanguages: wix_window.multilingual.SiteLanguage[];\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace multilingual {\\\\r\\\\n        /**\\\\r\\\\n         * An object returned by the `siteLanguages` property that contains information about the site's languages.\\\\r\\\\n         */\\\\r\\\\n        type SiteLanguage = {\\\\r\\\\n            /**\\\\r\\\\n             * The language's full name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * The language's locale code, which represents a set of language-related formatting preferences.\\\\r\\\\n             */\\\\r\\\\n            locale: string;\\\\r\\\\n            /**\\\\r\\\\n             * The language's two-letter code.\\\\r\\\\n             */\\\\r\\\\n            languageCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * The language's three-letter country code.\\\\r\\\\n             */\\\\r\\\\n            countryCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the language is the site's primary language.\\\\r\\\\n             */\\\\r\\\\n            isPrimaryLanguage: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The Rendering API is used to control when code is run as a page is being loaded.\\\\r\\\\n     */\\\\r\\\\n    interface rendering {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the current environment the rendering process is running in.\\\\r\\\\n         */\\\\r\\\\n        readonly env: string;\\\\r\\\\n        /**\\\\r\\\\n         * **Deprecated:** Gets the current cycle in the rendering process.\\\\r\\\\n         */\\\\r\\\\n        readonly renderCycle: number;\\\\r\\\\n        /**\\\\r\\\\n         * **Deprecated:** Gets data sent from server-side code to client-side code.\\\\r\\\\n         */\\\\r\\\\n        readonly warmupData: boolean | number | string | any;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Objects used when calling the [`trackEvent()`](wix-window.html#trackEvent) function.\\\\r\\\\n     */\\\\r\\\\n    interface trackingParameters {\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace trackingParameters {\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an AddPaymentInfo track event.\\\\r\\\\n         */\\\\r\\\\n        type AddPaymentInfoEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Describes option information on a checkout page, such as selected payment method.\\\\r\\\\n             */\\\\r\\\\n            option?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an AddProductImpression track event.\\\\r\\\\n         */\\\\r\\\\n        type AddProductImpressionEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product information.\\\\r\\\\n             */\\\\r\\\\n            contents: wix_window.trackingParameters.AddProductImpressionEventContents[];\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an AddProductImpression track event.\\\\r\\\\n         */\\\\r\\\\n        type AddProductImpressionEventContents = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * List or collection the product is in.\\\\r\\\\n             */\\\\r\\\\n            list?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an AddToCart track event.\\\\r\\\\n         */\\\\r\\\\n        type AddToCartEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an CheckoutStep track event.\\\\r\\\\n         */\\\\r\\\\n        type CheckoutStepEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Checkout step number. Be sure to report\\\\r\\\\n             *  consistent step values. For example, use `3` when this step follows\\\\r\\\\n             *  `StartPayment` and `AddPaymentInfo` events.\\\\r\\\\n             */\\\\r\\\\n            step?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Action the visitor has taken, such as `\\\\\\\"Select shipping\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            action?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Describes option information on a checkout page, such as selected payment method.\\\\r\\\\n             */\\\\r\\\\n            option?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a ClickProduct track event.\\\\r\\\\n         */\\\\r\\\\n        type ClickProductEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * List or collection the product is in.\\\\r\\\\n             */\\\\r\\\\n            list?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a CustomEvent track event.\\\\r\\\\n         */\\\\r\\\\n        type CustomEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            event: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an InitiateCheckout track event.\\\\r\\\\n         */\\\\r\\\\n        type InitiateCheckoutEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product information.\\\\r\\\\n             */\\\\r\\\\n            contents: wix_window.trackingParameters.InitiateCheckoutEventContents[];\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an InitiateCheckout track event.\\\\r\\\\n         */\\\\r\\\\n        type InitiateCheckoutEventContents = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a Purchase track event.\\\\r\\\\n         */\\\\r\\\\n        type PurchaseEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the store where the event occurred.\\\\r\\\\n             */\\\\r\\\\n            affiliation?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Total amount of the purchase including shipping, taxes, etc.\\\\r\\\\n             */\\\\r\\\\n            revenue?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total tax charge.\\\\r\\\\n             */\\\\r\\\\n            tax?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total shipping charge.\\\\r\\\\n             */\\\\r\\\\n            shipping?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon code applied to the transaction.\\\\r\\\\n             */\\\\r\\\\n            coupon?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product information.\\\\r\\\\n             */\\\\r\\\\n            contents: wix_window.trackingParameters.PurchaseEventContents[];\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an Purchase track event.\\\\r\\\\n         */\\\\r\\\\n        type PurchaseEventContents = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a RemoveFromCart track event.\\\\r\\\\n         */\\\\r\\\\n        type RemoveFromCartEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending an StartPayment track event.\\\\r\\\\n         */\\\\r\\\\n        type StartPaymentEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Describes option information on a checkout page, such as selected payment method.\\\\r\\\\n             */\\\\r\\\\n            option?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object used when sending a ViewContent track event.\\\\r\\\\n         */\\\\r\\\\n        type ViewContentEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            id?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Stock keeping unit code.\\\\r\\\\n             */\\\\r\\\\n            sku?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Category of the page or product.\\\\r\\\\n             */\\\\r\\\\n            category?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Brand name of the product.\\\\r\\\\n             */\\\\r\\\\n            brand?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variant of the product.\\\\r\\\\n             */\\\\r\\\\n            variant?: string;\\\\r\\\\n            /**\\\\r\\\\n             * List or collection the product is in.\\\\r\\\\n             */\\\\r\\\\n            list?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product's position in a list or collection.\\\\r\\\\n             */\\\\r\\\\n            position?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Origin of the event.\\\\r\\\\n             */\\\\r\\\\n            origin?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when opening a modal window.\\\\r\\\\n     */\\\\r\\\\n    type OpenModalOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Width of the modal window.\\\\r\\\\n         */\\\\r\\\\n        width: number;\\\\r\\\\n        /**\\\\r\\\\n         * Height of the modal window.\\\\r\\\\n         */\\\\r\\\\n        height: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used for providing options for the `scrollTo()` method.\\\\r\\\\n     */\\\\r\\\\n    type ScrollToOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether to scroll with an animation. Defaults to `true`.\\\\r\\\\n         */\\\\r\\\\n        scrollAnimation: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by the `getBoundingRect()` function that contains information about the window's size, the document's size, and the current scroll position.\\\\r\\\\n     */\\\\r\\\\n    type WindowSizeInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * An object with `height` and `width` key:value pairs containing the size of the viewable area of the current browser window.\\\\r\\\\n         */\\\\r\\\\n        window: any;\\\\r\\\\n        /**\\\\r\\\\n         * An object with `height` and `width` key:value pairs containing the size of the actual body of the page, which may be larger or smaller than the current window.\\\\r\\\\n         */\\\\r\\\\n        document: any;\\\\r\\\\n        /**\\\\r\\\\n         * An object with `x` and `y` key:value pairs containing the scroll offset of the page within the window from the top-left corner.\\\\r\\\\n         */\\\\r\\\\n        scroll: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_billing_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired by actions relating to billing.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an invoice is created.\\\\r\\\\n         */\\\\r\\\\n        onInvoiceCreated(event: wix_billing_backend.invoices.Invoice): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an invoice is overdue.\\\\r\\\\n         */\\\\r\\\\n        onInvoiceOverdue(event: wix_billing_backend.invoices.Invoice): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an invoice is paid.\\\\r\\\\n         */\\\\r\\\\n        onInvoicePaid(event: wix_billing_backend.invoices.Invoice): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an invoice is sent.\\\\r\\\\n         */\\\\r\\\\n        onInvoiceSent(event: wix_billing_backend.invoices.Invoice): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a price quote is accepted.\\\\r\\\\n         */\\\\r\\\\n        onPriceQuoteAccepted(event: wix_billing_backend.priceQuotes.PriceQuote): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a price quote is created.\\\\r\\\\n         */\\\\r\\\\n        onPriceQuoteCreated(event: wix_billing_backend.priceQuotes.PriceQuote): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a price quote has expired.\\\\r\\\\n         */\\\\r\\\\n        onPriceQuoteExpired(event: wix_billing_backend.priceQuotes.PriceQuote): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a price quote is sent.\\\\r\\\\n         */\\\\r\\\\n        onPriceQuoteSent(event: wix_billing_backend.priceQuotes.PriceQuote): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The wix-billing-backend module contains functionality for working with\\\\r\\\\n     *  [your site's invoices](https://support.wix.com/en/article/about-wix-invoices)\\\\r\\\\n     *  from backend code.\\\\r\\\\n     */\\\\r\\\\n    interface invoices {\\\\r\\\\n        /**\\\\r\\\\n         * Adds a payment to the invoice and reports the payment to the payment provider.\\\\r\\\\n         */\\\\r\\\\n        addPayment(id: wix_billing_backend.invoices.IdAndVersion, payment: wix_billing_backend.invoices.Payment): Promise<wix_billing_backend.invoices.Response>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new invoice.\\\\r\\\\n         */\\\\r\\\\n        createInvoice(invoiceFields: wix_billing_backend.invoices.InvoiceFields): Promise<wix_billing_backend.invoices.Response>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a link that can be used by a customer to preview the invoice.\\\\r\\\\n         */\\\\r\\\\n        createInvoicePreviewUrl(id: wix_billing_backend.invoices.IdAndVersion): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes an invoice by ID.\\\\r\\\\n         */\\\\r\\\\n        deleteInvoice(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an existing invoice by ID.\\\\r\\\\n         */\\\\r\\\\n        getInvoice(id: string): Promise<wix_billing_backend.invoices.Invoice>;\\\\r\\\\n        /**\\\\r\\\\n         * Sends an invoice preview link to a customer via email.\\\\r\\\\n         */\\\\r\\\\n        sendInvoice(id: wix_billing_backend.invoices.IdAndVersion, emailInfo: wix_billing_backend.invoices.EmailInfo): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Update an existing invoice.\\\\r\\\\n         */\\\\r\\\\n        updateInvoice(id: wix_billing_backend.invoices.IdAndVersion, invoiceFields: wix_billing_backend.invoices.InvoiceFields): Promise<wix_billing_backend.invoices.Response>;\\\\r\\\\n        /**\\\\r\\\\n         * Voids an invoice.\\\\r\\\\n         */\\\\r\\\\n        voidInvoice(id: wix_billing_backend.invoices.IdAndVersion): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace invoices {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains address information.\\\\r\\\\n         */\\\\r\\\\n        type Address = {\\\\r\\\\n            /**\\\\r\\\\n             * Address line.\\\\r\\\\n             */\\\\r\\\\n            addressLine: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address subdivision.\\\\r\\\\n             */\\\\r\\\\n            subdivision: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address postal code.\\\\r\\\\n             */\\\\r\\\\n            postalCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address in human readable format.\\\\r\\\\n             */\\\\r\\\\n            formatted: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains calculated tax information.\\\\r\\\\n         */\\\\r\\\\n        type CalculatedTax = {\\\\r\\\\n            /**\\\\r\\\\n             * Tax name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Tax rate.\\\\r\\\\n             */\\\\r\\\\n            rate: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total value of taxable goods.\\\\r\\\\n             */\\\\r\\\\n            taxable: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total amount of tax applied.\\\\r\\\\n             */\\\\r\\\\n            taxed: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains customer information.\\\\r\\\\n         */\\\\r\\\\n        type Customer = {\\\\r\\\\n            /**\\\\r\\\\n             * Contact ID.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Physical address.\\\\r\\\\n             */\\\\r\\\\n            address?: wix_billing_backend.invoices.Address;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Company name.\\\\r\\\\n             */\\\\r\\\\n            company?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Full name.\\\\r\\\\n             */\\\\r\\\\n            fullName?: string;\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains discount information.\\\\r\\\\n         */\\\\r\\\\n        type Discount = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount amount.\\\\r\\\\n             */\\\\r\\\\n            value: number;\\\\r\\\\n            /**\\\\r\\\\n             * Discount type.\\\\r\\\\n             * \\\\r\\\\n             * Either:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"Fixed\\\\\\\"`: A fixed amount is deducted.\\\\r\\\\n             * + `\\\\\\\"Percentage\\\\\\\"`: A percentage of the total amount is deducted.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information used to send an invoice to a customer.\\\\r\\\\n         */\\\\r\\\\n        type EmailInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Email subject.\\\\r\\\\n             */\\\\r\\\\n            subject: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email body. Limited formatting in the email body can be\\\\r\\\\n             * achieved using standard JavaScript string formatting.\\\\r\\\\n             */\\\\r\\\\n            body: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains ID and version information.\\\\r\\\\n         */\\\\r\\\\n        type IdAndVersion = {\\\\r\\\\n            /**\\\\r\\\\n             * Invoice ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Invoice version.\\\\r\\\\n             */\\\\r\\\\n            version: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that represents an invoice.\\\\r\\\\n         */\\\\r\\\\n        type Invoice = {\\\\r\\\\n            /**\\\\r\\\\n             * ID and version of the invoice.\\\\r\\\\n             */\\\\r\\\\n            id: wix_billing_backend.invoices.IdAndVersion;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the invoice.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Draft\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Sent\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Processing\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Paid\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Overdue\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Void\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Deleted\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"PartiallyPaid\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"PartialAndOverdue\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * Number of the invoice, unique within your site.\\\\r\\\\n             */\\\\r\\\\n            number: string;\\\\r\\\\n            /**\\\\r\\\\n             * Title of the invoice.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Locale information.\\\\r\\\\n             */\\\\r\\\\n            locale: wix_billing_backend.invoices.Locale;\\\\r\\\\n            /**\\\\r\\\\n             * Customer listed on the invoice.\\\\r\\\\n             */\\\\r\\\\n            customer: wix_billing_backend.invoices.Customer;\\\\r\\\\n            /**\\\\r\\\\n             * Line items listed on the invoice.\\\\r\\\\n             */\\\\r\\\\n            lineItems: wix_billing_backend.invoices.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Discount included in the invoice.\\\\r\\\\n             */\\\\r\\\\n            discount: wix_billing_backend.invoices.Discount;\\\\r\\\\n            /**\\\\r\\\\n             * List of payments already received from the customer.\\\\r\\\\n             */\\\\r\\\\n            payments: wix_billing_backend.invoices.Payment[];\\\\r\\\\n            /**\\\\r\\\\n             * List of taxes calculated based on the line items.\\\\r\\\\n             */\\\\r\\\\n            taxes: wix_billing_backend.invoices.CalculatedTax[];\\\\r\\\\n            /**\\\\r\\\\n             * Total values.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_billing_backend.invoices.TotalPrice;\\\\r\\\\n            /**\\\\r\\\\n             * Invoice dynamic totals.\\\\r\\\\n             */\\\\r\\\\n            dynamicTotals: wix_billing_backend.invoices.InvoiceDynamicTotals;\\\\r\\\\n            /**\\\\r\\\\n             * Additional metadata included in the invoice.\\\\r\\\\n             */\\\\r\\\\n            metadata: wix_billing_backend.invoices.MetaData;\\\\r\\\\n            /**\\\\r\\\\n             * Dates associated with the invoice.\\\\r\\\\n             */\\\\r\\\\n            dates: wix_billing_backend.invoices.InvoiceDates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains date information for an invoice.\\\\r\\\\n         */\\\\r\\\\n        type InvoiceDates = {\\\\r\\\\n            /**\\\\r\\\\n             * Invoice issue date.\\\\r\\\\n             */\\\\r\\\\n            issueDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Invoice due date.\\\\r\\\\n             */\\\\r\\\\n            dueDate: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about invoice totals that change when payments are received.\\\\r\\\\n         */\\\\r\\\\n        type InvoiceDynamicTotals = {\\\\r\\\\n            /**\\\\r\\\\n             * Amount paid.\\\\r\\\\n             */\\\\r\\\\n            paidAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Balance amount.\\\\r\\\\n             */\\\\r\\\\n            balance: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information used when creating or updating an invoice.\\\\r\\\\n         */\\\\r\\\\n        type InvoiceFields = {\\\\r\\\\n            /**\\\\r\\\\n             * Title of the invoice.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Customer listed on the invoice.\\\\r\\\\n             */\\\\r\\\\n            customer: wix_billing_backend.invoices.Customer;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line items listed on the invoice.\\\\r\\\\n             */\\\\r\\\\n            lineItems: wix_billing_backend.invoices.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Discount included in the invoice.\\\\r\\\\n             */\\\\r\\\\n            discount?: wix_billing_backend.invoices.Discount;\\\\r\\\\n            /**\\\\r\\\\n             * Invoice payments.\\\\r\\\\n             */\\\\r\\\\n            payments: wix_billing_backend.invoices.Payment[];\\\\r\\\\n            /**\\\\r\\\\n             * Invoice metadata.\\\\r\\\\n             */\\\\r\\\\n            metadata?: wix_billing_backend.invoices.MetaData;\\\\r\\\\n            /**\\\\r\\\\n             * Dates associated with the invoice.\\\\r\\\\n             */\\\\r\\\\n            dates: wix_billing_backend.invoices.InvoiceDates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains itemized fee information.\\\\r\\\\n         */\\\\r\\\\n        type ItemizedFee = {\\\\r\\\\n            /**\\\\r\\\\n             * Item fee name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Item fee price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains line item information.\\\\r\\\\n         */\\\\r\\\\n        type LineItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Line item ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item taxes.\\\\r\\\\n             */\\\\r\\\\n            taxes?: wix_billing_backend.invoices.LineItemTax[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains tax information for a line item.\\\\r\\\\n         */\\\\r\\\\n        type LineItemTax = {\\\\r\\\\n            /**\\\\r\\\\n             * Line item tax name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item tax rate.\\\\r\\\\n             */\\\\r\\\\n            rate: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains locale information.\\\\r\\\\n         */\\\\r\\\\n        type Locale = {\\\\r\\\\n            /**\\\\r\\\\n             * An IETF language tag.\\\\r\\\\n             * Some common language tags include:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"en-US\\\\\\\"`: English, United States\\\\r\\\\n             * + `\\\\\\\"en-GB\\\\\\\"`: English, British\\\\r\\\\n             * + `\\\\\\\"es-ES\\\\\\\"`: Spanish, Spain\\\\r\\\\n             * + `\\\\\\\"de-DE\\\\\\\"`: German, Germany\\\\r\\\\n             * + `\\\\\\\"ja-JP\\\\\\\"`: Japanese, Japan\\\\r\\\\n             * + `\\\\\\\"fr-CH\\\\\\\"`: French, Switzerland\\\\r\\\\n             * + `\\\\\\\"it-IT\\\\\\\"`: Italian, Italy\\\\r\\\\n             */\\\\r\\\\n            language: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains metadata information.\\\\r\\\\n         */\\\\r\\\\n        type MetaData = {\\\\r\\\\n            /**\\\\r\\\\n             * Invoice notes.\\\\r\\\\n             */\\\\r\\\\n            notes?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Legal terms.\\\\r\\\\n             */\\\\r\\\\n            legalTerms?: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL to legal terms.\\\\r\\\\n             */\\\\r\\\\n            sourceUrl?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about an invoice payment.\\\\r\\\\n         */\\\\r\\\\n        type Payment = {\\\\r\\\\n            /**\\\\r\\\\n             * Payment id.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Payment type, describing how the payment was made.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * Payment amount.\\\\r\\\\n             */\\\\r\\\\n            amount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Payment date.\\\\r\\\\n             */\\\\r\\\\n            date: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains response information.\\\\r\\\\n         */\\\\r\\\\n        type Response = {\\\\r\\\\n            /**\\\\r\\\\n             * ID and version information.\\\\r\\\\n             */\\\\r\\\\n            id: wix_billing_backend.invoices.IdAndVersion;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains price totals.\\\\r\\\\n         */\\\\r\\\\n        type TotalPrice = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount amount.\\\\r\\\\n             */\\\\r\\\\n            discountAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * List of itemized fees.\\\\r\\\\n             */\\\\r\\\\n            fees: wix_billing_backend.invoices.ItemizedFee[];\\\\r\\\\n            /**\\\\r\\\\n             * Sum of line item tax amounts.\\\\r\\\\n             */\\\\r\\\\n            taxedAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Subtotal of the line items without the tax included.\\\\r\\\\n             */\\\\r\\\\n            subtotal: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total price of the itemized fees and taxes.\\\\r\\\\n             */\\\\r\\\\n            total: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The wix-billing-backend module contains functionality for working with\\\\r\\\\n     *  your site's [price quotes](https://support.wix.com/en/article/about-price-quotes)\\\\r\\\\n     *  from backend code.\\\\r\\\\n     */\\\\r\\\\n    interface priceQuotes {\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new price quote.\\\\r\\\\n         */\\\\r\\\\n        createPriceQuote(priceQuoteInfo: wix_billing_backend.priceQuotes.PriceQuoteInfo): Promise<wix_billing_backend.priceQuotes.Response>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes a price quote by ID.\\\\r\\\\n         */\\\\r\\\\n        deletePriceQuote(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an existing price quote by ID.\\\\r\\\\n         */\\\\r\\\\n        getPriceQuote(id: string): Promise<wix_billing_backend.priceQuotes.PriceQuote>;\\\\r\\\\n        /**\\\\r\\\\n         * Sends a price quote preview link to a customer via email.\\\\r\\\\n         */\\\\r\\\\n        sendPriceQuote(id: wix_billing_backend.priceQuotes.IdAndVersion, emailInfo: wix_billing_backend.priceQuotes.EmailInfo): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates an existing price quote.\\\\r\\\\n         */\\\\r\\\\n        updatePriceQuote(id: wix_billing_backend.priceQuotes.IdAndVersion, priceQuoteInfo: wix_billing_backend.priceQuotes.PriceQuoteInfo): Promise<wix_billing_backend.priceQuotes.Response>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace priceQuotes {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains address information.\\\\r\\\\n         */\\\\r\\\\n        type Address = {\\\\r\\\\n            /**\\\\r\\\\n             * Address line.\\\\r\\\\n             */\\\\r\\\\n            addressLine: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address subdivision.\\\\r\\\\n             */\\\\r\\\\n            subdivision: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address postal code.\\\\r\\\\n             */\\\\r\\\\n            postalCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address in human readable format.\\\\r\\\\n             */\\\\r\\\\n            formatted: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains calculated tax information.\\\\r\\\\n         */\\\\r\\\\n        type CalculatedTax = {\\\\r\\\\n            /**\\\\r\\\\n             * Tax name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Tax rate.\\\\r\\\\n             */\\\\r\\\\n            rate: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total value of taxable goods.\\\\r\\\\n             */\\\\r\\\\n            taxable: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total amount of tax applied.\\\\r\\\\n             */\\\\r\\\\n            taxed: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains customer information.\\\\r\\\\n         */\\\\r\\\\n        type Customer = {\\\\r\\\\n            /**\\\\r\\\\n             * Contact ID.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email address.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * Physical address.\\\\r\\\\n             */\\\\r\\\\n            address?: wix_billing_backend.priceQuotes.Address;\\\\r\\\\n            /**\\\\r\\\\n             * Phone number.\\\\r\\\\n             */\\\\r\\\\n            phone?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Company name.\\\\r\\\\n             */\\\\r\\\\n            company?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Full name.\\\\r\\\\n             */\\\\r\\\\n            fullName?: string;\\\\r\\\\n            /**\\\\r\\\\n             * First name.\\\\r\\\\n             */\\\\r\\\\n            firstName?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name.\\\\r\\\\n             */\\\\r\\\\n            lastName?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains discount information.\\\\r\\\\n         */\\\\r\\\\n        type Discount = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount amount.\\\\r\\\\n             */\\\\r\\\\n            value: number;\\\\r\\\\n            /**\\\\r\\\\n             * Discount type.\\\\r\\\\n             * \\\\r\\\\n             * Either:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"Fixed\\\\\\\"`: A fixed amount is deducted.\\\\r\\\\n             * + `\\\\\\\"Percentage\\\\\\\"`: A percentage of the total amount is deducted.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information used to send a price quote to a customer.\\\\r\\\\n         */\\\\r\\\\n        type EmailInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Email subject.\\\\r\\\\n             */\\\\r\\\\n            subject: string;\\\\r\\\\n            /**\\\\r\\\\n             * Email body. Limited formatting in the email body can be\\\\r\\\\n             * achieved using standard JavaScript string formatting.\\\\r\\\\n             */\\\\r\\\\n            body: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains ID and version information.\\\\r\\\\n         */\\\\r\\\\n        type IdAndVersion = {\\\\r\\\\n            /**\\\\r\\\\n             * Price quote ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Price quote version.\\\\r\\\\n             */\\\\r\\\\n            version: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains itemized fee information.\\\\r\\\\n         */\\\\r\\\\n        type ItemizedFee = {\\\\r\\\\n            /**\\\\r\\\\n             * Item fee name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Item fee price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains line item information.\\\\r\\\\n         */\\\\r\\\\n        type LineItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Line item ID.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item quantity.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n            /**\\\\r\\\\n             * Line item taxes.\\\\r\\\\n             */\\\\r\\\\n            taxes?: wix_billing_backend.priceQuotes.LineItemTax[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains tax information for a line item.\\\\r\\\\n         */\\\\r\\\\n        type LineItemTax = {\\\\r\\\\n            /**\\\\r\\\\n             * Line item tax name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line item tax rate.\\\\r\\\\n             */\\\\r\\\\n            rate: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains locale information.\\\\r\\\\n         */\\\\r\\\\n        type Locale = {\\\\r\\\\n            /**\\\\r\\\\n             * An IETF language tag.\\\\r\\\\n             * Some common language tags include:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"en-US\\\\\\\"`: English, United States\\\\r\\\\n             * + `\\\\\\\"en-GB\\\\\\\"`: English, British\\\\r\\\\n             * + `\\\\\\\"es-ES\\\\\\\"`: Spanish, Spain\\\\r\\\\n             * + `\\\\\\\"de-DE\\\\\\\"`: German, Germany\\\\r\\\\n             * + `\\\\\\\"ja-JP\\\\\\\"`: Japanese, Japan\\\\r\\\\n             * + `\\\\\\\"fr-CH\\\\\\\"`: French, Switzerland\\\\r\\\\n             * + `\\\\\\\"it-IT\\\\\\\"`: Italian, Italy\\\\r\\\\n             */\\\\r\\\\n            language: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains metadata information.\\\\r\\\\n         */\\\\r\\\\n        type MetaData = {\\\\r\\\\n            /**\\\\r\\\\n             * Price quote notes.\\\\r\\\\n             */\\\\r\\\\n            notes?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Legal terms.\\\\r\\\\n             */\\\\r\\\\n            legalTerms?: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL to legal terms.\\\\r\\\\n             */\\\\r\\\\n            sourceUrl?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information about price quote payment terms.\\\\r\\\\n         */\\\\r\\\\n        type PaymentTerms = {\\\\r\\\\n            /**\\\\r\\\\n             * Price quote term type.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"DueOnReceipt\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"NetPlus\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"TimeStamp\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Other\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            termType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Term data. When `termType` is `\\\\\\\"NetPlus\\\\\\\"`,\\\\r\\\\n             *  `termData` contains a positive integer indicating how many days after the charge\\\\r\\\\n             *  payment is due.\\\\r\\\\n             */\\\\r\\\\n            termData?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that represents a price quote.\\\\r\\\\n         */\\\\r\\\\n        type PriceQuote = {\\\\r\\\\n            /**\\\\r\\\\n             * ID and version of the price quote.\\\\r\\\\n             */\\\\r\\\\n            id: wix_billing_backend.priceQuotes.IdAndVersion;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the price quote.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Draft\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Sent\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Processing\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Accepted\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Rejected\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Expired\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Void\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Deleted\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Invoiced\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * Number of the price quote, unique within your site.\\\\r\\\\n             */\\\\r\\\\n            number: string;\\\\r\\\\n            /**\\\\r\\\\n             * Title of the price quote.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Locale information.\\\\r\\\\n             */\\\\r\\\\n            locale: wix_billing_backend.priceQuotes.Locale;\\\\r\\\\n            /**\\\\r\\\\n             * Customer listed on the price quote.\\\\r\\\\n             */\\\\r\\\\n            customer: wix_billing_backend.priceQuotes.Customer;\\\\r\\\\n            /**\\\\r\\\\n             * Line items listed on the price quote.\\\\r\\\\n             */\\\\r\\\\n            lineItems: wix_billing_backend.priceQuotes.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Discount included in the price quote.\\\\r\\\\n             */\\\\r\\\\n            discount: wix_billing_backend.priceQuotes.Discount;\\\\r\\\\n            /**\\\\r\\\\n             * Payment terms.\\\\r\\\\n             */\\\\r\\\\n            paymentTerms: wix_billing_backend.priceQuotes.PaymentTerms;\\\\r\\\\n            /**\\\\r\\\\n             * List of taxes calculated based on the line items.\\\\r\\\\n             */\\\\r\\\\n            taxes: wix_billing_backend.priceQuotes.CalculatedTax[];\\\\r\\\\n            /**\\\\r\\\\n             * Total values.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_billing_backend.priceQuotes.TotalPrice;\\\\r\\\\n            /**\\\\r\\\\n             * Additional metadata included in the price quote.\\\\r\\\\n             */\\\\r\\\\n            metadata: wix_billing_backend.priceQuotes.MetaData;\\\\r\\\\n            /**\\\\r\\\\n             * Price quote company ID.\\\\r\\\\n             */\\\\r\\\\n            companyId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Price quote invoice ID, when converting price quote to invoice.\\\\r\\\\n             */\\\\r\\\\n            invoiceId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Dates associated with the price quote.\\\\r\\\\n             */\\\\r\\\\n            dates: wix_billing_backend.priceQuotes.PriceQuoteDates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains date information for a price quote.\\\\r\\\\n         */\\\\r\\\\n        type PriceQuoteDates = {\\\\r\\\\n            /**\\\\r\\\\n             * Date the price quote was issued.\\\\r\\\\n             */\\\\r\\\\n            issueDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Date that the price quote is valid until.\\\\r\\\\n             */\\\\r\\\\n            validThroughDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Date the price quote was accepted.\\\\r\\\\n             */\\\\r\\\\n            acceptanceDate?: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Date the price quote was last seen.\\\\r\\\\n             */\\\\r\\\\n            lastSeenDate?: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains information used when creating or updating a price quote.\\\\r\\\\n         */\\\\r\\\\n        type PriceQuoteInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Title of the price quote.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Customer listed on the price quote.\\\\r\\\\n             */\\\\r\\\\n            customer: wix_billing_backend.priceQuotes.Customer;\\\\r\\\\n            /**\\\\r\\\\n             * Currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * Line items listed on the price quote.\\\\r\\\\n             */\\\\r\\\\n            lineItems: wix_billing_backend.priceQuotes.LineItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Discount included in the price quote.\\\\r\\\\n             */\\\\r\\\\n            discount?: wix_billing_backend.priceQuotes.Discount;\\\\r\\\\n            /**\\\\r\\\\n             * Payment terms.\\\\r\\\\n             */\\\\r\\\\n            paymentTerms: wix_billing_backend.priceQuotes.PaymentTerms;\\\\r\\\\n            /**\\\\r\\\\n             * Price quote metadata.\\\\r\\\\n             */\\\\r\\\\n            metadata?: wix_billing_backend.priceQuotes.MetaData;\\\\r\\\\n            /**\\\\r\\\\n             * Dates associated with the price quote.\\\\r\\\\n             */\\\\r\\\\n            dates: wix_billing_backend.priceQuotes.PriceQuoteDates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains response information.\\\\r\\\\n         */\\\\r\\\\n        type Response = {\\\\r\\\\n            /**\\\\r\\\\n             * ID and version information.\\\\r\\\\n             */\\\\r\\\\n            id: wix_billing_backend.priceQuotes.IdAndVersion;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains price totals.\\\\r\\\\n         */\\\\r\\\\n        type TotalPrice = {\\\\r\\\\n            /**\\\\r\\\\n             * Discount amount.\\\\r\\\\n             */\\\\r\\\\n            discountAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * List of itemized fees.\\\\r\\\\n             */\\\\r\\\\n            fees: wix_billing_backend.priceQuotes.ItemizedFee[];\\\\r\\\\n            /**\\\\r\\\\n             * Sum of line item tax amounts.\\\\r\\\\n             */\\\\r\\\\n            taxedAmount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Subtotal of the line items without the tax included.\\\\r\\\\n             */\\\\r\\\\n            subtotal: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total price of the itemized fees and taxes.\\\\r\\\\n             */\\\\r\\\\n            total: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_captcha_backend {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a CAPTCHA authorization error message.\\\\r\\\\n     */\\\\r\\\\n    type ErrorReport = {\\\\r\\\\n        /**\\\\r\\\\n         * Error message.\\\\r\\\\n         */\\\\r\\\\n        error: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a CAPTCHA authorization success message.\\\\r\\\\n     */\\\\r\\\\n    type SuccessReport = {\\\\r\\\\n        /**\\\\r\\\\n         * Value is `true` when authorization is successful.\\\\r\\\\n         */\\\\r\\\\n        success: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_chat_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired by actions relating to chat messages.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a chat message is sent to or from the business.\\\\r\\\\n         */\\\\r\\\\n        onMessage(event: wix_chat_backend.Events.SendMessageEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * The content of a chat message.\\\\r\\\\n         */\\\\r\\\\n        type MessagePayload = {\\\\r\\\\n            /**\\\\r\\\\n             * Text of the chat message.\\\\r\\\\n             */\\\\r\\\\n            text: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a chat message that was sent.\\\\r\\\\n         */\\\\r\\\\n        type SendMessageEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the channel on which the message was sent.\\\\r\\\\n             */\\\\r\\\\n            channelId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Direction of the message.\\\\r\\\\n             * One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"VisitorToBusiness\\\\\\\"`: From a site visitor to the business.\\\\r\\\\n             *  + `\\\\\\\"BusinessToVisitor\\\\\\\"`: From the business to a site visitor.\\\\r\\\\n             */\\\\r\\\\n            direction: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of message. Currently only `TEXT` is supported.\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * First 250 characters of the chat message. Currently only text is included in the summary.\\\\r\\\\n             */\\\\r\\\\n            summary: string;\\\\r\\\\n            /**\\\\r\\\\n             * The sender's member ID. For a message sent from the site's business, the site owner's member ID.\\\\r\\\\n             */\\\\r\\\\n            participantId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time the message was sent.\\\\r\\\\n             */\\\\r\\\\n            createdAt: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Content of the message.\\\\r\\\\n             */\\\\r\\\\n            payload: wix_chat_backend.Events.MessagePayload;\\\\r\\\\n            /**\\\\r\\\\n             * An object representing additional contextual message information included in a chat message. The site visitor does not see the metadata.\\\\r\\\\n             */\\\\r\\\\n            metadata?: any;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a chat message to be sent.\\\\r\\\\n     */\\\\r\\\\n    type MessageInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * The content of the message.\\\\r\\\\n         */\\\\r\\\\n        messageText: string;\\\\r\\\\n        /**\\\\r\\\\n         * The ID of the channel to send the message to. Currently only IDs of business channels are supported.\\\\r\\\\n         */\\\\r\\\\n        channelId: string;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing additional contextual message information included in a chat message. The site visitor does not see the metadata.\\\\r\\\\n         */\\\\r\\\\n        metadata?: any;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the message is sent from the visitor to the business. If `sendAsVisitor` is `true`, the message is sent from the site visitor to the business. If `sendAsVisitor` is `undefined` or `false`, the message is sent from the business to the site visitor. The default is `undefined`.\\\\r\\\\n         */\\\\r\\\\n        sendAsVisitor?: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_http_functions {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an incoming request received by a call to an HTTP function.\\\\r\\\\n     */\\\\r\\\\n    interface WixHttpFunctionRequest {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the base URL of a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly baseUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns an object representing the body of the incoming call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly body: wix_http_functions.WixHttpFunctionRequest.WixHttpFunctionRequestBody;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the function name of a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly functionName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the HTTP header fields used in a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly headers: any;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the IP address of the client who called the HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly ip: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the HTTP method used in calling an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly method: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the path of the URL used to call an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly path: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the query fields and values of the URL used to call an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly query: any;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the full URL of a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        readonly url: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace WixHttpFunctionRequest {\\\\r\\\\n        /**\\\\r\\\\n         * An object returned by the `body` property representing the body of a call to an HTTP function.\\\\r\\\\n         */\\\\r\\\\n        type WixHttpFunctionRequestBody = {\\\\r\\\\n            /**\\\\r\\\\n             * Returns a Promise which resolves to the body of the call as a string.\\\\r\\\\n             */\\\\r\\\\n            \\\\\\\"text()\\\\\\\": Promise<string>;\\\\r\\\\n            /**\\\\r\\\\n             * Returns a Promise which resolves to the body of the call as a JSON object.\\\\r\\\\n             */\\\\r\\\\n            \\\\\\\"json()\\\\\\\": Promise<any>;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a response to an HTTP function request.\\\\r\\\\n     */\\\\r\\\\n    interface WixHttpFunctionResponse {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the body of the response as a string or binary buffer.\\\\r\\\\n         */\\\\r\\\\n        body: string | Buffer;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the HTTP response header fields.\\\\r\\\\n         */\\\\r\\\\n        headers: any;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the HTTP status code of the response.\\\\r\\\\n         */\\\\r\\\\n        status: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used to customize a response to an HTTP function call.\\\\r\\\\n     */\\\\r\\\\n    type WixHttpFunctionResponseOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * The response's HTTP status code.\\\\r\\\\n         */\\\\r\\\\n        status?: number;\\\\r\\\\n        /**\\\\r\\\\n         * The response's body.\\\\r\\\\n         */\\\\r\\\\n        body?: string | Buffer;\\\\r\\\\n        /**\\\\r\\\\n         * The response's header fields. The `headers` property contains an object of `key:value` pairs where the `key` is the header field name and the `value` is the header field value.\\\\r\\\\n         */\\\\r\\\\n        headers?: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_crm_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired by actions relating to site contacts.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a new workflow card is created.\\\\r\\\\n         */\\\\r\\\\n        onCardCreated(event: wix_crm_backend.Events.CardCreatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a workflow card is moved.\\\\r\\\\n         */\\\\r\\\\n        onCardMoved(event: wix_crm_backend.Events.CardMovedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a workflow card is moved.\\\\r\\\\n         */\\\\r\\\\n        onCardRestored(event: wix_crm_backend.Events.CardRestoredEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a user submits a form.\\\\r\\\\n         */\\\\r\\\\n        onFormSubmit(event: wix_crm_backend.Events.FormSubmitEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a created card.\\\\r\\\\n         */\\\\r\\\\n        type CardCreatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's workflow.\\\\r\\\\n             */\\\\r\\\\n            workflowId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's workflow.\\\\r\\\\n             */\\\\r\\\\n            workflowName: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's phase.\\\\r\\\\n             */\\\\r\\\\n            phaseId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's phase.\\\\r\\\\n             */\\\\r\\\\n            phaseName: string;\\\\r\\\\n            /**\\\\r\\\\n             * The card that was created.\\\\r\\\\n             */\\\\r\\\\n            card: wix_crm_backend.workflows.Card;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a moved card.\\\\r\\\\n         */\\\\r\\\\n        type CardMovedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's workflow.\\\\r\\\\n             */\\\\r\\\\n            workflowId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's workflow.\\\\r\\\\n             */\\\\r\\\\n            workflowName: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's new phase.\\\\r\\\\n             */\\\\r\\\\n            newPhaseId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's new phase.\\\\r\\\\n             */\\\\r\\\\n            newPhaseName: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the card's old phase.\\\\r\\\\n             */\\\\r\\\\n            previousPhaseId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card's old phase.\\\\r\\\\n             */\\\\r\\\\n            previousPhaseName: string;\\\\r\\\\n            /**\\\\r\\\\n             * The card that was moved.\\\\r\\\\n             */\\\\r\\\\n            card: wix_crm_backend.workflows.Card;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a moved card.\\\\r\\\\n         */\\\\r\\\\n        type CardRestoredEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the workflow the card was restored to.\\\\r\\\\n             */\\\\r\\\\n            workflowId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the workflow the card was restored to.\\\\r\\\\n             */\\\\r\\\\n            workflowName: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the phase the card was restored to.\\\\r\\\\n             */\\\\r\\\\n            phaseId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the phase the card was restored to.\\\\r\\\\n             */\\\\r\\\\n            phaseName: string;\\\\r\\\\n            /**\\\\r\\\\n             * The card that was restored.\\\\r\\\\n             */\\\\r\\\\n            card: wix_crm_backend.workflows.Card;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an attachment to a form.\\\\r\\\\n         */\\\\r\\\\n        type FormAttachment = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the attachment.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of attachment.\\\\r\\\\n             * One of:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"UNDEFINED\\\\\\\"`\\\\r\\\\n             * + `\\\\\\\"DOCUMENT\\\\\\\"`\\\\r\\\\n             * + `\\\\\\\"IMAGE\\\\\\\"`\\\\r\\\\n             * + `\\\\\\\"VIDEO\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            type: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the attachment.\\\\r\\\\n             */\\\\r\\\\n            url: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a form field.\\\\r\\\\n         */\\\\r\\\\n        type FormField = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the field.\\\\r\\\\n             */\\\\r\\\\n            fieldName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Value of the field.\\\\r\\\\n             */\\\\r\\\\n            fieldValue: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a form.\\\\r\\\\n         */\\\\r\\\\n        type FormSubmitEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Contact ID of the user submitting the form.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the form.\\\\r\\\\n             */\\\\r\\\\n            formName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time that the form was submitted.\\\\r\\\\n             */\\\\r\\\\n            submissionTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Data submitted in the form. The object contains key:value pairs where the key is the field name and the value is the contents of the field.\\\\r\\\\n             */\\\\r\\\\n            submissionData: wix_crm_backend.Events.FormField[];\\\\r\\\\n            /**\\\\r\\\\n             * The form's attachments.\\\\r\\\\n             */\\\\r\\\\n            attachments: wix_crm_backend.Events.FormAttachment[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The Notifications API is used to send notifications to the site owner and contributors.\\\\r\\\\n     */\\\\r\\\\n    interface notifications {\\\\r\\\\n        /**\\\\r\\\\n         * Sends a notification.\\\\r\\\\n         */\\\\r\\\\n        notify(body: string, channels: string[], options: wix_crm_backend.notifications.NotificationOptions): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace notifications {\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about where to navigate when a notification is clicked.\\\\r\\\\n         */\\\\r\\\\n        type ActionTarget = {\\\\r\\\\n            /**\\\\r\\\\n             * URL to navigate to when the `actionTitle` text is clicked.\\\\r\\\\n             */\\\\r\\\\n            url?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing notification options.\\\\r\\\\n         */\\\\r\\\\n        type NotificationOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Notification title. Only displayed on mobile and browser notifications. Max length: 512 characters.\\\\r\\\\n             */\\\\r\\\\n            title?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Call to action text to be clicked on. When clicked, navigates to the `actionTarget` URL. Max length: 512 characters.\\\\r\\\\n             */\\\\r\\\\n            actionTitle?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Where to navigate to when the `actionTitle` text is clicked.\\\\r\\\\n             */\\\\r\\\\n            actionTarget?: wix_crm_backend.notifications.ActionTarget;\\\\r\\\\n            /**\\\\r\\\\n             * Contributor that will receive the notifications, based on their assigned roles.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"All_Contributors\\\\\\\"`: All site contributors, including the site owner.\\\\r\\\\n             *  + `\\\\\\\"Owner\\\\\\\"`: Only the site owner.\\\\r\\\\n             */\\\\r\\\\n            recipients?: wix_crm_backend.notifications.SiteContributors;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about which contributors will receive a notification.\\\\r\\\\n         */\\\\r\\\\n        type SiteContributors = {\\\\r\\\\n            /**\\\\r\\\\n             * Roles to receive the notification.\\\\r\\\\n             * One of:\\\\r\\\\n             * \\\\r\\\\n             * + `\\\\\\\"All_Contributors\\\\\\\"`: All site contributors (default).\\\\r\\\\n             * + `\\\\\\\"Owner\\\\\\\"`: Only the site owner.\\\\r\\\\n             */\\\\r\\\\n            role?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The Tasks API is used to manage a site's tasks.\\\\r\\\\n     */\\\\r\\\\n    interface tasks {\\\\r\\\\n        /**\\\\r\\\\n         * Sets a task as completed.\\\\r\\\\n         */\\\\r\\\\n        completeTask(taskId: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new task.\\\\r\\\\n         */\\\\r\\\\n        createTask(taskInfo: wix_crm_backend.tasks.TaskInfo): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a task by ID.\\\\r\\\\n         */\\\\r\\\\n        getTask(taskId: string): Promise<wix_crm_backend.tasks.Task>;\\\\r\\\\n        /**\\\\r\\\\n         * Removes an existing task.\\\\r\\\\n         */\\\\r\\\\n        removeTask(taskId: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Resets a task as not completed.\\\\r\\\\n         */\\\\r\\\\n        resetTask(taskId: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the specified fields of an existing task.\\\\r\\\\n         */\\\\r\\\\n        updateTaskFields(taskId: string, taskInfo: wix_crm_backend.tasks.TaskInfo): Promise<string>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace tasks {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a task.\\\\r\\\\n         */\\\\r\\\\n        type Task = {\\\\r\\\\n            /**\\\\r\\\\n             * Task title.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the task has been\\\\r\\\\n             *  completed.\\\\r\\\\n             */\\\\r\\\\n            isCompleted: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier of the site contact\\\\r\\\\n             *  that this task is linked to.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Running task version number. Each time an\\\\r\\\\n             *  action is performed on a task its version number is incremented.\\\\r\\\\n             */\\\\r\\\\n            version: number;\\\\r\\\\n            /**\\\\r\\\\n             * Unique task identifier.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the task is due.\\\\r\\\\n             */\\\\r\\\\n            dueDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Type of the task's creator. `\\\\\\\"USER\\\\\\\"`\\\\r\\\\n             *  if the task was created using the site's dashboard. `\\\\\\\"APP\\\\\\\"` if the task was\\\\r\\\\n             *  created using the [`createTask()`](#createTask) function or if it was created\\\\r\\\\n             *  by an app installed on the site.\\\\r\\\\n             */\\\\r\\\\n            creatorType: string;\\\\r\\\\n            /**\\\\r\\\\n             * When `creatorType` is `\\\\\\\"USER\\\\\\\"`, the unique\\\\r\\\\n             *  identifier of the user that created the task in the dashboard. Otherwise, `userId` is not\\\\r\\\\n             *  present.\\\\r\\\\n             */\\\\r\\\\n            userId?: string;\\\\r\\\\n            /**\\\\r\\\\n             * When `creatorType` is `\\\\\\\"APP\\\\\\\"`, the unique\\\\r\\\\n             *  identifier of the application that created the task. Otherwise, `applicationId` is not\\\\r\\\\n             *  present.\\\\r\\\\n             */\\\\r\\\\n            applicationId?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information for creating or updating a task.\\\\r\\\\n         */\\\\r\\\\n        type TaskInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Task title.\\\\r\\\\n             */\\\\r\\\\n            title?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the task is due.\\\\r\\\\n             */\\\\r\\\\n            dueDate?: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Unique identifier of the site contact\\\\r\\\\n             *  that this task is linked to.\\\\r\\\\n             */\\\\r\\\\n            contactId?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The wix-crm-backend module contains functionality for working with\\\\r\\\\n     *  your site's [workflows](https://support.wix.com/en/article/about-workflows)\\\\r\\\\n     *  from backend code.\\\\r\\\\n     * \\\\r\\\\n     *  A workflow consists of a number of phases, also known as steps. The final phase\\\\r\\\\n     *  in the workflow, the phase that indicates the workflow has been completed,\\\\r\\\\n     *  is know as the win phase. Each phase can contain cards that move between the phases,\\\\r\\\\n     *  indicating the card's progression through the workflow.\\\\r\\\\n     */\\\\r\\\\n    interface workflows {\\\\r\\\\n        /**\\\\r\\\\n         * Archives a workflow card.\\\\r\\\\n         */\\\\r\\\\n        archiveCard(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new workflow card.\\\\r\\\\n         */\\\\r\\\\n        createCard(workflowId: string, phaseId: string, card: wix_crm_backend.workflows.Card, position?: number): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new workflow phase.\\\\r\\\\n         */\\\\r\\\\n        createPhase(workflowId: string, phase: wix_crm_backend.workflows.Phase, position?: number): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new workflow.\\\\r\\\\n         */\\\\r\\\\n        createWorkflow(workflowInfo: wix_crm_backend.workflows.WorkflowInfo): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes a workflow card by ID.\\\\r\\\\n         */\\\\r\\\\n        deleteCard(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes a workflow phase by ID.\\\\r\\\\n         */\\\\r\\\\n        deletePhase(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes a workflow by ID.\\\\r\\\\n         */\\\\r\\\\n        deleteWorkflow(id: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a workflow card by ID.\\\\r\\\\n         */\\\\r\\\\n        getCard(id: string): Promise<wix_crm_backend.workflows.Card>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a phase info by ID.\\\\r\\\\n         */\\\\r\\\\n        getPhaseInfo(id: string): Promise<wix_crm_backend.workflows.Phase>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a workflow info by ID.\\\\r\\\\n         */\\\\r\\\\n        getWorkflowInfo(id: string): Promise<wix_crm_backend.workflows.WorkflowInfo>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of a workflow's cards.\\\\r\\\\n         */\\\\r\\\\n        listCards(workflowId: string, options: wix_crm_backend.workflows.ListCardOptions): Promise<wix_crm_backend.workflows.CardList>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of a workflow's phases.\\\\r\\\\n         */\\\\r\\\\n        listPhasesInfo(workflowId: string, options: wix_crm_backend.workflows.ListOptions): Promise<wix_crm_backend.workflows.PhaseList>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a list of the site's workflows info.\\\\r\\\\n         */\\\\r\\\\n        listWorkflowsInfo(options: wix_crm_backend.workflows.ListOptions): Promise<wix_crm_backend.workflows.WorkflowList>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves a card to a new position within a workflow.\\\\r\\\\n         */\\\\r\\\\n        moveCard(cardId: string, options: wix_crm_backend.workflows.MoveCardOptions): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Moves a phase to a new position with a workflow.\\\\r\\\\n         */\\\\r\\\\n        movePhase(id: string, options: wix_crm_backend.workflows.MovePhaseOptions): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Restores an archived workflow card.\\\\r\\\\n         */\\\\r\\\\n        restoreCard(id: string, options: wix_crm_backend.workflows.MoveCardOptions): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates an existing workflow card.\\\\r\\\\n         */\\\\r\\\\n        updateCardFields(id: string, card: wix_crm_backend.workflows.Card): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates an existing workflow phase.\\\\r\\\\n         */\\\\r\\\\n        updatePhaseFields(id: string, phase: wix_crm_backend.workflows.Phase): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates an existing workflow.\\\\r\\\\n         */\\\\r\\\\n        updateWorkflowFields(id: string, workflowInfo: wix_crm_backend.workflows.WorkflowInfo): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace workflows {\\\\r\\\\n        /**\\\\r\\\\n         * An object containing card information.\\\\r\\\\n         */\\\\r\\\\n        type Card = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the card.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Unique card identifier.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the contact associated with the card.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the card was created.\\\\r\\\\n             */\\\\r\\\\n            createdDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Date the card was last updated.\\\\r\\\\n             */\\\\r\\\\n            updatedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Source that created the card.\\\\r\\\\n             * \\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Contacts\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Inbox\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Invoices\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Price Quotes\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Wix Forms\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            source: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the phase which contains the card.\\\\r\\\\n             */\\\\r\\\\n            phaseId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing a list of cards and pagination info.\\\\r\\\\n         */\\\\r\\\\n        type CardList = {\\\\r\\\\n            /**\\\\r\\\\n             * List of cards matching the list options.\\\\r\\\\n             */\\\\r\\\\n            items: wix_crm_backend.workflows.Card[];\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in the current results page.\\\\r\\\\n             */\\\\r\\\\n            length: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of cards in the specified workflow and phase.\\\\r\\\\n             */\\\\r\\\\n            totalCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items returned per page with the current list options.\\\\r\\\\n             */\\\\r\\\\n            pageSize: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of results pages.\\\\r\\\\n             */\\\\r\\\\n            totalPages: number;\\\\r\\\\n            /**\\\\r\\\\n             * Index of the current page. Indices are zero-based.\\\\r\\\\n             */\\\\r\\\\n            currentPage: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object contains ListCards request data.\\\\r\\\\n         */\\\\r\\\\n        type ListCardOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Maximum number of cards to retrieve. Defaults to `50`.\\\\r\\\\n             */\\\\r\\\\n            limit?: number;\\\\r\\\\n            /**\\\\r\\\\n             * ID of phase to retrieve cards from. If omitted, will retrieve cards from all phases. Not to be used with `fetchOnlyArchived`.\\\\r\\\\n             */\\\\r\\\\n            phaseId?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether to retrieve only archived cards. Not to be used with `phaseId`.\\\\r\\\\n             */\\\\r\\\\n            fetchOnlyArchived?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Ordering options.\\\\r\\\\n             */\\\\r\\\\n            order?: wix_crm_backend.workflows.OrderOptions;\\\\r\\\\n            /**\\\\r\\\\n             * Number of cards to skip before the retrieved items. Defaults to `0`.\\\\r\\\\n             */\\\\r\\\\n            skip?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing options used when requesting a list of workflows or phases.\\\\r\\\\n         */\\\\r\\\\n        type ListOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Maximum number of items to retrieve. Defaults to `50` for phases and `100` for workflows.\\\\r\\\\n             */\\\\r\\\\n            limit?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Ordering options.\\\\r\\\\n             */\\\\r\\\\n            order?: wix_crm_backend.workflows.OrderOptions;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items to skip before the retrieved items. Defaults to `0`.\\\\r\\\\n             */\\\\r\\\\n            skip?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information used when moving a card.\\\\r\\\\n         */\\\\r\\\\n        type MoveCardOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the phase to move the card to. If omitted, the card remains in the same phase.\\\\r\\\\n             */\\\\r\\\\n            newPhaseId?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Position within the phase to move the card to. If omitted, the card is moved to the top of the phase.\\\\r\\\\n             */\\\\r\\\\n            newPosition?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information used when moving a phase.\\\\r\\\\n         */\\\\r\\\\n        type MovePhaseOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the workflow to move the phase to.\\\\r\\\\n             */\\\\r\\\\n            workflowId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Position within the workflow to move the phase to.\\\\r\\\\n             */\\\\r\\\\n            newPosition: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing sort order options.\\\\r\\\\n         */\\\\r\\\\n        type OrderOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Order of sort. Either `\\\\\\\"asc\\\\\\\"` or `\\\\\\\"desc\\\\\\\"` (defaults to `\\\\\\\"asc\\\\\\\"`).\\\\r\\\\n             */\\\\r\\\\n            sort: string;\\\\r\\\\n            /**\\\\r\\\\n             * Field to sort on.\\\\r\\\\n             */\\\\r\\\\n            field: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing phase information.\\\\r\\\\n         */\\\\r\\\\n        type Phase = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the phase.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Unique phase identifier.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing a list of phases and pagination info.\\\\r\\\\n         */\\\\r\\\\n        type PhaseList = {\\\\r\\\\n            /**\\\\r\\\\n             * List of phases matching the list options.\\\\r\\\\n             */\\\\r\\\\n            items: wix_crm_backend.workflows.Phase[];\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in the current results page.\\\\r\\\\n             */\\\\r\\\\n            length: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of phases in the specified workflow.\\\\r\\\\n             */\\\\r\\\\n            totalCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items returned per page with the current list options.\\\\r\\\\n             */\\\\r\\\\n            pageSize: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of results pages.\\\\r\\\\n             */\\\\r\\\\n            totalPages: number;\\\\r\\\\n            /**\\\\r\\\\n             * Index of the current page. Indices are zero-based.\\\\r\\\\n             */\\\\r\\\\n            currentPage: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object contains workflow.\\\\r\\\\n         */\\\\r\\\\n        type Workflow = {\\\\r\\\\n            /**\\\\r\\\\n             * Workflow information.\\\\r\\\\n             */\\\\r\\\\n            workflowInfo: wix_crm_backend.workflows.WorkflowInfo;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the win phase.\\\\r\\\\n             */\\\\r\\\\n            winPhaseId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about a workflow.\\\\r\\\\n         */\\\\r\\\\n        type WorkflowInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique workflow identifier.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the workflow.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Workflow description.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date the workflow was created.\\\\r\\\\n             */\\\\r\\\\n            createdDate?: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing a list of workflows and pagination info.\\\\r\\\\n         */\\\\r\\\\n        type WorkflowList = {\\\\r\\\\n            /**\\\\r\\\\n             * List of workflows matching the list options.\\\\r\\\\n             */\\\\r\\\\n            items: wix_crm_backend.workflows.WorkflowInfo[];\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in the current results page.\\\\r\\\\n             */\\\\r\\\\n            length: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of workflows in the site.\\\\r\\\\n             */\\\\r\\\\n            totalCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items returned per page with the current list options.\\\\r\\\\n             */\\\\r\\\\n            pageSize: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of results pages.\\\\r\\\\n             */\\\\r\\\\n            totalPages: number;\\\\r\\\\n            /**\\\\r\\\\n             * Index of the current page. Indices are zero-based.\\\\r\\\\n             */\\\\r\\\\n            currentPage: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site contact.\\\\r\\\\n     */\\\\r\\\\n    type ContactInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Contact's first name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Contact's last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Contact's image source.\\\\r\\\\n         */\\\\r\\\\n        picture: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's email addresses.\\\\r\\\\n         */\\\\r\\\\n        emails: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Email address the contact who is also\\\\r\\\\n         *  a member uses to log into the system.\\\\r\\\\n         */\\\\r\\\\n        loginEmail: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's phone numbers.\\\\r\\\\n         */\\\\r\\\\n        phones: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)\\\\r\\\\n         *  are used to organize contacts. When setting the `labels` property, you can\\\\r\\\\n         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         */\\\\r\\\\n        labels: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Contact's language.\\\\r\\\\n         */\\\\r\\\\n        language: string;\\\\r\\\\n        /**\\\\r\\\\n         * Any\\\\r\\\\n         *  number of custom fields. [Customs fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\\\\r\\\\n         *  are used to store additional information about your site's contacts. When\\\\r\\\\n         *  setting a custom field, use key:value pairs where the key matches the names\\\\r\\\\n         *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         *  You can only set values for custom fields that already exist in the Contacts\\\\r\\\\n         *  application.\\\\r\\\\n         */\\\\r\\\\n        customFields: string | number | Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains contact deletion options.\\\\r\\\\n     */\\\\r\\\\n    type DeleteOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Whether to perform the deletion when the contact is also a member. Defaults to `false`.\\\\r\\\\n         */\\\\r\\\\n        deleteMembers: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_data {\\\\r\\\\n    /**\\\\r\\\\n     * Hooks that can be added to wix-data operations.\\\\r\\\\n     */\\\\r\\\\n    interface Hooks {\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after a `count()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterCount(count: number, context: wix_data.Hooks.HookContext): Promise<number> & number;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after a `get()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterGet(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after an `insert()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterInsert(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after a `find` operation, for each of the items in the query results.\\\\r\\\\n         */\\\\r\\\\n        afterQuery(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after a `remove()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterRemove(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered after an `update()` operation.\\\\r\\\\n         */\\\\r\\\\n        afterUpdate(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before a `count()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeCount(query: wix_data.WixDataQuery, context: wix_data.Hooks.HookContext): Promise<wix_data.WixDataQuery> & wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before a `get()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeGet(itemId: string, context: wix_data.Hooks.HookContext): Promise<string> & string;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before an `insert()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeInsert(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before a `find()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeQuery(query: wix_data.WixDataQuery, context: wix_data.Hooks.HookContext): Promise<wix_data.WixDataQuery> & wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is called before a `remove()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeRemove(itemId: string, context: wix_data.Hooks.HookContext): Promise<string> & string;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered before an `update()` operation.\\\\r\\\\n         */\\\\r\\\\n        beforeUpdate(item: any, context: wix_data.Hooks.HookContext): Promise<any> & any;\\\\r\\\\n        /**\\\\r\\\\n         * A hook that is triggered on any error or rejected Promise from any of the wix-data operations.\\\\r\\\\n         */\\\\r\\\\n        onFailure(error: Error, context: wix_data.Hooks.HookContext): Promise<any>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Hooks {\\\\r\\\\n        /**\\\\r\\\\n         * An object that contains contextual information about the hook being called.\\\\r\\\\n         */\\\\r\\\\n        type HookContext = {\\\\r\\\\n            /**\\\\r\\\\n             * The name of the collection the hook affects.\\\\r\\\\n             */\\\\r\\\\n            collectionName: string;\\\\r\\\\n            /**\\\\r\\\\n             * The current site user id. If no user is logged in to the site it may be null.\\\\r\\\\n             */\\\\r\\\\n            userId: string;\\\\r\\\\n            /**\\\\r\\\\n             * The permissions role of the current user. Possibilities are: `anonymous`, `siteMember`,  `siteOwner` and `dataOwner`.\\\\r\\\\n             */\\\\r\\\\n            userRole: string;\\\\r\\\\n            /**\\\\r\\\\n             * The item stored in the database before an `update` or `delete` operation.\\\\r\\\\n             * Will be `undefined` for all other operations.\\\\r\\\\n             */\\\\r\\\\n            currentItem: any;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Provides functionality for performing aggregations on collection data.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataAggregate {\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to an aggregation, sorting by the items or groups by the specified properties in ascending order.\\\\r\\\\n         */\\\\r\\\\n        ascending(propertyName: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to only contain the average value from each aggregation group.\\\\r\\\\n         */\\\\r\\\\n        avg(propertyName: string, projectedName?: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to contain the item count of each group in the aggregation.\\\\r\\\\n         */\\\\r\\\\n        count(): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to an aggregation, sorting by the items or groups by the specified properties in descending order.\\\\r\\\\n         */\\\\r\\\\n        descending(propertyName: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Filters out items from being used in an aggregation.\\\\r\\\\n         */\\\\r\\\\n        filter(filter: wix_data.WixDataFilter): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Groups items together in an aggregation.\\\\r\\\\n         */\\\\r\\\\n        group(propertyName: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Filters out groups from being returned from an aggregation.\\\\r\\\\n         */\\\\r\\\\n        having(filter: wix_data.WixDataFilter): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Limits the number of items or groups the aggregation returns.\\\\r\\\\n         */\\\\r\\\\n        limit(limit: number): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to only contain the maximum value from each aggregation group.\\\\r\\\\n         */\\\\r\\\\n        max(propertyName: string, projectedName?: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to only contain the minimum value from each aggregation group.\\\\r\\\\n         */\\\\r\\\\n        min(propertyName: string, projectedName?: string): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Runs the aggregation and returns the results.\\\\r\\\\n         */\\\\r\\\\n        run(): Promise<wix_data.WixDataAggregateResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the number of items or groups to skip before returning aggregation results.\\\\r\\\\n         */\\\\r\\\\n        skip(skip: number): wix_data.WixDataAggregate;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a `WixDataAggregate` to contain the sum from each aggregation group.\\\\r\\\\n         */\\\\r\\\\n        sum(propertyName: string, projectedName?: string): wix_data.WixDataAggregate;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The results of an aggregation, containing the aggregated values.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataAggregateResult {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the aggregated values.\\\\r\\\\n         */\\\\r\\\\n        readonly items: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of values in the aggregate results.\\\\r\\\\n         */\\\\r\\\\n        readonly length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the aggregation has more results.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the next page of aggregate results.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<wix_data.WixDataAggregateResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface WixDataFilter {\\\\r\\\\n        /**\\\\r\\\\n         * Adds an `and` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        and(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is within a specified range.\\\\r\\\\n         */\\\\r\\\\n        between(propertyName: string, rangeStart: string | number | Date, rangeEnd: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value contains a specified string.\\\\r\\\\n         */\\\\r\\\\n        contains(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value ends with a specified string.\\\\r\\\\n         */\\\\r\\\\n        endsWith(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value equals the specified value.\\\\r\\\\n         */\\\\r\\\\n        eq(propertyName: string, value: any): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is greater than or equal to the specified value.\\\\r\\\\n         */\\\\r\\\\n        ge(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is greater than the specified value.\\\\r\\\\n         */\\\\r\\\\n        gt(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property values equals all of the specified `value` parameters.\\\\r\\\\n         */\\\\r\\\\n        hasAll(propertyName: string, value: string | number | Date | any[]): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value equals any of the specified `value` parameters.\\\\r\\\\n         */\\\\r\\\\n        hasSome(propertyName: string, value: string | number | Date | any[]): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property does not exist or does not have any value.\\\\r\\\\n         */\\\\r\\\\n        isEmpty(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property has any value.\\\\r\\\\n         */\\\\r\\\\n        isNotEmpty(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is less than or equal to the specified value.\\\\r\\\\n         */\\\\r\\\\n        le(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is less than the specified value.\\\\r\\\\n         */\\\\r\\\\n        lt(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value does not equal the specified value.\\\\r\\\\n         */\\\\r\\\\n        ne(propertyName: string, value: any): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a `not` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        not(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an `or` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        or(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value starts with a specified string.\\\\r\\\\n         */\\\\r\\\\n        startsWith(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Contains functionality for refining a data query.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataQuery {\\\\r\\\\n        /**\\\\r\\\\n         * Adds an `and` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        and(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to a query or sort, sorting by the specified properties in ascending order.\\\\r\\\\n         */\\\\r\\\\n        ascending(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is within a specified range.\\\\r\\\\n         */\\\\r\\\\n        between(propertyName: string, rangeStart: string | number | Date, rangeEnd: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value contains a specified string.\\\\r\\\\n         */\\\\r\\\\n        contains(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of items that match the query.\\\\r\\\\n         */\\\\r\\\\n        count(options?: wix_data.WixDataOptions): Promise<number>;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to a query or sort, sorting by the specified properties in descending order.\\\\r\\\\n         */\\\\r\\\\n        descending(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the distinct values that match the query, without duplicates.\\\\r\\\\n         */\\\\r\\\\n        distinct(propertyName: string, options?: wix_data.WixDataOptions): Promise<wix_data.WixDataQueryResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value ends with a specified string.\\\\r\\\\n         */\\\\r\\\\n        endsWith(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value equals the specified value.\\\\r\\\\n         */\\\\r\\\\n        eq(propertyName: string, value: any): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the items that match the query.\\\\r\\\\n         */\\\\r\\\\n        find(options?: wix_data.WixDataOptions): Promise<wix_data.WixDataQueryResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is greater than or equal to the specified value.\\\\r\\\\n         */\\\\r\\\\n        ge(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is greater than the specified value.\\\\r\\\\n         */\\\\r\\\\n        gt(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property values equals all of the specified `value` parameters.\\\\r\\\\n         */\\\\r\\\\n        hasAll(propertyName: string, value: string | number | Date | any[]): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value equals any of the specified `value` parameters.\\\\r\\\\n         */\\\\r\\\\n        hasSome(propertyName: string, value: string | number | Date | any[]): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Includes referenced items for the specified properties in a query's results.\\\\r\\\\n         */\\\\r\\\\n        include(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property does not exist or does not have any value.\\\\r\\\\n         */\\\\r\\\\n        isEmpty(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property has any value.\\\\r\\\\n         */\\\\r\\\\n        isNotEmpty(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is less than or equal to the specified value.\\\\r\\\\n         */\\\\r\\\\n        le(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Limits the number of items the query returns.\\\\r\\\\n         */\\\\r\\\\n        limit(limit: number): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value is less than the specified value.\\\\r\\\\n         */\\\\r\\\\n        lt(propertyName: string, value: string | number | Date): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value does not equal the specified value.\\\\r\\\\n         */\\\\r\\\\n        ne(propertyName: string, value: any): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a `not` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        not(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds an `or` condition to the query or filter.\\\\r\\\\n         */\\\\r\\\\n        or(query: wix_data.WixDataQuery): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the number of items to skip before returning query results.\\\\r\\\\n         */\\\\r\\\\n        skip(skip: number): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a query or filter to match items whose specified property value starts with a specified string.\\\\r\\\\n         */\\\\r\\\\n        startsWith(propertyName: string, string: string): wix_data.WixDataQuery;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The results of a data reference query, containing the retrieved items.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataQueryReferencedResult {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the items that match the reference query.\\\\r\\\\n         */\\\\r\\\\n        readonly items: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of items that match the reference query.\\\\r\\\\n         */\\\\r\\\\n        readonly totalCount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the reference query has more results.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the reference query has previous results.\\\\r\\\\n         */\\\\r\\\\n        hasPrev(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the next page of reference query results.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<wix_data.WixDataQueryReferencedResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the previous page of reference query results.\\\\r\\\\n         */\\\\r\\\\n        prev(): Promise<wix_data.WixDataQueryReferencedResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The results of a data query, containing the retrieved items.\\\\r\\\\n     */\\\\r\\\\n    interface WixDataQueryResult {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the index of the current results page number.\\\\r\\\\n         */\\\\r\\\\n        readonly currentPage: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the items that match the query.\\\\r\\\\n         */\\\\r\\\\n        readonly items: any[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of items in the current results page.\\\\r\\\\n         */\\\\r\\\\n        readonly length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the query page size.\\\\r\\\\n         */\\\\r\\\\n        readonly pageSize: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if referenced items have been trimmed from the results.\\\\r\\\\n         */\\\\r\\\\n        readonly partialIncludes: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the query used to get the current results.\\\\r\\\\n         */\\\\r\\\\n        readonly query: wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of items that match the query.\\\\r\\\\n         */\\\\r\\\\n        readonly totalCount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of pages the query produced.\\\\r\\\\n         */\\\\r\\\\n        readonly totalPages: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the query has more results.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates the query has previous results.\\\\r\\\\n         */\\\\r\\\\n        hasPrev(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the next page of query results.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<wix_data.WixDataQueryResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the previous page of query results.\\\\r\\\\n         */\\\\r\\\\n        prev(): Promise<wix_data.WixDataQueryResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    interface WixDataSort {\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to a query or sort, sorting by the specified properties in ascending order.\\\\r\\\\n         */\\\\r\\\\n        ascending(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n        /**\\\\r\\\\n         * Adds a sort to a query or sort, sorting by the specified properties in descending order.\\\\r\\\\n         */\\\\r\\\\n        descending(propertyName: string): wix_data.WixDataQuery;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by Wix Data bulk operations.\\\\r\\\\n     */\\\\r\\\\n    type WixDataBulkResult = {\\\\r\\\\n        /**\\\\r\\\\n         * The number of inserted items.\\\\r\\\\n         */\\\\r\\\\n        inserted: number;\\\\r\\\\n        /**\\\\r\\\\n         * The number of updated items.\\\\r\\\\n         */\\\\r\\\\n        updated: number;\\\\r\\\\n        /**\\\\r\\\\n         * The number of skipped items.\\\\r\\\\n         */\\\\r\\\\n        skipped: number;\\\\r\\\\n        /**\\\\r\\\\n         * List of IDs of inserted items.\\\\r\\\\n         */\\\\r\\\\n        insertedItemIds: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of errors.\\\\r\\\\n         */\\\\r\\\\n        errors: Error[];\\\\r\\\\n        /**\\\\r\\\\n         * The number of removed items.\\\\r\\\\n         */\\\\r\\\\n        removed: number;\\\\r\\\\n        /**\\\\r\\\\n         * List of IDs of removed items.\\\\r\\\\n         */\\\\r\\\\n        removedItemIds: string[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that you pass as the `options` parameter that modifies how an operation is performed.\\\\r\\\\n     */\\\\r\\\\n    type WixDataOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Prevents permission checks from running for the operation.\\\\r\\\\n         */\\\\r\\\\n        suppressAuth?: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Prevents hooks from running for the operation.\\\\r\\\\n         */\\\\r\\\\n        suppressHooks?: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object for controlling the order of returned referenced items.\\\\r\\\\n     */\\\\r\\\\n    type WixDataQueryReferencedOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * The order of the returned referenced items. Either \\\\\\\"asc\\\\\\\" or \\\\\\\"desc\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        order: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_fetch {\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by the `fetch()` function representing\\\\r\\\\n     *  an HTTP response to a fetch.\\\\r\\\\n     */\\\\r\\\\n    interface WixFetchResponse {\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the body of the response has been used yet.\\\\r\\\\n         */\\\\r\\\\n        readonly bodyUsed: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * The response headers.\\\\r\\\\n         */\\\\r\\\\n        readonly headers: any;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the request was successful, meaning its `status` is in the range 2xx.\\\\r\\\\n         */\\\\r\\\\n        readonly ok: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * The response [status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).\\\\r\\\\n         */\\\\r\\\\n        readonly status: number;\\\\r\\\\n        /**\\\\r\\\\n         * The response [status message](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).\\\\r\\\\n         */\\\\r\\\\n        readonly statusText: string;\\\\r\\\\n        /**\\\\r\\\\n         * The response URL.\\\\r\\\\n         */\\\\r\\\\n        readonly url: string;\\\\r\\\\n        /**\\\\r\\\\n         * Reads the response body as JSON.\\\\r\\\\n         */\\\\r\\\\n        json(): Promise<any>;\\\\r\\\\n        /**\\\\r\\\\n         * Reads the response body as a string.\\\\r\\\\n         */\\\\r\\\\n        text(): Promise<string>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used by the `fetch()` function representing an HTTPS request.\\\\r\\\\n     */\\\\r\\\\n    type WixFetchRequest = {\\\\r\\\\n        /**\\\\r\\\\n         * The [HTTP method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods) to use (if omitted, defaults to `\\\\\\\"GET\\\\\\\"`).\\\\r\\\\n         */\\\\r\\\\n        method: string;\\\\r\\\\n        /**\\\\r\\\\n         * The request headers.\\\\r\\\\n         */\\\\r\\\\n        headers: any;\\\\r\\\\n        /**\\\\r\\\\n         * The request body.\\\\r\\\\n         */\\\\r\\\\n        body: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_marketing_backend {\\\\r\\\\n    /**\\\\r\\\\n     * The Coupons API is used to manage your site's coupons.\\\\r\\\\n     */\\\\r\\\\n    interface coupons {\\\\r\\\\n        /**\\\\r\\\\n         * Creates a new coupon.\\\\r\\\\n         */\\\\r\\\\n        createCoupon(couponInfo: wix_marketing_backend.coupons.CouponInfo): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Deletes an existing coupon.\\\\r\\\\n         */\\\\r\\\\n        deleteCoupon(couponId: string): Promise<void>;\\\\r\\\\n        /**\\\\r\\\\n         * Updates the specified fields of an existing coupon.\\\\r\\\\n         */\\\\r\\\\n        updateCouponFields(couponId: string, couponInfo: wix_marketing_backend.coupons.CouponInfo): Promise<void>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace coupons {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information for creating or updating a coupon.\\\\r\\\\n         */\\\\r\\\\n        type CouponInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of coupon.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon code. Must be unique for all coupons in your site. Maximum 20 characters.\\\\r\\\\n             */\\\\r\\\\n            code: string;\\\\r\\\\n            /**\\\\r\\\\n             * Start date and time of coupon.\\\\r\\\\n             */\\\\r\\\\n            startTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * End date and time of coupon.\\\\r\\\\n             */\\\\r\\\\n            expirationTime?: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The maximum number of times a coupon can be used. Note that multiple purchases by the same customer or purchases by different customers are both counted toward usage limit.\\\\r\\\\n             */\\\\r\\\\n            usageLimit?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the coupon is limited to 1 discount per order. If true and a customer pays for multiple items the coupon applies to, only the lowest priced item is discounted. Coupons with a `bookings` [`namespace`](#CouponScope) are always limited to one item.\\\\r\\\\n             */\\\\r\\\\n            limitedToOneItem?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the coupon is currently active.\\\\r\\\\n             */\\\\r\\\\n            active?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * The coupon is only applicable when the order subtotal is over this amount.\\\\r\\\\n             */\\\\r\\\\n            minimumSubtotal?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Scope of the coupon. When no scope is defined, the coupon applies to all items in all [`namespaces`](#CouponScope) in the site.\\\\r\\\\n             */\\\\r\\\\n            scope?: wix_marketing_backend.coupons.CouponScope;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Free products when making a purchase. Currently only supported for coupons with a `stores` [`namespace`](#CouponScope).\\\\r\\\\n             */\\\\r\\\\n            buyXGetY?: wix_marketing_backend.coupons.CouponTypeBuyXGetY;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Free shipping. If true, the coupon applies to all items in all [`namespaces`](#CouponScope) in the site.\\\\r\\\\n             */\\\\r\\\\n            freeShipping?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Fixed price discount.\\\\r\\\\n             */\\\\r\\\\n            moneyOffAmount?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Discount as a percentage.\\\\r\\\\n             */\\\\r\\\\n            percentOffRate?: number;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon type: Specific sale price. Currently only supported for coupons with a `stores` [`namespace`](#CouponScope).\\\\r\\\\n             */\\\\r\\\\n            fixedPriceAmount?: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing the scope of a coupon.\\\\r\\\\n         */\\\\r\\\\n        type CouponScope = {\\\\r\\\\n            /**\\\\r\\\\n             * Wix application for which the coupon is applicable.\\\\r\\\\n             * One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"stores\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"bookings\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"events\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            namespace: string;\\\\r\\\\n            /**\\\\r\\\\n             * Group within a `namespace` for which the coupon is applicable. If no group is specified, the coupon applies to all items in the namespace. `group` is required in some cases.\\\\r\\\\n             */\\\\r\\\\n            group?: wix_marketing_backend.coupons.ScopeGroup;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object defining the number of purchases required and the number of free items received for a \\\\\\\"Buy X Get Y\\\\\\\" coupon type.\\\\r\\\\n         */\\\\r\\\\n        type CouponTypeBuyXGetY = {\\\\r\\\\n            /**\\\\r\\\\n             * Number of purchased items required to receive free items.\\\\r\\\\n             */\\\\r\\\\n            x: number;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items received for free if required number of items were purchased.\\\\r\\\\n             */\\\\r\\\\n            y: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object specifying the group within a [`CouponScope`](#CouponScope)\\\\r\\\\n         * `namespace` for which the coupon is applicable.\\\\r\\\\n         */\\\\r\\\\n        type ScopeGroup = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the group.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the specific item in the group for which the coupon is applicable. If no `entityId` is specified, the coupon applies to all items in the group. In some cases when a group is specified, an `entityId` is required.\\\\r\\\\n             */\\\\r\\\\n            entityId?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_media_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events fired by the Wix Media API.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a file has completed uploading.\\\\r\\\\n         */\\\\r\\\\n        onFileUploaded(event: wix_media_backend.Events.FileEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a video file has completed transcoding.\\\\r\\\\n         */\\\\r\\\\n        onVideoTranscoded(event: wix_media_backend.Events.FileEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an uploaded file and upload context.\\\\r\\\\n         */\\\\r\\\\n        type FileEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Information about the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            fileInfo: wix_media_backend.mediaManager.FileInfo;\\\\r\\\\n            /**\\\\r\\\\n             * An object of key:value string pairs that was sent\\\\r\\\\n             *  when the file was uploaded.\\\\r\\\\n             */\\\\r\\\\n            context: any;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The `mediaManager` module contains functionality for working with\\\\r\\\\n     *  the media that is stored in your site's Media Manager.\\\\r\\\\n     */\\\\r\\\\n    interface mediaManager {\\\\r\\\\n        /**\\\\r\\\\n         * Gets a file's information from the Media Manager by name or URL.\\\\r\\\\n         */\\\\r\\\\n        getFileInfo(fileName: string): Promise<wix_media_backend.mediaManager.FileInfo>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a file's URL from the Media Manager.\\\\r\\\\n         */\\\\r\\\\n        getFileUrl(fileName: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets an upload URL and a corresponding upload token.\\\\r\\\\n         */\\\\r\\\\n        getUploadUrl(path: string, options: wix_media_backend.mediaManager.UploadOptions): Promise<wix_media_backend.mediaManager.UploadUrl>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets a video file's playback URL from the Media Manager.\\\\r\\\\n         */\\\\r\\\\n        getVideoPlaybackUrl(fileName: string, format: string): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Imports a file to the Media Manager from a URL.\\\\r\\\\n         */\\\\r\\\\n        importFile(path: string, url: string, options: wix_media_backend.mediaManager.UploadOptions): Promise<wix_media_backend.mediaManager.FileInfo>;\\\\r\\\\n        /**\\\\r\\\\n         * Uploads a file to the Media Manager.\\\\r\\\\n         */\\\\r\\\\n        upload(path: string, fileContent: Buffer, fileName: string, options: wix_media_backend.mediaManager.UploadOptions): Promise<wix_media_backend.mediaManager.FileInfo>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace mediaManager {\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about the file that was uploaded.\\\\r\\\\n         */\\\\r\\\\n        type FileInfo = {\\\\r\\\\n            /**\\\\r\\\\n             * File name of the file that was uploaded. This name\\\\r\\\\n             *  is used when calling the [`getFileInfo()`](#getFileInfo), [`getFileUrl()`](#getFileUrl),\\\\r\\\\n             *  and [`getVideoPlaybackUrl()`](#getVideoPlaybackUrl) functions.\\\\r\\\\n             */\\\\r\\\\n            fileName: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the file.\\\\r\\\\n             */\\\\r\\\\n            fileUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * File hash.\\\\r\\\\n             */\\\\r\\\\n            hash: string;\\\\r\\\\n            /**\\\\r\\\\n             * Size of the uploaded file in bytes.\\\\r\\\\n             */\\\\r\\\\n            sizeInBytes: number;\\\\r\\\\n            /**\\\\r\\\\n             * Mime type of\\\\r\\\\n             *  the uploaded file.\\\\r\\\\n             */\\\\r\\\\n            mimeType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Type of the file that was uploaded.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"audio\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"document\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"image\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"shape\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"video\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            mediaType: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the link to the uploaded file is\\\\r\\\\n             *  public or private. Private links require a token to be used.\\\\r\\\\n             */\\\\r\\\\n            isPrivate: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the uploaded files parent folder.\\\\r\\\\n             */\\\\r\\\\n            parentFolderId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the uploaded file. This is the name\\\\r\\\\n             *  that appears in the Media Manager.\\\\r\\\\n             */\\\\r\\\\n            originalFileName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the file that was uploaded.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"IN-DOWNLOAD-QUEUE\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"IN-QUEUE\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"READY\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            opStatus: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL where the file was uploaded from.\\\\r\\\\n             */\\\\r\\\\n            sourceURL: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the file's icon.\\\\r\\\\n             */\\\\r\\\\n            iconUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of labels assigned to the file by the Media Manager.\\\\r\\\\n             */\\\\r\\\\n            labels: string[];\\\\r\\\\n            /**\\\\r\\\\n             * File height.\\\\r\\\\n             */\\\\r\\\\n            height: string;\\\\r\\\\n            /**\\\\r\\\\n             * File width.\\\\r\\\\n             */\\\\r\\\\n            width: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about the media options of a file to upload.\\\\r\\\\n         */\\\\r\\\\n        type MediaOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Type of the file to upload.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"audio\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"document\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"image\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"shape\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"video\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            mediaType?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Mime type of\\\\r\\\\n             *  the file to import. The specified value must match the actual mime type of\\\\r\\\\n             *  the file's content.\\\\r\\\\n             */\\\\r\\\\n            mimeType?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about the metadata options of a file to upload.\\\\r\\\\n         */\\\\r\\\\n        type MetadataOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Whether the link to the uploaded file will\\\\r\\\\n             *  be public or private. Private links require a token to be used. Defaults to\\\\r\\\\n             *  `false`.\\\\r\\\\n             */\\\\r\\\\n            isPrivate?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates if the file was uploaded by a\\\\r\\\\n             *  site visitor. Files uploaded by visitors are tagged in the Media Manager as\\\\r\\\\n             *  being added by a visitor. Defaults to `true`.\\\\r\\\\n             */\\\\r\\\\n            isVisitorUpload?: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * An object of key:value string pairs that is sent\\\\r\\\\n             *  back in the [`onFileUploaded()`](wix-media-backend.Events.html#onFileUploaded)\\\\r\\\\n             *  event.\\\\r\\\\n             */\\\\r\\\\n            context?: any;\\\\r\\\\n            /**\\\\r\\\\n             * The name of the file as it will appear in the Media Manager\\\\r\\\\n             */\\\\r\\\\n            fileName?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about the options of a file to upload.\\\\r\\\\n         */\\\\r\\\\n        type UploadOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * Media options of the file to upload.\\\\r\\\\n             */\\\\r\\\\n            mediaOptions?: wix_media_backend.mediaManager.MediaOptions;\\\\r\\\\n            /**\\\\r\\\\n             * Metadata options of the file to upload.\\\\r\\\\n             */\\\\r\\\\n            metadataOptions?: wix_media_backend.mediaManager.MetadataOptions;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about an upload URL.\\\\r\\\\n         */\\\\r\\\\n        type UploadUrl = {\\\\r\\\\n            /**\\\\r\\\\n             * The URL to POST a file to.\\\\r\\\\n             */\\\\r\\\\n            uploadUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * The token to use with the file POST.\\\\r\\\\n             */\\\\r\\\\n            uploadToken: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_pay_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events fired by payments created using the Pay API.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a payment's transaction status is changed.\\\\r\\\\n         */\\\\r\\\\n        onPaymentUpdate(event: wix_pay_backend.Events.PaymentUpdateEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a payment update.\\\\r\\\\n         */\\\\r\\\\n        type PaymentUpdateEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * The payment's information.\\\\r\\\\n             */\\\\r\\\\n            payment: wix_pay_backend.Payment;\\\\r\\\\n            /**\\\\r\\\\n             * Payment status.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"Successful\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Pending\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Failed\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Chargeback\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Refunded\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Offline\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"PartiallyRefunded\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Cancelled\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"Undefined\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the payment transaction.\\\\r\\\\n             */\\\\r\\\\n            transactionId: string;\\\\r\\\\n            /**\\\\r\\\\n             * User information.\\\\r\\\\n             */\\\\r\\\\n            userInfo: wix_pay_backend.PaymentUserInfo;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment.\\\\r\\\\n     */\\\\r\\\\n    type Payment = {\\\\r\\\\n        /**\\\\r\\\\n         * Payment transaction ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment total amount.\\\\r\\\\n         */\\\\r\\\\n        amount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment currency. A three-letter\\\\r\\\\n         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_pay_backend.PaymentItem[];\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information about the user.\\\\r\\\\n         */\\\\r\\\\n        userInfo: wix_pay_backend.PaymentUserInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing information for creating a payment.\\\\r\\\\n     */\\\\r\\\\n    type PaymentInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Total payment amount. Must equal\\\\r\\\\n         *  the sum of the `price` properties in the `items` list while taking the\\\\r\\\\n         *  `quantity` into account.\\\\r\\\\n         */\\\\r\\\\n        amount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment currency. A three-letter\\\\r\\\\n         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code. Defaults to\\\\r\\\\n         *  the currency defined by the site's [Regional Settings](https://support.wix.com/en/article/changing-your-sites-regional-settings).\\\\r\\\\n         */\\\\r\\\\n        currency?: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of payment items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_pay_backend.PaymentItem;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information about the user. It will be used to prefill\\\\r\\\\n         *  the user info form during the payment process.\\\\r\\\\n         */\\\\r\\\\n        userInfo?: wix_pay_backend.PaymentUserInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment item.\\\\r\\\\n     */\\\\r\\\\n    type PaymentItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Payment item name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment item price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment item quantity.\\\\r\\\\n         */\\\\r\\\\n        quantity: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing information about the user.\\\\r\\\\n     */\\\\r\\\\n    type PaymentUserInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * User's first name. Value is `null` if\\\\r\\\\n         *  there is no first name information.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's last name. Value is `null` if\\\\r\\\\n         *  there is no last name information.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's phone number. Value is `null` if\\\\r\\\\n         *  there is no phone number information.\\\\r\\\\n         */\\\\r\\\\n        phone: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's email address. Value is `null` if\\\\r\\\\n         *  there is no email address information.\\\\r\\\\n         */\\\\r\\\\n        email: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's country code. A three-letter\\\\r\\\\n         *  [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) country code. Value\\\\r\\\\n         *  is `null` if there is no country information.\\\\r\\\\n         */\\\\r\\\\n        countryCode: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_router {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an incoming page request received by a router.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterRequest {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the base URL of the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly baseUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the form factor of the device used to make the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly formFactor: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the remote IP address of the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly ip: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the names of the pages associated with this router.\\\\r\\\\n         */\\\\r\\\\n        readonly pages: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the path of the router request URL.\\\\r\\\\n         */\\\\r\\\\n        readonly path: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the router prefix of the router request URL.\\\\r\\\\n         */\\\\r\\\\n        readonly prefix: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the protocol of the router request URL.\\\\r\\\\n         */\\\\r\\\\n        readonly protocol: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the query fields and values of the request URL.\\\\r\\\\n         */\\\\r\\\\n        readonly query: any;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the `referrer` header from the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly referrer: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the full URL of the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly url: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the details of the current site user who is logged in.\\\\r\\\\n         */\\\\r\\\\n        readonly user: wix_router.WixRouterUser;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the `user-agent` header as sent from the device used to make the router request.\\\\r\\\\n         */\\\\r\\\\n        readonly userAgent: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a response to a request received by a router.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterResponse {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the data to pass with the response.\\\\r\\\\n         */\\\\r\\\\n        data: any;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the members to be written to the HTML head of the page.\\\\r\\\\n         */\\\\r\\\\n        head: wix_router.WixRouterResponse.HeadOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the response message to be used when responding with status codes 4xx and 5xx.\\\\r\\\\n         */\\\\r\\\\n        message: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the page to route to.\\\\r\\\\n         */\\\\r\\\\n        page: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the url to redirect to when responding with status codes 301 and 302.\\\\r\\\\n         */\\\\r\\\\n        redirectUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the response's HTTP status code.\\\\r\\\\n         */\\\\r\\\\n        status: number;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace WixRouterResponse {\\\\r\\\\n        /**\\\\r\\\\n         * Members of the HTML head.\\\\r\\\\n         */\\\\r\\\\n        type HeadOptions = {\\\\r\\\\n            /**\\\\r\\\\n             * The page title. Written to the `` tag.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n            /**\\\\r\\\\n             * **Deprecated: Use the new `metaTags` format instead.** \\\\r\\\\n             * \\\\r\\\\n             * The page description.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * **Deprecated: Use the new `metaTags` format instead.**\\\\r\\\\n             * \\\\r\\\\n             *  The page keywords.\\\\r\\\\n             */\\\\r\\\\n            keywords: string;\\\\r\\\\n            /**\\\\r\\\\n             * **Deprecated: Use the new `metaTags` format instead.**\\\\r\\\\n             * \\\\r\\\\n             *  Indicates whether to add a meta tag that prevents search engines from indexing the\\\\r\\\\n             *  page.\\\\r\\\\n             */\\\\r\\\\n            noIndex: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * The page's SEO-related meta tags.\\\\r\\\\n             * \\\\r\\\\n             *  When setting `og:image` meta tags, the `content` can be and external image URL\\\\r\\\\n             *  or a Media Manager image URL as described [here]($w.Image.html#src).\\\\r\\\\n             * \\\\r\\\\n             *  **Deprecated format:** An object with key:value pairs where the key is the meta tag name\\\\r\\\\n             *  and the value is the content.\\\\r\\\\n             */\\\\r\\\\n            metaTags: wix_router.WixRouterResponse.MetaTag[];\\\\r\\\\n            /**\\\\r\\\\n             * The page's SEO-related link tags\\\\r\\\\n             *  which provide additional SEO information about the page. For example, you can set a\\\\r\\\\n             *  link to a canonical or alternate version of the page.\\\\r\\\\n             */\\\\r\\\\n            links: wix_router.WixRouterResponse.Link[];\\\\r\\\\n            /**\\\\r\\\\n             * The page's structured data, which helps search engines \\\\r\\\\n             *  understand more about the page and your business so they can display a richer snippet of the\\\\r\\\\n             *  page in search results.\\\\r\\\\n             */\\\\r\\\\n            structuredData: any[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a link tag.\\\\r\\\\n         */\\\\r\\\\n        type Link = {\\\\r\\\\n            /**\\\\r\\\\n             * The relationship of the linked resource to the current page.\\\\r\\\\n             */\\\\r\\\\n            rel?: string;\\\\r\\\\n            /**\\\\r\\\\n             * The URL of the linked resource.\\\\r\\\\n             */\\\\r\\\\n            href?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a meta tag.\\\\r\\\\n         */\\\\r\\\\n        type MetaTag = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the meta tag. Either `name` or `property` are required.\\\\r\\\\n             */\\\\r\\\\n            name?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the meta tag property. Either `property` or `name` are required.\\\\r\\\\n             */\\\\r\\\\n            property?: string;\\\\r\\\\n            /**\\\\r\\\\n             * HTTP header that corresponds to the `content`.\\\\r\\\\n             */\\\\r\\\\n            \\\\\\\"http-equiv\\\\\\\"?: string;\\\\r\\\\n            /**\\\\r\\\\n             * Meta tag value. For `og:image` meta tags, the `content` can\\\\r\\\\n             *  be an external image URL or a Media Manager image URL as described [here]($w.Image.html#src).\\\\r\\\\n             */\\\\r\\\\n            content: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a single entry in a sitemap.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterSitemapEntry {\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets how frequently the page is likely to change.\\\\r\\\\n         */\\\\r\\\\n        changeFrequency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets when was the page data last modified.\\\\r\\\\n         */\\\\r\\\\n        lastModified: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the page name.\\\\r\\\\n         */\\\\r\\\\n        pageName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the priority of this URL relative to other URLs on your site.\\\\r\\\\n         */\\\\r\\\\n        priority: number;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the page title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the relative url of the page.\\\\r\\\\n         */\\\\r\\\\n        url: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a request for a sitemap.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterSitemapRequest {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the base URL of the request.\\\\r\\\\n         */\\\\r\\\\n        readonly baseUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Sets or gets the page name.\\\\r\\\\n         */\\\\r\\\\n        readonly pageName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the names of the pages associated with this router.\\\\r\\\\n         */\\\\r\\\\n        readonly pages: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the router prefix of the request.\\\\r\\\\n         */\\\\r\\\\n        readonly prefix: string;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the details of the current site user who is logged in.\\\\r\\\\n         */\\\\r\\\\n        readonly user: wix_router.WixRouterUser;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the current site visitor who is logged in.\\\\r\\\\n     */\\\\r\\\\n    interface WixRouterUser {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's role.\\\\r\\\\n         */\\\\r\\\\n        readonly role: string;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_site_backend {\\\\r\\\\n    /**\\\\r\\\\n     * The General Info API contains functionality for getting\\\\r\\\\n     *  the information about your business that\\\\r\\\\n     *  has been entered in the **General Info** section of your site's **Dashboard**.\\\\r\\\\n     */\\\\r\\\\n    interface generalInfo {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the physical address of the site's business.\\\\r\\\\n         */\\\\r\\\\n        getAddress(): Promise<wix_site_backend.generalInfo.GeneralInfoAddress>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site business name.\\\\r\\\\n         */\\\\r\\\\n        getBusinessName(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the business hours of the site's business.\\\\r\\\\n         */\\\\r\\\\n        getBusinessSchedule(): Promise<wix_site_backend.generalInfo.GeneralInfoSchedule>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site category information.\\\\r\\\\n         */\\\\r\\\\n        getCategories(): Promise<wix_site_backend.generalInfo.GeneralInfoCategories>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site description.\\\\r\\\\n         */\\\\r\\\\n        getDescription(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the email address used for notifications of activities on your site.\\\\r\\\\n         */\\\\r\\\\n        getEmail(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the fax number used for notifications of activities on your site.\\\\r\\\\n         */\\\\r\\\\n        getFax(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site language information.\\\\r\\\\n         */\\\\r\\\\n        getLanguage(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site locale information.\\\\r\\\\n         */\\\\r\\\\n        getLocale(): Promise<wix_site_backend.generalInfo.GeneralInfoLocale>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site logo file name.\\\\r\\\\n         */\\\\r\\\\n        getLogo(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site multilingual information.\\\\r\\\\n         */\\\\r\\\\n        getMultilingual(): Promise<wix_site_backend.generalInfo.GeneralInfoLanguages>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site payment currency information.\\\\r\\\\n         */\\\\r\\\\n        getPaymentCurrency(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the phone number used for notifications of activities on your site.\\\\r\\\\n         */\\\\r\\\\n        getPhone(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the site display name.\\\\r\\\\n         */\\\\r\\\\n        getSiteDisplayName(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets site time zone information.\\\\r\\\\n         */\\\\r\\\\n        getTimeZone(): Promise<string>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace generalInfo {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a site's corresponding physical address.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoAddress = {\\\\r\\\\n            /**\\\\r\\\\n             * Address street.\\\\r\\\\n             */\\\\r\\\\n            street: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address city.\\\\r\\\\n             */\\\\r\\\\n            city: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address state.\\\\r\\\\n             */\\\\r\\\\n            state: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address zip code.\\\\r\\\\n             */\\\\r\\\\n            zip: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address description.\\\\r\\\\n             */\\\\r\\\\n            hint: wix_site_backend.generalInfo.GeneralInfoAddressHint;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the business has a physical address.\\\\r\\\\n             */\\\\r\\\\n            isPhysical: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Address as formatted by Google.\\\\r\\\\n             */\\\\r\\\\n            googleFormattedAddress: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address street number.\\\\r\\\\n             */\\\\r\\\\n            streetNumber: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address apartment number.\\\\r\\\\n             */\\\\r\\\\n            apartmentNumber: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address coordinates.\\\\r\\\\n             */\\\\r\\\\n            coordinates: wix_site_backend.generalInfo.GeneralInfoAddressCoordinates;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the coordinates of the site address.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoAddressCoordinates = {\\\\r\\\\n            /**\\\\r\\\\n             * Address latitude.\\\\r\\\\n             */\\\\r\\\\n            latitude: string;\\\\r\\\\n            /**\\\\r\\\\n             * Address longitude.\\\\r\\\\n             */\\\\r\\\\n            longitude: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a description of a site's address.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoAddressHint = {\\\\r\\\\n            /**\\\\r\\\\n             * Address description.\\\\r\\\\n             */\\\\r\\\\n            text: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether description is shown before, after, or instead of the actual address.\\\\r\\\\n             */\\\\r\\\\n            placement: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the categories that describe your site's business.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoCategories = {\\\\r\\\\n            /**\\\\r\\\\n             * Primary site category.\\\\r\\\\n             */\\\\r\\\\n            primary: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of secondary site categories.\\\\r\\\\n             */\\\\r\\\\n            secondary: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the site's languages.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoLanguages = {\\\\r\\\\n            /**\\\\r\\\\n             * List supported languages.\\\\r\\\\n             */\\\\r\\\\n            supportedLanguages: wix_site_backend.generalInfo.GeneralInfoLanguagesSupported[];\\\\r\\\\n            /**\\\\r\\\\n             * Whether to automatically redirect users based on their browser's settings.\\\\r\\\\n             */\\\\r\\\\n            autoRedirect: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the site's supported languages.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoLanguagesSupported = {\\\\r\\\\n            /**\\\\r\\\\n             * Language code.\\\\r\\\\n             */\\\\r\\\\n            languageCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Language locale.\\\\r\\\\n             */\\\\r\\\\n            locale: wix_site_backend.generalInfo.GeneralInfoLocale;\\\\r\\\\n            /**\\\\r\\\\n             * Country Code for the Language icon.\\\\r\\\\n             */\\\\r\\\\n            countryCode: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the language is the primary language.\\\\r\\\\n             */\\\\r\\\\n            isPrimary: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a site's locale.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoLocale = {\\\\r\\\\n            /**\\\\r\\\\n             * Site country.\\\\r\\\\n             */\\\\r\\\\n            country: string;\\\\r\\\\n            /**\\\\r\\\\n             * Site language code.\\\\r\\\\n             */\\\\r\\\\n            languageCode: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing business hours.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoSchedule = {\\\\r\\\\n            /**\\\\r\\\\n             * List of opening and closing days and times.\\\\r\\\\n             */\\\\r\\\\n            periods: wix_site_backend.generalInfo.GeneralInfoSchedulePeriods[];\\\\r\\\\n            /**\\\\r\\\\n             * Special hours.\\\\r\\\\n             */\\\\r\\\\n            specialHourPeriod: wix_site_backend.generalInfo.GeneralInfoScheduleSpecial[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing business opened and closed hours.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoSchedulePeriods = {\\\\r\\\\n            /**\\\\r\\\\n             * Business opening day.\\\\r\\\\n             */\\\\r\\\\n            openDay: string;\\\\r\\\\n            /**\\\\r\\\\n             * Business opening time.\\\\r\\\\n             */\\\\r\\\\n            openTime: string;\\\\r\\\\n            /**\\\\r\\\\n             * Business closing day.\\\\r\\\\n             */\\\\r\\\\n            closeDay: string;\\\\r\\\\n            /**\\\\r\\\\n             * Business closing time.\\\\r\\\\n             */\\\\r\\\\n            closeTime: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing special business hours.\\\\r\\\\n         */\\\\r\\\\n        type GeneralInfoScheduleSpecial = {\\\\r\\\\n            /**\\\\r\\\\n             * Special hours start date.\\\\r\\\\n             */\\\\r\\\\n            startDate: string;\\\\r\\\\n            /**\\\\r\\\\n             * Special hours end date.\\\\r\\\\n             */\\\\r\\\\n            endDate: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the business is closed.\\\\r\\\\n             */\\\\r\\\\n            isClosed: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Special hours comment.\\\\r\\\\n             */\\\\r\\\\n            comment: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_stores_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired from a Wix Store.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a visitor abandons a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        onCartAbandoned(event: wix_stores_backend.Events.CartAbandonedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a visitor completes a purchase from a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        onCartCompleted(event: wix_stores_backend.Events.CartCompletedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a visitor adds a product to a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        onCartCreated(event: wix_stores_backend.Events.CartCreatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a visitor completes a purchase from an abandoned shopping cart.\\\\r\\\\n         */\\\\r\\\\n        onCartRecovered(event: wix_stores_backend.Events.CartRecoveredEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product collection is created.\\\\r\\\\n         */\\\\r\\\\n        onCollectionCreated(event: wix_stores_backend.Events.CollectionCreatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product collection is deleted.\\\\r\\\\n         */\\\\r\\\\n        onCollectionDeleted(event: wix_stores_backend.Events.CollectionDeletedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product collection is updated.\\\\r\\\\n         */\\\\r\\\\n        onCollectionUpdated(event: wix_stores_backend.Events.CollectionUpdatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when an inventory item's information is updated.\\\\r\\\\n         */\\\\r\\\\n        onInventoryItemUpdated(event: wix_stores_backend.Events.InventoryItemUpdatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when the inventory information of a product variant is updated.\\\\r\\\\n         */\\\\r\\\\n        onInventoryVariantUpdated(event: wix_stores_backend.Events.InventoryVariantUpdatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a new order is placed.\\\\r\\\\n         */\\\\r\\\\n        onNewOrder(event: wix_stores_backend.Events.NewOrderEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product is created.\\\\r\\\\n         */\\\\r\\\\n        onProductCreated(event: wix_stores_backend.Events.ProductCreatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product is deleted.\\\\r\\\\n         */\\\\r\\\\n        onProductDeleted(event: wix_stores_backend.Events.ProductDeletedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a product is updated.\\\\r\\\\n         */\\\\r\\\\n        onProductUpdated(event: wix_stores_backend.Events.ProductUpdatedEvent): void;\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when variant information for a product is updated.\\\\r\\\\n         */\\\\r\\\\n        onVariantsUpdated(event: wix_stores_backend.Events.VariantsUpdatedEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a shopping cart that was abandoned.\\\\r\\\\n         */\\\\r\\\\n        type CartAbandonedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Time the abandoned cart was abandoned.\\\\r\\\\n             */\\\\r\\\\n            abandonTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Information about the visitor who abandoned the shopping cart.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the shopping cart that was abandoned.\\\\r\\\\n             */\\\\r\\\\n            cartId: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL of the abandoned cart's checkout page.\\\\r\\\\n             */\\\\r\\\\n            checkoutUrl: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of coupon used in the abandoned cart.\\\\r\\\\n             */\\\\r\\\\n            couponId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Time the abandoned cart was created.\\\\r\\\\n             */\\\\r\\\\n            creationTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in the abandoned cart.\\\\r\\\\n             */\\\\r\\\\n            itemsCount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Abandoned cart totals.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_stores_backend.Events.CartTotals;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a shopping cart that was completed.\\\\r\\\\n         */\\\\r\\\\n        type CartCompletedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the shopping cart that was completed.\\\\r\\\\n             */\\\\r\\\\n            cartId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Time the shopping cart was completed.\\\\r\\\\n             */\\\\r\\\\n            completedTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The buyer's information.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * Message from the buyer.\\\\r\\\\n             */\\\\r\\\\n            buyerNote: string;\\\\r\\\\n            /**\\\\r\\\\n             * Coupon applied in the shopping cart.\\\\r\\\\n             */\\\\r\\\\n            appliedCoupon: wix_stores_backend.AppliedCoupon;\\\\r\\\\n            /**\\\\r\\\\n             * Billing address.\\\\r\\\\n             */\\\\r\\\\n            billingAddress: wix_stores_backend.Address;\\\\r\\\\n            /**\\\\r\\\\n             * Currency of the shopping cart.\\\\r\\\\n             */\\\\r\\\\n            currency: wix_stores_backend.Currency;\\\\r\\\\n            /**\\\\r\\\\n             * The order's units of weight. One of: `\\\\\\\"KG\\\\\\\"`, `\\\\\\\"LB\\\\\\\"`, or `\\\\\\\"UNSPECIFIED_WEIGHT_UNIT\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            weightUnit: string;\\\\r\\\\n            /**\\\\r\\\\n             * The shopping cart's totals.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_stores_backend.OrderTotals;\\\\r\\\\n            /**\\\\r\\\\n             * The shopping cart's shipping information.\\\\r\\\\n             */\\\\r\\\\n            shippingInfo: wix_stores_backend.ShippingInfo;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a shopping cart that was created.\\\\r\\\\n         */\\\\r\\\\n        type CartCreatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the shopping cart that was created.\\\\r\\\\n             */\\\\r\\\\n            cartId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Time the shopping cart was created.\\\\r\\\\n             */\\\\r\\\\n            creationTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The buyer's information.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * The order's units of weight. One of: `\\\\\\\"KG\\\\\\\"`, `\\\\\\\"LB\\\\\\\"`, or `\\\\\\\"UNSPECIFIED_WEIGHT_UNIT\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            weightUnit: string;\\\\r\\\\n            /**\\\\r\\\\n             * Currency of the shopping cart.\\\\r\\\\n             */\\\\r\\\\n            currency: wix_stores_backend.Currency;\\\\r\\\\n            /**\\\\r\\\\n             * The shopping cart's totals.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_stores_backend.OrderTotals;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a shopping cart that was recovered.\\\\r\\\\n         */\\\\r\\\\n        type CartRecoveredEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Time the recovered cart was abandoned.\\\\r\\\\n             */\\\\r\\\\n            abandonedTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the shopping cart that was abandoned.\\\\r\\\\n             */\\\\r\\\\n            cartId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Time the recovered cart was originally created.\\\\r\\\\n             */\\\\r\\\\n            creationTime: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Time the cart was recovered.\\\\r\\\\n             */\\\\r\\\\n            recoveredTime: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the totals of a shopping cart.\\\\r\\\\n         */\\\\r\\\\n        type CartTotals = {\\\\r\\\\n            /**\\\\r\\\\n             * Subtotal of all the line items in the abandoned cart, not including shipping and tax.\\\\r\\\\n             */\\\\r\\\\n            subtotal: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total of all the line items in the abandoned cart, including shipping and tax.\\\\r\\\\n             */\\\\r\\\\n            total: number;\\\\r\\\\n            /**\\\\r\\\\n             * Total formatted with currency symbol.\\\\r\\\\n             */\\\\r\\\\n            formattedTotal: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product collection that was created.\\\\r\\\\n         */\\\\r\\\\n        type CollectionCreatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the created collection.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Collection name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Main product media item (image) URL.\\\\r\\\\n             */\\\\r\\\\n            mainMedia: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product collection that was deleted.\\\\r\\\\n         */\\\\r\\\\n        type CollectionDeletedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the delete collection.\\\\r\\\\n             */\\\\r\\\\n            collectionId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product collection that was updated.\\\\r\\\\n         */\\\\r\\\\n        type CollectionUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the updated collection.\\\\r\\\\n             */\\\\r\\\\n            collectionId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Names of the collection fields that were updated.\\\\r\\\\n             */\\\\r\\\\n            updatedFields: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an inventory item that was updated.\\\\r\\\\n         */\\\\r\\\\n        type InventoryItemUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the inventory item.\\\\r\\\\n             */\\\\r\\\\n            inventoryItemId: string;\\\\r\\\\n            /**\\\\r\\\\n             * External ID of the inventory item. For example, the product ID for\\\\\\\\n inventory items which are store products.\\\\r\\\\n             */\\\\r\\\\n            externalId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the item's inventory is tracked.\\\\r\\\\n             */\\\\r\\\\n            trackInventory: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing product variant information that was updated.\\\\r\\\\n         */\\\\r\\\\n        type InventoryVariantUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the inventory item.\\\\r\\\\n             */\\\\r\\\\n            inventoryItemId: string;\\\\r\\\\n            /**\\\\r\\\\n             * External ID of the inventory item. For example, the product ID for\\\\\\\\n inventory items which are store products.\\\\r\\\\n             */\\\\r\\\\n            externalId: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of variants that were updated.\\\\r\\\\n             */\\\\r\\\\n            variants: wix_stores_backend.Events.UpdatedVariantInventory[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a new order from a store.\\\\r\\\\n         */\\\\r\\\\n        type NewOrderEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * The ID of the order, auto-generated when an order is created an unique within all Wix Stores.\\\\r\\\\n             */\\\\r\\\\n            orderId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Running order number unique to the current store.\\\\r\\\\n             */\\\\r\\\\n            number: string;\\\\r\\\\n            /**\\\\r\\\\n             * The date the order was created.\\\\r\\\\n             */\\\\r\\\\n            dateCreated: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The buyer's information.\\\\r\\\\n             */\\\\r\\\\n            buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n            /**\\\\r\\\\n             * The currency code for all of the order's prices.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * The order's units of weight. One of: `\\\\\\\"KG\\\\\\\"`, `\\\\\\\"LB\\\\\\\"`, or `\\\\\\\"UNSPECIFIED_WEIGHT_UNIT\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            weightUnit: string;\\\\r\\\\n            /**\\\\r\\\\n             * The order's totals.\\\\r\\\\n             */\\\\r\\\\n            totals: wix_stores_backend.OrderTotals;\\\\r\\\\n            /**\\\\r\\\\n             * The order's payment status. One of: `\\\\\\\"PAID\\\\\\\"` or `\\\\\\\"NOT_PAID\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            paymentStatus: string;\\\\r\\\\n            /**\\\\r\\\\n             * The order's fulfillment status. One of: `\\\\\\\"FULFILLED\\\\\\\"` or `\\\\\\\"NOT_FULFILLED\\\\\\\"`.\\\\r\\\\n             */\\\\r\\\\n            fulfillmentStatus: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the specific choices from the product's options.\\\\r\\\\n         */\\\\r\\\\n        type ProductChoices = {\\\\r\\\\n            /**\\\\r\\\\n             * Value of the option. This key name is\\\\r\\\\n             *  dependent on the option changed in the product. For example, if a product\\\\r\\\\n             *  has a size option, this key value will be something like \\\\\\\"Size\\\\\\\" and its value\\\\r\\\\n             *  will be something like \\\\\\\"Large\\\\\\\".\\\\r\\\\n             *  \\\\r\\\\n             *  `optionKey` is not case-sensitive. Therefore the values for the option keys `\\\\\\\"Size\\\\\\\"` `\\\\\\\"SIZE\\\\\\\"` and `\\\\\\\"size\\\\\\\"` are combined.\\\\r\\\\n             */\\\\r\\\\n            optionKey: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product that was created.\\\\r\\\\n         */\\\\r\\\\n        type ProductCreatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Product ID.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product stock keeping unit.\\\\r\\\\n             */\\\\r\\\\n            sku: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted product price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedDiscountedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the product is shown in the store.\\\\r\\\\n             */\\\\r\\\\n            visible: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Main product media item (image or video) URL.\\\\r\\\\n             */\\\\r\\\\n            mainMedia: string;\\\\r\\\\n            /**\\\\r\\\\n             * Discounted product price.\\\\r\\\\n             */\\\\r\\\\n            discountedPrice: number;\\\\r\\\\n            /**\\\\r\\\\n             * Product price formatted with the currency.\\\\r\\\\n             */\\\\r\\\\n            formattedPrice: string;\\\\r\\\\n            /**\\\\r\\\\n             * Product price.\\\\r\\\\n             */\\\\r\\\\n            price: number;\\\\r\\\\n            /**\\\\r\\\\n             * Product media items.\\\\r\\\\n             */\\\\r\\\\n            mediaItems: wix_stores_backend.MediaItem[] | $w.Gallery.VideoItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Product currency.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * URL to the product's page.\\\\r\\\\n             */\\\\r\\\\n            productPageUrl: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product that was deleted.\\\\r\\\\n         */\\\\r\\\\n        type ProductDeletedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the deleted product.\\\\r\\\\n             */\\\\r\\\\n            productId: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product that was updated.\\\\r\\\\n         */\\\\r\\\\n        type ProductUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the updated product.\\\\r\\\\n             */\\\\r\\\\n            productId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Names of the product fields that were updated.\\\\r\\\\n             */\\\\r\\\\n            updatedFields: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product variants that was updated.\\\\r\\\\n         */\\\\r\\\\n        type UpdatedVariant = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the variant that was updated.\\\\r\\\\n             */\\\\r\\\\n            variantId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Names of the product variant fields that were updated.\\\\r\\\\n             */\\\\r\\\\n            updatedFields: string[];\\\\r\\\\n            choices: wix_stores_backend.Events.ProductChoices;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing product variant that was updated.\\\\r\\\\n         */\\\\r\\\\n        type UpdatedVariantInventory = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the productVariant that was updated.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Old variant value.\\\\r\\\\n             */\\\\r\\\\n            oldValue: wix_stores_backend.Events.VariantInventoryValue;\\\\r\\\\n            /**\\\\r\\\\n             * Updated variant value.\\\\r\\\\n             */\\\\r\\\\n            newValue: wix_stores_backend.Events.VariantInventoryValue;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product variant value.\\\\r\\\\n         */\\\\r\\\\n        type VariantInventoryValue = {\\\\r\\\\n            /**\\\\r\\\\n             * Whether the variant is in stock.\\\\r\\\\n             */\\\\r\\\\n            inStock: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Number of items in stock.\\\\r\\\\n             */\\\\r\\\\n            quantity: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing product variants that were updated.\\\\r\\\\n         */\\\\r\\\\n        type VariantsUpdatedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * ID of the product in which variants were updated.\\\\r\\\\n             */\\\\r\\\\n            productId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Variants that were updated.\\\\r\\\\n             */\\\\r\\\\n            variants: wix_stores_backend.Events.UpdatedVariant[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an abandoned shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type AbandonedCart = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique identifier of the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Date and time the shopping cart was abandoned.\\\\r\\\\n         */\\\\r\\\\n        abandonTime: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Total price of all items in the cart.\\\\r\\\\n         */\\\\r\\\\n        total: string;\\\\r\\\\n        /**\\\\r\\\\n         * The buyer's information.\\\\r\\\\n         */\\\\r\\\\n        buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n        activities: wix_stores_backend.Activity;\\\\r\\\\n        /**\\\\r\\\\n         * Status of the abandoned cart. Either `\\\\\\\"ABANDONED\\\\\\\"` or `\\\\\\\"RECOVERED\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a shopping cart activity.\\\\r\\\\n     */\\\\r\\\\n    type Activity = {\\\\r\\\\n        /**\\\\r\\\\n         * One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"CUSTOM_ACTIVITY\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"EMAIL_NOT_SENT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"EMAIL_SENT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"NOTIFICATION_SENT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"SCHEDULED\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"TASK_CREATED\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"UNRECOGNIZED_TYPE\\\\\\\"`\\\\r\\\\n         */\\\\r\\\\n        activityType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Activity message.\\\\r\\\\n         */\\\\r\\\\n        message: string;\\\\r\\\\n        /**\\\\r\\\\n         * Time activity occurred.\\\\r\\\\n         */\\\\r\\\\n        timestamp: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Custom activity data.\\\\r\\\\n         */\\\\r\\\\n        customData: wix_stores_backend.CustomData;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an address.\\\\r\\\\n     */\\\\r\\\\n    type Address = {\\\\r\\\\n        /**\\\\r\\\\n         * First name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Email address.\\\\r\\\\n         */\\\\r\\\\n        email: string;\\\\r\\\\n        /**\\\\r\\\\n         * Phone number.\\\\r\\\\n         */\\\\r\\\\n        phone: string;\\\\r\\\\n        /**\\\\r\\\\n         * Address.\\\\r\\\\n         */\\\\r\\\\n        address: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a coupon applied in a shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type AppliedCoupon = {\\\\r\\\\n        /**\\\\r\\\\n         * Coupon code.\\\\r\\\\n         */\\\\r\\\\n        code: string;\\\\r\\\\n        /**\\\\r\\\\n         * Coupon unique identifier.\\\\r\\\\n         */\\\\r\\\\n        couponId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Coupon name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Type of coupon.\\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"BuyXGetY\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"FixedPriceAmount\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"FreeShipping\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"MoneyOffAmount\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"PercentOffRate\\\\\\\"`\\\\r\\\\n         */\\\\r\\\\n        couponType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Value of the coupon discount.\\\\r\\\\n         */\\\\r\\\\n        discountValue: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a visitor who abandoned a shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type BuyerInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's unique ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's email address.\\\\r\\\\n         */\\\\r\\\\n        email: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's first name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's identity.\\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"ADMIN\\\\\\\"`: Buyer is the site owner.\\\\r\\\\n         *  + `\\\\\\\"MEMBER\\\\\\\"`: Buyer is a logged-in site member.\\\\r\\\\n         *  + `\\\\\\\"VISITOR\\\\\\\"`: Buyer is not logged in.\\\\r\\\\n         *  + `\\\\\\\"CONTACT\\\\\\\"`: A contact has been created for the buyer.\\\\r\\\\n         */\\\\r\\\\n        identityType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Buyer's phone number.\\\\r\\\\n         */\\\\r\\\\n        phone: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type Cart = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique identifier of the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Coupon applied in the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        appliedCoupon: wix_stores_backend.AppliedCoupon;\\\\r\\\\n        /**\\\\r\\\\n         * Cart billing address.\\\\r\\\\n         */\\\\r\\\\n        billingAddress: wix_stores_backend.Address;\\\\r\\\\n        /**\\\\r\\\\n         * The buyer's information.\\\\r\\\\n         */\\\\r\\\\n        buyerInfo: wix_stores_backend.BuyerInfo;\\\\r\\\\n        /**\\\\r\\\\n         * Cart status. Either `\\\\\\\"INCOMPLETE\\\\\\\"` or `\\\\\\\"COMPLETE\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * Currency of the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        currency: wix_stores_backend.Currency;\\\\r\\\\n        /**\\\\r\\\\n         * The shopping cart's shipping information.\\\\r\\\\n         */\\\\r\\\\n        shippingInfo: wix_stores_backend.ShippingInfo;\\\\r\\\\n        /**\\\\r\\\\n         * Items in the shopping cart.\\\\r\\\\n         */\\\\r\\\\n        lineItems: wix_stores_backend.LineItem[];\\\\r\\\\n        /**\\\\r\\\\n         * The shopping cart's totals.\\\\r\\\\n         */\\\\r\\\\n        totals: wix_stores_backend.OrderTotals;\\\\r\\\\n        /**\\\\r\\\\n         * The order's units of weight. One of: `\\\\\\\"KG\\\\\\\"`, `\\\\\\\"LB\\\\\\\"`, or `\\\\\\\"UNSPECIFIED_WEIGHT_UNIT\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        weightUnit: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the choice for a product variant.\\\\r\\\\n     */\\\\r\\\\n    type Choice = {\\\\r\\\\n        /**\\\\r\\\\n         * Product options to use when creating or updating the\\\\r\\\\n         *  product. The object contains key:value pairs where the key is the\\\\r\\\\n         *  option name and the value is the chosen option value.\\\\r\\\\n         */\\\\r\\\\n        choices: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the choice for a product variant.\\\\r\\\\n     */\\\\r\\\\n    type Choices = {\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        option: string;\\\\r\\\\n        /**\\\\r\\\\n         * Choice name.\\\\r\\\\n         */\\\\r\\\\n        choice: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a currency.\\\\r\\\\n     */\\\\r\\\\n    type Currency = {\\\\r\\\\n        /**\\\\r\\\\n         * The currency code.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * The currency symbol.\\\\r\\\\n         */\\\\r\\\\n        symbol: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing custom activity data.\\\\r\\\\n     */\\\\r\\\\n    type CustomData = {\\\\r\\\\n        /**\\\\r\\\\n         * Activity namespace.\\\\r\\\\n         */\\\\r\\\\n        namespace: string;\\\\r\\\\n        /**\\\\r\\\\n         * JSON object containing custom data.\\\\r\\\\n         */\\\\r\\\\n        customValue: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a custom text field.\\\\r\\\\n     */\\\\r\\\\n    type CustomTextField = {\\\\r\\\\n        /**\\\\r\\\\n         * Field title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Field value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a line item in a shopping cart.\\\\r\\\\n     */\\\\r\\\\n    type LineItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the line item.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Notes about the line item.\\\\r\\\\n         */\\\\r\\\\n        notes: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item price.\\\\r\\\\n         */\\\\r\\\\n        price: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item product ID.\\\\r\\\\n         */\\\\r\\\\n        productId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item quantity.\\\\r\\\\n         */\\\\r\\\\n        quantity: number;\\\\r\\\\n        /**\\\\r\\\\n         * Line item stock keeping unit.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Total price charged to the customer for all line items after any applicable discounts.\\\\r\\\\n         */\\\\r\\\\n        totalPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item weight.\\\\r\\\\n         */\\\\r\\\\n        weight: string;\\\\r\\\\n        /**\\\\r\\\\n         * Type of the line item.\\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"DIGITAL\\\\\\\"`: Digital item.\\\\r\\\\n         *  + `\\\\\\\"PHYSICAL\\\\\\\"`: Physical item.\\\\r\\\\n         *  + `\\\\\\\"CUSTOM_AMOUNT_ITEM\\\\\\\"`: Item with a custom price.\\\\r\\\\n         *  + `\\\\\\\"UNSPECIFIED\\\\\\\"`: Type can't be classified due to an error.\\\\r\\\\n         */\\\\r\\\\n        lineItemType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Line item options.\\\\r\\\\n         */\\\\r\\\\n        options: wix_stores_backend.Option[];\\\\r\\\\n        /**\\\\r\\\\n         * Media item.\\\\r\\\\n         */\\\\r\\\\n        mediaItem: wix_stores_backend.MediaItem;\\\\r\\\\n        /**\\\\r\\\\n         * Custom text.\\\\r\\\\n         */\\\\r\\\\n        customTextFields: wix_stores_backend.CustomTextField[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the media item for a product.\\\\r\\\\n     */\\\\r\\\\n    type Media = {\\\\r\\\\n        /**\\\\r\\\\n         * One of:\\\\r\\\\n         * \\\\r\\\\n         *  + A Wix media item's ID, or\\\\r\\\\n         *  + A media item's URL\\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         *  Use `mediaId` (preferred) for images hosted by Wix. Use `url` for other images. \\\\r\\\\n         * \\\\r\\\\n         *  If you specify both, `mediaId` takes precedence. We recommend only specifying one to avoid unpredictable results. \\\\r\\\\n         * \\\\r\\\\n         *  You can get the `mediaId` from: \\\\r\\\\n         * \\\\r\\\\n         *   + A query of the [`Product`](https://www.wix.com/corvid/reference/$w.ProductPage.html#Product) object. \\\\r\\\\n         *   + The [`UploadedFile`](https://www.wix.com/corvid/reference/$w.UploadButton.html#UploadedFile)'s properties when uploading an image.\\\\r\\\\n         */\\\\r\\\\n        \\\\\\\"(mediaId|url)\\\\\\\": string;\\\\r\\\\n        /**\\\\r\\\\n         * A choice of the product variant.\\\\r\\\\n         */\\\\r\\\\n        choice: wix_stores_backend.Choice;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the media item for a product's choices.\\\\r\\\\n     */\\\\r\\\\n    type MediaChoices = {\\\\r\\\\n        /**\\\\r\\\\n         * Wix media item IDs.\\\\r\\\\n         */\\\\r\\\\n        mediaIds: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        option: string;\\\\r\\\\n        /**\\\\r\\\\n         * Choice name.\\\\r\\\\n         */\\\\r\\\\n        choice: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a media item.\\\\r\\\\n     */\\\\r\\\\n    type MediaItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Media item ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media items type. Can be \\\\\\\"image\\\\\\\" or \\\\\\\"video.\\\\\\\"\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item URL.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Thumbnail URL for videos only.\\\\r\\\\n         */\\\\r\\\\n        thumbnail?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a line item option.\\\\r\\\\n     */\\\\r\\\\n    type Option = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the product option.\\\\r\\\\n         */\\\\r\\\\n        option: string;\\\\r\\\\n        /**\\\\r\\\\n         * Selected option.\\\\r\\\\n         */\\\\r\\\\n        selection: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an order's totals.\\\\r\\\\n     */\\\\r\\\\n    type OrderTotals = {\\\\r\\\\n        /**\\\\r\\\\n         * The subtotal of all the order's line items, excluding tax.\\\\r\\\\n         */\\\\r\\\\n        subtotal: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total shipping price, including tax.\\\\r\\\\n         */\\\\r\\\\n        shipping: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total amount of tax.\\\\r\\\\n         */\\\\r\\\\n        tax: string;\\\\r\\\\n        /**\\\\r\\\\n         * The total calculated discount amount.\\\\r\\\\n         */\\\\r\\\\n        discount: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total price.\\\\r\\\\n         */\\\\r\\\\n        total: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total weight of the order's items.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * The total quantity of the the order's line items.\\\\r\\\\n         */\\\\r\\\\n        quantity: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing paging options.\\\\r\\\\n     */\\\\r\\\\n    type PagingOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Maximum number of variants to retrieve. Defaults to 300.\\\\r\\\\n         */\\\\r\\\\n        limit: number;\\\\r\\\\n        /**\\\\r\\\\n         * Number of variants to skip before the retrieved variants. Defaults to 0.\\\\r\\\\n         */\\\\r\\\\n        skip: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product in a store.\\\\r\\\\n     */\\\\r\\\\n    type Product = {\\\\r\\\\n        /**\\\\r\\\\n         * Product ID.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Date product was last updated.\\\\r\\\\n         */\\\\r\\\\n        _updatedDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Product name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Main product media item (image or video thumbnail) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of product media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores_backend.MediaItem;\\\\r\\\\n        /**\\\\r\\\\n         * Product stock keeping unit value. Must be unique.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of product ribbons.\\\\r\\\\n         */\\\\r\\\\n        ribbons: wix_stores_backend.ProductRibbon[];\\\\r\\\\n        /**\\\\r\\\\n         * Product currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product price. \\\\r\\\\n         *  The price must be greater than its discount.\\\\r\\\\n         *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Product price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID for the inventory item.\\\\r\\\\n         */\\\\r\\\\n        inventoryItemId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product discount.\\\\r\\\\n         */\\\\r\\\\n        discount: wix_stores_backend.ProductDiscount;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether inventory is tracked for the product.\\\\r\\\\n         */\\\\r\\\\n        trackInventory: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product is in stock.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Number of units currently in stock.\\\\r\\\\n         */\\\\r\\\\n        quantityInStock: number;\\\\r\\\\n        /**\\\\r\\\\n         * Additional product information sections.\\\\r\\\\n         */\\\\r\\\\n        additionalInfoSections: wix_stores_backend.ProductAdditionalInfoSection[];\\\\r\\\\n        /**\\\\r\\\\n         * All the available options for a store product.\\\\r\\\\n         */\\\\r\\\\n        productOptions: wix_stores_backend.ProductOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Product page relative URL.\\\\r\\\\n         */\\\\r\\\\n        productPageUrl: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether product variants are managed. Can be set to true only if the product has options. Once set to true, can be reset to false only if no variants exist. Use [`getProductVariants()`](https://www.wix.com/corvid/reference/wix-stores.html#getProductVariants) to check if variants exist. You cannot set `manageVariants` to true if more than 300 variants are defined.\\\\r\\\\n         */\\\\r\\\\n        manageVariants: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * List of product customization fields.\\\\r\\\\n         */\\\\r\\\\n        customTextFields: wix_stores_backend.ProductCustomTextFields[];\\\\r\\\\n        /**\\\\r\\\\n         * Product type. Either `\\\\\\\"physical\\\\\\\"` or `\\\\\\\"digital\\\\\\\"`. When creating a product using the API, currently only `\\\\\\\"physical\\\\\\\"` is supported.\\\\r\\\\n         */\\\\r\\\\n        productType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product slug.\\\\r\\\\n         */\\\\r\\\\n        slug: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product weight.\\\\r\\\\n         */\\\\r\\\\n        weight: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variants.\\\\r\\\\n         */\\\\r\\\\n        variants: wix_stores_backend.ProductVariants;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an additional info section for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductAdditionalInfoSection = {\\\\r\\\\n        /**\\\\r\\\\n         * Section title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Section description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variant's option choices.\\\\r\\\\n     */\\\\r\\\\n    type ProductChoices = {\\\\r\\\\n        /**\\\\r\\\\n         * Value of the choice. This key name is dependent on the\\\\r\\\\n         *  product option. For example, if a product has a size option, this\\\\r\\\\n         *  key value will be something like `\\\\\\\"Size\\\\\\\"` and its value will be something like\\\\r\\\\n         *  `\\\\\\\"Large\\\\\\\"`.\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\", are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a custom text field for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductCustomTextFields = {\\\\r\\\\n        /**\\\\r\\\\n         * Product customization field title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Maximum length of product customization field in characters.\\\\r\\\\n         */\\\\r\\\\n        maxLength: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product discount.\\\\r\\\\n     */\\\\r\\\\n    type ProductDiscount = {\\\\r\\\\n        /**\\\\r\\\\n         * Discount type. Required.\\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         * \\\\r\\\\n         *  - `\\\\\\\"AMOUNT\\\\\\\"` \\\\r\\\\n         * \\\\r\\\\n         *  - `\\\\\\\"PERCENT\\\\\\\"`\\\\r\\\\n         * \\\\r\\\\n         *  - `\\\\\\\"NONE\\\\\\\"`\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discount value. The discount value cannot be greater than the price of the product or the variant.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing information for creating or updating a product in a store.\\\\r\\\\n     */\\\\r\\\\n    type ProductInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Product name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product stock keeping unit value. Must be unique.\\\\r\\\\n         */\\\\r\\\\n        sku: number;\\\\r\\\\n        /**\\\\r\\\\n         * Product price. \\\\r\\\\n         *  The price must be greater than its discount.\\\\r\\\\n         *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a product discount.\\\\r\\\\n         */\\\\r\\\\n        discount: wix_stores_backend.ProductDiscount;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing all the available options for a store product.\\\\r\\\\n         */\\\\r\\\\n        productOptions: wix_stores_backend.ProductOptionsInfo;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether product variants can be managed. Can be set to true only if the product has options. Once set to true, can be reset to false only if no variants exist. Use [`getProductVariants()`](https://www.wix.com/corvid/reference/wix-stores.html#getProductVariants) to check if variants exist.  You cannot set `manageVariants` to true if more than 300 variants are defined.\\\\r\\\\n         */\\\\r\\\\n        manageVariants: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Product type. Currently only \\\\\\\"physical\\\\\\\" is supported for creating a new product using the API. Soon \\\\\\\"digital\\\\\\\" will also be supported.\\\\r\\\\n         */\\\\r\\\\n        productType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an option for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOption = {\\\\r\\\\n        /**\\\\r\\\\n         * Option type. Either `\\\\\\\"color\\\\\\\"` or `\\\\\\\"drop_down\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        optionType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductOptionsChoice[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an option for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductOptionsChoice[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing all the available options for a store product, such as \\\\\\\"Size\\\\\\\" or \\\\\\\"Color.\\\\\\\"\\\\r\\\\n     */\\\\r\\\\n    type ProductOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the option. This key name\\\\r\\\\n         *  is dependent on the options added to the product. For example, if a product has a size \\\\r\\\\n         *  option, this key will be something like `\\\\\\\"Size\\\\\\\"`.\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: wix_stores_backend.ProductOption;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by the `getProductOptionsAvailability()` function representing the availability of a product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsAvailability = {\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product with the specified option choices is available for purchase.\\\\r\\\\n         */\\\\r\\\\n        availableForPurchase: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing all the available options for a store product.\\\\r\\\\n         */\\\\r\\\\n        productOptions: wix_stores_backend.ProductOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Main product media item (image or video) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of product media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores_backend.MediaItem;\\\\r\\\\n        /**\\\\r\\\\n         * The variant of the product selected using the specified option choices if there is one.\\\\r\\\\n         */\\\\r\\\\n        selectedVariant: wix_stores_backend.ProductOptionsAvailabilitySelectedVariant;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the product variant selected using the `getProductOptionsAvailability()` function.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsAvailabilitySelectedVariant = {\\\\r\\\\n        /**\\\\r\\\\n         * Product variant stock keeping unit value.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant price. The variant price must be greater than its discount.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product variant is shown in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product variant is in stock.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an options choice for a store product for a store product, such as choice \\\\\\\"Small\\\\\\\" for the option \\\\\\\"Size.\\\\\\\"\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsChoice = {\\\\r\\\\n        /**\\\\r\\\\n         * Choice value.\\\\r\\\\n         */\\\\r\\\\n        value: number;\\\\r\\\\n        /**\\\\r\\\\n         * Choice description.\\\\r\\\\n         */\\\\r\\\\n        description: number;\\\\r\\\\n        /**\\\\r\\\\n         * Choice media.\\\\r\\\\n         */\\\\r\\\\n        media: wix_stores_backend.ProductOptionsChoiceMedia[];\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product with this choice is in stock. When adding a product, this property is read-only.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product with this option is visible.  When adding a product, this property is read-only.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the choice media.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsChoiceMedia = {\\\\r\\\\n        /**\\\\r\\\\n         * Main choice media item (image or video thumbnail) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of choice media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores_backend.MediaItem;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing all the available options for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the option. This key name\\\\r\\\\n         *  is dependent on the options added to the product. For example, if a product has a size \\\\r\\\\n         *  option, this key will be something like `\\\\\\\"Size\\\\\\\"`.\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: wix_stores_backend.ProductOptionInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a ribbon for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductRibbon = {\\\\r\\\\n        /**\\\\r\\\\n         * Ribbon text.\\\\r\\\\n         */\\\\r\\\\n        text: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variant information to use when creating or updating variants.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price. The variant price must be greater than its discount.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Formatted variant price.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant stock keeping unit number.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the variant is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variant item.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique product variant ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant information.\\\\r\\\\n         */\\\\r\\\\n        variant: wix_stores_backend.ProductVariantInfo[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the selection of specific variants of a product. Use only one of\\\\r\\\\n     *  `choices` or `variantIds`.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * The choices the retrieved variants will have.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * IDs of variants to retrieve.\\\\r\\\\n         */\\\\r\\\\n        variantIds: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Paging options.\\\\r\\\\n         */\\\\r\\\\n        paging: wix_stores_backend.PagingOptions;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variants.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariants = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_stores_backend.ProductVariantItem[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing shipping information.\\\\r\\\\n     */\\\\r\\\\n    type ShippingInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Shipment address.\\\\r\\\\n         */\\\\r\\\\n        shippingAddress?: wix_stores_backend.Address;\\\\r\\\\n        /**\\\\r\\\\n         * Pickup address.\\\\r\\\\n         */\\\\r\\\\n        pickupInfo?: wix_stores_backend.Address;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object containing variant information.\\\\r\\\\n     */\\\\r\\\\n    type VariantInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price. The variant price must be greater than its discount.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant stock keeping unit value.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the variant is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variant item.\\\\r\\\\n     */\\\\r\\\\n    type VariantItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique variant ID.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n        /**\\\\r\\\\n         * The choices of the retrieved variant.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores_backend.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * Variant information.\\\\r\\\\n         */\\\\r\\\\n        variant: wix_stores_backend.VariantInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variants.\\\\r\\\\n     */\\\\r\\\\n    type Variants = {\\\\r\\\\n        /**\\\\r\\\\n         * List of variant items that match the specified choices or variant IDs.\\\\r\\\\n         */\\\\r\\\\n        items: wix_stores_backend.VariantItem[];\\\\r\\\\n        /**\\\\r\\\\n         * Number of items in the current results page.\\\\r\\\\n         */\\\\r\\\\n        length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Total number of variants with the specified choices.\\\\r\\\\n         */\\\\r\\\\n        totalCount: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_users_backend {\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site member's address.\\\\r\\\\n     */\\\\r\\\\n    type Address = {\\\\r\\\\n        /**\\\\r\\\\n         * Address street address.\\\\r\\\\n         */\\\\r\\\\n        street: string;\\\\r\\\\n        /**\\\\r\\\\n         * Address city.\\\\r\\\\n         */\\\\r\\\\n        city: string;\\\\r\\\\n        /**\\\\r\\\\n         * Address country.\\\\r\\\\n         */\\\\r\\\\n        country: string;\\\\r\\\\n        /**\\\\r\\\\n         * Address postal code.\\\\r\\\\n         */\\\\r\\\\n        postalCode: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site member's picture.\\\\r\\\\n     */\\\\r\\\\n    type Picture = {\\\\r\\\\n        /**\\\\r\\\\n         * Member's image URL.\\\\r\\\\n         */\\\\r\\\\n        url: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the results of a site registration.\\\\r\\\\n     */\\\\r\\\\n    type RegistrationResult = {\\\\r\\\\n        /**\\\\r\\\\n         * Registration status. Either \\\\\\\"Pending\\\\\\\" or \\\\\\\"Active\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * A token used to log in the current\\\\r\\\\n         *  user as a site member. Pass the token from your backend code to client-side\\\\r\\\\n         *  code and use it when calling the [applySessionToken()](wix-users.html#applySessionToken)\\\\r\\\\n         *  function. The token is only available when `status` is \\\\\\\"Active\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        sessionToken?: string;\\\\r\\\\n        /**\\\\r\\\\n         * A token for approving the user as\\\\r\\\\n         *  a site member using the [approveByToken()](wix-users-backend.html#approveByToken)\\\\r\\\\n         *  function. The token is safe to pass via email or from client-side code to\\\\r\\\\n         *  backend code. The token is only available when `status` is \\\\\\\"Pending\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        approvalToken?: string;\\\\r\\\\n        /**\\\\r\\\\n         * The user that has been registered.\\\\r\\\\n         */\\\\r\\\\n        user: wix_users.User;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site member.\\\\r\\\\n     */\\\\r\\\\n    type UserInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Member's unique id.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * The member's full name. This information is concatenated from the \\\\\\\"First Name\\\\\\\" and \\\\\\\"Last Name\\\\\\\" fields.\\\\r\\\\n         */\\\\r\\\\n        memberName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Member's first name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Member's last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * The email address the member uses to log in to your site. This is the address they supplied when they signed up.\\\\r\\\\n         */\\\\r\\\\n        loginEmail: string;\\\\r\\\\n        /**\\\\r\\\\n         * The name the member specified on their profile.\\\\r\\\\n         */\\\\r\\\\n        nickname: string;\\\\r\\\\n        /**\\\\r\\\\n         * The member's URL-friendly name that is unique across your site. Typically this is made up of the member's email prefix.\\\\r\\\\n         */\\\\r\\\\n        slug: string;\\\\r\\\\n        /**\\\\r\\\\n         * The member's locale based on their last login.\\\\r\\\\n         */\\\\r\\\\n        language: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates the member's current status, between `Applicant`, `Active`, `Blocked`.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * The date and time the member registered to the site.\\\\r\\\\n         */\\\\r\\\\n        creationDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * The last date and time the member's details were updated.\\\\r\\\\n         */\\\\r\\\\n        lastUpdateDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * The date and time when the member last logged in.\\\\r\\\\n         */\\\\r\\\\n        lastLoginDate: Date;\\\\r\\\\n        /**\\\\r\\\\n         * List of the member's email addresses.\\\\r\\\\n         */\\\\r\\\\n        emails: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of the member's phone numbers.\\\\r\\\\n         */\\\\r\\\\n        phones: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of the member's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)\\\\r\\\\n         *  are used to organize contacts. When setting the `labels` property, you can\\\\r\\\\n         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         */\\\\r\\\\n        labels: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Member's picture.\\\\r\\\\n         */\\\\r\\\\n        picture: wix_users_backend.Picture;\\\\r\\\\n        /**\\\\r\\\\n         * Any\\\\r\\\\n         *  number of custom fields. [Customs fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\\\\r\\\\n         *  are used to store additional information about your site's contacts. When\\\\r\\\\n         *  setting a custom field, use key:value pairs where the key matches the names\\\\r\\\\n         *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         *  You can only set values for custom fields that already exist in the Contacts\\\\r\\\\n         *  application.\\\\r\\\\n         */\\\\r\\\\n        customFields: string | number | Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_bookings {\\\\r\\\\n    /**\\\\r\\\\n     * An object used when calling [`getServiceAvailability()`](#getServiceAvailability)\\\\r\\\\n     *  containing options for which slots should be returned.\\\\r\\\\n     */\\\\r\\\\n    type AvailabilityOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Start date and time of the slots\\\\r\\\\n         *  to be returned. Defaults to the current date and time.\\\\r\\\\n         */\\\\r\\\\n        startDateTime?: Date;\\\\r\\\\n        /**\\\\r\\\\n         * End date and time of the slots to\\\\r\\\\n         *  be returned. Defaults to one week from `startDateTime`, which is one week\\\\r\\\\n         *  from the current date and time if `startDateTime` is also omitted.\\\\r\\\\n         */\\\\r\\\\n        endDateTime?: Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when calling [`checkoutBooking()`](#checkoutBooking)\\\\r\\\\n     *  containing information about the slot to be booked.\\\\r\\\\n     */\\\\r\\\\n    type BookingInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * The slot to be booked.\\\\r\\\\n         */\\\\r\\\\n        slot: wix_bookings.Slot;\\\\r\\\\n        /**\\\\r\\\\n         * Number of spots to book. Defaults to `1`.\\\\r\\\\n         */\\\\r\\\\n        numberOfSpots?: number;\\\\r\\\\n        /**\\\\r\\\\n         * List of form field values required to book the session.\\\\r\\\\n         */\\\\r\\\\n        formFields: wix_bookings.FormField[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the result of a call to [`checkoutBooking()`](#checkoutBooking).\\\\r\\\\n     */\\\\r\\\\n    type BookingResult = {\\\\r\\\\n        /**\\\\r\\\\n         * Status of the booking that was checked out.\\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"Confirmed\\\\\\\"`: Payment was successful or payment is to be done offline.\\\\r\\\\n         *  + `\\\\\\\"Pending Payment\\\\\\\"`: Payment is pending.\\\\r\\\\n         *  + `\\\\\\\"Terminated\\\\\\\"`: Payment failed or was cancelled.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the booking that was checked out.\\\\r\\\\n         */\\\\r\\\\n        bookingId: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned after calling [`getCheckoutOptions()`](#getCheckoutOptions)\\\\r\\\\n     *  containing information about the available payment options for the service and the logged-in user.\\\\r\\\\n     */\\\\r\\\\n    type CheckoutOption = {\\\\r\\\\n        /**\\\\r\\\\n         * Type of the available payment option. Valid options are:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"wixPay_Online\\\\\\\"` for online collections\\\\r\\\\n         *  + `\\\\\\\"wixPay_Offline\\\\\\\"` for offline collections\\\\r\\\\n         *  + `\\\\\\\"package\\\\\\\"` for a package-type paid plan \\\\r\\\\n         *  + `\\\\\\\"membership\\\\\\\"` for a membership-type paid plan\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Name of the plan package or membership. For booking with paid plans only.\\\\r\\\\n         */\\\\r\\\\n        planName?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Order ID of the plan package or membership. For booking with paid plans only.\\\\r\\\\n         */\\\\r\\\\n        planOrderId?: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the benefit provided by the plan package. For booking with package-type paid plans only.\\\\r\\\\n         */\\\\r\\\\n        benefitId?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Number of sessions remaining in the plan package. For booking with package-type paid plans only.\\\\r\\\\n         */\\\\r\\\\n        remainingCredits?: number;\\\\r\\\\n        /**\\\\r\\\\n         * Number of sessions initially provided with the plan package.  For booking with package-type paid plans only.\\\\r\\\\n         */\\\\r\\\\n        totalCredits?: number;\\\\r\\\\n        /**\\\\r\\\\n         * Date by which the plan package or membership expires. For booking with paid plans only.\\\\r\\\\n         */\\\\r\\\\n        planExpiration?: Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when calling [`checkoutBooking()`](#checkoutBooking)\\\\r\\\\n     *  containing values for form fields required to book the session.\\\\r\\\\n     */\\\\r\\\\n    type FormField = {\\\\r\\\\n        /**\\\\r\\\\n         * Form field value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the form field from the **form** property in the **Booking/Sessions** collection.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when calling [`checkoutBooking()`](#checkoutBooking)\\\\r\\\\n     *  containing information about the payment options.\\\\r\\\\n     */\\\\r\\\\n    type PaymentOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * A coupon code to be used with the payment.\\\\r\\\\n         */\\\\r\\\\n        couponCode?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Type of the payment. Valid options are: \\\\r\\\\n         * \\\\r\\\\n         *   + `\\\\\\\"wixPay_Online\\\\\\\"` for online collections\\\\r\\\\n         *   + `\\\\\\\"wixPay_Offline\\\\\\\"` for offline collections\\\\r\\\\n         *   + `\\\\\\\"package\\\\\\\"` for a package-type paid plan\\\\r\\\\n         *   + `\\\\\\\"membership\\\\\\\"` for a membership-type paid plan\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned from [`getServiceAvailability()`](#getServiceAvailability)\\\\r\\\\n     *  containing the available bookings slots.\\\\r\\\\n     */\\\\r\\\\n    type ServiceAvailability = {\\\\r\\\\n        /**\\\\r\\\\n         * List of available slots.\\\\r\\\\n         */\\\\r\\\\n        slots: wix_bookings.Slot[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a booking slot.\\\\r\\\\n     */\\\\r\\\\n    type Slot = {\\\\r\\\\n        /**\\\\r\\\\n         * Starting date and time of the slot.\\\\r\\\\n         */\\\\r\\\\n        startDateTime: Date;\\\\r\\\\n        /**\\\\r\\\\n         * Ending date and time of the slot.\\\\r\\\\n         */\\\\r\\\\n        endDateTime: Date;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the service that the slot belongs to.\\\\r\\\\n         */\\\\r\\\\n        serviceId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Maximum number of participants that can book the service for this slot.\\\\r\\\\n         */\\\\r\\\\n        capacity: number;\\\\r\\\\n        /**\\\\r\\\\n         * Number of remaining spots that can be booked for the slot.\\\\r\\\\n         */\\\\r\\\\n        remainingSpots: number;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the slot's staff member.\\\\r\\\\n         */\\\\r\\\\n        staffMemberId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Unique slot identifier.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_crm {\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site contact.\\\\r\\\\n     */\\\\r\\\\n    type ContactInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Contact's first name.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Contact's last name.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * Contact's image source.\\\\r\\\\n         */\\\\r\\\\n        picture: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's email addresses.\\\\r\\\\n         */\\\\r\\\\n        emails: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Email address the contact who is also\\\\r\\\\n         *  a member uses to log into the system.\\\\r\\\\n         */\\\\r\\\\n        loginEmail: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's phone numbers.\\\\r\\\\n         */\\\\r\\\\n        phones: string[];\\\\r\\\\n        /**\\\\r\\\\n         * List of contact's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)\\\\r\\\\n         *  are used to organize contacts. When setting the `labels` property, you can\\\\r\\\\n         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         */\\\\r\\\\n        labels: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Contact's language.\\\\r\\\\n         */\\\\r\\\\n        language: string;\\\\r\\\\n        /**\\\\r\\\\n         * Any\\\\r\\\\n         *  number of custom fields. [Customs fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\\\\r\\\\n         *  are used to store additional information about your site's contacts. When\\\\r\\\\n         *  setting a custom field, use key:value pairs where the key matches the names\\\\r\\\\n         *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\\\\r\\\\n         *  You can only set values for custom fields that already exist in the Contacts\\\\r\\\\n         *  application.\\\\r\\\\n         */\\\\r\\\\n        customFields: string | number | Date;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_events {\\\\r\\\\n    /**\\\\r\\\\n     * A form for creating an RSVP to an event.\\\\r\\\\n     */\\\\r\\\\n    interface RsvpForm {\\\\r\\\\n        /**\\\\r\\\\n         * Gets information about the event's RSVP form and status.\\\\r\\\\n         */\\\\r\\\\n        getRsvpData(): Promise<wix_events.RsvpForm.RsvpData>;\\\\r\\\\n        /**\\\\r\\\\n         * Submits an RSVP form and adds the new guests to the event's guest list.\\\\r\\\\n         */\\\\r\\\\n        submit(formValues: wix_events.RsvpForm.FormValue[]): Promise<wix_events.RsvpForm.RsvpResponse>;\\\\r\\\\n        /**\\\\r\\\\n         * Validates form fields and values against the registration form as defined in the site Dashboard.\\\\r\\\\n         */\\\\r\\\\n        validate(formValues: wix_events.RsvpForm.FormValue[]): Promise<wix_events.RsvpForm.ValidationResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Validates an input form field value against the registration form as defined in the site Dashboard.\\\\r\\\\n         */\\\\r\\\\n        validateInput(inputName: string, formValues: wix_events.RsvpForm.FormValue[]): Promise<wix_events.RsvpForm.ValidationResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace RsvpForm {\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about a label for a complex input field type.\\\\r\\\\n         */\\\\r\\\\n        type AdditionalLabel = {\\\\r\\\\n            /**\\\\r\\\\n             * Additional label name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Additional label value.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an error that occurred during validation of an RSVP form's fields.\\\\r\\\\n         */\\\\r\\\\n        type FieldValidationError = {\\\\r\\\\n            /**\\\\r\\\\n             * Error message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n            /**\\\\r\\\\n             * List of fields that caused the error when the form does not pass validation.\\\\r\\\\n             */\\\\r\\\\n            fields: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about form value to submit.\\\\r\\\\n         */\\\\r\\\\n        type FormValue = {\\\\r\\\\n            /**\\\\r\\\\n             * Form field name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Form field value.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a guest on an event RSVP.\\\\r\\\\n         */\\\\r\\\\n        type Guest = {\\\\r\\\\n            /**\\\\r\\\\n             * Index of the guest in the RSVP guest list. Indices are zero-based.\\\\r\\\\n             */\\\\r\\\\n            index: number;\\\\r\\\\n            /**\\\\r\\\\n             * Guest ID, which is unique within the RSVP.\\\\r\\\\n             */\\\\r\\\\n            id: number;\\\\r\\\\n            /**\\\\r\\\\n             * Full name of the guest\\\\r\\\\n             */\\\\r\\\\n            fullName: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a submitted RSVP form input value.\\\\r\\\\n         */\\\\r\\\\n        type InputValue = {\\\\r\\\\n            /**\\\\r\\\\n             * Name of the form input.\\\\r\\\\n             */\\\\r\\\\n            inputName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Value of the form input, when there is just one value.\\\\r\\\\n             */\\\\r\\\\n            value: string;\\\\r\\\\n            /**\\\\r\\\\n             * Value of the form input, when there are multiple values.\\\\r\\\\n             */\\\\r\\\\n            values: string[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the details needed to create an RSVP form for an event.\\\\r\\\\n         */\\\\r\\\\n        type RsvpData = {\\\\r\\\\n            /**\\\\r\\\\n             * Information about the input fields needed to create an RSVP form.\\\\r\\\\n             */\\\\r\\\\n            rsvpFormInputs: wix_events.RsvpForm.RsvpInputItem[];\\\\r\\\\n            /**\\\\r\\\\n             * Allowed RSVP statuses for an event. \\\\r\\\\n             *  One of: \\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"YES_AND_NO\\\\\\\"`: Guests can RSVP for the event with a \\\\\\\"Yes\\\\\\\" or \\\\\\\"No\\\\\\\". \\\\r\\\\n             *  + `\\\\\\\"YES_ONLY\\\\\\\"`: Guests can only RSVP for the event with a \\\\\\\"Yes\\\\\\\".\\\\r\\\\n             *  + `\\\\\\\"WAITING\\\\\\\"`: The guest limit has been reached, but there is an open waitlist.\\\\r\\\\n             */\\\\r\\\\n            rsvpStatusOptions: string;\\\\r\\\\n            /**\\\\r\\\\n             * Event registration status.\\\\r\\\\n             *  One of:\\\\r\\\\n             *  \\\\r\\\\n             *  + `\\\\\\\"OPEN_RSVP\\\\\\\"`: Registration is open and guest limit has not been reached.\\\\r\\\\n             *  + `\\\\\\\"OPEN_RSVP_WAITLIST\\\\\\\"`: Registration is open, guest limit has been reached,\\\\r\\\\n             *    and additional registering guests are added to the waitlist.\\\\r\\\\n             *  + `\\\\\\\"CLOSED\\\\\\\"`: Registration is closed because the guest limit has been reached.\\\\r\\\\n             *  + `\\\\\\\"CLOSED_MANUALLY\\\\\\\"`: Registration was closed manually.\\\\r\\\\n             */\\\\r\\\\n            registrationStatus: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a submitted RSVP form.\\\\r\\\\n         */\\\\r\\\\n        type RsvpForm = {\\\\r\\\\n            /**\\\\r\\\\n             * Values that were entered in the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            inputValues: wix_events.RsvpForm.InputValue[];\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object containing information about an input field in an RSVP form.\\\\r\\\\n         */\\\\r\\\\n        type RsvpInputItem = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique input identifier.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the input field's value is an array.\\\\r\\\\n             */\\\\r\\\\n            array: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Input field display label.\\\\r\\\\n             */\\\\r\\\\n            label: string;\\\\r\\\\n            /**\\\\r\\\\n             * Addition field display labels for complex fields.\\\\r\\\\n             */\\\\r\\\\n            additionalLabels: wix_events.RsvpForm.AdditionalLabel[];\\\\r\\\\n            /**\\\\r\\\\n             * List of value options where applicable.\\\\r\\\\n             */\\\\r\\\\n            options: string[];\\\\r\\\\n            /**\\\\r\\\\n             * Maximum length of the input field's value. A value of `0` indicates no maximum length.\\\\r\\\\n             */\\\\r\\\\n            maxLength: number;\\\\r\\\\n            /**\\\\r\\\\n             * Input field name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Whether the input field is required.\\\\r\\\\n             */\\\\r\\\\n            required: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * The type of the input field.\\\\r\\\\n             *  One of:\\\\r\\\\n             *  \\\\r\\\\n             *  + `\\\\\\\"NAME\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"INPUT\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"RADIO\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"CHECKBOX\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"DROPDOWN\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"GUEST_CONTROL\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"ADDRESS_FULL\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"TEXTAREA\\\\\\\"`\\\\r\\\\n             *  + `\\\\\\\"DATE\\\\\\\"`\\\\r\\\\n             */\\\\r\\\\n            controlType: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a response to submitting an RSVP.\\\\r\\\\n         */\\\\r\\\\n        type RsvpResponse = {\\\\r\\\\n            /**\\\\r\\\\n             * RSVP ID\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Indicates whether the guest's personal information has been deleted or not.\\\\r\\\\n             */\\\\r\\\\n            anonymized: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Contact ID of the guest who submitted the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            contactId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date when the RSVP was submitted.\\\\r\\\\n             */\\\\r\\\\n            createdDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Email address to the guest who submitted the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            email: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the event the RSVP is for.\\\\r\\\\n             */\\\\r\\\\n            eventId: string;\\\\r\\\\n            /**\\\\r\\\\n             * First name of the guest who submitted the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            firstName: string;\\\\r\\\\n            /**\\\\r\\\\n             * Last name of the guest who submitted the RSVP form.\\\\r\\\\n             */\\\\r\\\\n            lastName: string;\\\\r\\\\n            /**\\\\r\\\\n             * All of the guests included in the RSVP.\\\\r\\\\n             */\\\\r\\\\n            guests: wix_events.RsvpForm.Guest[];\\\\r\\\\n            /**\\\\r\\\\n             * A representation of the RSVP form that was submitted.\\\\r\\\\n             */\\\\r\\\\n            rsvpForm: wix_events.RsvpForm.RsvpForm;\\\\r\\\\n            /**\\\\r\\\\n             * Member ID of the guest who submitted the RSVP form if the guest is a site member.\\\\r\\\\n             */\\\\r\\\\n            memberId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date when RSVP was last modified.\\\\r\\\\n             */\\\\r\\\\n            updatedDate: Date;\\\\r\\\\n            /**\\\\r\\\\n             * RSVP status.\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * Total number of guests included in the RSVP.\\\\r\\\\n             */\\\\r\\\\n            totalGuests: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an error that occurred during an RSVP form submission.\\\\r\\\\n         */\\\\r\\\\n        type SubmissionError = {\\\\r\\\\n            /**\\\\r\\\\n             * Error message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n            /**\\\\r\\\\n             * Error type.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"RSVP_CLOSED\\\\\\\"`: Event registration is closed.\\\\r\\\\n             *  + `\\\\\\\"GUEST_LIMIT_REACHED\\\\\\\"`: The maximum number of guests has already been reached.\\\\r\\\\n             *  + `\\\\\\\"MEMBER_ALREADY_REGISTERED\\\\\\\"`: The current registrant is already registered as a guest.\\\\r\\\\n             *  + `\\\\\\\"WAITING_LIST_UNAVAILABLE\\\\\\\"`: The maximum number of guests has already been reached and\\\\r\\\\n             *    there is no waitlist.\\\\r\\\\n             *  + `\\\\\\\"UNKNOWN_ERROR\\\\\\\"`: Unknown error.\\\\r\\\\n             */\\\\r\\\\n            errorType: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the result of a form validation.\\\\r\\\\n         */\\\\r\\\\n        type ValidationResult = {\\\\r\\\\n            /**\\\\r\\\\n             * Indicates that the RSVP form fields are valid.\\\\r\\\\n             */\\\\r\\\\n            valid: boolean;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing an error that occurred during validation of an RSVP form's values.\\\\r\\\\n         */\\\\r\\\\n        type ValueValidationError = {\\\\r\\\\n            /**\\\\r\\\\n             * Error message.\\\\r\\\\n             */\\\\r\\\\n            message: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the input field that failed validation.\\\\r\\\\n             */\\\\r\\\\n            inputId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Error type.\\\\r\\\\n             *  One of:\\\\r\\\\n             * \\\\r\\\\n             *  + `\\\\\\\"EMPTY_INPUT\\\\\\\"`: A required field is missing its value.\\\\r\\\\n             *  + `\\\\\\\"INVALID_INPUT_VALUE\\\\\\\"`: The value is not valid for the field type.\\\\r\\\\n             *  + `\\\\\\\"INPUT_TOO_LONG\\\\\\\"`: The value is too long.\\\\r\\\\n             *  + `\\\\\\\"INVALID_OPTION\\\\\\\"`: The value does not match one of the defined options for the field.\\\\r\\\\n             *  + `\\\\\\\"INVALID_STATUS\\\\\\\"`: The status value is not valid.\\\\r\\\\n             *  + `\\\\\\\"INVALID_NUMBER_OF_GUESTS\\\\\\\"`: The number of guests does not match the number defined for the form.\\\\r\\\\n             */\\\\r\\\\n            errorType: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_paid_plans_backend {\\\\r\\\\n    /**\\\\r\\\\n     * Events that are fired by actions relating to paid plans.\\\\r\\\\n     */\\\\r\\\\n    interface Events {\\\\r\\\\n        /**\\\\r\\\\n         * An event that fires when a user purchases a plan.\\\\r\\\\n         */\\\\r\\\\n        onPlanPurchased(event: wix_paid_plans_backend.Events.PlanPurchasedEvent): void;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace Events {\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a new paid plan order.\\\\r\\\\n         */\\\\r\\\\n        type Order = {\\\\r\\\\n            /**\\\\r\\\\n             * Order ID of the purchase of the plan, auto-generated when an order is created.\\\\r\\\\n             */\\\\r\\\\n            id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the payment for the plan. Can be `PAID`, `REFUNDED`, `FAILED`, `UNPAID`, and `PAYMENT_STATUS_UNDEFINED`.\\\\r\\\\n             */\\\\r\\\\n            paymentStatus: string;\\\\r\\\\n            /**\\\\r\\\\n             * Object containing the price of the plan.\\\\r\\\\n             */\\\\r\\\\n            price: wix_paid_plans_backend.Events.Price;\\\\r\\\\n            /**\\\\r\\\\n             * If plan is cancelled, the reason why. Can be `OWNER_CANCELED`, `PAYMENT_PROVIDER_CANCELED`, `PAYMENT_FAILED`, `UOU_CANCELED`, and `CANCELLATION_REASON_UNDEFINED`.\\\\r\\\\n             */\\\\r\\\\n            cancellationReason: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time from which the plan is valid.\\\\r\\\\n             */\\\\r\\\\n            validFrom: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Name of the plan.\\\\r\\\\n             */\\\\r\\\\n            planName: string;\\\\r\\\\n            /**\\\\r\\\\n             * If the plan is recurring. If true, the price is deducted weekly, monthly, or yearly.\\\\r\\\\n             */\\\\r\\\\n            recurring: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time the order was created.\\\\r\\\\n             */\\\\r\\\\n            dateCreated: Date;\\\\r\\\\n            /**\\\\r\\\\n             * Status of the order. Can be `ACTIVE`, `PENDING`, `CANCELED`, `EXPIRED`, `PENDING_CANCELLATION`, and `ORDER_STATUS_UNDEFINED`.\\\\r\\\\n             */\\\\r\\\\n            status: string;\\\\r\\\\n            /**\\\\r\\\\n             * Role assigned after purchasing the plan.\\\\r\\\\n             */\\\\r\\\\n            roleID: string;\\\\r\\\\n            /**\\\\r\\\\n             * Description of the plan.\\\\r\\\\n             */\\\\r\\\\n            planDescription: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID for the visitor who purchased the plan.\\\\r\\\\n             */\\\\r\\\\n            memberId: string;\\\\r\\\\n            /**\\\\r\\\\n             * How the plan was purchased, either `ONLINE` pr `OFFLINE`.\\\\r\\\\n             */\\\\r\\\\n            orderType: string;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the plan.\\\\r\\\\n             */\\\\r\\\\n            planId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Object containing properties about how long the plan is valid.\\\\r\\\\n             */\\\\r\\\\n            validFor: wix_paid_plans_backend.Events.ValidFor;\\\\r\\\\n            /**\\\\r\\\\n             * ID of the plan for wix Pay. If plan is free, this ID is blank.\\\\r\\\\n             */\\\\r\\\\n            wixPayOrderId: string;\\\\r\\\\n            /**\\\\r\\\\n             * Date and time until which the plan is valid.\\\\r\\\\n             */\\\\r\\\\n            validUntil: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the period for which a plan is valid.\\\\r\\\\n         */\\\\r\\\\n        type Period = {\\\\r\\\\n            /**\\\\r\\\\n             * The number of units until the plan expires.\\\\r\\\\n             */\\\\r\\\\n            amount: number;\\\\r\\\\n            /**\\\\r\\\\n             * Time period for billing the plan, such as `MONTH`.\\\\r\\\\n             */\\\\r\\\\n            unit: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing a new paid plan purchase.\\\\r\\\\n         */\\\\r\\\\n        type PlanPurchasedEvent = {\\\\r\\\\n            /**\\\\r\\\\n             * Object containing the details about the plan's order.\\\\r\\\\n             */\\\\r\\\\n            order: wix_paid_plans_backend.Events.Order;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing the price of a purchased plan.\\\\r\\\\n         */\\\\r\\\\n        type Price = {\\\\r\\\\n            /**\\\\r\\\\n             * Payment currency. A three-letter\\\\r\\\\n             *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.\\\\r\\\\n             */\\\\r\\\\n            currency: string;\\\\r\\\\n            /**\\\\r\\\\n             * The cost of the plan.\\\\r\\\\n             */\\\\r\\\\n            amount: number;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object representing how long a plan is valid.\\\\r\\\\n         */\\\\r\\\\n        type ValidFor = {\\\\r\\\\n            /**\\\\r\\\\n             * If true, the plan does not expire.\\\\r\\\\n             */\\\\r\\\\n            forever: boolean;\\\\r\\\\n            /**\\\\r\\\\n             * Object containing the period for which the plan is valid.\\\\r\\\\n             */\\\\r\\\\n            period: wix_paid_plans_backend.Events.Period;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_paid_plans {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an order result.\\\\r\\\\n     */\\\\r\\\\n    type OrderResult = {\\\\r\\\\n        /**\\\\r\\\\n         * ID of the order.\\\\r\\\\n         */\\\\r\\\\n        orderId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Wix Pay ID of the order being purchased.\\\\r\\\\n         */\\\\r\\\\n        wixPayOrderId: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a purchase result for a non-free plan.\\\\r\\\\n     */\\\\r\\\\n    type PurchaseResult = {\\\\r\\\\n        /**\\\\r\\\\n         * ID of the order being purchased.\\\\r\\\\n         */\\\\r\\\\n        orderId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Wix Pay ID of the order being purchased. Returned for non-free plans.\\\\r\\\\n         */\\\\r\\\\n        wixPayOrderId: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment status in Wix Pay. One of:\\\\r\\\\n         * \\\\r\\\\n         *  + \\\\\\\"`Successful`\\\\\\\": Payment was successfully received.\\\\r\\\\n         *  + \\\\\\\"`Pending`\\\\\\\": Payment is pending payment provider approval.\\\\r\\\\n         *  + \\\\\\\"`Failed`\\\\\\\": Payment has failed.\\\\r\\\\n         *  + \\\\\\\"`Chargeback`\\\\\\\": Payment is chargeback.\\\\r\\\\n         *  + \\\\\\\"`Refunded`\\\\\\\": Payment was fully refunded.\\\\r\\\\n         *  + \\\\\\\"`Offline`\\\\\\\": Payment will be executed offline.\\\\r\\\\n         *  + \\\\\\\"`PartiallyRefunded`\\\\\\\": Payment was partially refunded.\\\\r\\\\n         *  + \\\\\\\"`Cancelled`\\\\\\\": Payment was cancelled and was not processed.\\\\r\\\\n         *  + \\\\\\\"`Undefined`\\\\\\\": Payment status is pending payment provider input.\\\\r\\\\n         */\\\\r\\\\n        wixPayStatus: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a purchase result for a free plan.\\\\r\\\\n     */\\\\r\\\\n    type PurchaseResultFree = {\\\\r\\\\n        /**\\\\r\\\\n         * ID of the order being purchased.\\\\r\\\\n         */\\\\r\\\\n        orderId: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_pay {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment.\\\\r\\\\n     */\\\\r\\\\n    type Payment = {\\\\r\\\\n        /**\\\\r\\\\n         * Payment transaction ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment total amount.\\\\r\\\\n         */\\\\r\\\\n        amount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment currency. A three-letter\\\\r\\\\n         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_pay_backend.PaymentItem[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment item.\\\\r\\\\n     */\\\\r\\\\n    type PaymentItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Payment item name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Payment item quantity.\\\\r\\\\n         */\\\\r\\\\n        quantity: number;\\\\r\\\\n        /**\\\\r\\\\n         * Payment item price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the options of a payment.\\\\r\\\\n     */\\\\r\\\\n    type PaymentOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Absolute URL of a terms and conditions\\\\r\\\\n         *  page. If a link is present, an agreement checkbox will be presented alongside the link.\\\\r\\\\n         */\\\\r\\\\n        termsAndConditionsLink?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether to show a thank you page. Defaults to `true`.\\\\r\\\\n         */\\\\r\\\\n        showThankYouPage?: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information about the user. It will be used to prefill\\\\r\\\\n         *  user info form during payment process.\\\\r\\\\n         * \\\\r\\\\n         *  Deprecation note: Pass user information to [`createPayment( )`](wix-pay-backend.html#createPayment) instead.\\\\r\\\\n         */\\\\r\\\\n        userInfo?: wix_pay.PaymentUserInfo;\\\\r\\\\n        /**\\\\r\\\\n         * Whether to skip the user info page. Defaults to `false`.\\\\r\\\\n         *  The page will be skipped only if user info was passed to [`createPayment()`](wix-pay-backend.html#createPayment) as\\\\r\\\\n         *  a part of the [`PaymentInfo`](wix-pay-backend.html#PaymentInfo) object.\\\\r\\\\n         */\\\\r\\\\n        skipUserInfoPage?: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a payment result.\\\\r\\\\n     */\\\\r\\\\n    type PaymentResult = {\\\\r\\\\n        /**\\\\r\\\\n         * The payment.\\\\r\\\\n         */\\\\r\\\\n        payment: wix_pay.Payment;\\\\r\\\\n        /**\\\\r\\\\n         * Payment status. One of:\\\\r\\\\n         * \\\\r\\\\n         *  + \\\\\\\"`Successful`\\\\\\\": Payment was successfully received.\\\\r\\\\n         *  + \\\\\\\"`Pending`\\\\\\\": Payment is pending payment provider approval.\\\\r\\\\n         *  + \\\\\\\"`Failed`\\\\\\\": Payment has failed.\\\\r\\\\n         *  + \\\\\\\"`Chargeback`\\\\\\\": Payment is chargeback.\\\\r\\\\n         *  + \\\\\\\"`Refunded`\\\\\\\": Payment was fully refunded.\\\\r\\\\n         *  + \\\\\\\"`Offline`\\\\\\\": Payment will be executed offline.\\\\r\\\\n         *  + \\\\\\\"`PartiallyRefunded`\\\\\\\": Payment was partially refunded.\\\\r\\\\n         *  + \\\\\\\"`Cancelled`\\\\\\\": Payment was cancelled and was not processed.\\\\r\\\\n         *  + \\\\\\\"`Undefined`\\\\\\\": Payment status is pending payment provider input.\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * ID of the payment transaction.\\\\r\\\\n         */\\\\r\\\\n        transactionId: string;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing information about the user.\\\\r\\\\n         */\\\\r\\\\n        userInfo: wix_pay.PaymentUserInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing information about the user.\\\\r\\\\n     */\\\\r\\\\n    type PaymentUserInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * User's first name. Value is `null` if\\\\r\\\\n         *  there is no first name information.\\\\r\\\\n         */\\\\r\\\\n        firstName: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's last name. Value is `null` if\\\\r\\\\n         *  there is no last name information.\\\\r\\\\n         */\\\\r\\\\n        lastName: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's country code. A three-letter\\\\r\\\\n         *  [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) country code. Value\\\\r\\\\n         *  is `null` if there is no country information.\\\\r\\\\n         */\\\\r\\\\n        country: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's phone number. Value is `null` if\\\\r\\\\n         *  there is no phone number information.\\\\r\\\\n         */\\\\r\\\\n        phone: string;\\\\r\\\\n        /**\\\\r\\\\n         * User's email address. Value is `null` if\\\\r\\\\n         *  there is no email address information.\\\\r\\\\n         */\\\\r\\\\n        email: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_search {\\\\r\\\\n    /**\\\\r\\\\n     * Contains functionality for refining a site search.\\\\r\\\\n     */\\\\r\\\\n    interface WixSearchBuilder {\\\\r\\\\n        /**\\\\r\\\\n         * Refines a search builder to only search for documents of the specified document type.\\\\r\\\\n         */\\\\r\\\\n        documentType(type: string): wix_search.WixSearchBuilder;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the documents that match the search.\\\\r\\\\n         */\\\\r\\\\n        find(): Promise<wix_search.WixSearchResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Refines a search builder to search in the specified language.\\\\r\\\\n         */\\\\r\\\\n        language(language: string): wix_search.WixSearchBuilder;\\\\r\\\\n        /**\\\\r\\\\n         * Limits the number of documents the search returns.\\\\r\\\\n         */\\\\r\\\\n        limit(limit: number): wix_search.WixSearchBuilder;\\\\r\\\\n        /**\\\\r\\\\n         * Sets the number of documents to skip before returning search results.\\\\r\\\\n         */\\\\r\\\\n        skip(skip: number): wix_search.WixSearchBuilder;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * The results of a site search, containing the retrieved documents.\\\\r\\\\n     */\\\\r\\\\n    interface WixSearchResult {\\\\r\\\\n        /**\\\\r\\\\n         * Returns the index of the current results page number.\\\\r\\\\n         */\\\\r\\\\n        readonly currentPage: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the documents that match the search.\\\\r\\\\n         */\\\\r\\\\n        readonly documents: wix_search.WixSearchResult.Document[];\\\\r\\\\n        /**\\\\r\\\\n         * Returns the number of documents in the current results page.\\\\r\\\\n         */\\\\r\\\\n        readonly length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the search page size.\\\\r\\\\n         */\\\\r\\\\n        readonly pageSize: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of documents that match the search.\\\\r\\\\n         */\\\\r\\\\n        readonly totalCount: number;\\\\r\\\\n        /**\\\\r\\\\n         * Returns the total number of pages the search produced.\\\\r\\\\n         */\\\\r\\\\n        readonly totalPages: number;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the search has more results.\\\\r\\\\n         */\\\\r\\\\n        hasNext(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates if the search has previous results.\\\\r\\\\n         */\\\\r\\\\n        hasPrev(): boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the next page of search results.\\\\r\\\\n         */\\\\r\\\\n        next(): Promise<wix_search.WixSearchResult>;\\\\r\\\\n        /**\\\\r\\\\n         * Retrieves the previous page of search results.\\\\r\\\\n         */\\\\r\\\\n        prev(): Promise<wix_search.WixSearchResult>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace WixSearchResult {\\\\r\\\\n        /**\\\\r\\\\n         * A document returned by a site search.\\\\r\\\\n         */\\\\r\\\\n        type Document = {\\\\r\\\\n            /**\\\\r\\\\n             * Unique document identifier.\\\\r\\\\n             */\\\\r\\\\n            _id: string;\\\\r\\\\n            /**\\\\r\\\\n             * Document image in the following format: `wix:image://v1//#originWidth=&originHeight=[&watermark=]`\\\\r\\\\n             */\\\\r\\\\n            image: string;\\\\r\\\\n            /**\\\\r\\\\n             * Document type. \\\\r\\\\n             *  One of the following:\\\\r\\\\n             * \\\\r\\\\n             *  + `Site/Pages`\\\\r\\\\n             *  + `Blog/Posts`\\\\r\\\\n             *  + `Bookings/Services`\\\\r\\\\n             *  + `Forum/Posts`\\\\r\\\\n             *  + `Stores/Products`\\\\r\\\\n             */\\\\r\\\\n            documentType: string;\\\\r\\\\n            /**\\\\r\\\\n             * The relative page URL. For regular site pages, the URL defined in SEO settings. Note that the `url` for the home page is an empty string. For Wix app pages, the URL stored in the database collection.\\\\r\\\\n             */\\\\r\\\\n            url: string;\\\\r\\\\n            /**\\\\r\\\\n             * For regular site pages, all text on the page. For Wix app pages, the description or content stored in the database collection.\\\\r\\\\n             */\\\\r\\\\n            description: string;\\\\r\\\\n            /**\\\\r\\\\n             * For regular site pages, the SEO page title. For Wix app pages, the title or name stored in the database collection.\\\\r\\\\n             */\\\\r\\\\n            title: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_seo {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a link tag.\\\\r\\\\n     */\\\\r\\\\n    type Link = {\\\\r\\\\n        /**\\\\r\\\\n         * The relationship of the linked resource to the current page.\\\\r\\\\n         */\\\\r\\\\n        rel?: string;\\\\r\\\\n        /**\\\\r\\\\n         * The URL of the linked resource.\\\\r\\\\n         */\\\\r\\\\n        href?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a meta tag.\\\\r\\\\n     */\\\\r\\\\n    type MetaTag = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the meta tag. Either `name` or `property` are required.\\\\r\\\\n         */\\\\r\\\\n        name?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Name of the meta tag property. Either `property` or `name` are required.\\\\r\\\\n         */\\\\r\\\\n        property?: string;\\\\r\\\\n        /**\\\\r\\\\n         * HTTP header that corresponds to the `content`.\\\\r\\\\n         */\\\\r\\\\n        \\\\\\\"http-equiv\\\\\\\"?: string;\\\\r\\\\n        /**\\\\r\\\\n         * Meta tag value. For `og:image` meta tags, the `content` can\\\\r\\\\n         *  be an external image URL or a Media Manager image URL as described [here]($w.Image.html#src).\\\\r\\\\n         */\\\\r\\\\n        content: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_stores {\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a media item.\\\\r\\\\n     */\\\\r\\\\n    type MediaItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Media item ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media items type. Can be \\\\\\\"image\\\\\\\" or \\\\\\\"video.\\\\\\\"\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Media item URL.\\\\r\\\\n         */\\\\r\\\\n        src: string;\\\\r\\\\n        /**\\\\r\\\\n         * Thumbnail URL for videos only.\\\\r\\\\n         */\\\\r\\\\n        thumbnail?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing paging options.\\\\r\\\\n     */\\\\r\\\\n    type PagingOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Maximum number of variants to retrieve. Defaults to 300.\\\\r\\\\n         */\\\\r\\\\n        limit: number;\\\\r\\\\n        /**\\\\r\\\\n         * Number of variants to skip before the retrieved variants. Defaults to 0.\\\\r\\\\n         */\\\\r\\\\n        skip: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an additional info section for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductAdditionalInfoSection = {\\\\r\\\\n        /**\\\\r\\\\n         * Section title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Section description.\\\\r\\\\n         */\\\\r\\\\n        description: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variant's option choices.\\\\r\\\\n     */\\\\r\\\\n    type ProductChoices = {\\\\r\\\\n        /**\\\\r\\\\n         * Value of the choice. This key name is\\\\r\\\\n         *  dependent on the product option. For example, if a product\\\\r\\\\n         *  has a size option, this key value will be something like \\\\\\\"Size\\\\\\\" and its value\\\\r\\\\n         *  will be something like \\\\\\\"Large\\\\\\\".\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a custom text field for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductCustomTextFields = {\\\\r\\\\n        /**\\\\r\\\\n         * Product customization field title.\\\\r\\\\n         */\\\\r\\\\n        title: string;\\\\r\\\\n        /**\\\\r\\\\n         * Maximum length of product customization field in characters.\\\\r\\\\n         */\\\\r\\\\n        maxLength: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product discount.\\\\r\\\\n     */\\\\r\\\\n    type ProductDiscount = {\\\\r\\\\n        /**\\\\r\\\\n         * Discount type.\\\\r\\\\n         * \\\\r\\\\n         *  One of:\\\\r\\\\n         * \\\\r\\\\n         *  + `\\\\\\\"AMOUNT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"PERCENT\\\\\\\"`\\\\r\\\\n         *  + `\\\\\\\"NONE\\\\\\\"`\\\\r\\\\n         */\\\\r\\\\n        type: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discount value.\\\\r\\\\n         */\\\\r\\\\n        value: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an option for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOption = {\\\\r\\\\n        /**\\\\r\\\\n         * Option type. Either `\\\\\\\"color\\\\\\\"` or `\\\\\\\"drop_down\\\\\\\"`.\\\\r\\\\n         */\\\\r\\\\n        optionType: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option name.\\\\r\\\\n         */\\\\r\\\\n        name: string;\\\\r\\\\n        /**\\\\r\\\\n         * Option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores.ProductOptionsChoice[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing all the available options for a store product, such as \\\\\\\"Size\\\\\\\" or \\\\\\\"Color\\\\\\\".\\\\r\\\\n     */\\\\r\\\\n    type ProductOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Name of the option. This key name\\\\r\\\\n         *  is dependent on the options added to the product. For example, if a product has a size \\\\r\\\\n         *  option, this key will be something like `\\\\\\\"Size\\\\\\\"`.\\\\r\\\\n         *  \\\\r\\\\n         *  `optionKey` is not case-sensitive. Therefore the values for the option keys \\\\\\\"`Size`\\\\\\\", \\\\\\\"`SIZE`\\\\\\\", and \\\\\\\"`size`\\\\\\\" are combined.\\\\r\\\\n         */\\\\r\\\\n        optionKey: wix_stores.ProductOption;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object returned by the `getProductOptionsAvailability()` function representing the availability of a product.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsAvailability = {\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product with the specified option choices is available for purchase.\\\\r\\\\n         */\\\\r\\\\n        availableForPurchase: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * An object representing all the available options for a store product.\\\\r\\\\n         */\\\\r\\\\n        productOptions: wix_stores.ProductOptions;\\\\r\\\\n        /**\\\\r\\\\n         * Main product media item (image or video) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of product media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores.MediaItem;\\\\r\\\\n        /**\\\\r\\\\n         * The variant of the product selected using the specified option choices if there is one.\\\\r\\\\n         */\\\\r\\\\n        selectedVariant: wix_stores.ProductOptionsAvailabilitySelectedVariant;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the product variant selected using the `getProductOptionsAvailability()` function.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsAvailabilitySelectedVariant = {\\\\r\\\\n        /**\\\\r\\\\n         * Product variant stock keeping unit value.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant price. The variant price must be greater than its discount.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted product variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product variant is shown in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the product variant is in stock.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing an options choice for a store product for a store product, such as choice \\\\\\\"Small\\\\\\\" for the option \\\\\\\"Size.\\\\\\\"\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsChoice = {\\\\r\\\\n        /**\\\\r\\\\n         * Choice value.\\\\r\\\\n         */\\\\r\\\\n        value: number;\\\\r\\\\n        /**\\\\r\\\\n         * Choice description.\\\\r\\\\n         */\\\\r\\\\n        description: number;\\\\r\\\\n        /**\\\\r\\\\n         * Choice media.\\\\r\\\\n         */\\\\r\\\\n        media: wix_stores.ProductOptionsChoiceMedia;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product with this choice is in stock.\\\\r\\\\n         */\\\\r\\\\n        inStock: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the product with this option is visible.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the choice media.\\\\r\\\\n     */\\\\r\\\\n    type ProductOptionsChoiceMedia = {\\\\r\\\\n        /**\\\\r\\\\n         * Main choice media item (image or video thumbnail) URL.\\\\r\\\\n         */\\\\r\\\\n        mainMedia: string;\\\\r\\\\n        /**\\\\r\\\\n         * List of choice media items.\\\\r\\\\n         */\\\\r\\\\n        mediaItems: wix_stores.MediaItem;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a ribbon for a store product.\\\\r\\\\n     */\\\\r\\\\n    type ProductRibbon = {\\\\r\\\\n        /**\\\\r\\\\n         * Ribbon text.\\\\r\\\\n         */\\\\r\\\\n        text: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variant information, used when creating or updating variants.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Formatted variant price.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant stock keeping unit number.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the variant is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variant item.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique product variant ID.\\\\r\\\\n         */\\\\r\\\\n        id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant option choices.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * Product variant information.\\\\r\\\\n         */\\\\r\\\\n        variant: wix_stores.ProductVariantInfo[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing the selection of specific variants of a product. Use only one of\\\\r\\\\n     *  `choices` or `variantIds`.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariantOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * The choices the retrieved variants will have.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * IDs of variants to retrieve.\\\\r\\\\n         */\\\\r\\\\n        variantIds: string[];\\\\r\\\\n        /**\\\\r\\\\n         * Paging options.\\\\r\\\\n         */\\\\r\\\\n        paging: wix_stores.PagingOptions;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product's variants.\\\\r\\\\n     */\\\\r\\\\n    type ProductVariants = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant items.\\\\r\\\\n         */\\\\r\\\\n        items: wix_stores.ProductVariantItem[];\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object containing variant information to use when creating or updating variants.\\\\r\\\\n     */\\\\r\\\\n    type VariantInfo = {\\\\r\\\\n        /**\\\\r\\\\n         * Variant currency.\\\\r\\\\n         */\\\\r\\\\n        currency: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price. The variant price must be greater than its discount. If the variant price has been updated, changes to the product price do not affect the variant price.\\\\r\\\\n         */\\\\r\\\\n        price: number;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price.\\\\r\\\\n         */\\\\r\\\\n        discountedPrice: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Discounted variant price formatted with the currency.\\\\r\\\\n         */\\\\r\\\\n        formattedDiscountedPrice: string;\\\\r\\\\n        /**\\\\r\\\\n         * Variant weight.\\\\r\\\\n         */\\\\r\\\\n        weight: number;\\\\r\\\\n        /**\\\\r\\\\n         * Variant stock keeping unit value.\\\\r\\\\n         */\\\\r\\\\n        sku: string;\\\\r\\\\n        /**\\\\r\\\\n         * Whether the variant is visible in the store.\\\\r\\\\n         */\\\\r\\\\n        visible: boolean;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing a product variant item.\\\\r\\\\n     */\\\\r\\\\n    type VariantItem = {\\\\r\\\\n        /**\\\\r\\\\n         * Unique variant ID.\\\\r\\\\n         */\\\\r\\\\n        _id: string;\\\\r\\\\n        /**\\\\r\\\\n         * The choices of the retrieved variant.\\\\r\\\\n         */\\\\r\\\\n        choices: wix_stores.ProductChoices;\\\\r\\\\n        /**\\\\r\\\\n         * Variant information. *\\\\r\\\\n         */\\\\r\\\\n        variant: wix_stores.VariantInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object representing product variants.\\\\r\\\\n     */\\\\r\\\\n    type VariantList = {\\\\r\\\\n        /**\\\\r\\\\n         * List of variant items that match the specified choices or variant IDs.\\\\r\\\\n         */\\\\r\\\\n        items: wix_stores.VariantItem[];\\\\r\\\\n        /**\\\\r\\\\n         * Number of items in the current results page.\\\\r\\\\n         */\\\\r\\\\n        length: number;\\\\r\\\\n        /**\\\\r\\\\n         * Total number of variants with the specified choices.\\\\r\\\\n         */\\\\r\\\\n        totalCount: number;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare namespace wix_users {\\\\r\\\\n    /**\\\\r\\\\n     * A site user.\\\\r\\\\n     */\\\\r\\\\n    interface User {\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's ID.\\\\r\\\\n         */\\\\r\\\\n        readonly id: string;\\\\r\\\\n        /**\\\\r\\\\n         * Indicates whether the user is logged in or not.\\\\r\\\\n         */\\\\r\\\\n        readonly loggedIn: boolean;\\\\r\\\\n        /**\\\\r\\\\n         * Deprecated: Gets the user's role.\\\\r\\\\n         */\\\\r\\\\n        readonly role: string;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the email of the current user.\\\\r\\\\n         */\\\\r\\\\n        getEmail(): Promise<string>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's member pricing plan.\\\\r\\\\n         */\\\\r\\\\n        getPricingPlans(): Promise<wix_users.User.PricingPlan[]>;\\\\r\\\\n        /**\\\\r\\\\n         * Gets the user's member roles.\\\\r\\\\n         */\\\\r\\\\n        getRoles(): Promise<wix_users.User.UserRole[]>;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    namespace User {\\\\r\\\\n        /**\\\\r\\\\n         * An object returned by the `getPricingPlans()` function representing a user's pricing plans.\\\\r\\\\n         */\\\\r\\\\n        type PricingPlan = {\\\\r\\\\n            /**\\\\r\\\\n             * The pricing plan's name.\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * The pricing plan's start date.\\\\r\\\\n             */\\\\r\\\\n            startDate?: Date;\\\\r\\\\n            /**\\\\r\\\\n             * The pricing plan's expiry date.\\\\r\\\\n             */\\\\r\\\\n            expiryDate?: Date;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n        /**\\\\r\\\\n         * An object returned by the `getRoles()` function representing a user's roles.\\\\r\\\\n         */\\\\r\\\\n        type UserRole = {\\\\r\\\\n            /**\\\\r\\\\n             * Role name as defined in the site's dashboard or one of \\\\\\\"Admin\\\\\\\" or \\\\\\\"Member\\\\\\\".\\\\r\\\\n             */\\\\r\\\\n            name: string;\\\\r\\\\n            /**\\\\r\\\\n             * Role description, if defined in the site's dashboard.\\\\r\\\\n             */\\\\r\\\\n            description?: string;\\\\r\\\\n        };\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used by the `promptLogin()` function to determine how the login dialog box appears.\\\\r\\\\n     */\\\\r\\\\n    type LoginOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * What type of login experience to present: `\\\\\\\"login\\\\\\\"` or `\\\\\\\"signup\\\\\\\"`. Defaults to the option chosen in the Member Signup Settings panel in the Editor.\\\\r\\\\n         */\\\\r\\\\n        mode?: string;\\\\r\\\\n        /**\\\\r\\\\n         * The two letter language code of the language to show the login form in. Defaults to `\\\\\\\"en\\\\\\\"` if the property doesn't exist or the given language is not one of the languages found in the Permissions tab of the Page Settings panel in the Editor.\\\\r\\\\n         */\\\\r\\\\n        lang?: string;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about a site registration.\\\\r\\\\n     */\\\\r\\\\n    type RegistrationOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * Contact information.\\\\r\\\\n         */\\\\r\\\\n        contactInfo: wix_crm.ContactInfo;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object that contains information about the results of a site registration.\\\\r\\\\n     */\\\\r\\\\n    type RegistrationResult = {\\\\r\\\\n        /**\\\\r\\\\n         * Registration status. Either \\\\\\\"Pending\\\\\\\" or \\\\\\\"Active\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        status: string;\\\\r\\\\n        /**\\\\r\\\\n         * A token for approving the user as\\\\r\\\\n         *  a site member using the [approveByToken()](wix-users-backend.html#approveByToken)\\\\r\\\\n         *  function. The token is safe to pass via email or from client-side code to\\\\r\\\\n         *  backend code. The token is only available when `status` is \\\\\\\"Pending\\\\\\\".\\\\r\\\\n         */\\\\r\\\\n        approvalToken?: string;\\\\r\\\\n        /**\\\\r\\\\n         * The user that has been registered.\\\\r\\\\n         */\\\\r\\\\n        user: wix_users.User;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * An object used when sending a Triggered Email.\\\\r\\\\n     */\\\\r\\\\n    type TriggeredEmailOptions = {\\\\r\\\\n        /**\\\\r\\\\n         * An object with `key:value` pairs where each\\\\r\\\\n         *  `key` is a variable in the email template created in Triggered Emails and its\\\\r\\\\n         *  corresponding `value` is the value to insert into the template in place of\\\\r\\\\n         *  variable. The values must be strings.\\\\r\\\\n         */\\\\r\\\\n        variables: any;\\\\r\\\\n    };\\\\r\\\\n\\\\r\\\\n    /**\\\\r\\\\n     * Function that runs when a user has logged in.\\\\r\\\\n     */\\\\r\\\\n    type LoginHandler = (user: wix_users.User)=>void;\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n\\\"},{\\\"path\\\":\\\"/types/pages/index.d.ts\\\",\\\"content\\\":\\\"/// <reference path=\\\\\\\"../common/emptyBuffer.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"./$w.d.ts\\\\\\\" />\\\\n/// <reference path=\\\\\\\"../common/declaration.d.ts\\\\\\\" />\\\"}]}\");\n\n//# sourceURL=webpack://corvidTypes/./fullCorvidTypes.json?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar fullCorvidTypes = __webpack_require__(/*! ../fullCorvidTypes.json */ \"./fullCorvidTypes.json\");\n\nvar _require = __webpack_require__(/*! ./widget */ \"./src/widget.js\"),\n    getWidgetTypeDeclarations = _require.getWidgetTypeDeclarations;\n\nvar getPageElementsTypeDeclarations = function getPageElementsTypeDeclarations(elementsMap) {\n  return \"type PageElementsMap = {\\n\" + Object.keys(elementsMap).map(function (nickname) {\n    return \"  \\\"#\".concat(nickname, \"\\\": \").concat(elementsMap[nickname], \";\\n\");\n  }).join(\"\") + \"}\";\n};\n\nvar getDynamicTypes = function getDynamicTypes(_ref) {\n  var elementsMap = _ref.elementsMap,\n      widgets = _ref.widgets;\n  var dynamicTypes = [];\n\n  if (elementsMap) {\n    dynamicTypes.push({\n      path: \"/elementsMap.d.ts\",\n      content: getPageElementsTypeDeclarations(elementsMap)\n    });\n  }\n\n  if (widgets && widgets.length) {\n    widgets.forEach(function (manifest, index) {\n      dynamicTypes.push({\n        path: \"/widgets\".concat(index, \".d.ts\"),\n        content: getWidgetTypeDeclarations(manifest)\n      });\n    });\n  }\n\n  return dynamicTypes;\n};\n\nmodule.exports = {\n  configPaths: {\n    page: \"corvid-types/configs/tsconfig.pages.json\",\n    backend: \"corvid-types/configs/tsconfig.backend.json\",\n    \"public\": \"corvid-types/configs/tsconfig.public.json\"\n  },\n  declarations: {\n    page: function page() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          elementsMap = _ref2.elementsMap,\n          widgets = _ref2.widgets;\n\n      return [].concat(_toConsumableArray(fullCorvidTypes.BASE), _toConsumableArray(fullCorvidTypes.PAGES), _toConsumableArray(getDynamicTypes({\n        elementsMap: elementsMap,\n        widgets: widgets\n      })));\n    },\n    backend: function backend() {\n      return [].concat(_toConsumableArray(fullCorvidTypes.BASE), _toConsumableArray(fullCorvidTypes.BACKEND));\n    },\n    \"public\": function _public() {\n      return [].concat(_toConsumableArray(fullCorvidTypes.BASE), _toConsumableArray(fullCorvidTypes.PUBLIC));\n    }\n  },\n  getWidgetTypeDeclarations: getWidgetTypeDeclarations,\n  getPageElementsTypeDeclarations: getPageElementsTypeDeclarations\n};\n\n//# sourceURL=webpack://corvidTypes/./src/index.js?");

/***/ }),

/***/ "./src/widget.js":
/*!***********************!*\
  !*** ./src/widget.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var getFunctionTypeParamsString = function getFunctionTypeParamsString(params) {\n  if (!params) {\n    return \"\";\n  }\n\n  return params.reduce(function (acc, param) {\n    return \"\".concat(acc).concat(param.name, \": any, \");\n  }, \"\").slice(0, -2);\n};\n\nvar getMembersTypes = function getMembersTypes(members) {\n  return Object.keys(members).reduce(function (acc, value) {\n    var _members$value = members[value],\n        kind = _members$value.kind,\n        params = _members$value.params;\n    return \"\".concat(acc, \" \").concat(kind === \"member\" ? \"\".concat(value, \": any;\") : \"\".concat(value, \"(\").concat(getFunctionTypeParamsString(params), \");\"));\n  }, \"\");\n};\n\nvar getWidgetTypeDeclarations = function getWidgetTypeDeclarations(_ref) {\n  var manifest = _ref.manifest;\n  return Object.keys(manifest).reduce(function (dts, className) {\n    var _manifest$className$m = manifest[className].members,\n        members = _manifest$className$m === void 0 ? [] : _manifest$className$m; // need to understand which type should we extend, ($w.Node() or $w.Element)\n\n    return \"\".concat(dts, \" declare namespace $w { interface \").concat(className, \" extends $w.Node { \").concat(getMembersTypes(members), \" } }\");\n  }, \"\");\n};\n\nmodule.exports = {\n  getWidgetTypeDeclarations: getWidgetTypeDeclarations\n};\n\n//# sourceURL=webpack://corvidTypes/./src/widget.js?");

/***/ })

/******/ });
});