// the first part of this file is being generated by => scripts/selector-declaration-builder.js
// Run `npm run generate-dts` to generate it


// todo:: denerate the map TypeNameToSdkType to Document: $w.Document & $w.Document[]
// todo:: change alias WixElement to WixElementSelector
type IntersectionArrayAndBase<T, P> = {
    [K in keyof T]: K extends P ? T[K] : T[K] & T[K][];
}
type CommaChar = ","
type LegalChars = CommaChar | " " | "\n" | "\t"
type WixElementsTypeMap = IntersectionArrayAndBase<TypeNameToSdkType, 'Document'>
type WixElementsMap = PageElementsMap & WixElementsTypeMap;
type NicknameSelector = keyof PageElementsMap
type TypeSelector = keyof WixElementsTypeMap
type WixElement = NicknameSelector | TypeSelector
type VaildSelectorsChars = WixElement | LegalChars

type OnlyVaildSelectorsChars<S> =
    S extends ""
        ? any
        : S extends `${VaildSelectorsChars}${infer Tail}`
            ? OnlyVaildSelectorsChars<Tail>
            : never

type HasCommaRec<S, B> =
    S extends ""
        ? B extends true
            ? unknown
            : never
        : S extends `${VaildSelectorsChars}${infer Tail}`
            ? S extends `${CommaChar}${Tail}`
                ? HasCommaRec<"", true>
                : HasCommaRec<Tail, false>
            : never

type HasComma<S> = HasCommaRec<S, false>

type MultiSelector<S> = S & OnlyVaildSelectorsChars<S> & HasComma<S>

type ExtractType<S> = 
    S extends keyof WixElementsMap 
        ? WixElementsMap[S] 
        : never

type GetMultiSelectorType<S, U> = 
    S extends ""
        ? U
        : S extends WixElement
            ? ExtractType<S> | U
            : S extends `${infer Head}${LegalChars}${infer Tail}` 
                ? GetMultiSelectorType<Head, U> | GetMultiSelectorType<Tail, U>
                : never
/**
 * Selects and returns elements from a page.
 */
declare function $w<T extends keyof WixElementsMap, S extends string>(selector: T | MultiSelector<S>):
    S extends keyof WixElementsMap 
        ? WixElementsMap[S]
        : OnlyVaildSelectorsChars<S> extends any
            ? GetMultiSelectorType<S, never>
            : any

/**
 * The `$w` namespace contains everything you need in order to work
 *  with your site's components.
 */
declare namespace $w {
    /**
     * Gets a selector function for a specific context.
     */
    function at(context: $w.Event.EventContext): $w.$w;

    /**
     * Sets the function that runs when all the page elements have finished loading.
     */
    function onReady(initFunction: $w.ReadyHandler): void;

    /**
     * Selects and returns elements from a page.
     */
    type $w = <T extends keyof WixElementsMap, S extends string>(selector: T | MultiSelector<S>) =>
        S extends keyof WixElementsMap 
            ? WixElementsMap[S]
            : OnlyVaildSelectorsChars<S> extends any
                ? GetMultiSelectorType<S, never>
                : any
}
